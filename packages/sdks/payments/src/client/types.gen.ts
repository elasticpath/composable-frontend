// This file is auto-generated by @hey-api/openapi-ts

export type RequestUpdateManualGateway = {
  data?: DataUpdateManualGateway
}

export type DataUpdateManualGateway = {
  /**
   * Specifies whether the gateway is enabled or disabled. Set `true` to enable the gateway and `false` to disable the gateway. Default is `false`.
   */
  enabled?: boolean
}

export type RequestUpdateBraintreeGateway = {
  data?: DataUpdateBraintreeGateway
}

export type DataUpdateBraintreeGateway = {
  /**
   * Specifies whether the gateway is enabled or disabled. Set `true` to enable the gateway and `false` to disable the gateway. Default is `false`.
   */
  enabled?: boolean
  /**
   * Specifies production or sandbox environment.
   */
  environment?: string
  /**
   * Specifies Your Braintree merchant ID.
   */
  merchant_id: string
  /**
   * Represents Your Braintree private key.
   */
  private_key: string
  /**
   * Indicates Your Braintree public key.
   */
  public_key: string
}

export type RequestUpdateStripeGateway = {
  data?: DataUpdateStripeGateway
}

export type DataUpdateStripeGateway = {
  /**
   * Specifies whether the gateway is enabled or disabled. Set `true` to enable the gateway and `false` to disable the gateway. Default is `false`.
   */
  enabled?: boolean
  /**
   * Represents Stripe `test` or `live` secret key.
   */
  login: string
}

export type RequestUpdateStripeConnectGateway = {
  data?: DataUpdateStripeConnectGateway
}

export type RequestUpdateElasticPathPaymentsStripeGateway = {
  data?: DataUpdateStripeConnectGateway
}

export type DataUpdateStripeConnectGateway = {
  /**
   * Specifies whether the gateway is enabled or disabled. Set `true` to enable the gateway and `false` to disable the gateway. Default is `false`.
   */
  enabled?: boolean
  /**
   * Specifies the Stripe Connect account ID.
   */
  stripe_account: string
  /**
   * Specifies whether the test mode is enabled. Set `true` to enable test mode and `false` to disable the test mode. Default is `false`.
   */
  test?: boolean
}

export type RequestUpdatePaypalExpressCheckoutGateway = {
  data?: DataUpdatePaypalExpressCheckoutGateway
}

export type DataUpdatePaypalExpressCheckoutGateway = {
  /**
   * Specifies whether the gateway is enabled or disabled. Set `true` to enable the gateway and `false` to disable the gateway. Default is `false`.
   */
  enabled?: boolean
  /**
   * Specifies the merchant account ID. The ID is displayed in the PayPal account details of the merchant.
   */
  payer_id: string
  /**
   * Specifies whether the test mode is enabled. Set `true` to enable test mode and `false` to disable the test mode. Default is `false`.
   */
  test?: boolean
}

export type UpdateAdyenGatewayRequest = {
  data?: DataUpdateAdyenGateway
}

export type DataUpdateAdyenGateway = {
  /**
   * Specifies whether the gateway is enabled or disabled. Set `true` to enable the gateway and `false` to disable the gateway. Default is `false`.
   */
  enabled?: boolean
  /**
   * Represents your Adyen merchant account code. For example, MyCompanyECOM.
   */
  merchant_account: string
  /**
   * Indicates your web service username. For example, ws@Company.MyCompany.
   */
  username: string
  /**
   * Specifies your web service user Basic Auth password.
   */
  password: string
  /**
   * Specifies whether the test account is enabled or disabled. Set `true` to enable the test account and `false` to disable the test account. Default is `false`.
   */
  test?: boolean
}

export type RequestUpdateAuthorizeNetGateway = {
  data?: UpdateAuthorizeNetGatewayData
}

export type UpdateAuthorizeNetGatewayData = {
  /**
   * Represents Authorize.net API Login ID.
   */
  login: string
  /**
   * Indicates Authorize.net Transaction Key.
   */
  password: string
  /**
   * Specifies a unique slug for this gateway.
   */
  slug?: string
  /**
   * Specifies whether the gateway is enabled or disabled. Set `true` to enable the gateway and `false` to disable the gateway. Default is `false`.
   */
  enabled?: boolean
  /**
   * Specifies whether the test account is enabled or disabled. Set `true` to enable the test account and `false` to disable the test account. Default is `false`.
   */
  test?: boolean
}

export type RequestUpdateCardConnectGateway = {
  data?: DataUpdateCardConnectGateway
}

export type DataUpdateCardConnectGateway = {
  /**
   * Specifies your CardConnect Merchant ID.
   */
  merchant_id: string
  /**
   * Represents your CardConnect username.
   */
  username: string
  /**
   * Indicates your CardConnect password.
   */
  password: string
  /**
   * Specifies whether the test account is enabled or disabled. Set `true` to enable the test account and `false` to disable the test account. Default is `false`.
   */
  test?: boolean
  /**
   * Specifies whether the gateway is enabled or disabled. Set `true` to enable the gateway and `false` to disable the gateway. Default is `false`.
   */
  enabled?: boolean
}

export type RequestUpdateCyberSourceGateway = {
  data?: DataUpdateCyberSourceGateway
}

export type DataUpdateCyberSourceGateway = {
  /**
   * Specifies whether the gateway is enabled or disabled. Set `true` to enable the gateway and `false` to disable the gateway. Default is `false`.
   */
  enabled?: boolean
  /**
   * Specifies whether the test account is enabled or disabled. Set `true` to enable the test account and `false` to disable the test account. Default is `false`.
   */
  test?: boolean
  /**
   * Represents your live or test CyberSource merchant ID.
   */
  login: string
  /**
   * Indicates your live or test CyberSource SOAP key.
   */
  password: string
}

export type ResponseGateway = {
  /**
   * Specifies whether the gateway is enabled or disabled. Set `true` to enable the gateway and `false` to disable the gateway. Default is `false`.
   */
  enabled?: boolean
  /**
   * Represents your login ID.
   */
  login?: string
  /**
   * Represents the name of the gateway.
   */
  name?: string
  /**
   * Specifies the type of object being returned.
   */
  type?: string
  /**
   * Specifies your password.
   */
  password?: string
  signature?: string
  /**
   * Specifies the slug of the gateway.
   */
  slug?: string
  /**
   * Specifies whether the test mode is enabled. Set `true` to enable test mode and `false` to disable the test mode. Default is `false`.
   */
  test?: boolean
}

export type ResponseData = {
  data?: unknown
}

export type ResponseError = Array<unknown>

export type GetAllGatewaysData = {
  body?: never
  path?: never
  query?: never
  url: "/v2/gateways"
}

export type GetAllGatewaysErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type GetAllGatewaysError =
  GetAllGatewaysErrors[keyof GetAllGatewaysErrors]

export type GetAllGatewaysResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: Array<ResponseGateway>
  }
}

export type GetAllGatewaysResponse =
  GetAllGatewaysResponses[keyof GetAllGatewaysResponses]

/**
 * The slug of the gateway.
 */
export type GatewaySlug =
  | "manual"
  | "braintree"
  | "stripe"
  | "stripe_payment_intents"
  | "stripe_connect"
  | "elastic_path_payments_stripe"
  | "paypal_express_checkout"
  | "adyen"
  | "authorize_net"
  | "card_connect"
  | "cyber_source"

export type GetAGatewayData = {
  body?: never
  path: {
    /**
     * The slug of the gateway.
     */
    gatewaySlug:
      | "manual"
      | "braintree"
      | "stripe"
      | "stripe_payment_intents"
      | "stripe_connect"
      | "elastic_path_payments_stripe"
      | "paypal_express_checkout"
      | "adyen"
      | "authorize_net"
      | "card_connect"
      | "cyber_source"
  }
  query?: never
  url: "/v2/gateways/{gatewaySlug}"
}

export type GetAGatewayErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type GetAGatewayError = GetAGatewayErrors[keyof GetAGatewayErrors]

export type GetAGatewayResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: ResponseGateway
  }
}

export type GetAGatewayResponse =
  GetAGatewayResponses[keyof GetAGatewayResponses]

export type UpdateManualGatewayData = {
  body?: RequestUpdateManualGateway
  path?: never
  query?: never
  url: "/v2/gateways/manual"
}

export type UpdateManualGatewayErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type UpdateManualGatewayError =
  UpdateManualGatewayErrors[keyof UpdateManualGatewayErrors]

export type UpdateManualGatewayResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: {
      /**
       * Specifies whether the gateway is enabled or disabled. Set `true` to enable the gateway and `false` to disable the gateway. Default is `false`.
       */
      enabled?: boolean
      /**
       * Specifies the nme of the gateway.
       */
      name?: string
      /**
       * Specifies the slug of the gateway.
       */
      slug?: string
      /**
       * Specifies the type of object being returned.
       */
      type?: string
    }
  }
}

export type UpdateManualGatewayResponse =
  UpdateManualGatewayResponses[keyof UpdateManualGatewayResponses]

export type UpdateBraintreeGatewayData = {
  body?: RequestUpdateBraintreeGateway
  path?: never
  query?: never
  url: "/v2/gateways/braintree"
}

export type UpdateBraintreeGatewayErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type UpdateBraintreeGatewayError =
  UpdateBraintreeGatewayErrors[keyof UpdateBraintreeGatewayErrors]

export type UpdateBraintreeGatewayResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: {
      /**
       * Specifies whether the gateway is enabled or disabled. Set `true` to enable the gateway and `false` to disable the gateway. Default is `false`.
       */
      enabled?: boolean
      /**
       * Specifies the name of the gateway.
       */
      name?: string
      /**
       * Specifies production or sandbox environment.
       */
      environment?: string
      /**
       * Specifies Your Braintree merchant ID.
       */
      merchant_id?: string
      /**
       * Represents Your Braintree private key.
       */
      private_key?: string
      /**
       * Indicates Your Braintree public key.
       */
      public_key?: string
      /**
       * Represents the slug of the gateway.
       */
      slug?: string
      /**
       * Specifies the type of object being returned.
       */
      type?: string
    }
  }
}

export type UpdateBraintreeGatewayResponse =
  UpdateBraintreeGatewayResponses[keyof UpdateBraintreeGatewayResponses]

export type UpdateStripeGatewayData = {
  body?: RequestUpdateStripeGateway
  path?: never
  query?: never
  url: "/v2/gateways/stripe"
}

export type UpdateStripeGatewayErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type UpdateStripeGatewayError =
  UpdateStripeGatewayErrors[keyof UpdateStripeGatewayErrors]

export type UpdateStripeGatewayResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: {
      /**
       * Specifies whether the gateway is enabled or disabled. Set `true` to enable the gateway and `false` to disable the gateway. Default is `false`.
       */
      enabled?: boolean
      /**
       * Represents Stripe test or live secret key.
       */
      login?: string
      /**
       * Specifies the name of the gateway.
       */
      name?: string
      /**
       * Represents the slug of the gateway.
       */
      slug?: string
      /**
       * Specifies the type of object being returned.
       */
      type?: string
    }
  }
}

export type UpdateStripeGatewayResponse =
  UpdateStripeGatewayResponses[keyof UpdateStripeGatewayResponses]

export type UpdateStripeIntentsGatewayData = {
  body?: RequestUpdateStripeGateway
  path?: never
  query?: never
  url: "/v2/gateways/stripe_payment_intents"
}

export type UpdateStripeIntentsGatewayErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type UpdateStripeIntentsGatewayError =
  UpdateStripeIntentsGatewayErrors[keyof UpdateStripeIntentsGatewayErrors]

export type UpdateStripeIntentsGatewayResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: {
      /**
       * Specifies whether the gateway is enabled or disabled. Set `true` to enable the gateway and `false` to disable the gateway. Default is `false`.
       */
      enabled?: boolean
      /**
       * Specifies the Stripe secret key for your account that is in live or test mode.
       */
      login?: string
      /**
       * Specifies the name of the gateway.
       */
      name?: string
      /**
       * Represents the slug of the gateway.
       */
      slug?: string
      /**
       * Specifies the type of object being returned.
       */
      type?: string
    }
  }
}

export type UpdateStripeIntentsGatewayResponse =
  UpdateStripeIntentsGatewayResponses[keyof UpdateStripeIntentsGatewayResponses]

export type UpdateStripeConnectGatewayData = {
  body?: RequestUpdateStripeConnectGateway
  path?: never
  query?: never
  url: "/v2/gateways/stripe_connect"
}

export type UpdateStripeConnectGatewayErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type UpdateStripeConnectGatewayError =
  UpdateStripeConnectGatewayErrors[keyof UpdateStripeConnectGatewayErrors]

export type UpdateStripeConnectGatewayResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: {
      /**
       * Specifies whether the gateway is enabled or disabled. Set `true` to enable the gateway and `false` to disable the gateway. Default is `false`.
       */
      enabled?: boolean
      /**
       * Specifies the Stripe Connect account ID.
       */
      stripe_account?: string
      /**
       * Specifies the name of the gateway.
       */
      name?: string
      /**
       * Specifies whether the test mode is enabled. Set `true` to enable test mode and `false` to disable the test mode. Default is `false`.
       */
      test?: boolean
      /**
       * Represents the slug of the gateway.
       */
      slug?: string
      /**
       * Specifies the type of object being returned.
       */
      type?: string
    }
  }
}

export type UpdateStripeConnectGatewayResponse =
  UpdateStripeConnectGatewayResponses[keyof UpdateStripeConnectGatewayResponses]

export type UpdateEpPaymentsStripeData = {
  body?: RequestUpdateElasticPathPaymentsStripeGateway
  path?: never
  query?: never
  url: "/v2/gateways/elastic_path_payments_stripe"
}

export type UpdateEpPaymentsStripeErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type UpdateEpPaymentsStripeError =
  UpdateEpPaymentsStripeErrors[keyof UpdateEpPaymentsStripeErrors]

export type UpdateEpPaymentsStripeResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: {
      /**
       * Specifies whether the gateway is enabled or disabled. Set `true` to enable the gateway and `false` to disable the gateway. Default is `false`.
       */
      enabled?: boolean
      /**
       * Specifies the Stripe account ID.
       */
      stripe_account?: string
      /**
       * Specifies the name of the gateway.
       */
      name?: string
      /**
       * Specifies whether the test mode is enabled. Set `true` to enable test mode and `false` to disable the test mode. Default is `false`.
       */
      test?: boolean
      /**
       * Represents the slug of the gateway.
       */
      slug?: string
      /**
       * Specifies the type of object being returned.
       */
      type?: string
    }
  }
}

export type UpdateEpPaymentsStripeResponse =
  UpdateEpPaymentsStripeResponses[keyof UpdateEpPaymentsStripeResponses]

export type UpdatePaypalExpressCheckoutGatewayData = {
  body?: RequestUpdatePaypalExpressCheckoutGateway
  path?: never
  query?: never
  url: "/v2/gateways/paypal_express_checkout"
}

export type UpdatePaypalExpressCheckoutGatewayErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type UpdatePaypalExpressCheckoutGatewayError =
  UpdatePaypalExpressCheckoutGatewayErrors[keyof UpdatePaypalExpressCheckoutGatewayErrors]

export type UpdatePaypalExpressCheckoutGatewayResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: {
      /**
       * Specifies whether the gateway is enabled or disabled. Set `true` to enable the gateway and `false` to disable the gateway. Default is `false`.
       */
      enabled?: boolean
      /**
       * Specifies the merchant account ID. The ID is displayed in the PayPal account details of the merchant.
       */
      payer_id?: string
      /**
       * Specifies the name of the gateway.
       */
      name?: string
      /**
       * Specifies whether the test mode is enabled. Set `true` to enable test mode and `false` to disable the test mode. Default is `false`.
       */
      test?: boolean
      /**
       * Represents the slug of the gateway.
       */
      slug?: string
      /**
       * Specifies the type of object being returned.
       */
      type?: string
    }
  }
}

export type UpdatePaypalExpressCheckoutGatewayResponse =
  UpdatePaypalExpressCheckoutGatewayResponses[keyof UpdatePaypalExpressCheckoutGatewayResponses]

export type UpdateAdyenGatewayData = {
  body?: UpdateAdyenGatewayRequest
  path?: never
  query?: never
  url: "/v2/gateways/adyen"
}

export type UpdateAdyenGatewayErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type UpdateAdyenGatewayError =
  UpdateAdyenGatewayErrors[keyof UpdateAdyenGatewayErrors]

export type UpdateAdyenGatewayResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: ResponseGateway & {
      /**
       * Represents your Adyen merchant account code. For example, MyCompanyECOM.
       */
      merchant_account?: string
    }
  }
}

export type UpdateAdyenGatewayResponse =
  UpdateAdyenGatewayResponses[keyof UpdateAdyenGatewayResponses]

export type UpdateAuthorizeNetGatewayData2 = {
  body?: RequestUpdateAuthorizeNetGateway
  path?: never
  query?: never
  url: "/v2/gateways/authorize_net"
}

export type UpdateAuthorizeNetGatewayErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type UpdateAuthorizeNetGatewayError =
  UpdateAuthorizeNetGatewayErrors[keyof UpdateAuthorizeNetGatewayErrors]

export type UpdateAuthorizeNetGatewayResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: ResponseGateway & {
      /**
       * Indicates Authorize.net Transaction Key.
       */
      password?: string
    }
  }
}

export type UpdateAuthorizeNetGatewayResponse =
  UpdateAuthorizeNetGatewayResponses[keyof UpdateAuthorizeNetGatewayResponses]

export type UpdateCardConnectGatewayData = {
  body?: RequestUpdateCardConnectGateway
  path?: never
  query?: never
  url: "/v2/gateways/card_connect"
}

export type UpdateCardConnectGatewayErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type UpdateCardConnectGatewayError =
  UpdateCardConnectGatewayErrors[keyof UpdateCardConnectGatewayErrors]

export type UpdateCardConnectGatewayResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: ResponseGateway & {
      /**
       * Specifies your CardConnect Merchant ID.
       */
      merchant_id?: string
    }
  }
}

export type UpdateCardConnectGatewayResponse =
  UpdateCardConnectGatewayResponses[keyof UpdateCardConnectGatewayResponses]

export type UpdateCyberSourceGatewayData = {
  body?: RequestUpdateCyberSourceGateway
  path?: never
  query?: never
  url: "/v2/gateways/cyber_source"
}

export type UpdateCyberSourceGatewayErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type UpdateCyberSourceGatewayError =
  UpdateCyberSourceGatewayErrors[keyof UpdateCyberSourceGatewayErrors]

export type UpdateCyberSourceGatewayResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: ResponseGateway & {
      /**
       * Represents your live or test CyberSource merchant ID.
       */
      login?: string
      /**
       * Indicates your live or test CyberSource SOAP key.
       */
      password?: string
    }
  }
}

export type UpdateCyberSourceGatewayResponse =
  UpdateCyberSourceGatewayResponses[keyof UpdateCyberSourceGatewayResponses]
