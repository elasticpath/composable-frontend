// This file is auto-generated by @hey-api/openapi-ts

/**
 * This represents the type of resource object being returned. Always `pim-job`.
 */
export type Type = "pim-job"

export type Status = "pending" | "cancelled" | "started" | "success" | "failed"

export type Job = {
  /**
   * A unique identifier generated when a job is created.
   */
  id: string
  /**
   * This represents the type of resource object being returned. Always `pim-job`.
   */
  type: "pim-job"
  attributes: {
    /**
     * The date and time a job is started.
     */
    started_at: Date | null
    /**
     * The date and time a job is completed.
     */
    completed_at: Date | null
    /**
     * The date and time a job is created.
     */
    created_at: Date
    /**
     * The date and time a job is updated.
     */
    updated_at: Date
    /**
     * The status of a job.
     *
     * * `pending` - Commerce has received the request but is currently busy processing other requests.
     * * `started` - Commerce has started processing the job.
     * * `success` - The job has successfully completed.
     * * `failed` - The job has failed.
     *
     */
    type:
      | "child-products"
      | "product-import"
      | "product-export"
      | "hierarchy-duplicate"
      | "price-import"
    status: "pending" | "cancelled" | "started" | "success" | "failed"
  }
  meta: {
    /**
     * Applies to all job types. A unique request ID is generated when a job is created.
     */
    x_request_id: string
    /**
     * Applies to `hierarchy-duplicate` job types. The ID of the original hierarchy that you duplicated.
     */
    copied_from?: string
    /**
     * Applies to `hierarchy-duplicate` job types. The duplicated hierarchy ID.
     */
    hierarchy_id?: string
    /**
     * If the job type is `product_export`, a link to the file is created when running a job.
     */
    file_locations?: Array<string> | null
    /**
     * The entities included in the job. For example, if the job type is `product-export`, the PXM products included in the export.
     */
    filter?: string
  }
}

export type Multi = {
  /**
   * An array of jobs.
   */
  data: Array<Job>
  meta: {
    /**
     * Contains the results for the entire collection.
     */
    results: {
      /**
       * Total number of results for the entire collection.
       */
      total: number
    }
  }
}

export type _Error = {
  errors: Array<{
    /**
     * The HTTP response code of the error.
     */
    status: string
    /**
     * A brief summary of the error.
     */
    title: string
    /**
     * Optional additional detail about the error.
     */
    detail?: string
    /**
     * Internal request ID.
     */
    request_id?: string
    /**
     * Additional supporting meta data for the error.
     */
    meta?: {
      [key: string]: unknown
    }
  }>
}

export type Single = {
  data: Job
}

export type Errors = {
  /**
   * An array of job errors.
   */
  data?: Array<{
    /**
     * This represents the type of resource object being returned. Always `pim-job-error`.
     */
    type?: "pim-job-error"
    /**
     * A unique identifier for a job error generated when a job error is created.
     */
    id?: string
    attributes?: {
      /**
       * A description of an error message.
       */
      message?: string
    }
  }>
}

/**
 * Product Experience Manager supports localization of products and hierarchies. If your store supports multiple languages, you can localize product names and descriptions. You can have as many locales as you want.
 */
export type ProductLocales = {
  [key: string]: {
    /**
     * A localized name for the product.
     */
    name: string
    /**
     * A localized description for the product.
     */
    description?: string
  }
}

/**
 * You use the `custom_inputs` attribute to allow your shoppers to add custom text to a product when adding product items to their carts. This is useful, for example, if you have a product like a T-shirt that can be personalized or you sell greetings cards that can be printed with your shoppers personalized messages. See [Personalizing Products](/docs/api/pxm/products/create-product#personalizing-products).
 */
export type ProductCustomInputs = {
  [key: string]: {
    /**
     * A name for the custom text field.
     */
    name?: string
    /**
     * The validation rules for the custom text.
     */
    validation_rules?: Array<unknown>
    /**
     * This represents the type of the resource being returned.
     */
    type?: string
    /**
     * The length of the custom input text field.
     */
    options?: {
      [key: string]: unknown
    }
    /**
     * The number of characters the custom text field can be. You can specify a maximum length up to 255 characters, as the limit is 255 characters.
     */
    max_length?: number
    /**
     * `true` or `false` depending on whether the custom text is required.
     */
    required?: boolean
  }
}

/**
 * Specifies the default behaviour, either `include` or `exclude`.
 */
export type Default = "include" | "exclude"

/**
 * You can build a combination of child products associated with a product, based on build rules that you specify. This is useful, for example, if you have a variation option that you do not sell. This makes managing and building your child products quick and easy. See [Using Build Rules](/docs/api/pxm/products/build-child-products#using-build-rules).
 */
export type ProductBuildRules = {
  /**
   * Specifies the default behaviour, either `include` or `exclude`.
   */
  default?: "include" | "exclude"
  /**
   * An array of option IDs to include when child products are built. Each combination consists of a nested array of option IDs from one or more variations. Combinations of option IDs in the nested arrays must come from different variations.
   */
  include?: Array<Array<string>>
  /**
   * An array of option IDs to exclude when child products are built. Each combination consists of a nested array of option IDs from one or more variations. Combinations of option IDs in the nested arrays must come from different variations.
   */
  exclude?: Array<Array<string>>
}

/**
 * With Product Experience Manager, you can create and manage bundles. A bundle is a purchasable product, consisting of one or more products that you want to sell together. You can create multiple components within a bundle. Each component must have at least one or more options. Each option is a product and a quantity. See [Bundles](/docs/api/pxm/products/products#bundles).
 */
export type ProductBundleComponents = {
  [key: string]: {
    /**
     * The component name. The component name is the name that is displayed in your storefront.
     */
    name?: string
    /**
     * The product options included in a component. This can be the ID of another bundle.
     */
    options?: Array<{
      /**
       * The unique ID of the product you want to add to a component.
       */
      id?: string
      /**
       * This represents the type of object being returned. Always `product`.
       */
      type?: string
      /**
       * The number of this product option that a shopper must purchase.
       */
      quantity?: number
      /**
       * The sort order of the options. The `create a bundle` and `update a bundle` endpoints do not sort the options. You can use the `sort_order` attribute when programming your storefront to display the options in the order that you want.
       */
      sort_order?: number
      /**
       * Whether the product option is a default option in a bundle. Shoppers can select a bundle that specifies a default list of product options. See [Dynamic Bundles](/docs/api/pxm/products/products#dynamic-bundles).
       */
      default?: boolean
    }>
    /**
     * The minimum number of product options a shopper can select from this component.
     */
    min?: number
    /**
     * The maximum number of product options a shopper can select from this component.
     */
    max?: number
    /**
     * The sort order of the components. The `create a bundle` and `update a bundle` endpoints do not sort the components. You can use the `sort_order` attribute when programming your storefront to display the components in the order that you want.
     */
    sort_order?: number
  }
}

/**
 * The commodity type, either `physical` or `digital`.
 */
export type CommodityType = "physical" | "digital"

/**
 * The resource owner, either `organization` or `store`.
 */
export type Owner = "organization" | "store"

export type ProductResponse = {
  /**
   * A unique product ID that is generated when you create the product.
   */
  id?: string
  /**
   * This represents the type of resource object being returned. Always `product`.
   */
  type?: "product"
  attributes?: {
    /**
     * A name for the product.
     */
    name?: string
    /**
     * A description for the product.
     */
    description?: string
    /**
     * A label for the product that is used in the URL paths. A slug can contain A to Z, a to z, 0 to 9, hyphen, underscore, and period. Spaces or other special characters like ^, [], *, and $ are not allowed. By default, the product name is used as the slug.
     */
    slug?: string
    /**
     * The unique stock keeping unit of the product.
     */
    sku?: string
    /**
     * The status for the product, either `draft` or `live`.
     */
    status?: "live" | "draft"
    /**
     * The commodity type, either `physical` or `digital`.
     */
    commodity_type?: "physical" | "digital"
    /**
     * The universal product code or european article number of the product.
     */
    upc_ean?: string
    /**
     * The manufacturer part number of the product.
     */
    mpn?: string
    /**
     * The unique attribute associated with the product. This could be an external reference from a separate company system, for example. The maximum length is 2048 characters.
     */
    external_ref?: string
    locales?: ProductLocales
    /**
     * You can use product tags to store or assign a key word against a product. The product tag can then be used to describe or label that product. Using product tags means that you can group your products together, for example, by brand, category, subcategory, colors, types, industries, and so on. A product can have up to 20 tags. A product tag can be up to 255 characters. Product tags must not contain any spaces or commas.
     */
    tags?: Array<string>
    extensions?: {
      [key: string]: {
        [key: string]: string | null | number | boolean
      }
    }
    custom_inputs?: ProductCustomInputs
    build_rules?: ProductBuildRules
    components?: ProductBundleComponents
  }
  meta?: {
    /**
     * The date and time a product is created.
     */
    created_at?: Date
    /**
     * The date and time a product is updated.
     */
    updated_at?: Date
    /**
     * The resource owner, either `organization` or `store`.
     */
    owner?: "organization" | "store"
    /**
     * A product's variations and the options defined for each variation. If you have specified `build_rules`, only the child products included in the `build_rules` are specified.
     */
    variations?: Array<{
      /**
       * A unique ID generated when a variation is created.
       */
      id?: string
      /**
       * The name of a variation.
       */
      name?: string
      options?: Array<{
        /**
         * A unique ID that is generated an option is created.
         */
        id?: string
        /**
         * The name of an option.
         */
        name?: string
        /**
         * A description of an option.
         */
        description?: string
      }>
    }>
    /**
     * Custom relationship slugs that are attached to the product.
     */
    custom_relationships?: Array<unknown>
    /**
     * A child product's variations and the option defined for each variation. This details the variation and options specific to a child product.
     */
    child_variations?: Array<{
      /**
       * A unique ID generated when a variation is created.
       */
      id?: string
      /**
       * The name of a variation.
       */
      name?: string
      /**
       * The sort order value is visible when you add the variations and variation options to your catalogs. You can then use the `sort_order` value to program your storefront to display the variation options in the order that you want. The variation with the highest value of `sort_order` is displayed first. For example, a variation with a `sort_order` value of 3 appears before a variation with a `sort_order` value of 2. You can specify any numbers that you want. You can use 1, 2, 3, or 100, 90, 80, including, zero or negative numbers. You can set `sort_order` to either `null` or omit it entirely from the request if you wish to remove an existing `sort_order` attribute.
       */
      sort_order?: number
      /**
       * This will be unset for child product variations.
       */
      options?: Array<{
        /**
         * A unique ID that is generated an option is created.
         */
        id?: string
        /**
         * The name of an option.
         */
        name?: string
        /**
         * A description of an option.
         */
        description?: string
      }> | null
      /**
       * The options available for this variation.
       */
      option?: {
        /**
         * A unique ID that is generated an option is created.
         */
        id?: string
        /**
         * The name of an option.
         */
        name?: string
        /**
         * A description of an option.
         */
        description?: string
      }
    }> | null
    /**
     * One of the following product types:
     *
     * - `standard` - A `standard` product is a standalone product.
     * - `parent` - A `parent` product is a product that has child products that have been built using the `Build Child Products` endpoint.
     * - `child` - When you configure product variations and variation options for `parent` products, the `child` products derived from the `parent` products are automatically created in Commerce.
     * - `bundle` - A `bundle` is a purchasable product, comprising one or more standalone products (in other words, components) to be sold together.
     *
     */
    product_types?: Array<"parent" | "child" | "bundle" | "standard">
    /**
     * The child products defined for a product. The order of the variations in the `variation_matrix` is the order of the variations in the array when the variations were linked to the product. For example, the first variation in the `variation_matrix` corresponds to the first variation in the array, and so on. You can use the `sort_order`attribute to sort the order of your variation and variation options in the `variation_matrix` object. See [Sorting the Order of Variations and Options](/docs/api/pxm/products/variations#sorting-the-order-of-variations-and-options) If no variations are defined for a product, the `variation_matrix` is empty.
     */
    variation_matrix?: {
      [key: string]: unknown
    }
  }
  /**
   * Relationships are established between different product entities. For example, a `bundle` product and a `child` product are related to a `parent` product, as both are associated with it.
   */
  relationships?: {
    [key: string]: {
      data?:
        | Array<{
            /**
             * A unique identifier for a resource.
             */
            id?: string
            /**
             * This represents the type of resource object being returned.
             */
            type?: string
          }>
        | {
            /**
             * A unique identifier for a resource.
             */
            id?: string
            /**
             * This represents the type of resource object being returned.
             */
            type?: string
          }
        | null
      /**
       * Links are used to allow you to move between requests. Single entities use a `self` parameter with a link to that specific resource. Sometimes, there are not enough entities for a project to fill multiple pages. In this situation, we return some defaults.
       *
       * | Property | Description |
       * | :--- | :--- |
       * | `current` | Always the current page. |
       * | `first` | Always the first page. |
       * | `last` | `null` if there is only one page. |
       * | `prev` | `null` if the user is on the first page. |
       * | `next` | `null` if there is only one page. |
       *
       */
      links?: {
        [key: string]: string
      }
    }
  }
}

export type ElasticPathFile = {
  /**
   * The unique identifier for this file.
   */
  id?: string
  /**
   * The type represents the object being returned.
   */
  type?: string
  /**
   * The name of the file.
   */
  file_name?: string
  /**
   * The mime type of the file.
   */
  mime_type?: string
  /**
   * The size of the file. Required when uploading files.
   */
  file_size?: number
  /**
   * DEPRECATED Whether the file public or not. Required when uploading files.
   */
  public?: boolean
  meta?: {
    /**
     * The date and time the file was created.
     */
    timestamps?: {
      /**
       * The date and time the file was created.
       */
      created_at?: string
    }
    /**
     * The file dimensions.
     */
    dimensions?: {
      /**
       * The width of the file.
       */
      width?: number
      /**
       * The height of the file.
       */
      height?: number
    }
  }
  /**
   * Links are used to allow you to move between requests.
   */
  links?: {
    /**
     * Single entities use a self parameter with a link to that specific resource.
     */
    self?: string
  }
  /**
   * The publicly available URL for this file.
   */
  link?: {
    /**
     * The publicly available URL for this file.
     */
    href?: string
    meta?: {
      /**
       * Contains the results for the entire collection.
       */
      results?: {
        /**
         * Total number of results for the entire collection.
         */
        total?: number
      }
    }
  }
}

/**
 * Included is an array of resources that are included in the response.
 */
export type IncludedResponse = {
  /**
   * The main images associated with a product.
   */
  main_images?: Array<ElasticPathFile>
  /**
   * Returns a list of component products in a product bundle. If a bundle has no component products (in other words, is not a product bundle), an empty array is returned.
   */
  component_products?: Array<ProductResponse>
  /**
   * The files associated with a product.
   */
  files?: Array<ElasticPathFile>
}

export type MultiProductResponse = {
  data?: Array<ProductResponse>
  included?: IncludedResponse
  meta?: {
    /**
     * Contains the results for the entire collection.
     */
    results?: {
      /**
       * Total number of results for the entire collection.
       */
      total?: number
    }
  }
}

export type ProductAttributes = {
  /**
   * The unique attribute associated with the product. This could be an external reference from a separate company system, for example. The maximum length is 2048 characters.
   */
  external_ref?: string
  /**
   * The product name to display to customers.
   */
  name?: string
  /**
   * A description for the product.
   */
  description?: string
  /**
   * The unique slug of the product. A slug can contain A to Z, a to z, 0 to 9, hyphen, underscore, and period. Spaces or other special characters like ^, [], *, and $ are not allowed.
   */
  slug?: string
  /**
   * The unique stock keeping unit of the product.
   */
  sku?: string
  /**
   * The status for the product, either `draft` or `live`. Default is `draft`.  For a product to appear in a catalog it must be in a `live` status.
   */
  status?: "live" | "draft"
  /**
   * The commodity type, either `physical` or `digital`.
   */
  commodity_type?: "physical" | "digital"
  /**
   * The universal product code or european article number of the product.
   */
  upc_ean?: string
  /**
   * The manufacturer part number of the product.
   */
  mpn?: string
  /**
   * You can use product tags to store or assign a key word against a product. The product tag can then be used to describe or label that product. Using product tags means that you can group your products together, for example, by brand, category, subcategory, colors, types, industries, and so on. A product can have up to 20 tags. A product tag can be up to 255 characters. Product tags must not contain any spaces or commas. See [Product Tags](/docs/api/pxm/products/product-tags).
   */
  tags?: Array<string>
  build_rules?: ProductBuildRules
  locales?: ProductLocales
  custom_inputs?: ProductCustomInputs
  components?: ProductBundleComponents
}

export type CreateProductRequest = {
  data: {
    /**
     * This represents the type of resource being returned. Always `product`.
     */
    type: "product"
    attributes: ProductAttributes
    /**
     * Relationships are established between different product entities.
     */
    relationships?: {
      variations?: {
        data?: Array<{
          /**
           * A unique identifier for a resource.
           */
          id?: string
          /**
           * This represents the type of resource object being returned.
           */
          type?: string
        }>
      }
    }
  }
}

export type SingleProductResponse = {
  data?: ProductResponse
  included?: IncludedResponse
}

export type UpdateProductRequest = {
  data: {
    /**
     * This represents the type of resource object being returned. Always `product`.
     */
    type: "product"
    /**
     * The unique identifier of the product. Must match the product ID specified in the request path.
     */
    id: string
    attributes: ProductAttributes
  }
}

/**
 * `admin_attributes` are not displayed in catalogs. This means `admin_attributes` can only be viewed by administrators. If you want a custom attribute to be displayed in a catalog, you must add it to `shopper_attributes`.
 *
 * `admin_attributes` are structured as key-value pairs. Both the keys and values are `strings`. You can have up to 100 keys.
 *
 */
export type AdminAttributes = {
  [key: string]: string | null
}

/**
 * `shopper_attributes` are displayed in catalogs. This means `shopper_attributes` can be viewed by both shoppers and administrators. If you do not want a custom attribute to be displayed in a catalog, you must add it to `admin_attributes`.
 *
 * `shopper_attributes` are structured as key-value pairs. Both the keys and values are `strings`. You can have up to 100 keys.
 *
 */
export type ShopperAttributes = {
  [key: string]: string | null
}

export type Attributes = {
  /**
   * The name of the node, such as `Ranges` or `Refrigerators`. Names must be unique among sibling nodes in the hierarchy. Otherwise, a name can be non-unique within the hierarchy and across multiple hierarchies.
   */
  name?: string
  /**
   * A description for a node.
   */
  description?: string
  /**
   * A slug for the node. Slugs must be unique among sibling nodes in the hierarchy. Otherwise, a slug can be non-unique within the hierarchy and across multiple hierarchies.
   */
  slug?: string
  /**
   * You can curate your products in your nodes product lists. Product curation allows you to promote specific products within each node in a hierarchy, enabling you to create unique product collections in your storefront.
   */
  curated_products?: Array<string>
  admin_attributes?: AdminAttributes
  shopper_attributes?: ShopperAttributes
  /**
   * Product Experience Manager supports localization of hierarchies and nodes. If you store supports multiple languages, you can localize hierarchy and node names and descriptions.
   */
  locales?: {
    [key: string]: {
      /**
       * A localized hierarchy or node name.
       */
      name?: string
      /**
       * A localized hierarchy or node description.
       */
      description?: string
    }
  }
}

/**
 * Relationships allow you to move between requests. Includes links to the child nodes and products associated with a hierarchy or node.
 */
export type Relationships = {
  /**
   * The child nodes related to the resource.
   */
  children?: {
    /**
     * An array of child nodes.
     */
    data?: Array<unknown>
    /**
     * Links allow you to move between requests.
     */
    links?: {
      /**
       * A link to a related resource.
       */
      related?: string
    }
  }
  /**
   * The parent node related to the resource
   */
  parent?: {
    /**
     * The parent node
     */
    data?: {
      /**
       * This represents the type of resource object being returned. Always `node`.
       */
      type: "node"
      /**
       * The unique identifier of a node.
       */
      id: string
    }
  }
  /**
   * The products related to the resource.
   */
  products?: {
    /**
     * An array of products.
     */
    data?: Array<unknown>
    /**
     * Links allow you to move between requests.
     */
    links?: {
      /**
       * A link to a related resource.
       */
      related?: string
    }
  }
}

export type Node = {
  /**
   * The unique identifier of a node.
   */
  id: string
  /**
   * This represents the type of resource object being returned. Always `node`.
   */
  type: "node"
  attributes: Attributes
  relationships: Relationships
  meta: {
    /**
     * The sort order value. The node with the highest value of `sort_order` is displayed first. For example, a node with a `sort_order` value of `3` appears before a node with a `sort_order` value of `2`. See [Sorting Nodes in a hierarchy](/docs/api/pxm/products/create-node#sorting-nodes-in-a-hierarchy).
     */
    sort_order?: number
    /**
     * The date and time a node is created.
     */
    created_at?: Date
    /**
     * The date and time a node was updated.
     */
    updated_at?: Date
    /**
     * The name of the parent of the node if one exists.
     */
    parent_name?: string
    /**
     * The node owner, either `organization` or `store`.
     */
    owner?: "store" | "organization"
    /**
     * The unique identifier of hierarchy
     */
    hierarchy_id?: string
    /**
     * Breadcrumbs
     */
    breadcrumbs?: Array<{
      /**
       * The unique identifier of a hierarchy/node.
       */
      id?: string
      /**
       * The name of the hierarchy/node.
       */
      name?: string
      /**
       * A slug for the hierarchy/node.
       */
      slug?: string
      /**
       * Product Experience Manager supports localization of hierarchies and nodes. If you store supports multiple languages, you can localize hierarchy and node names and descriptions.
       */
      locales?: {
        [key: string]: {
          /**
           * A localized hierarchy or node name.
           */
          name?: string
        }
      }
    }>
  }
}

export type MultiMeta = {
  /**
   * Contains the results for the entire collection.
   */
  results?: {
    /**
     * Total number of results for the entire collection.
     */
    total?: number
  }
}

/**
 * Links are used to allow you to move between requests.
 */
export type MultiLinks = {
  /**
   * Always the first page.
   */
  first?: string
  /**
   * This is `null` if there is only one page.
   */
  last?: string
  /**
   * This is `null` if there is only one page.
   */
  next?: string
  /**
   * This is `null` if you on the first page.
   */
  prev?: string
}

export type MultiNodes = {
  /**
   * An array of nodes.
   */
  data: Array<Node>
  meta?: MultiMeta
  links?: MultiLinks
}

export type TemplateResponse = {
  data?: Array<{
    /**
     * A unique identifier for a template generated when a template is created.
     */
    id?: string
    /**
     * This represents the type of resource object being returned. Always `template`.
     */
    type?: "template"
  }>
}

export type ProductTemplatesRequest = {
  data?: Array<{
    /**
     * The unique identifier of a template.
     */
    id?: string
    /**
     * This represents the type of resource object being returned. Always `template`.
     */
    type?: "template"
  }>
}

export type ComponentProductsResponse = {
  data?: Array<{
    /**
     * The unique identifier of a product component generated when a product is created.
     */
    id?: string
    /**
     * This represents the type of resource object being returned. Always `product`.
     */
    type?: "product"
  }>
}

export type FileResponse = {
  data?: Array<{
    /**
     * The unique identifier of the new file.
     */
    id?: string
    /**
     * This represents the type of resource object being returned. Always `file`.
     */
    type?: "file"
  }>
}

export type ProductFilesRequest = {
  data?: Array<{
    /**
     * A unique identifier for a file generated when a file is created.
     */
    id?: string
    /**
     * This represents the type of resource being returned. Always `file`.
     */
    type?: "file"
    meta?: {
      /**
       * The files associated with a product.
       */
      tags?: Array<string>
    }
  }>
}

export type VariationsResponse = {
  data?: Array<{
    /**
     * A unique identifier generated when a variation is created.
     */
    id?: string
    /**
     * This represents the type of resource object being returned. Always `product-variation`.
     */
    type?: "product-variation"
    meta?: {
      /**
       * The date and time a resource is created.
       */
      created_at?: Date
    }
  }>
}

export type ProductVariationsRequest = {
  data?: Array<{
    /**
     * The ID of the product variation.
     */
    id?: string
    /**
     * This represents the type of resource being returned. Always `product-variation`.
     */
    type?: "product-variation"
  }>
}

export type MainImageResponse = {
  data?: Array<{
    /**
     * A unique identifier for the image file generated automatically when a file is created.
     */
    id?: string
    /**
     * This represents the type of resource object being returned. Always `file`.
     */
    type?: string
  }>
}

export type ReplaceMainImageRequest = {
  data?: {
    /**
     * The ID of the new image file.
     */
    id?: string
    type?: "file"
  }
}

export type MainImageRequest = {
  data?: {
    /**
     * The ID of the image file.
     */
    id?: string
    /**
     * This represents the type of resource being returned. Always `file`.
     */
    type?: "file"
  }
}

export type AttachCustomRelationshipRequest = {
  data: Array<{
    /**
     * The slug of the custom relationship.
     */
    slug: string
    /**
     * This represents the type of resource. Always `custom-relationship`.
     */
    type: "custom-relationship"
  }>
}

export type ReqAttributesCustomRelationship = {
  /**
   * The name of the custom relationship to display to shoppers, such as `Kitchen electrics`.
   */
  name: string
  /**
   * A description of the custom relationship.
   */
  description?: string
  /**
   * A unique slug for the custom relationship. Must match the slug specified in the request path. A slug can contain A to Z, a to z, 0 to 9, hyphen, underscore, and period. Spaces or other special characters like ^, [], *, and $ are not allowed.
   */
  slug: string
  /**
   * The order in which the custom relationship should be displayed in relation to others. A lower value represents a higher priority in the display order. If set to NULL, the sort order will be removed.
   */
  sort_order?: number | null
  /**
   * The shopper-facing name for the custom relationship. This value will be displayed to shoppers in the store-front, replacing the internal name if present. If set to NULL, the external name will be removed.
   */
  external_name?: string | null
  /**
   * The shopper-facing description for the custom relationship. This value will be shown to shoppers in the store-front, replacing the internal description if present. If set to NULL, the external description will be removed.
   */
  external_description?: string | null
  /**
   * Is this relationship one way or bi-directional `true` or `false`. Default is false
   */
  bi_directional?: boolean
}

export type CustomRelationship = {
  /**
   * A unique identifier generated when a custom relationship is created.
   */
  id: string
  /**
   * This represents the type of resource object being returned. Always `custom-relationship`.
   */
  type: "custom-relationship"
  attributes: ReqAttributesCustomRelationship
  meta: {
    /**
     * The owner of the resource.
     */
    owner: string
    timestamps: {
      /**
       * The date and time the resource is created.
       */
      created_at: Date
      /**
       * The date and time the resource is updated.
       */
      updated_at: Date
    }
  }
}

/**
 * Links are used to allow you to move between requests.
 */
export type MultiLinksCr = {
  /**
   * Always the first page.
   */
  first?: string
  /**
   * This is `null` if there is only one page.
   */
  last?: string
  /**
   * This is `null` if there is only one page.
   */
  next?: string
  /**
   * This is `null` if you on the first page.
   */
  prev?: string
}

export type MultiCustomRelationships = {
  data: Array<CustomRelationship>
  links?: MultiLinksCr
  meta: MultiMeta
}

export type ProductAssociationListProductIdsResponse = {
  data: Array<{
    /**
     * A unique identifier generated when a product association is created.
     */
    id: string
    /**
     * This represents the type of resource object being returned. Always `product`.
     */
    type: "product"
    attributes?: {
      /**
       * The order in which the product to product should be displayed in relation to others. A lower value represents a higher priority in the display order. If set to NULL, the sort order will be removed.
       */
      sort_order?: number | null
    }
  }>
}

export type ProductAssociationRequest = {
  data: Array<{
    /**
     * The ID of the product you want to relate.
     */
    id: string
    /**
     * This represents the type of resource being returned. Always `product`.
     */
    type: "product"
    attributes?: {
      /**
       * The order in which the product to product should be displayed in relation to others. A lower value represents a higher priority in the display order. If set to NULL, the sort order will be removed.
       */
      sort_order?: number | null
    }
  }>
}

export type ProductAssociationResponse = {
  meta?: {
    /**
     * A list of product IDs that have been successfully associated with this custom relationship.
     */
    associated_products?: Array<string>
    /**
     * A list of products that could not be associated, including the reasons why.
     */
    products_not_associated?: Array<{
      /**
       * The ID of the product that could not be associated.
       */
      ID?: string
      /**
       * Details about why the product could not be associated.
       */
      Details?: string
    }>
    /**
     * The owner of the resource.
     */
    owner?: string
    timestamps?: {
      /**
       * The date and time the resource was created.
       */
      created_at?: Date
      /**
       * The date and time the resource was last updated.
       */
      updated_at?: Date
    }
  }
}

export type ProductAssociationDeleteRequest = {
  data: Array<{
    /**
     * The ID of the product you want to relate.
     */
    id: string
    /**
     * This represents the type of resource being returned. Always `product`.
     */
    type: "product"
  }>
}

export type MultiVariations = {
  data?: Array<{
    /**
     * A unique identifier for a variation.
     */
    id?: string
    /**
     * This represents the type of resource object being returned. Always `product-variation`.
     */
    type?: "product-variation"
    attributes?: {
      /**
       * The name of a variation.
       */
      name?: string
      /**
       * The sort order value is visible when you add the variations and variation options to your catalogs. You can then use the `sort_order` value to program your storefront to display the variation options in the order that you want. The variation with the highest value of `sort_order` is displayed first. For example, a variation with a `sort_order` value of 3 appears before a variation with a `sort_order` value of 2. You can specify any numbers that you want. You can use 1, 2, 3, or 100, 90, 80, including, zero or negative numbers. You can set `sort_order` to either `null` or omit it entirely from the request if you wish to remove an existing `sort_order` attribute.
       */
      sort_order?: number
    }
    meta?: {
      options?: Array<{
        /**
         * A unique ID that is generated when an option is created.
         */
        id?: string
        /**
         * A human recognizable identifier for the option, also used in the SLUG for child products. Option names can only contain A to Z, a to z, 0 to 9, hyphen, underscore, and period. Spaces or other special characters like ^, [], *, and $ are not allowed.
         */
        name?: string
        /**
         * A human recognizable description of the option.
         */
        description?: string
        /**
         * The date and time an option is created.
         */
        created_at?: Date
        /**
         * The date and time an option is updated.
         */
        updated_at?: Date
        /**
         * The sort order value is visible when you add the variations and variation options to your catalogs. You can then use the `sort_order` value to program your storefront to display the variation options in the order that you want. The variation with the highest value of `sort_order` is displayed first. For example, a variation with a `sort_order` value of 3 appears before a variation with a `sort_order` value of 2. You can specify any numbers that you want. You can use 1, 2, 3, or 100, 90, 80, including, zero or negative numbers. You can set `sort_order` to either `null` or omit it entirely from the request if you wish to remove an existing `sort_order` attribute.
         */
        sort_order?: number
      }>
      /**
       * The owner of the resource, either `organization` or `store`.
       */
      owner?: "organization" | "store"
      /**
       * The date and time a variation is created.
       */
      created_at?: Date
      /**
       * The date and time a variation is updated.
       */
      updated_at?: Date
    }
  }>
  meta?: {
    /**
     * Contains the results for the entire collection.
     */
    results?: {
      /**
       * Total number of results for the entire collection.
       */
      total?: number
    }
  }
}

export type CreateVariation = {
  data: {
    /**
     * This represents the type of resource object being returned. Always `product-variation`.
     */
    type: "product-variation"
    attributes: {
      /**
       * The variation name.
       */
      name?: string
      /**
       * The sort order value is visible when you add the variations and variation options to your catalogs. You can then use the `sort_order` value to program your storefront to display the variation options in the order that you want.
       *
       * The variation with the highest value of `sort_order` is displayed first. For example, a variation with a `sort_order` value of 3 appears before a variation with a `sort_order` value of 2.
       *
       * You can specify any numbers that you want. You can use 1, 2, 3, or 100, 90, 80, including, zero or negative numbers. You can set `sort_order` to either `null` or omit it entirely from the request if you wish to remove an existing `sort_order` attribute.
       *
       * You must rebuild your products for the sort order changes to take effect.
       *
       */
      sort_order?: number
    }
  }
}

export type CreatedVariation = {
  data: {
    /**
     * A unique identifier generated when a variation is created.
     */
    id: string
    /**
     * This represents the type of resource object being returned. Always `product-variation`.
     */
    type: "product-variation"
    attributes: {
      /**
       * A human-recognizable identifier for a variation.
       */
      name?: string
      /**
       * The sort order value is visible when you add the variations and variation options to your catalogs. You can then use the `sort_order` value to program your storefront to display the variation options in the order that you want. The variation with the highest value of `sort_order` is displayed first. For example, a variation with a `sort_order` value of 3 appears before a variation with a `sort_order` value of 2. You can specify any numbers that you want. You can use 1, 2, 3, or 100, 90, 80, including, zero or negative numbers. You can set `sort_order` to either `null` or omit it entirely from the request if you wish to remove an existing `sort_order` attribute.
       */
      sort_order?: number
    }
    meta: {
      /**
       * The owner of the resource, either `organization` or `store`.
       */
      owner?: "organization" | "store"
      /**
       * The date and time a variation is created.
       */
      created_at?: Date
      /**
       * The date and time a variation is updated.
       */
      updated_at?: Date
    }
  }
}

export type SingleVariation = {
  data: {
    /**
     * A unique identifier for a variation.
     */
    id: string
    /**
     * This represents the type of resource object being returned. Always `product-variation`.
     */
    type: "product-variation"
    attributes: {
      /**
       * The name for a variation.
       */
      name?: string
      /**
       * The sort order value is visible when you add the variations and variation options to your catalogs. You can then use the `sort_order` value to program your storefront to display the variation options in the order that you want. The variation with the highest value of `sort_order` is displayed first. For example, a variation with a `sort_order` value of 3 appears before a variation with a `sort_order` value of 2. You can specify any numbers that you want. You can use 1, 2, 3, or 100, 90, 80, including, zero or negative numbers. You can set `sort_order` to either `null` or omit it entirely from the request if you wish to remove an existing `sort_order` attribute.
       */
      sort_order?: number
    }
    meta: {
      /**
       * A variation option represents an option for selection for a single product-variation. For example, if your variation is `color`, you might have three possible options; red, green, and blue.
       */
      options?: Array<{
        /**
         * A unique ID that is generated an option is created.
         */
        id?: string
        /**
         * A human-recognizable identifier for the option, also used in the SLUG for child products. Option names can only contain A to Z, a to z, 0 to 9, hyphen, underscore, and period. Spaces or other special characters like ^, [], *, and $ are not allowed.
         */
        name?: string
        /**
         * A description for an option.
         */
        description?: string
        /**
         * The date and time an option is created.
         */
        created_at?: Date
        /**
         * The date and time an option is updated.
         */
        updated_at?: Date
        /**
         * The sort order value is visible when you add the variations and variation options to your catalogs. You can then use the `sort_order` value to program your storefront to display the variation options in the order that you want. The variation with the highest value of `sort_order` is displayed first. For example, a variation with a `sort_order` value of 3 appears before a variation with a `sort_order` value of 2. You can specify any numbers that you want. You can use 1, 2, 3, or 100, 90, 80, including, zero or negative numbers. You can set `sort_order` to either `null` or omit it entirely from the request if you wish to remove an existing `sort_order` attribute.
         */
        sort_order?: number
      }>
      /**
       * The owner of the resource, either `organization` or `store`.
       */
      owner?: "organization" | "store"
      /**
       * The date and time a variation is created.
       */
      created_at?: string
      /**
       * The date and time a variation is updated.
       */
      updated_at?: string
    }
  }
}

export type UpdateVariation = {
  data: {
    /**
     * This represents the type of resource object being returned. Always `product-variation`.
     */
    type: "product-variation"
    attributes: {
      /**
       * The variation name.
       */
      name?: string
      /**
       * The sort order value is visible when you add the variations and variation options to your catalogs. You can then use the `sort_order` value to program your storefront to display the variation options in the order that you want.
       *
       * The variation with the highest value of `sort_order` is displayed first. For example, a variation with a `sort_order` value of 3 appears before a variation with a `sort_order` value of 2.
       *
       * You can specify any numbers that you want. You can use 1, 2, 3, or 100, 90, 80, including, zero or negative numbers. You can set `sort_order` to either `null` or omit it entirely from the request if you wish to remove an existing `sort_order` attribute.
       *
       * You must rebuild your products for the sort order changes to take effect.
       *
       */
      sort_order?: number
    }
    /**
     * The unique identifier of the variation. Must match the variation ID specified in the request path.
     */
    id: string
  }
}

export type MultiOptions = {
  data?: Array<{
    /**
     * A unique identifier generated when an option is created.
     */
    id?: string
    /**
     * This represents the type of resource object being returned. Always `product-variation-option`.
     */
    type?: "product-variation-option"
    attributes?: {
      /**
       * A human-recognizable identifier for the option, also used in the SLUG for child products. Option names can only contain A to Z, a to z, 0 to 9, hyphen, underscore, and period. Spaces or other special characters like ^, [], *, and $ are not allowed.
       */
      name?: string
      /**
       * A human-recognizable description for the option.
       */
      description?: string
      /**
       * The sort order value is visible when you add the variations and variation options to your catalogs. You can then use the `sort_order` value to program your storefront to display the variation options in the order that you want. The variation with the highest value of `sort_order` is displayed first. For example, a variation with a `sort_order` value of 3 appears before a variation with a `sort_order` value of 2. You can specify any numbers that you want. You can use 1, 2, 3, or 100, 90, 80, including, zero or negative numbers. You can set `sort_order` to either `null` or omit it entirely from the request if you wish to remove an existing `sort_order` attribute.
       */
      sort_order?: number
    }
    meta?: {
      /**
       * The owner of a resource, either `organization` or `store`.
       */
      owner?: "organization" | "store"
      /**
       * The date and time an option is created.
       */
      created_at?: Date
      /**
       * The date and time an option is updated.
       */
      updated_at?: Date
    }
  }>
  meta?: {
    /**
     * Contains the results for the entire collection.
     */
    results?: {
      /**
       * Total number of results for the entire collection.
       */
      total?: number
    }
  }
}

export type CreateOption = {
  data: {
    /**
     * This represents the type of resource object being returned. Always `product-variation-option`.
     */
    type: "product-variation-option"
    attributes: {
      /**
       * A human recognizable identifier for the option, also used in the SLUG for child products. Option names can only contain A to Z, a to z, 0 to 9, hyphen, underscore, and period. Spaces or other special characters like ^, [], *, and $ are not allowed.
       */
      name: string
      /**
       * By default, variations and variation options are sorted alphabetically. You can use the `sort_order` attribute to sort the order of your variation and variation options in the `variation_matrix`.
       *
       * The sort order value is visible when you add the variations and variation options to your catalogs. You can then use the `sort_order` value to program your storefront to display the variation options in the order that you want.
       *
       * The variation option with the highest value of `sort_order` is displayed first. For example, a variation option with a `sort_order` value of `3` appears before a variation option with a `sort_order` value of `2`. You can specify any numbers that you want. You can use 1, 2, 3, or 100, 90, 80, and so on, zero or negative numbers.
       *
       * You can set `sort_order` to either `null` or omit it entirely from the request if you wish to remove an existing `sort_order` attribute.
       *
       * You must rebuild your products for the sort order changes to take effect.
       *
       */
      sort_order?: number
      /**
       * A description of a product variation option.
       */
      description: string
    }
  }
}

export type CreatedOption = {
  data: {
    /**
     * A unique identifier that is generated when an option is created.
     */
    id?: string
    /**
     * This represents the type of resource object being returned. Always `product-variation-option`.
     */
    type: "product-variation-option"
    attributes: {
      /**
       * A human-recognizable identifier for the option, also used in the SLUG for child products. Option names can only contain A to Z, a to z, 0 to 9, hyphen, underscore, and period. Spaces or other special characters like ^, [], *, and $ are not allowed.
       */
      name?: string
      /**
       * A human-recognizable description for the option.
       */
      description?: string
      /**
       * The sort order value is visible when you add the variations and variation options to your catalogs. You can then use the `sort_order` value to program your storefront to display the variation options in the order that you want. The variation with the highest value of `sort_order` is displayed first. For example, a variation with a `sort_order` value of 3 appears before a variation with a `sort_order` value of 2. You can specify any numbers that you want. You can use 1, 2, 3, or 100, 90, 80, including, zero or negative numbers. You can set `sort_order` to either `null` or omit it entirely from the request if you wish to remove an existing `sort_order` attribute.
       */
      sort_order?: number
    }
    meta?: {
      /**
       * The owner of a resource, either `organization` or `store`.
       */
      owner?: "organization" | "store"
      /**
       * The date and time an option is created.
       */
      created_at?: Date
      /**
       * The date and time an option is updated.
       */
      updated_at?: Date
    }
  }
}

export type SingleOption = {
  data: {
    /**
     * The unique identifier generated when an option is created.
     */
    id: string
    /**
     * This represents the type of resource object being returned. Always `product-variation-option`.
     */
    type: "product-variation-option"
    /**
     * A variation option represents an option for selection for a single product-variation. For example, if your variation is `color`, you might have three possible options; red, green, and blue.
     */
    attributes: {
      /**
       * A human-recognizable identifier for the option, also used in the SLUG for child products. Option names can only contain A to Z, a to z, 0 to 9, hyphen, underscore, and period. Spaces or other special characters like ^, [], *, and $ are not allowed.
       */
      name?: string
      /**
       * A human-recognizable description for the option.
       */
      description?: string
      /**
       * The sort order value is visible when you add the variations and variation options to your catalogs. You can then use the `sort_order` value to program your storefront to display the variation options in the order that you want. The variation with the highest value of `sort_order` is displayed first. For example, a variation with a `sort_order` value of 3 appears before a variation with a `sort_order` value of 2. You can specify any numbers that you want. You can use 1, 2, 3, or 100, 90, 80, including, zero or negative numbers. You can set `sort_order` to either `null` or omit it entirely from the request if you wish to remove an existing `sort_order` attribute.
       */
      sort_order?: number
    }
    meta: {
      /**
       * The owner of a resource, either `organization` or `store`.
       */
      owner?: "organization" | "store"
      /**
       * The date and time an option is created.
       */
      created_at?: Date
      /**
       * The date and time an option is updated.
       */
      updated_at?: Date
    }
  }
}

export type UpdateOption = {
  data: {
    /**
     * This represents the type of resource object being returned. Always `product-variation-option`.
     */
    type: "product-variation-option"
    attributes: {
      /**
       * A human recognizable identifier for the option, also used in the SLUG for child products. Option names can only contain A to Z, a to z, 0 to 9, hyphen, underscore, and period. Spaces or other special characters like ^, [], *, and $ are not allowed.
       */
      name: string
      /**
       * The description of the option.
       */
      description: string
      /**
       * By default, variations and variation options are sorted alphabetically. You can use the `sort_order` attribute to sort the order of your variation and variation options in the `variation_matrix`. The sort order value is visible when you add the variations and variation options to your catalogs. You can then use the `sort_order` value to program your storefront to display the variation options in the order that you want.
       *
       * The variation option with the highest value of `sort_order` is displayed first. For example, a variation option with a `sort_order` value of `3` appears before a variation option with a `sort_order` value of `2`.
       *
       * You can specify any numbers that you want. You can use 1, 2, 3, or 100, 90, 80, and so on, zero or negative numbers.
       *
       * You can set `sort_order` to either `null` or omit it entirely from the request if you wish to remove an existing `sort_order` attribute.
       *
       * You must rebuild your products for the sort order changes to take effect.
       *
       */
      sort_order?: number
    }
    /**
     * The unique identifier of the option. Must match the option ID specified in the request path.
     */
    id: string
  }
}

export type MultiModifiers = {
  data?: Array<{
    /**
     * A unique identifier for a modifier that is generated automatically when a modifier is created.
     */
    id?: string
    /**
     * This represents the type of resource object being returned. Always `product-variation-modifier`.
     */
    type?: "product-variation-modifier"
    attributes?: {
      /**
       * You can specify different modifiers for different options in a variation. When you build child products using options in variations, the properties of a child products depends on the modifier set for the options that are applied to the child product. The table below describes the different types of modifiers.
       *
       * | Modifier | Data Type | Effect |
       * | :--- | :--- | :--- |
       * | `name_equals` | `string` | Overrides the name of the child product with the name specified by the modifier. |
       * | `name_append` | `string` | Appends the string specified in the modifier to the name of the child product. |
       * | `name_prepend` | `string` | Prepends the string specified in the modifier to the name of the child product. |
       * | `description_equals` | `string` | Overrides the description of the child product. |
       * | `description_append` | `string` | Appends the string specified in the modifier to the description of the child product. |
       * | `description_prepend` | `string` | Prepends the string specified in the modifier to the product description of the child product. |
       * | `commodity_type` | `string` | Sets the commodity type of the child product, such as `physical` or `digital`. |
       * | `price` | `string` | Allows application of price modifiers (`price_increment`, `price_decrement`, and `price_equals`) to the child products. |
       * | `price_increment` | `string` | Increases the price of the child product. |
       * | `price_decrement` | `string` | Decreases the price of the child product. |
       * | `price_equals` | `string` | Sets the price of a child product to the amount you specify. |
       * | `slug_append` | `string` | Appends the string specified in the modifier to the slug of the child product. Can only contain A-Z, a-z, 0 to 9, hyphen, underscore, and period. Spaces or other special characters like ^, [], *, and $ are not allowed. However, for the `slug-builder` modifier, you can use `{}` in the `seek` field, for example, `"seek": :{COLOR}"`. |
       * | `slug_prepend` | `string` | Prepends the string specified in the modifier to the slug of the child product. Can only contain A-Z, a-z, 0 to 9, hyphen, underscore, and period. Spaces or other special characters like ^, [], *, and $ are not allowed. However, for the `slug-builder` modifier, you can use `{}` in the `seek` field, for example, `"seek": :{COLOR}"`. |
       * | `slug_builder` | `string`| Sets a part of the slug of the child product. Can only contain A-Z, a-z, 0 to 9, hyphen, underscore, and period. Spaces or other special characters like ^, [], *, and $ are not allowed. However, for the `slug-builder` modifier, you can use `{}` in the `seek` field, for example, `"seek": :{COLOR}"`. |
       * | `sku_equals` | `string` | Sets the SKU of the child product. |
       * | `sku_append` | `string` | Appends the string specified in the modifier to the SKU of the child product. |
       * | `sku_prepend` | `string` | Prepends the string specified in the modifier to the SKU of the child product. |
       * | `sku_builder` | `string` | Sets a part of the SKU of the child product. |
       * | `status` | `string` | Sets the status of the child product, such as `draft` or `live`. |
       *
       */
      type?:
        | "commodity_type"
        | "status"
        | "price"
        | "name_append"
        | "name_prepend"
        | "name_equals"
        | "sku_append"
        | "sku_prepend"
        | "sku_equals"
        | "sku_builder"
        | "slug_append"
        | "slug_prepend"
        | "slug_equals"
        | "slug_builder"
        | "description_append"
        | "description_prepend"
        | "description_equals"
        | "custom_inputs_equals"
        | "build_rules_equals"
        | "locales_equals"
        | "upc_ean_equals"
        | "mpn_equals"
        | "external_ref_equals"
      /**
       * Required for non-builder modifiers. The value of the modifier type.
       */
      value?: string
      /**
       * Required for builder modifiers. The sub-string to find and replace enclosed in curly brackets for `slug_builder` and `sku_builder`.
       */
      seek?: string
      /**
       * Required for builder modifiers. The value to replace matches the `seek` string for `slug_builder` and `sku_builder`.
       */
      set?: string
      /**
       * The name of the modifier.
       */
      reference_name?: string
    }
    meta?: {
      /**
       * The owner of a resource, either `organization` or `store`.
       */
      owner?: "store" | "organization"
    }
  }>
  meta?: {
    /**
     * Contains the results for the entire collection.
     */
    results?: {
      /**
       * Total number of results for the entire collection.
       */
      total?: number
    }
  }
}

/**
 * Use modifiers to change the properties of child products that are inherited from a parent product. With modifiers, you only need to have one parent product with a variation attached to the product.
 */
export type CreateModifier = {
  data: {
    /**
     * This represents the type of resource object being returned. Always `product-variation-modifier`.
     */
    type: "product-variation-modifier"
    attributes: {
      /**
       * You can specify different modifiers for different options in a variation. When you build child products using options in variations, the properties of a child products depends on the modifier set for the options that are applied to the child product. See [Create a Modifier](/docs/api/pxm/products/create-modifier).
       *
       */
      type:
        | "commodity_type"
        | "status"
        | "price"
        | "name_append"
        | "name_prepend"
        | "name_equals"
        | "sku_append"
        | "sku_prepend"
        | "sku_equals"
        | "sku_builder"
        | "slug_append"
        | "slug_prepend"
        | "slug_equals"
        | "slug_builder"
        | "description_append"
        | "description_prepend"
        | "description_equals"
        | "custom_inputs_equals"
        | "build_rules_equals"
        | "locales_equals"
        | "upc_ean_equals"
        | "mpn_equals"
        | "external_ref_equals"
      /**
       * Required for non-builder modifiers. The value of the modifier type.
       */
      value?: string
      /**
       * Required for builder modifiers. The sub-string to find and replace enclosed in curly brackets for `slug_builder` and `sku_builder`.
       */
      seek?: string
      /**
       * Required for builder modifiers. The value to replace matches the `seek` string for `slug_builder` and `sku_builder`.
       */
      set?: string
      /**
       * A name for the modifier.
       */
      reference_name?: string
    }
  }
}

export type CreatedModifier = {
  data?: {
    /**
     * A unique identifier for a modifier that is generated automatically when a modifier is created.
     */
    id?: string
    /**
     * This represents the type of resource object being returned. Always `product-variation-modifier`.
     */
    type?: "product-variation-modifier"
    attributes?: {
      /**
       * You can specify different modifiers for different options in a variation. When you build child products using options in variations, the properties of a child products depends on the modifier set for the options that are applied to the child product. The table below describes the different types of modifiers.
       *
       * | Modifier | Data Type | Effect |
       * | :--- | :--- | :--- |
       * | `name_equals` | `string` | Overrides the name of the child product with the name specified by the modifier. |
       * | `name_append` | `string` | Appends the string specified in the modifier to the name of the child product. |
       * | `name_prepend` | `string` | Prepends the string specified in the modifier to the name of the child product. |
       * | `description_equals` | `string` | Overrides the description of the child product. |
       * | `description_append` | `string` | Appends the string specified in the modifier to the description of the child product. |
       * | `description_prepend` | `string` | Prepends the string specified in the modifier to the product description of the child product. |
       * | `commodity_type` | `string` | Sets the commodity type of the child product, such as `physical` or `digital`. |
       * | `price` | `string` | Allows application of price modifiers (`price_increment`, `price_decrement`, and `price_equals`) to the child products. |
       * | `price_increment` | `string` | Increases the price of the child product. |
       * | `price_decrement` | `string` | Decreases the price of the child product. |
       * | `price_equals` | `string` | Sets the price of a child product to the amount you specify. |
       * | `slug_append` | `string` | Appends the string specified in the modifier to the slug of the child product. Can only contain A-Z, a-z, 0 to 9, hyphen, underscore, and period. Spaces or other special characters like ^, [], *, and $ are not allowed. However, for the `slug-builder` modifier, you can use `{}` in the `seek` field, for example, `"seek": :{COLOR}"`. |
       * | `slug_prepend` | `string` | Prepends the string specified in the modifier to the slug of the child product. Can only contain A-Z, a-z, 0 to 9, hyphen, underscore, and period. Spaces or other special characters like ^, [], *, and $ are not allowed. However, for the `slug-builder` modifier, you can use `{}` in the `seek` field, for example, `"seek": :{COLOR}"`. |
       * | `slug_builder` | `string`| Sets a part of the slug of the child product. Can only contain A-Z, a-z, 0 to 9, hyphen, underscore, and period. Spaces or other special characters like ^, [], *, and $ are not allowed. However, for the `slug-builder` modifier, you can use `{}` in the `seek` field, for example, `"seek": :{COLOR}"`. |
       * | `sku_equals` | `string` | Sets the SKU of the child product. |
       * | `sku_append` | `string` | Appends the string specified in the modifier to the SKU of the child product. |
       * | `sku_prepend` | `string` | Prepends the string specified in the modifier to the SKU of the child product. |
       * | `sku_builder` | `string` | Sets a part of the SKU of the child product. |
       * | `status` | `string` | Sets the status of the child product, such as `draft` or `live`. |
       *
       */
      type?:
        | "commodity_type"
        | "status"
        | "price"
        | "name_append"
        | "name_prepend"
        | "name_equals"
        | "sku_append"
        | "sku_prepend"
        | "sku_equals"
        | "sku_builder"
        | "slug_append"
        | "slug_prepend"
        | "slug_equals"
        | "slug_builder"
        | "description_append"
        | "description_prepend"
        | "description_equals"
        | "custom_inputs_equals"
        | "build_rules_equals"
        | "locales_equals"
        | "upc_ean_equals"
        | "mpn_equals"
        | "external_ref_equals"
      /**
       * Required for non-builder modifiers. The value of the modifier type.
       */
      value?: string
      /**
       * Required for builder modifiers. The sub-string to find and replace enclosed in curly brackets for `slug_builder` and `sku_builder`.
       */
      seek?: string
      /**
       * Required for builder modifiers. The value to replace matches the `seek` string for `slug_builder` and `sku_builder`.
       */
      set?: string
      /**
       * The name of the modifier.
       */
      reference_name?: string
    }
    meta?: {
      /**
       * The owner of the resource, either `organization` or `store`.
       */
      owner?: "organization" | "store"
    }
  }
}

export type SingleModifier = {
  data?: {
    /**
     * A unique identifier for a modifier that is generated automatically when a modifier is created.
     */
    id?: string
    /**
     * This represents the type of resource object being returned. Always `product-variation-modifier`.
     */
    type?: "product-variation-modifier"
    attributes?: {
      /**
       * You can specify different modifiers for different options in a variation. When you build child products using options in variations, the properties of a child products depends on the modifier set for the options that are applied to the child product. The table below describes the different types of modifiers.
       *
       * | Modifier | Data Type | Effect |
       * | :--- | :--- | :--- |
       * | `name_equals` | `string` | Overrides the name of the child product with the name specified by the modifier. |
       * | `name_append` | `string` | Appends the string specified in the modifier to the name of the child product. |
       * | `name_prepend` | `string` | Prepends the string specified in the modifier to the name of the child product. |
       * | `description_equals` | `string` | Overrides the description of the child product. |
       * | `description_append` | `string` | Appends the string specified in the modifier to the description of the child product. |
       * | `description_prepend` | `string` | Prepends the string specified in the modifier to the product description of the child product. |
       * | `commodity_type` | `string` | Sets the commodity type of the child product, such as `physical` or `digital`. |
       * | `price` | `string` | Allows application of price modifiers (`price_increment`, `price_decrement`, and `price_equals`) to the child products. |
       * | `price_increment` | `string` | Increases the price of the child product. |
       * | `price_decrement` | `string` | Decreases the price of the child product. |
       * | `price_equals` | `string` | Sets the price of a child product to the amount you specify. |
       * | `slug_append` | `string` | Appends the string specified in the modifier to the slug of the child product. Can only contain A-Z, a-z, 0 to 9, hyphen, underscore, and period. Spaces or other special characters like ^, [], *, and $ are not allowed. However, for the `slug-builder` modifier, you can use `{}` in the `seek` field, for example, `"seek": :{COLOR}"`. |
       * | `slug_prepend` | `string` | Prepends the string specified in the modifier to the slug of the child product. Can only contain A-Z, a-z, 0 to 9, hyphen, underscore, and period. Spaces or other special characters like ^, [], *, and $ are not allowed. However, for the `slug-builder` modifier, you can use `{}` in the `seek` field, for example, `"seek": :{COLOR}"`. |
       * | `slug_builder` | `string`| Sets a part of the slug of the child product. Can only contain A-Z, a-z, 0 to 9, hyphen, underscore, and period. Spaces or other special characters like ^, [], *, and $ are not allowed. However, for the `slug-builder` modifier, you can use `{}` in the `seek` field, for example, `"seek": :{COLOR}"`. |
       * | `sku_equals` | `string` | Sets the SKU of the child product. |
       * | `sku_append` | `string` | Appends the string specified in the modifier to the SKU of the child product. |
       * | `sku_prepend` | `string` | Prepends the string specified in the modifier to the SKU of the child product. |
       * | `sku_builder` | `string` | Sets a part of the SKU of the child product. |
       * | `status` | `string` | Sets the status of the child product, such as `draft` or `live`. |
       *
       */
      type?:
        | "commodity_type"
        | "status"
        | "price"
        | "name_append"
        | "name_prepend"
        | "name_equals"
        | "sku_append"
        | "sku_prepend"
        | "sku_equals"
        | "sku_builder"
        | "slug_append"
        | "slug_prepend"
        | "slug_equals"
        | "slug_builder"
        | "description_append"
        | "description_prepend"
        | "description_equals"
        | "custom_inputs_equals"
        | "build_rules_equals"
        | "locales_equals"
        | "upc_ean_equals"
        | "mpn_equals"
        | "external_ref_equals"
      /**
       * Required for non-builder modifiers. The value of the modifier type.
       */
      value?: string
      /**
       * Required for builder modifiers. The sub-string to find and replace enclosed in curly brackets for `slug_builder` and `sku_builder`.
       */
      seek?: string
      /**
       * Required for builder modifiers. The value to replace matches the `seek` string for `slug_builder` and `sku_builder`.
       */
      set?: string
      /**
       * The name of the modifier.
       */
      reference_name?: string
    }
    /**
     * The owner of the resource, either `organization` or `store`.
     */
    meta?: {
      owner?: "organization" | "store"
    }
  }
}

export type UpdateModifier = {
  data: {
    /**
     * This represents the type of resource object being returned. Always `product-variation-modifier`.
     */
    type: "product-variation-modifier"
    attributes: {
      /**
       * You can specify different modifiers for different options in a variation. When you build child products using options in variations, the properties of a child products depends on the modifier set for the options that are applied to the child product. The table below describes the different types of modifiers.
       *
       * | Modifier | Data Type | Effect |
       * | :--- | :--- | :--- |
       * | `name_equals` | `string` | Overrides the name of the child product with the name specified by the modifier. |
       * | `name_append` | `string` | Appends the string specified in the modifier to the name of the child product. |
       * | `name_prepend` | `string` | Prepends the string specified in the modifier to the name of the child product. |
       * | `description_equals` | `string` | Overrides the description of the child product. |
       * | `description_append` | `string` | Appends the string specified in the modifier to the description of the child product. |
       * | `description_prepend` | `string` | Prepends the string specified in the modifier to the product description of the child product. |
       * | `commodity_type` | `string` | Sets the commodity type of the child product, such as `physical` or `digital`. |
       * | `price` | `string` | Allows application of price modifiers (`price_increment`, `price_decrement`, and `price_equals`) to the child products. |
       * | `price_increment` | `string` | Increases the price of the child product. |
       * | `price_decrement` | `string` | Decreases the price of the child product. |
       * | `price_equals` | `string` | Sets the price of a child product to the amount you specify. |
       * | `slug_append` | `string` | Appends the string specified in the modifier to the slug of the child product. Can only contain A-Z, a-z, 0 to 9, hyphen, underscore, and period. Spaces or other special characters like ^, [], *, and $ are not allowed. However, for the `slug-builder` modifier, you can use `{}` in the `seek` field, for example, `"seek": :{COLOR}"`. |
       * | `slug_prepend` | `string` | Prepends the string specified in the modifier to the slug of the child product. Can only contain A-Z, a-z, 0 to 9, hyphen, underscore, and period. Spaces or other special characters like ^, [], *, and $ are not allowed. However, for the `slug-builder` modifier, you can use `{}` in the `seek` field, for example, `"seek": :{COLOR}"`. |
       * | `slug_builder` | `string`| Sets a part of the slug of the child product. Can only contain A-Z, a-z, 0 to 9, hyphen, underscore, and period. Spaces or other special characters like ^, [], *, and $ are not allowed. However, for the `slug-builder` modifier, you can use `{}` in the `seek` field, for example, `"seek": :{COLOR}"`. |
       * | `sku_equals` | `string` | Sets the SKU of the child product. |
       * | `sku_append` | `string` | Appends the string specified in the modifier to the SKU of the child product. |
       * | `sku_prepend` | `string` | Prepends the string specified in the modifier to the SKU of the child product. |
       * | `sku_builder` | `string` | Sets a part of the SKU of the child product. |
       * | `status` | `string` | Sets the status of the child product, such as `draft` or `live`. |
       *
       */
      type:
        | "commodity_type"
        | "status"
        | "price"
        | "name_append"
        | "name_prepend"
        | "name_equals"
        | "sku_append"
        | "sku_prepend"
        | "sku_equals"
        | "sku_builder"
        | "slug_append"
        | "slug_prepend"
        | "slug_equals"
        | "slug_builder"
        | "description_append"
        | "description_prepend"
        | "description_equals"
        | "custom_inputs_equals"
        | "build_rules_equals"
        | "locales_equals"
        | "upc_ean_equals"
        | "mpn_equals"
        | "external_ref_equals"
      /**
       * Required for non-builder modifiers. The value of the modifier type.
       */
      value?: string
      /**
       * Required for builder modifiers. The sub-string to find and replace enclosed in curly brackets for `slug_builder` and `sku_builder`.
       */
      seek?: string
      /**
       * Required for builder modifiers. The value to replace matches the `seek` string for `slug_builder` and `sku_builder`.
       */
      set?: string
      /**
       * The name of the modifier.
       */
      reference_name?: string
    }
    /**
     * The unique identifier of the modifier. Must match the modifier ID specified in the request path.
     */
    id: string
  }
}

export type AttributesHierarchy = {
  /**
   * The name of a hierarchy, such as `Major Appliances`.
   */
  name?: string
  /**
   * A description for a hierarchy.
   */
  description?: string
  /**
   * A unique slug for a hierarchy.
   */
  slug?: string
  admin_attributes?: AdminAttributes
  shopper_attributes?: ShopperAttributes
  /**
   * Product Experience Manager supports localization of hierarchies and nodes. If you store supports multiple languages, you can localize hierarchy and node names and descriptions.
   */
  locales?: {
    [key: string]: {
      /**
       * A localized hierarchy or node name.
       */
      name?: string
      /**
       * A localized hierarchy or node description.
       */
      description?: string
    }
  }
}

export type RelationshipsHierarchy = {
  /**
   * The child nodes related to the hierarchy.
   */
  children?: {
    /**
     * An array of child nodes.
     */
    data?: Array<unknown>
    /**
     * Links allow you to move between requests.
     */
    links?: {
      /**
       * A link to a related resource.
       */
      related?: string
    }
  }
}

export type Hierarchy = {
  /**
   * A unique identifier generated when a hierarchy is created.
   */
  id: string
  /**
   * This represents the type of resource object being returned. Always `hierarchy`.
   */
  type: "hierarchy"
  attributes: AttributesHierarchy
  relationships: RelationshipsHierarchy
  meta: {
    /**
     * The date and time a hierarchy is created.
     */
    created_at?: Date
    /**
     * The date and time a hierarchy is updated.
     */
    updated_at?: Date
    /**
     * The owner of a resource, either `organization` or `store`.
     */
    owner?: "store" | "organization"
    /**
     * Breadcrumbs
     */
    breadcrumbs?: Array<{
      /**
       * A unique identifier generated when a hierarchy is created.
       */
      id?: string
      /**
       * The name of a hierarchy, such as `Major Appliances`.
       */
      name?: string
      /**
       * A unique slug for a hierarchy.
       */
      slug?: string
      /**
       * Product Experience Manager supports localization of hierarchies and nodes. If you store supports multiple languages, you can localize hierarchy and node names and descriptions.
       */
      locales?: {
        [key: string]: {
          /**
           * A localized hierarchy or node name.
           */
          name?: string
        }
      }
    }>
  }
}

export type MultiHierarchy = {
  data: Array<Hierarchy>
  links?: MultiLinks
  meta?: MultiMeta
}

export type ReqAttributesHierarchy = {
  /**
   * The name of the hierarchy, such as `Major Appliances`.
   */
  name?: string
  /**
   * A description of the hierarchy.
   */
  description?: string
  /**
   * A unique slug for the hierarchy.
   */
  slug?: string
  admin_attributes?: AdminAttributes
  shopper_attributes?: ShopperAttributes
  /**
   * Product Experience Manager supports localization of products and hierarchies. If your store supports multiple languages, you can localize product names and descriptions. You can have as many locales as you want.
   */
  locales?: {
    [key: string]: {
      /**
       * A localized name for the hierarchy.
       */
      name?: string
      /**
       * A localized description for the hierarchy.
       */
      description?: string
    }
  }
}

export type CreateHierarchy = {
  data: {
    /**
     * This represents the type of resource object being returned. Always `hierarchy`.
     */
    type: "hierarchy"
    attributes: ReqAttributesHierarchy
  }
}

export type SingleHierarchy = {
  data: Hierarchy
}

export type UpdateHierarchy = {
  data: {
    /**
     * The unique identifier of the hierarchy. Must match the hierarchy ID specified in the request path.
     */
    id: string
    /**
     * This represents the type of resource object being returned. Always `hierarchy`.
     */
    type: "hierarchy"
    attributes: ReqAttributesHierarchy
  }
}

export type AttributesNodes = {
  /**
   * The name of the node, such as `Ranges` or `Refrigerators`. Names must be unique among sibling nodes in the hierarchy. Otherwise, a name can be non-unique within the hierarchy and across multiple hierarchies.
   */
  name?: string
  /**
   * A description of the node.
   */
  description?: string
  /**
   * A slug for the node. Slugs must be unique among sibling nodes in the hierarchy. Otherwise, a slug can be non-unique within the hierarchy and across multiple hierarchies.
   */
  slug?: string
  /**
   * You can curate your products in your nodes product lists. Product curation allows you to promote specific products within each node in a hierarchy, enabling you to create unique product collections in your storefront. See [Curating Products in a Node](/docs/api/pxm/products/create-node#curating-products-in-a-node).
   */
  curated_products?: Array<string>
  admin_attributes?: AdminAttributes
  shopper_attributes?: ShopperAttributes
  /**
   * Product Experience Manager supports localization of products and hierarchies. If your store supports multiple languages, you can localize product names and descriptions. You can have as many locales as you want.
   */
  locales?: {
    [key: string]: {
      /**
       * A localized name for the node.
       */
      name?: string
      /**
       * A localized description for the node.
       */
      description?: string
    }
  }
}

export type CreateNode = {
  data: {
    /**
     * This represents the type of resource object being returned. Always `node`.
     */
    type: "node"
    attributes: AttributesNodes
    meta?: {
      /**
       * You can sort the order of your nodes, regardless of where the nodes are in the hierarchy. The `sort_order` for each node. This value determines the order of nodes in the response for the `Get a Node’s Children` request. The node with the highest value of sort_order is displayed first. For example, a node with a sort_order value of 3 appears before a node with a sort_order value of 2.
       *
       * - If you don’t provide `sort_order` when creating nodes, all child nodes in the response for `Get a Node’s Children` request are ordered by the `updated_at` time in descending order, with the most recently updated child node first.
       * - If you set `sort_order` for only a few child nodes or not all, the child nodes with a `sort_order` value appear first and then other child nodes appear in the order of `updated_at` time. See [Sorting Nodes in a hierarchy]().
       *
       */
      sort_order?: number
    }
  }
}

export type SingleNode = {
  data: Node
}

export type UpdateNode = {
  data: {
    /**
     * The unique identifier of the node. Must match the node ID specified in the request path.
     */
    id: string
    /**
     * This represents the type of resource object being returned. Always `node`.
     */
    type: "node"
    attributes: AttributesNodes
    meta?: {
      /**
       * You can sort the order of your nodes, regardless of where the nodes are in the hierarchy. The `sort_order` for each node. This value determines the order of nodes in the response for the `Get a Node’s Children` request. The node with the highest value of sort_order is displayed first. For example, a node with a sort_order value of 3 appears before a node with a sort_order value of 2.
       *
       * - If you don’t provide `sort_order` when creating nodes, all child nodes in the response for `Get a Node’s Children` request are ordered by the `updated_at` time in descending order, with the most recently updated child node first.
       * - If you set `sort_order` for only a few child nodes or not all, the child nodes with a `sort_order` value appear first and then other child nodes appear in the order of `updated_at` time.
       *
       */
      sort_order?: number
    }
  }
}

export type NodeChildren = {
  data: Array<{
    /**
     * The unique identifier of the child node. Must not match the node ID specified in the request path.
     */
    id: string
    /**
     * This represents the type of resource object being returned. Always `node`.
     */
    type: "node"
  }>
}

export type NodeParent = {
  data: {
    /**
     * The unique identifier of the new parent node. Must not match the node ID specified in the request path.
     */
    id: string
    /**
     * This represents the type of resource object being returned. Always `node`.
     */
    type: "node"
  }
}

export type NodeProducts = {
  data: Array<{
    /**
     * The unique identifier of the product to be attached to the node.
     */
    id: string
    /**
     * This represents the type of resource object being returned. Always `product`.
     */
    type: "product"
  }>
}

export type DuplicateJob = {
  data: {
    /**
     * This represents the type of resource object being returned. Always `hierarchy`.
     */
    type?: "hierarchy"
    attributes?: {
      /**
       * The name of the duplicate hierarchy. The maximum length is 1000 characters.
       */
      name?: string
      /**
       * A description of the duplicate hierarchy.
       */
      description?: string
      /**
       * Specify `true` if you want the product associations in the existing nodes associated in your duplicated hierarchy. If not, specify `false`.
       */
      include_products?: boolean
    }
  }
}

export type Tag = {
  /**
   * A unique identifier generated when a tag is created.
   */
  id?: string
  /**
   * This represents the type of resource object being returned. Always `tag`.
   */
  type?: "tag"
  attributes?: {
    /**
     * The text value of the tag.
     */
    value?: string
  }
  meta?: {
    /**
     * A unique request ID is generated when a tag is created.
     */
    x_request_id?: string
    /**
     * The date and time a tag is created.
     */
    created_at?: Date
    /**
     * The date and time a tag is updated.
     */
    updated_at?: Date
    /**
     * The owner of a resource, either `organization` or `store`.
     */
    owner?: "store" | "organization"
  }
}

export type MultiTag = {
  /**
   * An array of tags.
   */
  data?: Array<Tag>
  meta?: {
    /**
     * Contains the results for the entire collection.
     */
    results?: {
      /**
       * Total number of results for the entire collection.
       */
      total?: number
    }
  }
}

export type SingleTag = {
  data?: Tag
}

export type CreateCustomRelationship = {
  data: {
    /**
     * This represents the type of resource object being returned. Always `custom-relationship`.
     */
    type: "custom-relationship"
    attributes: ReqAttributesCustomRelationship
  }
}

export type SingleCustomRelationship = {
  data: CustomRelationship
}

export type UpdateCustomRelationship = {
  data: {
    /**
     * The unique identifier of the custom relationship.
     */
    id: string
    /**
     * This represents the type of resource object being returned. Always `custom-relationship`.
     */
    type: "custom-relationship"
    attributes: ReqAttributesCustomRelationship
  }
}

/**
 * A unique identifier for the job.
 */
export type JobId = string

/**
 * The number of records to offset the results by.
 */
export type PageOffset = BigInt

/**
 * The number of records per page. The maximum limit is 100.
 */
export type PageLimit = BigInt

/**
 * Many Commerce API endpoints support filtering. The general syntax is described [**here**](/guides/Getting-Started/filtering).
 *
 * For more information about the attributes and operators that are supported, see [Get all products](/docs/api/pxm/products/get-all-products).
 *
 */
export type Filterproduct = string

/**
 * Using the include parameter, you can retrieve top-level resources.
 *
 * - Files or main image. For example, `include=files,main_image`.
 * - Component product data. For example, `include=component_products`.
 * - Key attribute data, such as SKU or slug.
 *
 */
export type Include = unknown

/**
 * Set to `true` if you want to use a template slug instead of a template ID when exporting products that have custom data.
 */
export type UseTemplateSlugs = boolean

/**
 *
 * Many Commerce API endpoints support filtering. The general syntax is described [**here**](/guides/Getting-Started/filtering), but you must go to a specific endpoint to understand the attributes and operators an endpoint supports.
 *
 * For more information about the attributes and operators that this endpoint supports, see [Export Products](/docs/api/pxm/products/export-products).
 *
 */
export type Filterexport = string

/**
 * A unique identifier for the product.
 */
export type ProductId = string

/**
 * A custom relationship slug.
 */
export type CustomRelationshipSlug = string

/**
 * A unique identifier for the variation.
 */
export type VariationId = string

/**
 * A unique identifier for the option.
 */
export type OptionId = string

/**
 * A unique identifier for the modifier.
 */
export type ModifierId = string

/**
 * Many Commerce API endpoints support filtering. The general syntax is described [**here**](/guides/Getting-Started/filtering).
 *
 */
export type FilterNodes = string

/**
 * A unique identifier for the hierarchy.
 */
export type HierarchyId = string

/**
 * A unique identifier for the node.
 */
export type NodeId = string

/**
 * A unique identifier for the tag.
 */
export type TagId = string

/**
 * Many Commerce API endpoints support filtering. The general syntax is described [**here**](/guides/Getting-Started/filtering).
 *
 */
export type Filtercr = string

export type GetAllJobsData = {
  body?: never
  path?: never
  query?: never
  url: "/pcm/jobs"
}

export type GetAllJobsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetAllJobsError = GetAllJobsErrors[keyof GetAllJobsErrors]

export type GetAllJobsResponses = {
  /**
   * Returns all the jobs.
   */
  200: Multi
}

export type GetAllJobsResponse = GetAllJobsResponses[keyof GetAllJobsResponses]

export type GetJobData = {
  body?: never
  path: {
    /**
     * A unique identifier for the job.
     */
    jobID: string
  }
  query?: never
  url: "/pcm/jobs/{jobID}"
}

export type GetJobErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetJobError = GetJobErrors[keyof GetJobErrors]

export type GetJobResponses = {
  /**
   * Returns a job with the following attributes.
   */
  200: Single
}

export type GetJobResponse = GetJobResponses[keyof GetJobResponses]

export type CancelJobData = {
  body?: {
    [key: string]: unknown
  }
  path: {
    /**
     * A unique identifier for the job.
     */
    jobID: string
  }
  query?: never
  url: "/pcm/jobs/{jobID}/cancel"
}

export type CancelJobErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type CancelJobError = CancelJobErrors[keyof CancelJobErrors]

export type CancelJobResponses = {
  /**
   * Successfully cancelled job
   */
  200: Single
}

export type CancelJobResponse = CancelJobResponses[keyof CancelJobResponses]

export type GetJobErrorsData = {
  body?: never
  path: {
    /**
     * A unique identifier for the job.
     */
    jobID: string
  }
  query?: never
  url: "/pcm/jobs/{jobID}/errors"
}

export type GetJobErrorsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetJobErrorsError = GetJobErrorsErrors[keyof GetJobErrorsErrors]

export type GetJobErrorsResponses = {
  /**
   * Successful
   */
  200: Errors
}

export type GetJobErrorsResponse =
  GetJobErrorsResponses[keyof GetJobErrorsResponses]

export type GetAllProductsData = {
  body?: never
  path?: never
  query?: {
    /**
     * The number of records to offset the results by.
     */
    "page[offset]"?: BigInt
    /**
     * The number of records per page. The maximum limit is 100.
     */
    "page[limit]"?: BigInt
    /**
     * Many Commerce API endpoints support filtering. The general syntax is described [**here**](/guides/Getting-Started/filtering).
     *
     * For more information about the attributes and operators that are supported, see [Get all products](/docs/api/pxm/products/get-all-products).
     *
     */
    filter?: string
    /**
     * Using the include parameter, you can retrieve top-level resources.
     *
     * - Files or main image. For example, `include=files,main_image`.
     * - Component product data. For example, `include=component_products`.
     * - Key attribute data, such as SKU or slug.
     *
     */
    include?: unknown
  }
  url: "/pcm/products"
}

export type GetAllProductsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetAllProductsError =
  GetAllProductsErrors[keyof GetAllProductsErrors]

export type GetAllProductsResponses = {
  /**
   * Returns a list of all products.
   */
  200: MultiProductResponse
}

export type GetAllProductsResponse =
  GetAllProductsResponses[keyof GetAllProductsResponses]

export type CreateProductData = {
  body: CreateProductRequest
  path?: never
  query?: never
  url: "/pcm/products"
}

export type CreateProductErrors = {
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type CreateProductError = CreateProductErrors[keyof CreateProductErrors]

export type CreateProductResponses = {
  /**
   * Creates a product with the following attributes.
   */
  201: SingleProductResponse
}

export type CreateProductResponse =
  CreateProductResponses[keyof CreateProductResponses]

export type ImportProductsData = {
  body?: {
    /**
     * The file you want to upload. Ensure that the file format is Comma Separated Values (CSV).
     */
    file?: Blob | File
  }
  path?: never
  query?: never
  url: "/pcm/products/import"
}

export type ImportProductsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type ImportProductsError =
  ImportProductsErrors[keyof ImportProductsErrors]

export type ImportProductsResponses = {
  /**
   * Import started
   */
  201: Single
}

export type ImportProductsResponse =
  ImportProductsResponses[keyof ImportProductsResponses]

export type ExportProductsData = {
  body?: {
    [key: string]: unknown
  }
  path?: never
  query?: {
    /**
     * Set to `true` if you want to use a template slug instead of a template ID when exporting products that have custom data.
     */
    useTemplateSlugs?: boolean
    /**
     *
     * Many Commerce API endpoints support filtering. The general syntax is described [**here**](/guides/Getting-Started/filtering), but you must go to a specific endpoint to understand the attributes and operators an endpoint supports.
     *
     * For more information about the attributes and operators that this endpoint supports, see [Export Products](/docs/api/pxm/products/export-products).
     *
     */
    filter?: string
  }
  url: "/pcm/products/export"
}

export type ExportProductsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type ExportProductsError =
  ExportProductsErrors[keyof ExportProductsErrors]

export type ExportProductsResponses = {
  /**
   * Export started
   */
  201: Single
}

export type ExportProductsResponse =
  ExportProductsResponses[keyof ExportProductsResponses]

export type DeleteProductData = {
  body?: never
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
  }
  query?: never
  url: "/pcm/products/{productID}"
}

export type DeleteProductErrors = {
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type DeleteProductError = DeleteProductErrors[keyof DeleteProductErrors]

export type DeleteProductResponses = {
  /**
   * Deletes the specified product.
   */
  204: void
}

export type DeleteProductResponse =
  DeleteProductResponses[keyof DeleteProductResponses]

export type GetProductData = {
  body?: never
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
  }
  query?: {
    /**
     * Using the include parameter, you can retrieve top-level resources.
     *
     * - Files or main image. For example, `include=files,main_image`.
     * - Component product data. For example, `include=component_products`.
     * - Key attribute data, such as SKU or slug.
     *
     */
    include?: unknown
  }
  url: "/pcm/products/{productID}"
}

export type GetProductErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetProductError = GetProductErrors[keyof GetProductErrors]

export type GetProductResponses = {
  /**
   * Returns a product by its identifier.
   */
  200: SingleProductResponse
}

export type GetProductResponse = GetProductResponses[keyof GetProductResponses]

export type UpdateProductData = {
  body?: UpdateProductRequest
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
  }
  query?: never
  url: "/pcm/products/{productID}"
}

export type UpdateProductErrors = {
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type UpdateProductError = UpdateProductErrors[keyof UpdateProductErrors]

export type UpdateProductResponses = {
  /**
   * Updates a product with the following attributes.
   */
  200: SingleProductResponse
}

export type UpdateProductResponse =
  UpdateProductResponses[keyof UpdateProductResponses]

export type AttachNodesData = {
  body: {
    data: {
      /**
       * Filters applied to search for appropriate products to attach to a node. See [Attach multiple nodes](/docs/api/pxm/products/attach-nodes).
       *
       */
      filter: string
      /**
       * A list of node unique identifiers that you want to assign to the products.
       */
      node_ids: Array<string>
    }
  }
  path?: never
  query?: never
  url: "/pcm/products/attach_nodes"
}

export type AttachNodesErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type AttachNodesError = AttachNodesErrors[keyof AttachNodesErrors]

export type AttachNodesResponses = {
  /**
   * This request assigns the products that you have selected to multiple hierarchies and their children nodes and returns the following.
   */
  200: {
    meta?: {
      /**
       * Number of nodes assigned to the products.
       */
      nodes_attached?: number
      /**
       * A list of node unique identifiers that could not be identified.
       */
      nodes_not_found?: Array<string>
    }
  }
}

export type AttachNodesResponse =
  AttachNodesResponses[keyof AttachNodesResponses]

export type DetachNodesData = {
  body: {
    data: {
      /**
       * You can apply filters to search for the appropriate products to detach. See [Detach multiple nodes](/docs/api/pxm/products/detach-nodes).
       *
       */
      filter: string
      /**
       * A list of node unique identifiers that you want to assign to the products.
       */
      node_ids: Array<string>
    }
  }
  path?: never
  query?: never
  url: "/pcm/products/detach_nodes"
}

export type DetachNodesErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type DetachNodesError = DetachNodesErrors[keyof DetachNodesErrors]

export type DetachNodesResponses = {
  /**
   * The request dissociates the products that you have selected from multiple hierarchies and their children and returns the following.
   */
  200: {
    meta?: {
      /**
       * Number of nodes dissociated from the products.
       */
      nodes_detached?: number
      /**
       * A list of node unique identifiers that could not be identified.
       */
      nodes_not_found?: Array<string>
    }
  }
}

export type DetachNodesResponse =
  DetachNodesResponses[keyof DetachNodesResponses]

export type GetProductsNodesData = {
  body?: never
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
  }
  query?: {
    /**
     * The number of records to offset the results by.
     */
    "page[offset]"?: BigInt
    /**
     * The number of records per page. The maximum limit is 100.
     */
    "page[limit]"?: BigInt
  }
  url: "/pcm/products/{productID}/nodes"
}

export type GetProductsNodesErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetProductsNodesError =
  GetProductsNodesErrors[keyof GetProductsNodesErrors]

export type GetProductsNodesResponses = {
  /**
   * Successfully returns the product's nodes.
   */
  200: MultiNodes
}

export type GetProductsNodesResponse =
  GetProductsNodesResponses[keyof GetProductsNodesResponses]

export type BuildChildProductsData = {
  body?: {
    [key: string]: unknown
  }
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
  }
  query?: never
  url: "/pcm/products/{productID}/build"
}

export type BuildChildProductsErrors = {
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type BuildChildProductsError =
  BuildChildProductsErrors[keyof BuildChildProductsErrors]

export type BuildChildProductsResponses = {
  /**
   * Successfully started building child products
   */
  201: Single
}

export type BuildChildProductsResponse =
  BuildChildProductsResponses[keyof BuildChildProductsResponses]

export type GetChildProductsData = {
  body?: never
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
  }
  query?: never
  url: "/pcm/products/{productID}/children"
}

export type GetChildProductsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetChildProductsError =
  GetChildProductsErrors[keyof GetChildProductsErrors]

export type GetChildProductsResponses = {
  /**
   * Returns a list of child products for the specified parent product ID.
   */
  200: MultiProductResponse
}

export type GetChildProductsResponse =
  GetChildProductsResponses[keyof GetChildProductsResponses]

export type DeleteProductTemplateRelationshipData = {
  body?: ProductTemplatesRequest
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
  }
  query?: never
  url: "/pcm/products/{productID}/relationships/templates"
}

export type DeleteProductTemplateRelationshipErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type DeleteProductTemplateRelationshipError =
  DeleteProductTemplateRelationshipErrors[keyof DeleteProductTemplateRelationshipErrors]

export type DeleteProductTemplateRelationshipResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteProductTemplateRelationshipResponse =
  DeleteProductTemplateRelationshipResponses[keyof DeleteProductTemplateRelationshipResponses]

export type GetProductTemplateRelationshipsData = {
  body?: never
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
  }
  query?: never
  url: "/pcm/products/{productID}/relationships/templates"
}

export type GetProductTemplateRelationshipsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetProductTemplateRelationshipsError =
  GetProductTemplateRelationshipsErrors[keyof GetProductTemplateRelationshipsErrors]

export type GetProductTemplateRelationshipsResponses = {
  /**
   * Returns all product template relationships.
   */
  200: TemplateResponse
}

export type GetProductTemplateRelationshipsResponse =
  GetProductTemplateRelationshipsResponses[keyof GetProductTemplateRelationshipsResponses]

export type CreateProductTemplateRelationshipData = {
  body?: ProductTemplatesRequest
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
  }
  query?: never
  url: "/pcm/products/{productID}/relationships/templates"
}

export type CreateProductTemplateRelationshipErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type CreateProductTemplateRelationshipError =
  CreateProductTemplateRelationshipErrors[keyof CreateProductTemplateRelationshipErrors]

export type CreateProductTemplateRelationshipResponses = {
  /**
   * Returns a created product template relationship.
   */
  201: TemplateResponse
}

export type CreateProductTemplateRelationshipResponse =
  CreateProductTemplateRelationshipResponses[keyof CreateProductTemplateRelationshipResponses]

export type GetProductComponentProductsRelationshipsData = {
  body?: never
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
  }
  query?: never
  url: "/pcm/products/{productID}/relationships/component_products"
}

export type GetProductComponentProductsRelationshipsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetProductComponentProductsRelationshipsError =
  GetProductComponentProductsRelationshipsErrors[keyof GetProductComponentProductsRelationshipsErrors]

export type GetProductComponentProductsRelationshipsResponses = {
  /**
   * Returns all Component Products relationships.
   */
  200: ComponentProductsResponse
}

export type GetProductComponentProductsRelationshipsResponse =
  GetProductComponentProductsRelationshipsResponses[keyof GetProductComponentProductsRelationshipsResponses]

export type DeleteProductFileRelationshipsData = {
  body?: ProductFilesRequest
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
  }
  query?: never
  url: "/pcm/products/{productID}/relationships/files"
}

export type DeleteProductFileRelationshipsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type DeleteProductFileRelationshipsError =
  DeleteProductFileRelationshipsErrors[keyof DeleteProductFileRelationshipsErrors]

export type DeleteProductFileRelationshipsResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteProductFileRelationshipsResponse =
  DeleteProductFileRelationshipsResponses[keyof DeleteProductFileRelationshipsResponses]

export type GetProductFileRelationshipsData = {
  body?: never
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
  }
  query?: never
  url: "/pcm/products/{productID}/relationships/files"
}

export type GetProductFileRelationshipsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetProductFileRelationshipsError =
  GetProductFileRelationshipsErrors[keyof GetProductFileRelationshipsErrors]

export type GetProductFileRelationshipsResponses = {
  /**
   * Returns all product file relationships.
   */
  200: FileResponse
}

export type GetProductFileRelationshipsResponse =
  GetProductFileRelationshipsResponses[keyof GetProductFileRelationshipsResponses]

export type CreateProductFileRelationshipsData = {
  body?: ProductFilesRequest
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
  }
  query?: never
  url: "/pcm/products/{productID}/relationships/files"
}

export type CreateProductFileRelationshipsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type CreateProductFileRelationshipsError =
  CreateProductFileRelationshipsErrors[keyof CreateProductFileRelationshipsErrors]

export type CreateProductFileRelationshipsResponses = {
  /**
   * No Content
   */
  204: void
}

export type CreateProductFileRelationshipsResponse =
  CreateProductFileRelationshipsResponses[keyof CreateProductFileRelationshipsResponses]

export type UpdateProductFileRelationshipsData = {
  body?: ProductFilesRequest
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
  }
  query?: never
  url: "/pcm/products/{productID}/relationships/files"
}

export type UpdateProductFileRelationshipsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type UpdateProductFileRelationshipsError =
  UpdateProductFileRelationshipsErrors[keyof UpdateProductFileRelationshipsErrors]

export type UpdateProductFileRelationshipsResponses = {
  /**
   * No Content
   */
  204: void
}

export type UpdateProductFileRelationshipsResponse =
  UpdateProductFileRelationshipsResponses[keyof UpdateProductFileRelationshipsResponses]

export type DeleteProductVariationRelationshipsData = {
  body?: ProductVariationsRequest
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
  }
  query?: never
  url: "/pcm/products/{productID}/relationships/variations"
}

export type DeleteProductVariationRelationshipsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type DeleteProductVariationRelationshipsError =
  DeleteProductVariationRelationshipsErrors[keyof DeleteProductVariationRelationshipsErrors]

export type DeleteProductVariationRelationshipsResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteProductVariationRelationshipsResponse =
  DeleteProductVariationRelationshipsResponses[keyof DeleteProductVariationRelationshipsResponses]

export type GetProductVariationRelationshipsData = {
  body?: never
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
  }
  query?: never
  url: "/pcm/products/{productID}/relationships/variations"
}

export type GetProductVariationRelationshipsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetProductVariationRelationshipsError =
  GetProductVariationRelationshipsErrors[keyof GetProductVariationRelationshipsErrors]

export type GetProductVariationRelationshipsResponses = {
  /**
   * Returns all product variation relationships.
   */
  200: VariationsResponse
}

export type GetProductVariationRelationshipsResponse =
  GetProductVariationRelationshipsResponses[keyof GetProductVariationRelationshipsResponses]

export type CreateProductVariationRelationshipsData = {
  body?: ProductVariationsRequest
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
  }
  query?: never
  url: "/pcm/products/{productID}/relationships/variations"
}

export type CreateProductVariationRelationshipsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type CreateProductVariationRelationshipsError =
  CreateProductVariationRelationshipsErrors[keyof CreateProductVariationRelationshipsErrors]

export type CreateProductVariationRelationshipsResponses = {
  /**
   * No Content
   */
  204: void
}

export type CreateProductVariationRelationshipsResponse =
  CreateProductVariationRelationshipsResponses[keyof CreateProductVariationRelationshipsResponses]

export type UpdateProductVariationRelationshipsData = {
  body?: ProductVariationsRequest
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
  }
  query?: never
  url: "/pcm/products/{productID}/relationships/variations"
}

export type UpdateProductVariationRelationshipsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type UpdateProductVariationRelationshipsError =
  UpdateProductVariationRelationshipsErrors[keyof UpdateProductVariationRelationshipsErrors]

export type UpdateProductVariationRelationshipsResponses = {
  /**
   * No Content
   */
  204: void
}

export type UpdateProductVariationRelationshipsResponse =
  UpdateProductVariationRelationshipsResponses[keyof UpdateProductVariationRelationshipsResponses]

export type DeleteProductMainImageRelationshipsData = {
  body?: never
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
  }
  query?: never
  url: "/pcm/products/{productID}/relationships/main_image"
}

export type DeleteProductMainImageRelationshipsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type DeleteProductMainImageRelationshipsError =
  DeleteProductMainImageRelationshipsErrors[keyof DeleteProductMainImageRelationshipsErrors]

export type DeleteProductMainImageRelationshipsResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteProductMainImageRelationshipsResponse =
  DeleteProductMainImageRelationshipsResponses[keyof DeleteProductMainImageRelationshipsResponses]

export type GetProductMainImageRelationshipsData = {
  body?: never
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
  }
  query?: never
  url: "/pcm/products/{productID}/relationships/main_image"
}

export type GetProductMainImageRelationshipsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetProductMainImageRelationshipsError =
  GetProductMainImageRelationshipsErrors[keyof GetProductMainImageRelationshipsErrors]

export type GetProductMainImageRelationshipsResponses = {
  /**
   * Returns all product variation relationships
   */
  200: MainImageResponse
}

export type GetProductMainImageRelationshipsResponse =
  GetProductMainImageRelationshipsResponses[keyof GetProductMainImageRelationshipsResponses]

export type CreateProductMainImageRelationshipsData = {
  body?: MainImageRequest
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
  }
  query?: never
  url: "/pcm/products/{productID}/relationships/main_image"
}

export type CreateProductMainImageRelationshipsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type CreateProductMainImageRelationshipsError =
  CreateProductMainImageRelationshipsErrors[keyof CreateProductMainImageRelationshipsErrors]

export type CreateProductMainImageRelationshipsResponses = {
  /**
   * No Content
   */
  204: void
}

export type CreateProductMainImageRelationshipsResponse =
  CreateProductMainImageRelationshipsResponses[keyof CreateProductMainImageRelationshipsResponses]

export type UpdateProductMainImageRelationshipsData = {
  body?: ReplaceMainImageRequest
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
  }
  query?: never
  url: "/pcm/products/{productID}/relationships/main_image"
}

export type UpdateProductMainImageRelationshipsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type UpdateProductMainImageRelationshipsError =
  UpdateProductMainImageRelationshipsErrors[keyof UpdateProductMainImageRelationshipsErrors]

export type UpdateProductMainImageRelationshipsResponses = {
  /**
   * No Content
   */
  204: void
}

export type UpdateProductMainImageRelationshipsResponse =
  UpdateProductMainImageRelationshipsResponses[keyof UpdateProductMainImageRelationshipsResponses]

export type DetachCustomRelationshipsData = {
  body?: AttachCustomRelationshipRequest
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
  }
  query?: never
  url: "/pcm/products/{productID}/custom-relationships"
}

export type DetachCustomRelationshipsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type DetachCustomRelationshipsError =
  DetachCustomRelationshipsErrors[keyof DetachCustomRelationshipsErrors]

export type DetachCustomRelationshipsResponses = {
  /**
   * Successfully deleted custom relationships.
   */
  204: void
}

export type DetachCustomRelationshipsResponse =
  DetachCustomRelationshipsResponses[keyof DetachCustomRelationshipsResponses]

export type ListAttachedCustomRelationshipData = {
  body?: AttachCustomRelationshipRequest
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
  }
  query?: {
    /**
     * The number of records to offset the results by.
     */
    "page[offset]"?: BigInt
    /**
     * The number of records per page. The maximum limit is 100.
     */
    "page[limit]"?: BigInt
  }
  url: "/pcm/products/{productID}/custom-relationships"
}

export type ListAttachedCustomRelationshipErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type ListAttachedCustomRelationshipError =
  ListAttachedCustomRelationshipErrors[keyof ListAttachedCustomRelationshipErrors]

export type ListAttachedCustomRelationshipResponses = {
  /**
   * Returns the attached custom relationship.
   */
  200: MultiCustomRelationships
}

export type ListAttachedCustomRelationshipResponse =
  ListAttachedCustomRelationshipResponses[keyof ListAttachedCustomRelationshipResponses]

export type AttachCustomRelationshipsData = {
  body?: AttachCustomRelationshipRequest
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
  }
  query?: never
  url: "/pcm/products/{productID}/custom-relationships"
}

export type AttachCustomRelationshipsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type AttachCustomRelationshipsError =
  AttachCustomRelationshipsErrors[keyof AttachCustomRelationshipsErrors]

export type AttachCustomRelationshipsResponses = {
  /**
   * Returns the attached custom relationships
   */
  201: MultiCustomRelationships
}

export type AttachCustomRelationshipsResponse =
  AttachCustomRelationshipsResponses[keyof AttachCustomRelationshipsResponses]

export type DissociateProductsData = {
  body?: ProductAssociationDeleteRequest
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
    /**
     * A custom relationship slug.
     */
    customRelationshipSlug: string
  }
  query?: never
  url: "/pcm/products/{productID}/custom-relationships/{customRelationshipSlug}"
}

export type DissociateProductsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type DissociateProductsError =
  DissociateProductsErrors[keyof DissociateProductsErrors]

export type DissociateProductsResponses = {
  /**
   * Products are dissociated.
   */
  204: void
}

export type DissociateProductsResponse =
  DissociateProductsResponses[keyof DissociateProductsResponses]

export type GetRelatedProductIdsOfAProductIdData = {
  body?: never
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
    /**
     * A custom relationship slug.
     */
    customRelationshipSlug: string
  }
  query?: {
    /**
     * The number of records to offset the results by.
     */
    "page[offset]"?: BigInt
    /**
     * The number of records per page. The maximum limit is 100.
     */
    "page[limit]"?: BigInt
  }
  url: "/pcm/products/{productID}/custom-relationships/{customRelationshipSlug}"
}

export type GetRelatedProductIdsOfAProductIdErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetRelatedProductIdsOfAProductIdError =
  GetRelatedProductIdsOfAProductIdErrors[keyof GetRelatedProductIdsOfAProductIdErrors]

export type GetRelatedProductIdsOfAProductIdResponses = {
  /**
   * Returns all related product ids.
   */
  200: ProductAssociationListProductIdsResponse
}

export type GetRelatedProductIdsOfAProductIdResponse =
  GetRelatedProductIdsOfAProductIdResponses[keyof GetRelatedProductIdsOfAProductIdResponses]

export type ProductAssociationIdData = {
  body?: ProductAssociationRequest
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
    /**
     * A custom relationship slug.
     */
    customRelationshipSlug: string
  }
  query?: never
  url: "/pcm/products/{productID}/custom-relationships/{customRelationshipSlug}"
}

export type ProductAssociationIdErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type ProductAssociationIdError =
  ProductAssociationIdErrors[keyof ProductAssociationIdErrors]

export type ProductAssociationIdResponses = {
  /**
   * Returns information related to associated products.
   */
  201: ProductAssociationResponse
}

export type ProductAssociationIdResponse =
  ProductAssociationIdResponses[keyof ProductAssociationIdResponses]

export type GetRelatedProductsOfAProductIdData = {
  body?: never
  path: {
    /**
     * A unique identifier for the product.
     */
    productID: string
    /**
     * A custom relationship slug.
     */
    customRelationshipSlug: string
  }
  query?: {
    /**
     * The number of records to offset the results by.
     */
    "page[offset]"?: BigInt
    /**
     * The number of records per page. The maximum limit is 100.
     */
    "page[limit]"?: BigInt
  }
  url: "/pcm/products/{productID}/custom-relationships/{customRelationshipSlug}/products"
}

export type GetRelatedProductsOfAProductIdErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetRelatedProductsOfAProductIdError =
  GetRelatedProductsOfAProductIdErrors[keyof GetRelatedProductsOfAProductIdErrors]

export type GetRelatedProductsOfAProductIdResponses = {
  /**
   * Returns all related products.
   */
  200: MultiProductResponse
}

export type GetRelatedProductsOfAProductIdResponse =
  GetRelatedProductsOfAProductIdResponses[keyof GetRelatedProductsOfAProductIdResponses]

export type GetAllVariationsData = {
  body?: never
  path?: never
  query?: {
    /**
     * The number of records to offset the results by.
     */
    "page[offset]"?: BigInt
    /**
     * The number of records per page. The maximum limit is 100.
     */
    "page[limit]"?: BigInt
  }
  url: "/pcm/variations"
}

export type GetAllVariationsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetAllVariationsError =
  GetAllVariationsErrors[keyof GetAllVariationsErrors]

export type GetAllVariationsResponses = {
  /**
   * Returns all variations.
   */
  200: MultiVariations
}

export type GetAllVariationsResponse =
  GetAllVariationsResponses[keyof GetAllVariationsResponses]

export type CreateVariationData = {
  body: CreateVariation
  path?: never
  query?: never
  url: "/pcm/variations"
}

export type CreateVariationErrors = {
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type CreateVariationError =
  CreateVariationErrors[keyof CreateVariationErrors]

export type CreateVariationResponses = {
  /**
   * Returns a created variation with the following attributes.
   */
  201: CreatedVariation
}

export type CreateVariationResponse =
  CreateVariationResponses[keyof CreateVariationResponses]

export type DeleteVariationData = {
  body?: never
  path: {
    /**
     * A unique identifier for the variation.
     */
    variationID: string
  }
  query?: never
  url: "/pcm/variations/{variationID}"
}

export type DeleteVariationErrors = {
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type DeleteVariationError =
  DeleteVariationErrors[keyof DeleteVariationErrors]

export type DeleteVariationResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteVariationResponse =
  DeleteVariationResponses[keyof DeleteVariationResponses]

export type GetVariationData = {
  body?: never
  path: {
    /**
     * A unique identifier for the variation.
     */
    variationID: string
  }
  query?: never
  url: "/pcm/variations/{variationID}"
}

export type GetVariationErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetVariationError = GetVariationErrors[keyof GetVariationErrors]

export type GetVariationResponses = {
  /**
   * Returns the specified variation.
   */
  200: SingleVariation
}

export type GetVariationResponse =
  GetVariationResponses[keyof GetVariationResponses]

export type UpdateVariationData = {
  body?: UpdateVariation
  path: {
    /**
     * A unique identifier for the variation.
     */
    variationID: string
  }
  query?: never
  url: "/pcm/variations/{variationID}"
}

export type UpdateVariationErrors = {
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type UpdateVariationError =
  UpdateVariationErrors[keyof UpdateVariationErrors]

export type UpdateVariationResponses = {
  /**
   * Returns an updated variation with the following attributes.
   */
  200: SingleVariation
}

export type UpdateVariationResponse =
  UpdateVariationResponses[keyof UpdateVariationResponses]

export type GetAllVariationOptionsData = {
  body?: never
  path: {
    /**
     * A unique identifier for the variation.
     */
    variationID: string
  }
  query?: {
    /**
     * The number of records to offset the results by.
     */
    "page[offset]"?: BigInt
    /**
     * The number of records per page. The maximum limit is 100.
     */
    "page[limit]"?: BigInt
  }
  url: "/pcm/variations/{variationID}/options"
}

export type GetAllVariationOptionsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetAllVariationOptionsError =
  GetAllVariationOptionsErrors[keyof GetAllVariationOptionsErrors]

export type GetAllVariationOptionsResponses = {
  /**
   * Successfully returns all variation options.
   */
  200: MultiOptions
}

export type GetAllVariationOptionsResponse =
  GetAllVariationOptionsResponses[keyof GetAllVariationOptionsResponses]

export type CreateVariationOptionData = {
  body?: CreateOption
  path: {
    /**
     * A unique identifier for the variation.
     */
    variationID: string
  }
  query?: never
  url: "/pcm/variations/{variationID}/options"
}

export type CreateVariationOptionErrors = {
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type CreateVariationOptionError =
  CreateVariationOptionErrors[keyof CreateVariationOptionErrors]

export type CreateVariationOptionResponses = {
  /**
   * Successfully returns the created variation option.
   */
  201: CreatedOption
}

export type CreateVariationOptionResponse =
  CreateVariationOptionResponses[keyof CreateVariationOptionResponses]

export type DeleteVariationOptionData = {
  body?: never
  path: {
    /**
     * A unique identifier for the variation.
     */
    variationID: string
    /**
     * A unique identifier for the option.
     */
    optionID: string
  }
  query?: never
  url: "/pcm/variations/{variationID}/options/{optionID}"
}

export type DeleteVariationOptionErrors = {
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type DeleteVariationOptionError =
  DeleteVariationOptionErrors[keyof DeleteVariationOptionErrors]

export type DeleteVariationOptionResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteVariationOptionResponse =
  DeleteVariationOptionResponses[keyof DeleteVariationOptionResponses]

export type GetVariationOptionData = {
  body?: never
  path: {
    /**
     * A unique identifier for the variation.
     */
    variationID: string
    /**
     * A unique identifier for the option.
     */
    optionID: string
  }
  query?: never
  url: "/pcm/variations/{variationID}/options/{optionID}"
}

export type GetVariationOptionErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetVariationOptionError =
  GetVariationOptionErrors[keyof GetVariationOptionErrors]

export type GetVariationOptionResponses = {
  /**
   * Successfully returns the variation option.
   */
  200: SingleOption
}

export type GetVariationOptionResponse =
  GetVariationOptionResponses[keyof GetVariationOptionResponses]

export type UpdateVariationOptionData = {
  body?: UpdateOption
  path: {
    /**
     * A unique identifier for the variation.
     */
    variationID: string
    /**
     * A unique identifier for the option.
     */
    optionID: string
  }
  query?: never
  url: "/pcm/variations/{variationID}/options/{optionID}"
}

export type UpdateVariationOptionErrors = {
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type UpdateVariationOptionError =
  UpdateVariationOptionErrors[keyof UpdateVariationOptionErrors]

export type UpdateVariationOptionResponses = {
  /**
   * Successfully returns the updated variation option
   */
  200: SingleOption
}

export type UpdateVariationOptionResponse =
  UpdateVariationOptionResponses[keyof UpdateVariationOptionResponses]

export type GetAllModifiersData = {
  body?: never
  path: {
    /**
     * A unique identifier for the variation.
     */
    variationID: string
    /**
     * A unique identifier for the option.
     */
    optionID: string
  }
  query?: {
    /**
     * The number of records to offset the results by.
     */
    "page[offset]"?: BigInt
    /**
     * The number of records per page. The maximum limit is 100.
     */
    "page[limit]"?: BigInt
  }
  url: "/pcm/variations/{variationID}/options/{optionID}/modifiers"
}

export type GetAllModifiersErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetAllModifiersError =
  GetAllModifiersErrors[keyof GetAllModifiersErrors]

export type GetAllModifiersResponses = {
  /**
   * Successfully returns all variation modifiers.
   */
  200: MultiModifiers
}

export type GetAllModifiersResponse =
  GetAllModifiersResponses[keyof GetAllModifiersResponses]

export type CreateModifierData = {
  body?: CreateModifier
  path: {
    /**
     * A unique identifier for the variation.
     */
    variationID: string
    /**
     * A unique identifier for the option.
     */
    optionID: string
  }
  query?: never
  url: "/pcm/variations/{variationID}/options/{optionID}/modifiers"
}

export type CreateModifierErrors = {
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type CreateModifierError =
  CreateModifierErrors[keyof CreateModifierErrors]

export type CreateModifierResponses = {
  /**
   * Successfully returns the created modifier
   */
  201: CreatedModifier
}

export type CreateModifierResponse =
  CreateModifierResponses[keyof CreateModifierResponses]

export type DeleteModifierData = {
  body?: never
  path: {
    /**
     * A unique identifier for the variation.
     */
    variationID: string
    /**
     * A unique identifier for the option.
     */
    optionID: string
    /**
     * A unique identifier for the modifier.
     */
    modifierID: string
  }
  query?: never
  url: "/pcm/variations/{variationID}/options/{optionID}/modifiers/{modifierID}"
}

export type DeleteModifierErrors = {
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type DeleteModifierError =
  DeleteModifierErrors[keyof DeleteModifierErrors]

export type DeleteModifierResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteModifierResponse =
  DeleteModifierResponses[keyof DeleteModifierResponses]

export type GetModifierData = {
  body?: never
  path: {
    /**
     * A unique identifier for the variation.
     */
    variationID: string
    /**
     * A unique identifier for the option.
     */
    optionID: string
    /**
     * A unique identifier for the modifier.
     */
    modifierID: string
  }
  query?: never
  url: "/pcm/variations/{variationID}/options/{optionID}/modifiers/{modifierID}"
}

export type GetModifierErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetModifierError = GetModifierErrors[keyof GetModifierErrors]

export type GetModifierResponses = {
  /**
   * Returns the specified modifier.
   */
  200: SingleModifier
}

export type GetModifierResponse =
  GetModifierResponses[keyof GetModifierResponses]

export type UpdateModifierData = {
  body?: UpdateModifier
  path: {
    /**
     * A unique identifier for the variation.
     */
    variationID: string
    /**
     * A unique identifier for the option.
     */
    optionID: string
    /**
     * A unique identifier for the modifier.
     */
    modifierID: string
  }
  query?: never
  url: "/pcm/variations/{variationID}/options/{optionID}/modifiers/{modifierID}"
}

export type UpdateModifierErrors = {
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Write conflict detected
   */
  409: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type UpdateModifierError =
  UpdateModifierErrors[keyof UpdateModifierErrors]

export type UpdateModifierResponses = {
  /**
   * Successfully returns the updated modifier.
   */
  200: SingleModifier
}

export type UpdateModifierResponse =
  UpdateModifierResponses[keyof UpdateModifierResponses]

export type GetHierarchyData = {
  body?: never
  path?: never
  query?: {
    /**
     * The number of records to offset the results by.
     */
    "page[offset]"?: BigInt
    /**
     * The number of records per page. The maximum limit is 100.
     */
    "page[limit]"?: BigInt
    /**
     * Many Commerce API endpoints support filtering. The general syntax is described [**here**](/guides/Getting-Started/filtering).
     *
     */
    filter?: string
  }
  url: "/pcm/hierarchies"
}

export type GetHierarchyErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetHierarchyError = GetHierarchyErrors[keyof GetHierarchyErrors]

export type GetHierarchyResponses = {
  /**
   * Returns a list of all hierarchies.
   */
  200: MultiHierarchy
}

export type GetHierarchyResponse =
  GetHierarchyResponses[keyof GetHierarchyResponses]

export type CreateHierarchyData = {
  body: CreateHierarchy
  path?: never
  query?: never
  url: "/pcm/hierarchies"
}

export type CreateHierarchyErrors = {
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type CreateHierarchyError =
  CreateHierarchyErrors[keyof CreateHierarchyErrors]

export type CreateHierarchyResponses = {
  /**
   * Returns a created hierarchy with the following attributes.
   */
  201: SingleHierarchy
}

export type CreateHierarchyResponse =
  CreateHierarchyResponses[keyof CreateHierarchyResponses]

export type GetAllNodesData = {
  body?: never
  path?: never
  query?: {
    /**
     * The number of records to offset the results by.
     */
    "page[offset]"?: BigInt
    /**
     * Many Commerce API endpoints support filtering. The general syntax is described [**here**](/guides/Getting-Started/filtering).
     *
     */
    filter?: string
    /**
     * The number of records per page. The maximum limit is 100.
     */
    "page[limit]"?: BigInt
  }
  url: "/pcm/hierarchies/nodes"
}

export type GetAllNodesErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetAllNodesError = GetAllNodesErrors[keyof GetAllNodesErrors]

export type GetAllNodesResponses = {
  /**
   * Returns a list of nodes
   */
  200: MultiNodes
}

export type GetAllNodesResponse =
  GetAllNodesResponses[keyof GetAllNodesResponses]

export type DeleteHierarchyData = {
  body?: never
  path: {
    /**
     * A unique identifier for the hierarchy.
     */
    hierarchyID: string
  }
  query?: never
  url: "/pcm/hierarchies/{hierarchyID}"
}

export type DeleteHierarchyErrors = {
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type DeleteHierarchyError =
  DeleteHierarchyErrors[keyof DeleteHierarchyErrors]

export type DeleteHierarchyResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteHierarchyResponse =
  DeleteHierarchyResponses[keyof DeleteHierarchyResponses]

export type GetHierarchyChildData = {
  body?: never
  path: {
    /**
     * A unique identifier for the hierarchy.
     */
    hierarchyID: string
  }
  query?: never
  url: "/pcm/hierarchies/{hierarchyID}"
}

export type GetHierarchyChildErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetHierarchyChildError =
  GetHierarchyChildErrors[keyof GetHierarchyChildErrors]

export type GetHierarchyChildResponses = {
  /**
   * Returns a hierarchy with the following attributes.
   */
  200: SingleHierarchy
}

export type GetHierarchyChildResponse =
  GetHierarchyChildResponses[keyof GetHierarchyChildResponses]

export type UpdateHierarchyData = {
  body: UpdateHierarchy
  path: {
    /**
     * A unique identifier for the hierarchy.
     */
    hierarchyID: string
  }
  query?: never
  url: "/pcm/hierarchies/{hierarchyID}"
}

export type UpdateHierarchyErrors = {
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type UpdateHierarchyError =
  UpdateHierarchyErrors[keyof UpdateHierarchyErrors]

export type UpdateHierarchyResponses = {
  /**
   * Successfully returns the updated hierarchy
   */
  200: SingleHierarchy
}

export type UpdateHierarchyResponse =
  UpdateHierarchyResponses[keyof UpdateHierarchyResponses]

export type GetAllNodesInHierarchyData = {
  body?: never
  path: {
    /**
     * A unique identifier for the hierarchy.
     */
    hierarchyID: string
  }
  query?: {
    /**
     * Many Commerce API endpoints support filtering. The general syntax is described [**here**](/guides/Getting-Started/filtering).
     *
     */
    filter?: string
    /**
     * The number of records to offset the results by.
     */
    "page[offset]"?: BigInt
    /**
     * The number of records per page. The maximum limit is 100.
     */
    "page[limit]"?: BigInt
  }
  url: "/pcm/hierarchies/{hierarchyID}/nodes"
}

export type GetAllNodesInHierarchyErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetAllNodesInHierarchyError =
  GetAllNodesInHierarchyErrors[keyof GetAllNodesInHierarchyErrors]

export type GetAllNodesInHierarchyResponses = {
  /**
   * Successfully returns the node's children
   */
  200: MultiNodes
}

export type GetAllNodesInHierarchyResponse =
  GetAllNodesInHierarchyResponses[keyof GetAllNodesInHierarchyResponses]

export type CreateNodeData = {
  body?: CreateNode
  path: {
    /**
     * A unique identifier for the hierarchy.
     */
    hierarchyID: string
  }
  query?: never
  url: "/pcm/hierarchies/{hierarchyID}/nodes"
}

export type CreateNodeErrors = {
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type CreateNodeError = CreateNodeErrors[keyof CreateNodeErrors]

export type CreateNodeResponses = {
  /**
   * Successfully returns the created node
   */
  201: SingleNode
}

export type CreateNodeResponse = CreateNodeResponses[keyof CreateNodeResponses]

export type DeleteNodeData = {
  body?: never
  path: {
    /**
     * A unique identifier for the hierarchy.
     */
    hierarchyID: string
    /**
     * A unique identifier for the node.
     */
    nodeID: string
  }
  query?: never
  url: "/pcm/hierarchies/{hierarchyID}/nodes/{nodeID}"
}

export type DeleteNodeErrors = {
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type DeleteNodeError = DeleteNodeErrors[keyof DeleteNodeErrors]

export type DeleteNodeResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteNodeResponse = DeleteNodeResponses[keyof DeleteNodeResponses]

export type GetHierarchyNodeData = {
  body?: never
  path: {
    /**
     * A unique identifier for the hierarchy.
     */
    hierarchyID: string
    /**
     * A unique identifier for the node.
     */
    nodeID: string
  }
  query?: never
  url: "/pcm/hierarchies/{hierarchyID}/nodes/{nodeID}"
}

export type GetHierarchyNodeErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetHierarchyNodeError =
  GetHierarchyNodeErrors[keyof GetHierarchyNodeErrors]

export type GetHierarchyNodeResponses = {
  /**
   * Returns a node with the following attributes.
   */
  200: SingleNode
}

export type GetHierarchyNodeResponse =
  GetHierarchyNodeResponses[keyof GetHierarchyNodeResponses]

export type UpdateNodeData = {
  body?: UpdateNode
  path: {
    /**
     * A unique identifier for the hierarchy.
     */
    hierarchyID: string
    /**
     * A unique identifier for the node.
     */
    nodeID: string
  }
  query?: never
  url: "/pcm/hierarchies/{hierarchyID}/nodes/{nodeID}"
}

export type UpdateNodeErrors = {
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type UpdateNodeError = UpdateNodeErrors[keyof UpdateNodeErrors]

export type UpdateNodeResponses = {
  /**
   * Successfully returns the updated node
   */
  200: SingleNode
}

export type UpdateNodeResponse = UpdateNodeResponses[keyof UpdateNodeResponses]

export type GetAllChildrenData = {
  body?: never
  path: {
    /**
     * A unique identifier for the hierarchy.
     */
    hierarchyID: string
  }
  query?: {
    /**
     * Many Commerce API endpoints support filtering. The general syntax is described [**here**](/guides/Getting-Started/filtering).
     *
     */
    filter?: string
    /**
     * The number of records to offset the results by.
     */
    "page[offset]"?: BigInt
    /**
     * The number of records per page. The maximum limit is 100.
     */
    "page[limit]"?: BigInt
  }
  url: "/pcm/hierarchies/{hierarchyID}/children"
}

export type GetAllChildrenErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetAllChildrenError =
  GetAllChildrenErrors[keyof GetAllChildrenErrors]

export type GetAllChildrenResponses = {
  /**
   * Returns the hierarchy's children.
   */
  200: MultiNodes
}

export type GetAllChildrenResponse =
  GetAllChildrenResponses[keyof GetAllChildrenResponses]

export type CreateHierarchyChildRelationshipsData = {
  body?: NodeChildren
  path: {
    /**
     * A unique identifier for the hierarchy.
     */
    hierarchyID: string
  }
  query?: never
  url: "/pcm/hierarchies/{hierarchyID}/relationships/children"
}

export type CreateHierarchyChildRelationshipsErrors = {
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type CreateHierarchyChildRelationshipsError =
  CreateHierarchyChildRelationshipsErrors[keyof CreateHierarchyChildRelationshipsErrors]

export type CreateHierarchyChildRelationshipsResponses = {
  /**
   * Successfully returns the hierarchy
   */
  200: SingleHierarchy
}

export type CreateHierarchyChildRelationshipsResponse =
  CreateHierarchyChildRelationshipsResponses[keyof CreateHierarchyChildRelationshipsResponses]

export type CreateNodeChildRelationshipsData = {
  body?: NodeChildren
  path: {
    /**
     * A unique identifier for the hierarchy.
     */
    hierarchyID: string
    /**
     * A unique identifier for the node.
     */
    nodeID: string
  }
  query?: never
  url: "/pcm/hierarchies/{hierarchyID}/nodes/{nodeID}/relationships/children"
}

export type CreateNodeChildRelationshipsErrors = {
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type CreateNodeChildRelationshipsError =
  CreateNodeChildRelationshipsErrors[keyof CreateNodeChildRelationshipsErrors]

export type CreateNodeChildRelationshipsResponses = {
  /**
   * Successfully returns the parent node
   */
  200: SingleNode
}

export type CreateNodeChildRelationshipsResponse =
  CreateNodeChildRelationshipsResponses[keyof CreateNodeChildRelationshipsResponses]

export type GetAllNodeChildrenData = {
  body?: never
  path: {
    /**
     * A unique identifier for the hierarchy.
     */
    hierarchyID: string
    /**
     * A unique identifier for the node.
     */
    nodeID: string
  }
  query?: {
    /**
     * Many Commerce API endpoints support filtering. The general syntax is described [**here**](/guides/Getting-Started/filtering).
     *
     */
    filter?: string
    /**
     * The number of records to offset the results by.
     */
    "page[offset]"?: BigInt
    /**
     * The number of records per page. The maximum limit is 100.
     */
    "page[limit]"?: BigInt
  }
  url: "/pcm/hierarchies/{hierarchyID}/nodes/{nodeID}/children"
}

export type GetAllNodeChildrenErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetAllNodeChildrenError =
  GetAllNodeChildrenErrors[keyof GetAllNodeChildrenErrors]

export type GetAllNodeChildrenResponses = {
  /**
   * Successfully returns the node's children
   */
  200: MultiNodes
}

export type GetAllNodeChildrenResponse =
  GetAllNodeChildrenResponses[keyof GetAllNodeChildrenResponses]

export type DeleteNodeParentData = {
  body?: never
  path: {
    /**
     * A unique identifier for the hierarchy.
     */
    hierarchyID: string
    /**
     * A unique identifier for the node.
     */
    nodeID: string
  }
  query?: never
  url: "/pcm/hierarchies/{hierarchyID}/nodes/{nodeID}/relationships/parent"
}

export type DeleteNodeParentErrors = {
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type DeleteNodeParentError =
  DeleteNodeParentErrors[keyof DeleteNodeParentErrors]

export type DeleteNodeParentResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteNodeParentResponse =
  DeleteNodeParentResponses[keyof DeleteNodeParentResponses]

export type UpdateNodeParentData = {
  body?: NodeParent
  path: {
    /**
     * A unique identifier for the hierarchy.
     */
    hierarchyID: string
    /**
     * A unique identifier for the node.
     */
    nodeID: string
  }
  query?: never
  url: "/pcm/hierarchies/{hierarchyID}/nodes/{nodeID}/relationships/parent"
}

export type UpdateNodeParentErrors = {
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type UpdateNodeParentError =
  UpdateNodeParentErrors[keyof UpdateNodeParentErrors]

export type UpdateNodeParentResponses = {
  /**
   * No Content
   */
  204: void
}

export type UpdateNodeParentResponse =
  UpdateNodeParentResponses[keyof UpdateNodeParentResponses]

export type DeleteNodeProductRelationshipsData = {
  body?: NodeProducts
  path: {
    /**
     * A unique identifier for the hierarchy.
     */
    hierarchyID: string
    /**
     * A unique identifier for the node.
     */
    nodeID: string
  }
  query?: never
  url: "/pcm/hierarchies/{hierarchyID}/nodes/{nodeID}/relationships/products"
}

export type DeleteNodeProductRelationshipsErrors = {
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type DeleteNodeProductRelationshipsError =
  DeleteNodeProductRelationshipsErrors[keyof DeleteNodeProductRelationshipsErrors]

export type DeleteNodeProductRelationshipsResponses = {
  /**
   * Successfully returns the updated node
   */
  200: SingleNode
}

export type DeleteNodeProductRelationshipsResponse =
  DeleteNodeProductRelationshipsResponses[keyof DeleteNodeProductRelationshipsResponses]

export type CreateNodeProductRelationshipData = {
  body?: NodeProducts
  path: {
    /**
     * A unique identifier for the hierarchy.
     */
    hierarchyID: string
    /**
     * A unique identifier for the node.
     */
    nodeID: string
  }
  query?: never
  url: "/pcm/hierarchies/{hierarchyID}/nodes/{nodeID}/relationships/products"
}

export type CreateNodeProductRelationshipErrors = {
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type CreateNodeProductRelationshipError =
  CreateNodeProductRelationshipErrors[keyof CreateNodeProductRelationshipErrors]

export type CreateNodeProductRelationshipResponses = {
  /**
   * Successfully returns the updated node
   */
  201: SingleNode
}

export type CreateNodeProductRelationshipResponse =
  CreateNodeProductRelationshipResponses[keyof CreateNodeProductRelationshipResponses]

export type GetNodeProductsData = {
  body?: never
  path: {
    /**
     * A unique identifier for the hierarchy.
     */
    hierarchyID: string
    /**
     * A unique identifier for the node.
     */
    nodeID: string
  }
  query?: {
    /**
     * The number of records to offset the results by.
     */
    "page[offset]"?: BigInt
    /**
     * The number of records per page. The maximum limit is 100.
     */
    "page[limit]"?: BigInt
  }
  url: "/pcm/hierarchies/{hierarchyID}/nodes/{nodeID}/products"
}

export type GetNodeProductsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetNodeProductsError =
  GetNodeProductsErrors[keyof GetNodeProductsErrors]

export type GetNodeProductsResponses = {
  /**
   * Successfully returns the node's products
   */
  200: MultiProductResponse
}

export type GetNodeProductsResponse =
  GetNodeProductsResponses[keyof GetNodeProductsResponses]

export type DuplicateHierarchyData = {
  body: DuplicateJob
  path: {
    /**
     * A unique identifier for the hierarchy.
     */
    hierarchyID: string
  }
  query?: never
  url: "/pcm/hierarchies/{hierarchyID}/duplicate_job"
}

export type DuplicateHierarchyErrors = {
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type DuplicateHierarchyError =
  DuplicateHierarchyErrors[keyof DuplicateHierarchyErrors]

export type DuplicateHierarchyResponses = {
  /**
   * Successfully returns the duplicate hierarchy job ID
   */
  201: Single
}

export type DuplicateHierarchyResponse =
  DuplicateHierarchyResponses[keyof DuplicateHierarchyResponses]

export type GetAllProductTagsData = {
  body?: never
  path?: never
  query?: never
  url: "/pcm/tags"
}

export type GetAllProductTagsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetAllProductTagsError =
  GetAllProductTagsErrors[keyof GetAllProductTagsErrors]

export type GetAllProductTagsResponses = {
  /**
   * Returns all the product tags.
   */
  200: MultiTag
}

export type GetAllProductTagsResponse =
  GetAllProductTagsResponses[keyof GetAllProductTagsResponses]

export type GetProductTagData = {
  body?: never
  path: {
    /**
     * A unique identifier for the tag.
     */
    tagID: string
  }
  query?: never
  url: "/pcm/tags/{tagID}"
}

export type GetProductTagErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetProductTagError = GetProductTagErrors[keyof GetProductTagErrors]

export type GetProductTagResponses = {
  /**
   * Returns a product tag with the following attributes.
   */
  200: SingleTag
}

export type GetProductTagResponse =
  GetProductTagResponses[keyof GetProductTagResponses]

export type GetCustomRelationshipsData = {
  body?: never
  path?: never
  query?: {
    /**
     * The number of records to offset the results by.
     */
    "page[offset]"?: BigInt
    /**
     * The number of records per page. The maximum limit is 100.
     */
    "page[limit]"?: BigInt
    /**
     * Many Commerce API endpoints support filtering. The general syntax is described [**here**](/guides/Getting-Started/filtering).
     *
     */
    filter?: string
  }
  url: "/pcm/custom-relationships"
}

export type GetCustomRelationshipsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetCustomRelationshipsError =
  GetCustomRelationshipsErrors[keyof GetCustomRelationshipsErrors]

export type GetCustomRelationshipsResponses = {
  /**
   * Returns a list of all custom relationships.
   */
  200: MultiCustomRelationships
}

export type GetCustomRelationshipsResponse =
  GetCustomRelationshipsResponses[keyof GetCustomRelationshipsResponses]

export type CreateCustomRelationshipData = {
  body: CreateCustomRelationship
  path?: never
  query?: never
  url: "/pcm/custom-relationships"
}

export type CreateCustomRelationshipErrors = {
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type CreateCustomRelationshipError =
  CreateCustomRelationshipErrors[keyof CreateCustomRelationshipErrors]

export type CreateCustomRelationshipResponses = {
  /**
   * Returns a created custom relationship with the following attributes.
   */
  201: SingleCustomRelationship
}

export type CreateCustomRelationshipResponse =
  CreateCustomRelationshipResponses[keyof CreateCustomRelationshipResponses]

export type DeleteCustomRelationshipData = {
  body?: never
  path: {
    /**
     * A custom relationship slug.
     */
    customRelationshipSlug: string
  }
  query?: never
  url: "/pcm/custom-relationships/{customRelationshipSlug}"
}

export type DeleteCustomRelationshipErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type DeleteCustomRelationshipError =
  DeleteCustomRelationshipErrors[keyof DeleteCustomRelationshipErrors]

export type DeleteCustomRelationshipResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteCustomRelationshipResponse =
  DeleteCustomRelationshipResponses[keyof DeleteCustomRelationshipResponses]

export type GetCustomRelationshipData = {
  body?: never
  path: {
    /**
     * A custom relationship slug.
     */
    customRelationshipSlug: string
  }
  query?: never
  url: "/pcm/custom-relationships/{customRelationshipSlug}"
}

export type GetCustomRelationshipErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type GetCustomRelationshipError =
  GetCustomRelationshipErrors[keyof GetCustomRelationshipErrors]

export type GetCustomRelationshipResponses = {
  /**
   * Returns a custom relationship with the following attributes.
   */
  200: SingleCustomRelationship
}

export type GetCustomRelationshipResponse =
  GetCustomRelationshipResponses[keyof GetCustomRelationshipResponses]

export type UpdateCustomRelationshipData = {
  body: UpdateCustomRelationship
  path: {
    /**
     * A custom relationship slug.
     */
    customRelationshipSlug: string
  }
  query?: never
  url: "/pcm/custom-relationships/{customRelationshipSlug}"
}

export type UpdateCustomRelationshipErrors = {
  /**
   * Forbidden
   */
  403: _Error
  /**
   * Bad Request. Not Found.
   */
  404: _Error
  /**
   * Bad request. The request failed validation.
   */
  422: _Error
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: _Error
}

export type UpdateCustomRelationshipError =
  UpdateCustomRelationshipErrors[keyof UpdateCustomRelationshipErrors]

export type UpdateCustomRelationshipResponses = {
  /**
   * Successfully returns the updated custom relationship
   */
  200: SingleCustomRelationship
}

export type UpdateCustomRelationshipResponse =
  UpdateCustomRelationshipResponses[keyof UpdateCustomRelationshipResponses]
