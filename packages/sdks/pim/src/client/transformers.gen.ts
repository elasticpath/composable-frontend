// This file is auto-generated by @hey-api/openapi-ts

import type {
  GetAllJobsResponse,
  GetJobResponse,
  CancelJobResponse,
  GetAllProductsResponse,
  CreateProductResponse,
  ImportProductsResponse,
  ExportProductsResponse,
  GetProductResponse,
  UpdateProductResponse,
  GetProductsNodesResponse,
  BuildChildProductsResponse,
  GetChildProductsResponse,
  GetProductVariationRelationshipsResponse,
  ListAttachedCustomRelationshipResponse,
  AttachCustomRelationshipsResponse,
  ProductAssociationIdResponse,
  GetRelatedProductsOfAProductIdResponse,
  GetAllVariationsResponse,
  CreateVariationResponse,
  GetVariationResponse,
  UpdateVariationResponse,
  GetAllVariationOptionsResponse,
  CreateVariationOptionResponse,
  GetVariationOptionResponse,
  UpdateVariationOptionResponse,
  GetHierarchyResponse,
  CreateHierarchyResponse,
  GetAllNodesResponse,
  GetHierarchyChildResponse,
  UpdateHierarchyResponse,
  GetAllNodesInHierarchyResponse,
  CreateNodeResponse,
  GetHierarchyNodeResponse,
  UpdateNodeResponse,
  GetAllChildrenResponse,
  CreateHierarchyChildRelationshipsResponse,
  CreateNodeChildRelationshipsResponse,
  GetAllNodeChildrenResponse,
  DeleteNodeProductRelationshipsResponse,
  CreateNodeProductRelationshipResponse,
  GetNodeProductsResponse,
  DuplicateHierarchyResponse,
  GetAllProductTagsResponse,
  GetProductTagResponse,
  GetCustomRelationshipsResponse,
  CreateCustomRelationshipResponse,
  GetCustomRelationshipResponse,
  UpdateCustomRelationshipResponse,
} from "./types.gen"

const jobSchemaResponseTransformer = (data: any) => {
  data.attributes.started_at = new Date(data.attributes.started_at)
  data.attributes.completed_at = new Date(data.attributes.completed_at)
  data.attributes.created_at = new Date(data.attributes.created_at)
  data.attributes.updated_at = new Date(data.attributes.updated_at)
  return data.attributes
  return data
}

const multiSchemaResponseTransformer = (data: any) => {
  data.data = data.data.map((item: any) => {
    return jobSchemaResponseTransformer(item)
  })
  return data
}

export const getAllJobsResponseTransformer = async (
  data: any,
): Promise<GetAllJobsResponse> => {
  data = multiSchemaResponseTransformer(data)
  return data
}

const singleSchemaResponseTransformer = (data: any) => {
  data.data = jobSchemaResponseTransformer(data.data)
  return data
}

export const getJobResponseTransformer = async (
  data: any,
): Promise<GetJobResponse> => {
  data = singleSchemaResponseTransformer(data)
  return data
}

export const cancelJobResponseTransformer = async (
  data: any,
): Promise<CancelJobResponse> => {
  data = singleSchemaResponseTransformer(data)
  return data
}

const productResponseSchemaResponseTransformer = (data: any) => {
  if (data.meta) {
    if (data.meta.created_at) {
      data.meta.created_at = new Date(data.meta.created_at)
    }
    if (data.meta.updated_at) {
      data.meta.updated_at = new Date(data.meta.updated_at)
    }
    return data.meta
  }
  return data
}

const includedResponseSchemaResponseTransformer = (data: any) => {
  if (data.component_products) {
    data.component_products = data.component_products.map((item: any) => {
      return productResponseSchemaResponseTransformer(item)
    })
  }
  return data
}

const multiProductResponseSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return productResponseSchemaResponseTransformer(item)
    })
  }
  if (data.included) {
    data.included = includedResponseSchemaResponseTransformer(data.included)
  }
  return data
}

export const getAllProductsResponseTransformer = async (
  data: any,
): Promise<GetAllProductsResponse> => {
  data = multiProductResponseSchemaResponseTransformer(data)
  return data
}

const singleProductResponseSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = productResponseSchemaResponseTransformer(data.data)
  }
  if (data.included) {
    data.included = includedResponseSchemaResponseTransformer(data.included)
  }
  return data
}

export const createProductResponseTransformer = async (
  data: any,
): Promise<CreateProductResponse> => {
  data = singleProductResponseSchemaResponseTransformer(data)
  return data
}

export const importProductsResponseTransformer = async (
  data: any,
): Promise<ImportProductsResponse> => {
  data = singleSchemaResponseTransformer(data)
  return data
}

export const exportProductsResponseTransformer = async (
  data: any,
): Promise<ExportProductsResponse> => {
  data = singleSchemaResponseTransformer(data)
  return data
}

export const getProductResponseTransformer = async (
  data: any,
): Promise<GetProductResponse> => {
  data = singleProductResponseSchemaResponseTransformer(data)
  return data
}

export const updateProductResponseTransformer = async (
  data: any,
): Promise<UpdateProductResponse> => {
  data = singleProductResponseSchemaResponseTransformer(data)
  return data
}

const nodeSchemaResponseTransformer = (data: any) => {
  if (data.meta.created_at) {
    data.meta.created_at = new Date(data.meta.created_at)
  }
  if (data.meta.updated_at) {
    data.meta.updated_at = new Date(data.meta.updated_at)
  }
  return data.meta
  return data
}

const multiNodesSchemaResponseTransformer = (data: any) => {
  data.data = data.data.map((item: any) => {
    return nodeSchemaResponseTransformer(item)
  })
  return data
}

export const getProductsNodesResponseTransformer = async (
  data: any,
): Promise<GetProductsNodesResponse> => {
  data = multiNodesSchemaResponseTransformer(data)
  return data
}

export const buildChildProductsResponseTransformer = async (
  data: any,
): Promise<BuildChildProductsResponse> => {
  data = singleSchemaResponseTransformer(data)
  return data
}

export const getChildProductsResponseTransformer = async (
  data: any,
): Promise<GetChildProductsResponse> => {
  data = multiProductResponseSchemaResponseTransformer(data)
  return data
}

const variationsResponseSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      if (item.meta) {
        if (item.meta.created_at) {
          item.meta.created_at = new Date(item.meta.created_at)
        }
        return item.meta
      }
      return item
    })
  }
  return data
}

export const getProductVariationRelationshipsResponseTransformer = async (
  data: any,
): Promise<GetProductVariationRelationshipsResponse> => {
  data = variationsResponseSchemaResponseTransformer(data)
  return data
}

const customRelationshipSchemaResponseTransformer = (data: any) => {
  data.meta.timestamps.created_at = new Date(data.meta.timestamps.created_at)
  data.meta.timestamps.updated_at = new Date(data.meta.timestamps.updated_at)
  return data.meta.timestamps
  return data.meta
  return data
}

const multiCustomRelationshipsSchemaResponseTransformer = (data: any) => {
  data.data = data.data.map((item: any) => {
    return customRelationshipSchemaResponseTransformer(item)
  })
  return data
}

export const listAttachedCustomRelationshipResponseTransformer = async (
  data: any,
): Promise<ListAttachedCustomRelationshipResponse> => {
  data = multiCustomRelationshipsSchemaResponseTransformer(data)
  return data
}

export const attachCustomRelationshipsResponseTransformer = async (
  data: any,
): Promise<AttachCustomRelationshipsResponse> => {
  data = multiCustomRelationshipsSchemaResponseTransformer(data)
  return data
}

const productAssociationResponseSchemaResponseTransformer = (data: any) => {
  if (data.meta) {
    if (data.meta.timestamps) {
      if (data.meta.timestamps.created_at) {
        data.meta.timestamps.created_at = new Date(
          data.meta.timestamps.created_at,
        )
      }
      if (data.meta.timestamps.updated_at) {
        data.meta.timestamps.updated_at = new Date(
          data.meta.timestamps.updated_at,
        )
      }
      return data.meta.timestamps
    }
    return data.meta
  }
  return data
}

export const productAssociationIdResponseTransformer = async (
  data: any,
): Promise<ProductAssociationIdResponse> => {
  data = productAssociationResponseSchemaResponseTransformer(data)
  return data
}

export const getRelatedProductsOfAProductIdResponseTransformer = async (
  data: any,
): Promise<GetRelatedProductsOfAProductIdResponse> => {
  data = multiProductResponseSchemaResponseTransformer(data)
  return data
}

const multiVariationsSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      if (item.meta) {
        if (item.meta.options) {
          item.meta.options = item.meta.options.map((item: any) => {
            if (item.created_at) {
              item.created_at = new Date(item.created_at)
            }
            if (item.updated_at) {
              item.updated_at = new Date(item.updated_at)
            }
            return item
          })
        }
        if (item.meta.created_at) {
          item.meta.created_at = new Date(item.meta.created_at)
        }
        if (item.meta.updated_at) {
          item.meta.updated_at = new Date(item.meta.updated_at)
        }
        return item.meta
      }
      return item
    })
  }
  return data
}

export const getAllVariationsResponseTransformer = async (
  data: any,
): Promise<GetAllVariationsResponse> => {
  data = multiVariationsSchemaResponseTransformer(data)
  return data
}

const createdVariationSchemaResponseTransformer = (data: any) => {
  if (data.data.meta.created_at) {
    data.data.meta.created_at = new Date(data.data.meta.created_at)
  }
  if (data.data.meta.updated_at) {
    data.data.meta.updated_at = new Date(data.data.meta.updated_at)
  }
  return data.data.meta
  return data.data
  return data
}

export const createVariationResponseTransformer = async (
  data: any,
): Promise<CreateVariationResponse> => {
  data = createdVariationSchemaResponseTransformer(data)
  return data
}

const singleVariationSchemaResponseTransformer = (data: any) => {
  if (data.data.meta.options) {
    data.data.meta.options = data.data.meta.options.map((item: any) => {
      if (item.created_at) {
        item.created_at = new Date(item.created_at)
      }
      if (item.updated_at) {
        item.updated_at = new Date(item.updated_at)
      }
      return item
    })
  }
  return data.data.meta
  return data.data
  return data
}

export const getVariationResponseTransformer = async (
  data: any,
): Promise<GetVariationResponse> => {
  data = singleVariationSchemaResponseTransformer(data)
  return data
}

export const updateVariationResponseTransformer = async (
  data: any,
): Promise<UpdateVariationResponse> => {
  data = singleVariationSchemaResponseTransformer(data)
  return data
}

const multiOptionsSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      if (item.meta) {
        if (item.meta.created_at) {
          item.meta.created_at = new Date(item.meta.created_at)
        }
        if (item.meta.updated_at) {
          item.meta.updated_at = new Date(item.meta.updated_at)
        }
        return item.meta
      }
      return item
    })
  }
  return data
}

export const getAllVariationOptionsResponseTransformer = async (
  data: any,
): Promise<GetAllVariationOptionsResponse> => {
  data = multiOptionsSchemaResponseTransformer(data)
  return data
}

const createdOptionSchemaResponseTransformer = (data: any) => {
  if (data.data.meta) {
    if (data.data.meta.created_at) {
      data.data.meta.created_at = new Date(data.data.meta.created_at)
    }
    if (data.data.meta.updated_at) {
      data.data.meta.updated_at = new Date(data.data.meta.updated_at)
    }
    return data.data.meta
  }
  return data.data
  return data
}

export const createVariationOptionResponseTransformer = async (
  data: any,
): Promise<CreateVariationOptionResponse> => {
  data = createdOptionSchemaResponseTransformer(data)
  return data
}

const singleOptionSchemaResponseTransformer = (data: any) => {
  if (data.data.meta.created_at) {
    data.data.meta.created_at = new Date(data.data.meta.created_at)
  }
  if (data.data.meta.updated_at) {
    data.data.meta.updated_at = new Date(data.data.meta.updated_at)
  }
  return data.data.meta
  return data.data
  return data
}

export const getVariationOptionResponseTransformer = async (
  data: any,
): Promise<GetVariationOptionResponse> => {
  data = singleOptionSchemaResponseTransformer(data)
  return data
}

export const updateVariationOptionResponseTransformer = async (
  data: any,
): Promise<UpdateVariationOptionResponse> => {
  data = singleOptionSchemaResponseTransformer(data)
  return data
}

const hierarchySchemaResponseTransformer = (data: any) => {
  if (data.meta.created_at) {
    data.meta.created_at = new Date(data.meta.created_at)
  }
  if (data.meta.updated_at) {
    data.meta.updated_at = new Date(data.meta.updated_at)
  }
  return data.meta
  return data
}

const multiHierarchySchemaResponseTransformer = (data: any) => {
  data.data = data.data.map((item: any) => {
    return hierarchySchemaResponseTransformer(item)
  })
  return data
}

export const getHierarchyResponseTransformer = async (
  data: any,
): Promise<GetHierarchyResponse> => {
  data = multiHierarchySchemaResponseTransformer(data)
  return data
}

const singleHierarchySchemaResponseTransformer = (data: any) => {
  data.data = hierarchySchemaResponseTransformer(data.data)
  return data
}

export const createHierarchyResponseTransformer = async (
  data: any,
): Promise<CreateHierarchyResponse> => {
  data = singleHierarchySchemaResponseTransformer(data)
  return data
}

export const getAllNodesResponseTransformer = async (
  data: any,
): Promise<GetAllNodesResponse> => {
  data = multiNodesSchemaResponseTransformer(data)
  return data
}

export const getHierarchyChildResponseTransformer = async (
  data: any,
): Promise<GetHierarchyChildResponse> => {
  data = singleHierarchySchemaResponseTransformer(data)
  return data
}

export const updateHierarchyResponseTransformer = async (
  data: any,
): Promise<UpdateHierarchyResponse> => {
  data = singleHierarchySchemaResponseTransformer(data)
  return data
}

export const getAllNodesInHierarchyResponseTransformer = async (
  data: any,
): Promise<GetAllNodesInHierarchyResponse> => {
  data = multiNodesSchemaResponseTransformer(data)
  return data
}

const singleNodeSchemaResponseTransformer = (data: any) => {
  data.data = nodeSchemaResponseTransformer(data.data)
  return data
}

export const createNodeResponseTransformer = async (
  data: any,
): Promise<CreateNodeResponse> => {
  data = singleNodeSchemaResponseTransformer(data)
  return data
}

export const getHierarchyNodeResponseTransformer = async (
  data: any,
): Promise<GetHierarchyNodeResponse> => {
  data = singleNodeSchemaResponseTransformer(data)
  return data
}

export const updateNodeResponseTransformer = async (
  data: any,
): Promise<UpdateNodeResponse> => {
  data = singleNodeSchemaResponseTransformer(data)
  return data
}

export const getAllChildrenResponseTransformer = async (
  data: any,
): Promise<GetAllChildrenResponse> => {
  data = multiNodesSchemaResponseTransformer(data)
  return data
}

export const createHierarchyChildRelationshipsResponseTransformer = async (
  data: any,
): Promise<CreateHierarchyChildRelationshipsResponse> => {
  data = singleHierarchySchemaResponseTransformer(data)
  return data
}

export const createNodeChildRelationshipsResponseTransformer = async (
  data: any,
): Promise<CreateNodeChildRelationshipsResponse> => {
  data = singleNodeSchemaResponseTransformer(data)
  return data
}

export const getAllNodeChildrenResponseTransformer = async (
  data: any,
): Promise<GetAllNodeChildrenResponse> => {
  data = multiNodesSchemaResponseTransformer(data)
  return data
}

export const deleteNodeProductRelationshipsResponseTransformer = async (
  data: any,
): Promise<DeleteNodeProductRelationshipsResponse> => {
  data = singleNodeSchemaResponseTransformer(data)
  return data
}

export const createNodeProductRelationshipResponseTransformer = async (
  data: any,
): Promise<CreateNodeProductRelationshipResponse> => {
  data = singleNodeSchemaResponseTransformer(data)
  return data
}

export const getNodeProductsResponseTransformer = async (
  data: any,
): Promise<GetNodeProductsResponse> => {
  data = multiProductResponseSchemaResponseTransformer(data)
  return data
}

export const duplicateHierarchyResponseTransformer = async (
  data: any,
): Promise<DuplicateHierarchyResponse> => {
  data = singleSchemaResponseTransformer(data)
  return data
}

const tagSchemaResponseTransformer = (data: any) => {
  if (data.meta) {
    if (data.meta.created_at) {
      data.meta.created_at = new Date(data.meta.created_at)
    }
    if (data.meta.updated_at) {
      data.meta.updated_at = new Date(data.meta.updated_at)
    }
    return data.meta
  }
  return data
}

const multiTagSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return tagSchemaResponseTransformer(item)
    })
  }
  return data
}

export const getAllProductTagsResponseTransformer = async (
  data: any,
): Promise<GetAllProductTagsResponse> => {
  data = multiTagSchemaResponseTransformer(data)
  return data
}

const singleTagSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = tagSchemaResponseTransformer(data.data)
  }
  return data
}

export const getProductTagResponseTransformer = async (
  data: any,
): Promise<GetProductTagResponse> => {
  data = singleTagSchemaResponseTransformer(data)
  return data
}

export const getCustomRelationshipsResponseTransformer = async (
  data: any,
): Promise<GetCustomRelationshipsResponse> => {
  data = multiCustomRelationshipsSchemaResponseTransformer(data)
  return data
}

const singleCustomRelationshipSchemaResponseTransformer = (data: any) => {
  data.data = customRelationshipSchemaResponseTransformer(data.data)
  return data
}

export const createCustomRelationshipResponseTransformer = async (
  data: any,
): Promise<CreateCustomRelationshipResponse> => {
  data = singleCustomRelationshipSchemaResponseTransformer(data)
  return data
}

export const getCustomRelationshipResponseTransformer = async (
  data: any,
): Promise<GetCustomRelationshipResponse> => {
  data = singleCustomRelationshipSchemaResponseTransformer(data)
  return data
}

export const updateCustomRelationshipResponseTransformer = async (
  data: any,
): Promise<UpdateCustomRelationshipResponse> => {
  data = singleCustomRelationshipSchemaResponseTransformer(data)
  return data
}
