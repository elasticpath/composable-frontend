// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from "@hey-api/client-fetch"
import type {
  DeleteV2SettingsData,
  DeleteV2SettingsResponse,
  DeleteV2SettingsError,
  GetV2SettingsData,
  GetV2SettingsResponse,
  GetV2SettingsError,
  PutV2SettingsData,
  PutV2SettingsResponse,
  PutV2SettingsError,
  GetV2SettingsCartData,
  GetV2SettingsCartResponse,
  GetV2SettingsCartError,
  PutV2SettingsCartData,
  PutV2SettingsCartResponse,
  PutV2SettingsCartError,
} from "./types.gen"

export const client = createClient(createConfig())

/**
 * Delete Project Settings
 * Deletes a store setting. Organization settings cannot be deleted.
 */
export const deleteV2Settings = <ThrowOnError extends boolean = false>(
  options?: Options<DeleteV2SettingsData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteV2SettingsResponse,
    DeleteV2SettingsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/settings",
  })
}

/**
 * Get Project Settings
 * You can get all of the project settings via one API call using a `client_credential` token. The response is in object format as shown in the following example.
 *
 * :::note
 *
 * The default `calculation_method` is `line`.
 *
 * :::
 */
export const getV2Settings = <ThrowOnError extends boolean = false>(
  options?: Options<GetV2SettingsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetV2SettingsResponse,
    GetV2SettingsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/settings",
  })
}

/**
 * Update Project Settings
 * You can use the Settings endpoint to update your project settings at any time. These global settings take immediate effect.
 */
export const putV2Settings = <ThrowOnError extends boolean = false>(
  options?: Options<PutV2SettingsData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    PutV2SettingsResponse,
    PutV2SettingsError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/settings",
  })
}

/**
 * Get Cart Settings
 * Retrieves cart settings
 */
export const getV2SettingsCart = <ThrowOnError extends boolean = false>(
  options?: Options<GetV2SettingsCartData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetV2SettingsCartResponse,
    GetV2SettingsCartError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/settings/cart",
  })
}

/**
 * Update Cart Settings
 * You can modify the cart expiry settings to set it to any number of days up to 365. Any existing carts default to the expiry of 7 days. To update cart settings in Commerce Manager, see [Updating Cart setting](/docs/commerce-manager/settings/general-settings#updating-cart-settings).
 *
 * With update cart settings endpoint, you can:
 *
 * - Enable or disable custom discounts by setting the `custom_discounts_enabled` field to `true`. This allows you to activate your custom discounts from external services. By default, this setting is determined by the cart settings configured for the store.
 * - Enable or disable the use of rule promotions within the cart. You can apply this setting either at the store level using the update cart setting endpoint or individually to a specific cart using the [update a cart](/docs/api/carts/update-a-cart) endpoint.
 *
 * :::note
 *
 * You cannot use both custom discounts and rule promotions at the same time.
 *
 * :::
 *
 * ### Errors
 *
 * The following error is received if you enable a cart to use both custom discounts and rule promotions:
 *
 * ```json
 * {
 * "status": 422,
 * "title": "Cannot use both discounts together",
 * "detail": "Only one discount setting can be set to true at a time."
 * }
 * ```
 */
export const putV2SettingsCart = <ThrowOnError extends boolean = false>(
  options?: Options<PutV2SettingsCartData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    PutV2SettingsCartResponse,
    PutV2SettingsCartError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/settings/cart",
  })
}
