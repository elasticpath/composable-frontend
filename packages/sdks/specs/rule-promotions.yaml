openapi: 3.1.0
info:
  title: Rule Promotions API
  description: |
    Rule Promotions provide the flexibility to offer diverse discounts to shoppers. This functionality supports discounts of varying complexities, from code-based customer discounts, to "Buy X Get Y" scenarios, fixed price promotions, and more based on your business needs.

    You can create a Rule Promotion using the Rule Promotions API or through the Promotions Builder in Commerce Manager.

    To apply Rule Promotions in carts and orders across an entire store, please enable the `use_rule_promotions` configuration in Cart Settings. You can also update a specific cart to use Rule Promotions by updating the cart's specific discount settings. Please see [Update A Cart](/docs/api/carts/update-a-cart) for more details.  
    
    Enabling Rule Promotions enacts Hybrid Mode, allowing simultaneous use of both Promotions Standard and Rule Promotions discounts.
    
    For example, let's say a store provides the following promotions:
    - A Promotions Standard discount for 10% off the shopping cart
    - A Rule Promotion offering for a 20% discount on the shopping cart
    
    If a cart qualifies for both discounts based on the respective eligibility criteria, the system applies both types of discounts to the shopping cart, starting with Promotions Standard definitions before applying Rule Promotions.  In this case, the application results in a 10% discount from the Promotions Standard definition and a 20% discount from the Rule Promotion.  

    ### Rule Set
    A rule set is the criteria that determine when and how promotions get applied. Rule Sets consist of rule conditions and corresponding actions, which define eligibility and application details, respectively. Rule Sets may also contain targeted catalogs and currencies for further application granularity.
    
    **Example**
    Buy an apple, get an orange 50% off.
    
    Here, buying an apple is the rule and the 50% discount on an orange is the action.

    #### Rules
    Rules describe the conditions necessary for promotion eligibility. 
    
    In our apple-orange example above, the rule indicates the shopper must buy an apple to get the discount on an orange. In other words, the buying of an apple is the condition which determines eligibility for the corresponding discount.

    #### Actions
    Actions describe how discounts apply to eligible carts and orders. These signify the discount type, level, configurations, and any limitations or restrictions when applying.

    Actions can also include:
    - Action conditions: specify which items should be included or excluded when applying the discounts. These can be based on factors such as item SKUs, product attributes, quantities, or categories.
    - Action limitations: impose restrictions  on the number of products eligible for discounts, maximum discount amounts, and/or total applications for discounts.
    
    In the apple-orange example, the action denotes the system applies a 50% discount to an orange, assuming the eligibility rules are met.  For more complex scenarios, the action might say to provide a 50% discount on up to three oranges or might provide a fixed $1 discount on the two most expensive items from the "fruit" category.

    :::note
    
    For promotions that include a mix of item and cart rules or actions, we recommend including the specific item conditions in all item strategies to ensure desired discount applications.
    
    For complex promotions in general, we recommend including specific item conditions on all item strategies to ensure the appropriate items receive discounts.  Please see the [Promotions Builder How-To](/guides/How-To/promotions-builder) for more details on specifying conditions, restrictions, and inclusions.
    
    :::
    
    #### Action Limitations
    Action limitations restrict how a promotion is applied and can be combined with action conditions to create specific discount rules. The following limitations are available:
      - **Maximum Discount (`max_discount`)**: Specifies the maximum total discount amount that can be applied. This applies to **Cart Percent** and **Item Percent** discount promotions.
      - **Maximum Quantity (`max_quantity`)**: Limits the number of units per eligible item that can receive the promotion. This applies to **Item Discount** promotions.
      - **Items Limitation (`items`)**: Applies only to **Item Fixed** and **Item Percent** discount promotions. It determines which items in the cart are eligible for the discount:
        - **`max_items`**: Specifies the maximum number of items eligible for the discount.
        - **`price_strategy`**: Determines how eligible items are selected based on price:
          - **Cheapest (default)**: The discount is applied to the cheapest item(s) in the cart.
          - **Expensive**: The discount applies to the most expensive item(s) in the cart.
    
    These limitations can be used independently or **combined** to create granular discount applications.
    
    For example, consider a **50% discount on items from a category**, with the following limitations:
      - **Applies to a maximum of two items (`max_items: 2`)**
      - **Only applies to the two cheapest eligible items (`price_strategy: cheapest`)**
      - **Limits the total discount to $10 (`max_discount: 1000`)**
      - **Ensures a maximum of two units per eligible item receive the discount (`max_quantity: 2`)**
    
    This structure allows promotions to be **precisely controlled** to match business requirements while maintaining flexibility in promotional rules.
    
    For more details, see the [Action Limitations Overview](https://elasticpath.dev/docs/promotions-builder/promotions-builder-api/action-limitations/action-limitations-overview).
    
    #### Catalogs and Currencies
    As part of the Rule Set, you can also specify the catalogs and currencies for a given Rule Promotion. 
    
    With catalogs defined, the promotion only considers items from the identified catalogs and therefore will not consider custom items or items from other catalogs. With no catalogs defined, the promotion considers all items, including custom items.

    Specifying a currency for the Rule Promotion restricts the promotion to carts of that currency.  Notably, you can only set one currency per Rule Promotion.
    
    ### Building Blocks
    
    #### Strategies
    Strategies describe the types of condition criteria or application actions used to build a promotion.  A given promotion can be comprised of several strategies in its rules and actions.  These might include several instances of similar strategies, different strategies, or some combination thereof.  Think of these as building blocks that can be applied together to provide a functional discount.  
    
    - Rule strategies define the types of conditions that need to be met for eligibility. These might include cart total amount, item prices, cart custom attributes, and more.
    - Action strategies refer to the type of action execution run when the eligibility criteria are met. For actions, the possible strategies are cart_discount and item_discount. For more information, please see [Promotions Builder API Overview](/docs/promotions-builder/promotions-builder-api/promotions-builder-api-overview).
    
    #### Operators and Args
    Operators determine how to evaluate a given strategy, while `args` define the value threshold to measure against.  For example, please consider the following condition strategy:
    
    ```
    {
      "strategy": "cart_total",
      "operator": "gte",
      "args": [ 10000 ]
    }
    ```
    
    In this example, the strategy is `cart_total`, telling the system to assess eligibility based on the total cart value.  The operator is a greater-than-or-equal-to (`gte`) evaluation, indicating the candidate value (in this case, cart total) becomes eligible once it reaches or exceeds the threshold.  Finally, the `args` value provides the threshold value to compare against, 10000.  Taken together, then, this strategy looks for cart totals greater than or equal to 10000.
    
    Please note: different strategies support different operators. For more information, please see [Rule Promotions API Overview](/docs/promotions-builder/promotions-builder-api/promotions-builder-api-overview).
    
    #### Children and Sub-Conditions
    For additional promotion granularity, some strategies support additional specifications via `children` and `condition` fields. 
    These fields contain strategies, which provide further specifications around their parent strategy evaluations.  
    In other words, sub-conditions refer to additional criteria or conditions that must be met for a particular promotion to be applied.
    
    The following strategies support children/sub-conditions:
    - `item_price`
    - `item_quantity`
    - `item_category`
    - `item_attribute`
    - `and`
    - `or`
    
    Notably, when multiple sub-condition siblings exist, they are combined together, such that all sub-conditions must be met to fulfill eligibility.
    
    ### Stacking
    Promotion stacking and priority are key elements in managing discounts, ensuring promotions are applied as intended. Stacking allows multiple promotions to be applied to a single cart, either targeting the same items or different ones. The `stackable` flag determines whether a promotion can stack with others, defaulting to `true`. If set to `false`, no other promotion can stack on top, and the highest-priority promotion takes precedence. 
    
    Priority settings dictate the order in which promotions are applied, with higher numbers indicating higher priorities. By default, promotions without assigned priorities are applied in reverse order of creation, with newer promotions applied first and calculated against any existing discounted prices.
    
    Hybrid Mode enables the coexistence of Standard Promotions and those configured in the Promotions Builder, with each functioning independently. This means Standard Promotions can stack alongside non-stackable Builder promotions, and their stackability and priority settings remain unaffected by Standard Promotions.
    
    Override stacking, set using the `override_stacking` flag, provides an additional layer of control over how promotions interact.  This flag determines whether the promotion can stack with other promotions that are typically non-stackable and defaults to `false` when not set. When set to `true`, the promotion can stack with promotions configured as non-stackable, unless those non-stackable promotions also override stacking.
    
    ### Shipping
    Rule Promotions support shipping discounts, identified by the corresponding strategies during promotion creation.  Shipping discounts apply to shipping group base prices and do not impact shipping taxes or configured shipping fees.  Please see [Shipping Groups](/docs/ship-groups/shipping-groups/index) for more information on creating and interacting with shipping groups.

  version: 1.0.0
  contact:
    name: Elastic Path
    url: https://elasticpath.com
  license:
    name: MIT
    url: 'assets/LICENSE'
servers:
  - url: https://useast.api.elasticpath.com
    description: US East Production Server
    variables: {}
  - url: https://euwest.api.elasticpath.com
    description: EU West Production Server
    variables: {}

x-ConsumeUnitDefinition: &ConsumeUnit
  type: string
  enum: [per_application, per_checkout]
  description: |
    Specifies whether the code is consumed per application or per checkout. With `per_checkout`, the code is used once for each checkout, regardless of the number of items in the cart. When set to `per_application`, the code is used per application. For cart discounts, each application counts as one usage. For item discounts, each application to either a single quantity or a bundle is counted as one usage. For example, in a store that offers 50% off on SKU1, SKU2, and SKU3, and limits the maximum usage of the promotion code to two, a shopper can apply the promotion up to two quantities. If the cart contains two or more quantities of SKU1, the promotion is applied 2 times to SKU1, and other quantities and items are at the regular price. If the cart contains one quantity of SKU1, one quantity of SKU2, and one quantity of SKU3, the promotion is applied once to SKU1 and once to SKU2. The code usage is applied at checkout and the code is considered consumed at that point.

paths:
  /v2/rule-promotions:
    post:
      tags:
        - Rule Promotions
      summary: Create a Rule Promotion
      description: |
        Creates a new rule-based promotion, allowing flexible discount strategies based on cart or item conditions. 
        Promotions can apply fixed or percentage-based discounts, apply automatically or via codes, and have eligibility rules 
        based on product attributes, cart total, SKU conditions, custom attributes, and more.

        This endpoint supports a variety of promotion types, such as:
        - **Cart-wide discounts**
        - **Item-specific discounts**
        - **Shipping discounts**
        - **Combinations thereof**
        
        :::note
        
        The minimum item discount amount is zero, both for amounts and percentages
        
        :::

        Please refer to the **OpenAPI examples** section on this page for detailed request payloads illustrating different 
        promotion structures, including cart discounts, item discounts, and rule-based conditions.

      operationId: createRulePromotion
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Authorization'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RulePromotionRequest'
            examples:
              CartPercentDiscount:
                summary: Create a Cart Percent Discount Rule Promotion
                value:
                  data:
                    type: rule_promotion
                    name: 10% off cart rule
                    description: cart rule 10% off your order!
                    enabled: false
                    automatic: false
                    start: 2024-01-01
                    end: 2025-01-01
                    rule_set:
                      rules:
                        strategy: cart_total
                        operator: gte
                        args: [ 100 ]
                      actions:
                        - strategy: cart_discount
                          args: [ "percent", 20 ]
              ItemDiscountWithCondition:
                summary: Create an Item Discount with Condition Rule Promotion
                value:
                  data:
                    type: rule_promotion
                    name: Buy X get Y 50%
                    description: Buy X get Y 50%
                    enabled: true
                    automatic: true
                    start: 2024-02-01
                    end: 2024-02-27
                    rule_set:
                      rules:
                        strategy: item_sku
                        operator: in
                        args: ["sku1"]
                      actions:
                        - strategy: item_discount
                          args: [ "percent", 50 ]
                          condition:
                            - strategy: item_sku
                              operator: in
                              args: [ "sku2" ]
              ItemPercentWithProductAttribute:
                summary: Create an Item Percent Discount with Product Attribute
                value:
                  data:
                    type: rule_promotion
                    name: Items with item attribute discount
                    description: All items with attribute brand EP get 20% discount
                    enabled: true
                    automatic: true
                    start: 2024-02-01
                    end: 2050-01-01
                    rule_set:
                      rules:
                        strategy: item_attribute
                        operator: in
                        args: [ "products(product_template)", "brand", "string", "EP" ]
                      actions:
                        - strategy: item_discount
                          args: [ "percent", 20 ]
              MixedCartAndItemDiscount:
                summary: Create a Mixed of Cart and Item Percent Discount Rule Promotion
                description: Buy "sku1" and get 50% off "sku1", as well as 20% off the cart
                value:
                  data:
                    type: rule_promotion
                    name: Buy sku1 and get cart 20% off and item sku1 50%
                    description: Buy sku1 and get cart 20% off and item sku1 50%
                    enabled: true
                    automatic: true
                    start: 2024-02-01
                    end: 2024-02-10
                    rule_set:
                      rules:
                        - strategy: item_sku
                          operator: in
                          args: [ "sku1" ]
                      actions:
                        - strategy: item_discount
                          args: [ "percent", 50 ]
                          condition:
                            - strategy: item_sku
                              operator: in
                              args: [ "sku1" ]
                        - strategy: cart_discount
                          args: [ "percent", 20 ]
              FixedItemDiscount:
                summary: Create an Item Fixed Discount Rule Promotion
                value:
                  data:
                    type: rule_promotion
                    name: Buy item get $10 off
                    description: Buy item get $10 off
                    enabled: true
                    automatic: true
                    start: 2024-02-10
                    end: 2024-02-22
                    rule_set:
                      rules:
                        strategy: item_sku
                        operator: in
                        args: [ "sku1" ]
                      actions:
                        - strategy: item_discount
                          args: [ "fixed", 10000 ]
              FixedPriceItemDiscount:
                summary: Create an Item Fixed Price Discount Rule Promotion
                value:
                  data:
                    type: rule_promotion
                    name: Buy 2 items for $100
                    description: Buy 2 items for $100
                    enabled: true
                    automatic: true
                    start: 2024-02-01
                    end: 2050-01-01
                    rule_set:
                      rules:
                        strategy: item_sku
                        operator: in
                        args: [ "sku1" ]
                      actions:
                        - strategy: item_discount
                          args: [ "fixed_price", 2, 10000 ]
              FixedDiscountWithCatalogAndCurrencyConditions:
                summary: Create a Cart Fixed Discount Rule Promotion for a Specified Catalog and Currency
                value:
                  data:
                    type: rule_promotion
                    name: $5 off cart when cart is $100 or more
                    description: cart rule $5 off your order!
                    enabled: true
                    automatic: true
                    start: 2023-12-01
                    end: 2024-01-01
                    rule_set:
                      catalog_ids: [ "09b9359f-897f-407f-89a2-702e167fe781" ]
                      currencies: [ "CAD" ]
                      rules:
                        strategy: cart_total
                        operator: gte
                        args: [ 10000 ]
                      actions:
                        - strategy: cart_discount
                          args: [ "fixed", 500 ]
              PercentDiscountWithCustomAttribute:
                summary: Create a Cart Percent Discount with Custom Attribute Rule Promotion
                value:
                  data:
                    type: rule_promotion
                    name: $5 off cart with custom attribute
                    description: $5 off cart with custom attribute
                    enabled: true
                    automatic: true
                    start: 2024-01-01
                    end: 2024-01-26
                    rule_set:
                      rules:
                        strategy: cart_custom_attribute
                        operator: in
                        args: ["member_status", "string", "gold", "platinum"]
                      actions:
                        - strategy: cart_discount
                          args: [ "percent", 50 ]
              CartPercentDiscountExcludingItem:
                summary: Create a Cart Percent Discount Excluding Specific Item
                value:
                  data:
                    type: rule_promotion
                    name: 50 percent off cart excluding exclusive item
                    description: 50 percent off your order excluding exclusive item
                    enabled: true
                    automatic: true
                    start: 2024-02-01
                    end: 2050-01-01
                    rule_set:
                      rules:
                        strategy: cart_total
                        operator: gte
                        args: [ 10000 ]
                        children:
                          - strategy: item_sku
                            operator: nin
                            args: [ "exclusiveItem" ]
                      actions:
                        - strategy: cart_discount
                          args: [ "percent", 50 ]
                          condition:
                            strategy: item_sku
                            operator: nin
                            args: [ "exclusiveItem" ]
              ItemDiscountWithLimitations:
                summary: Create Item Discount Rule Promotion with Max Quantity Limitation
                value:
                  data:
                    type: rule_promotion
                    name: Buy a shirt and get one hat for free
                    description: Buy a shirt and get ONLY one hat for free
                    enabled: true
                    automatic: true
                    start: 2024-02-01
                    end: 2050-01-01
                    rule_set:
                      rules:
                        strategy: item_sku
                        operator: in
                        args: [ "shirt-sku" ]
                      actions:
                        - strategy: item_discount
                          args: [ "percent", 100 ]
                          limitations:
                            max_quantity: 1
                          condition:
                            - strategy: item_sku
                              operator: in
                              args: [ "hat-sku" ]
              ItemDiscountWithSkuOrId:
                summary: Create an Item Percent Discount based on SKU or Product ID
                value:
                  data:
                    type: rule_promotion
                    name: Buy an item with sku or productID get item 20% discount
                    description: Buy an item with sku or productID get item 20% discount
                    enabled: true
                    automatic: false
                    start: "2025-02-01"
                    end: "2050-01-01"
                    rule_set:
                      rules:
                        strategy: item_identifier
                        operator: in
                        args:
                          - skus:
                              - "sku1"
                            ids:
                              - "44d8077f-8fa3-4780-9df5-91d052be583f"
                      actions:
                        - strategy: item_discount
                          args: [ "percent", 20 ]
                          condition:
                            strategy: item_identifier
                            operator: in
                            args:
                              - skus:
                                  - "sku1"
                                ids:
                                  - "44d8077f-8fa3-4780-9df5-91d052be583f"
              ItemDiscountExcludingSkuOrId:
                summary: Create an item discount excluding SKU or Product ID
                value:
                  data:
                    type: rule_promotion
                    name: Get discount from category excluding sku or id
                    description: Get discount from category excluding sku or id
                    enabled: true
                    automatic: false
                    start: "2025-02-01"
                    end: "2050-01-01"
                    rule_set:
                      rules:
                        strategy: item_category
                        operator: in
                        args:
                          - "667d9fae-d8c7-4941-b556-70cb4b8612f1"
                        children:
                          - strategy: item_identifier
                            operator: nin
                            args:
                              - skus:
                                  - "nike_running1"
                                ids:
                                  - "44d8077f-8fa3-4780-9df5-91d052be583f"
                      actions:
                        - strategy: item_discount
                          args:
                            - "percent"
                            - 50
                          condition:
                            strategy: item_category
                            operator: in
                            args:
                              - "667d9fae-d8c7-4941-b556-70cb4b8612f1"
                            children:
                              - strategy: item_identifier
                                operator: nin
                                args:
                                  - skus:
                                      - "nike_running1"
                                    ids:
                                      - "44d8077f-8fa3-4780-9df5-91d052be583f"
              ItemDiscountWithRuleAndActionSubConditions:
                summary: Create an Item Discount With Rule and Action Sub-Conditions
                value:
                  data:
                    type: rule_promotion
                    name: Items discount for a category excluding items with sale attribute
                    description: 50% item discount excluding items with attribute when eligible items exceed $100
                    enabled: true
                    automatic: true
                    start: "2024-02-01"
                    end: "2050-01-01"
                    rule_set:
                      rules:
                        strategy: cart_total
                        operator: gte
                        args: [ 10000 ]
                        children:
                          - strategy: item_category
                            operator: in
                            args: [ "category-id-1" ]
                          - strategy: item_attribute
                            operator: nin
                            args: [ "products(product_template)", "sales", "string", "sale2024" ]
                      actions:
                        - strategy: item_discount
                          args: [ "percent", 50 ]
                          condition:
                            strategy: item_category
                            operator: in
                            args: [ "category-id-1" ]
                            children:
                              - strategy: item_attribute
                                operator: nin
                                args: [ "products(product_template)", "sales", "string", "sale2024" ]
              CategoryItemDiscountWithLimitations:
                summary: "Create a 50% Discount for Items from a Category with Max $10 Discount on 2 Cheapest Items (Max Quantity: 2), Excluding A Specific Item"
                value:
                  data:
                    type: rule_promotion
                    name: 50% max $10 max 2 items 2 quantities from category
                    description: Items from category 50% off max $10 off 2 cheapest items with max quantity of 2 excluding one item
                    enabled: true
                    automatic: true
                    start: "2024-02-01"
                    end: "2050-01-01"
                    rule_set:
                      rules:
                        strategy: and
                        children:
                          - strategy: item_category
                            operator: in
                            args: [ "e3807d4d-010e-494c-8227-9a5cfd8f1177" ]
                          - strategy: item_sku
                            operator: nin
                            args: [ "exclude_item_sku" ]
                      actions:
                        - strategy: item_discount
                          args: [ "percent", 50 ]
                          limitations:
                            max_quantity: 2
                            max_discount: 1000
                            items:
                              max_items: 2
                              price_strategy: cheapest
              FreeShippingForCartOver100:
                summary: Create a Rule Promotion Providing Free FedEx Ground Shipping When Cart is $100 or More
                value:
                  data:
                    type: rule_promotion
                    name: Free FedEx Ground shipping when cart is $100 or more
                    description: Free FedEx Ground shipping when cart is $100 or more
                    enabled: true
                    automatic: false
                    start: "2024-08-01"
                    end: "2050-12-31"
                    rule_set:
                      rules:
                        strategy: cart_total
                        operator: gte
                        args: [ 10000 ]
                      actions:
                        - strategy: shipping_discount
                          args: [ "percent", 100 ]
                          condition:
                            strategy: shipping_type
                            operator: in
                            args: [ "fedex_ground" ]

      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RulePromotionResponse'
    get:
      tags:
        - Rule Promotions
      summary: Get Rule Promotions
      description: |
        Retrieves a list of rule-based promotions, including information such as discount type, eligibility criteria, 
        and configuration details. This endpoint supports filtering to refine results based on specific promotion attributes.

        Use query parameters to filter promotions by:
        - **Code** – Retrieve a specific promotion by its code.
        - **Promotion name** – Search for promotions by name.
        - **Activation status** – Filter by whether a promotion is active or not.
        - **Stackability** – Identify promotions that can or cannot be combined with others.
        - **Start and end dates** – Retrieve promotions based on their validity periods.

      operationId: getRulePromotions
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: filter
          in: query
          schema:
            type: string
          description: |
            This parameter accepts a filtering expression that uses specific operators and attributes.  
            
            The following operators and attributes are available when filtering on this endpoint. See [Supported Filtering Characters](/guides/Getting-Started/filtering#supported-characters).
            
            | Attribute | Type     | Operator    | Example        |
            |:--------- |:---------|:------------|:---------------|
            | `code`    | `string`, `number` |  `eq`       |  `eq(code,summer2024)` |
            | `name`    | `string`           |  `like`,`ilike`       |  `ilike(name, 'Summer *')` |
            | `enabled`    | `boolean`       |  `eq`       |  `eq(enabled, true)` |
            | `stackable`  | `boolean`       |  `eq`       |  `eq(stackable, true)` |
            | `override_stacking`  | `boolean`       |  `eq`       |  `eq(override_stacking, true)` |
            | `start`  | `date`       |  `lt`, `le`, `eq`, `gt`, `ge`       |  `gt(start, 2025-01-01T00:00:00.000Z)` |
            | `end`  | `date`       |  `lt`, `le`, `eq`, `gt`, `ge`       |  `lt(end, 2025-01-01T00:00:00.000Z)` |

            Please note: promotion codes are case-insensitive. You can search for codes using only `numbers` or codes containing both `string` and `numbers`.

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RulePromotionResponse'

  /v2/rule-promotions/{promotionID}:
    get:
      tags:
        - Rule Promotions
      summary: Get a Rule Promotion by ID
      description: |
        Retrieves a single Rule Promotion by the promotion ID. Responses include promotion specifications such as discount type, eligibility criteria, and configuration details.
      operationId: getRulePromotionById
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: promotionID
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the rule promotion.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RulePromotionResponse'
    put:
      tags:
        - Rule Promotions
      summary: Update a Rule Promotion
      description: |
        Updates an existing Rule Promotion specified by its promotion ID. This includes both **semantic and syntactic validation** to ensure correctness. For example, the start date must be earlier than the end date.
        
        Editable fields include:
        - `name`
        - `description`
        - `enabled`
        - `start`
        - `end`
        - `automatic`
        - `stackable`
        - `override_stacking`
        - `rule_set`
        
        Please refer to the **OpenAPI examples** section on this page for sample update requests.
      operationId: updateRulePromotion
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: promotionID
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the promotion to be updated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RulePromotionRequest'
            examples:
              UpdateCartPercentDiscount:
                summary: Update a Cart Percent Discount Rule Promotion
                value:
                  data:
                    type: rule_promotion
                    name: $10 off cart rule - updated
                    description: updated cart rule $10 off your order!
                    enabled: false
                    automatic: false
                    rule_set:
                      rules:
                        - strategy: cart_total
                          operator: lt
                          args: [1000]
                      actions:
                        - strategy: cart_discount
                          args: ["percent", 10]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RulePromotionResponse'
    delete:
      tags:
        - Rule Promotions
      summary: Delete a Rule Promotion
      description: |
        Deletes an existing Rule Promotion identified by its promotion ID.
        
        - This action **permanently removes** the promotion and cannot be undone.
        - If the promotion is active, please ensure that its removal does not impact ongoing campaigns.
        
        A successful request returns a `204 No Content` response, indicating that the promotion has been deleted.

      operationId: deleteRulePromotion
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: promotionID
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the promotion.
      responses:
        '204':
          description: No Content

  /v2/rule-promotions/{promotionID}/codes:
    post:
      tags:
        - Rule Promotion Codes
      summary: Create Rule Promotion Codes
      description: |
        Creates new promotion codes for a specific rule promotion, allowing customers to redeem discounts based on predefined conditions.
        
        - Supports  bulk creation of multiple promotion codes in a single request.
        - Each code can have individual usage limits.
        - Can optionally assign codes to specific users to enforce targeted promotions.
        - The promotion codes are case-insensitive.
        
        :::note
        
        Regarding first time shopper limitations:
        - Orders without payment transactions do not count as completed purchases.
        - Canceling or refunding an order does not reinstate first-time shopper status.
        - A first-time shopper coupon code cannot have limited uses or be assigned to specific users, meaning the code cannot be restricted by the number of times it can be used or tied to a specific customer ID.
        
        :::
        
        A successful request returns a `201 Created` response with details of the generated promotion codes.
        
        ### Duplicate Codes
        Duplicate promotion codes **are supported across different promotions** in the store, regardless of their statuses and validity dates. However, **duplicate codes cannot be created within the same promotion**.
        This means that shoppers can apply a single coupon code to trigger multiple promotions if those promotions share common coupon codes. 
        
        Codes that share the same name can serve different purposes.  For example, one code may have `per_application` with a limited number of uses, while another identical code can have `per_checkout` with unlimited use.
        
        **Duplicate Code Handling:**
        - If a duplicate code is detected **within the same promotion**, the request will return a `422 Duplicate code` error.
        - When creating duplicate codes, a message appears with the successful response indicating the duplication.
        
        
        Please refer to the **OpenAPI examples** section on this page for sample request structures.

      operationId: createRulePromotionCodes
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: promotionID
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the rule promotion.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromotionCodesRequest'
            examples:
              CreateCodes:
                summary: Create Rule Promotion Codes
                value:
                  data:
                    type: promotion_codes
                    codes:
                      - code: spring2024
                      - code: summer2024
                        consume_unit: per_checkout
                      - code: summer2024_limited
                        consume_unit: per_application
                        uses: 5
                      - code: summer2024_memberOnly
                        consume_unit: per_application
                        uses: 1
                        user: vip_shopper@email.com
              SingleUsePerShopperIncludingGuests:
                summary: Create a Promotion Code Usable Once Per Shopper, Including Guest Shoppers with Emails Associated with their Carts
                value:
                  data:
                    type: promotion_codes
                    codes:
                      - code: one_per_shopper
                        consume_unit: per_checkout
                        max_uses_per_shopper:
                          includes_guests: true
                          max_uses: 1
              MaxUsesLimitWithPerShopperRestriction:
                summary: Create a Promotion Code with a Total Usage Limit and Per Shopper Restriction
                description: |
                  Create a promotion code that allows up to **10 total uses** and allows each individual shopper to use the code **once**.
                  
                  - The `uses` field is set to `10`, meaning the promotion code can be redeemed a maximum of **10 times across all shoppers**.
                  - The `max_uses_per_shopper` field sets `max_uses: 1`, ensuring **each shopper can only redeem the code once**.
                  - The `includes_guests` field is set to `true`, allowing **both registered and guest shoppers** to use the promotion code.
                  - The `consume_unit` is set to `per_checkout`, meaning the code is **consumed once per successful checkout**.
                  
                  This setup is useful for **one-time promotions** where a **limited number of shoppers can redeem the code** but prevents any single shopper from claiming multiple redemptions.
                value:
                  data:
                    type: promotion_codes
                    codes:
                      - code: one_time_use
                        consume_unit: per_checkout
                        uses: 10
                        max_uses_per_shopper:
                          includes_guests: true
                          max_uses: 1
              MaxUsesForSpecificShopper:
                summary: Limit Promotion Code Usage to a Specific Shopper
                description: |
                  Create a promotion which **limits the maximum usage of a promotion code to a specific shopper** based on their `customerID`.

                  - The `uses` field is set to `1`, meaning **this promotion code can only be used once by the identified shopper**.
                  - The `user` field is set to `customer-id-123`, ensuring the **code is only valid when the cart is checked out by the specified customer**.
                  - The `consume_unit` is set to `per_checkout`, meaning the code is **redeemed upon a successful checkout**.

                  **Important Notes:**
                  - This method is useful for **targeted, personalized promotions** where only a specific shopper should receive the discount.
                  - The promotion code **cannot be used by any other shopper**.
                  - **Account user IDs are currently not supported**.

                  This setup is ideal for **single-use, customer-specific promotions**, such as loyalty rewards or personalized discount offers.
                value:
                  data:
                    type: promotion_codes
                    codes:
                      - code: one_per_shopper
                        consume_unit: per_checkout
                        uses: 1
                        user: "customer-id-123"
              MaxUsesForSpecificRegisteredShopper:
                summary: Limit Promotion Code Usage to a Specific Registered Shopper
                description: |
                  This example demonstrates how to **restrict a promotion code to a specific registered shopper** using their `customerID`, with a limit on how many times they can redeem the code.

                  - The `user` field is set to `customer-id-123`, ensuring **only the specified shopper can use the promotion code**.
                  - The `max_uses_per_shopper.max_uses` field is set to `1`, meaning **this shopper can only redeem the code once**.
                  - The `max_uses_per_shopper.includes_guests` field is set to `false`, meaning **guest shoppers cannot use this code**.
                  - The `consume_unit` is set to `per_checkout`, meaning **the code is consumed once per successful checkout**.

                  **Key Differences from Other Shopper-Specific Limits:**
                  - Unlike a `uses: 1` setup, which sets a global limit for the code, this method **explicitly enforces per-shopper usage limits**.
                  - This approach is ideal for **exclusive promotions targeting specific registered shoppers**, ensuring that only they can redeem the discount and preventing usage by guest shoppers.
                  - **Account user IDs are currently not supported**.

                  This setup is useful for **member-only discounts, personalized promotional offers, or exclusive VIP rewards**.
                value:
                  data:
                    type: promotion_codes
                    codes:
                      - code: one_per_shopper
                        consume_unit: per_checkout
                        user: "customer-id-123"
                        max_uses_per_shopper:
                          includes_guests: false
                          max_uses: 1
              FirstTimeShopperCodeRequest:
                summary: Create a Promotion Code for First-Time Shoppers
                description: |
                  Create a **promotion code that is only applicable to first-time shoppers**.  Here, the `is_for_new_shopper` field is set to `true`, indicating that **only first-time shoppers can use this code**.

                  **Important Notes:**
                  - Promotion codes with `is_for_new_shopper: true` **cannot have usage limits** (`uses`) or be assigned to specific users.
                  - If usage limits or shopper assignments are included, a **400 Invalid Code error** will be returned.
                value:
                  data:
                    type: promotion_codes
                    codes:
                      - code: first_time
                        is_for_new_shopper: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePromotionCodesResponse'
              examples:
                PromotionCodeCreatedResponse:
                  summary: Response When a Promotion Code is Successfully Created
                  value:
                    data:
                      - id: "8a1c73bc-7c15-41c3-a3ed-a0aa398c3984"
                        code: "one_per_shopper"
                        user: "5abb8d4e-57c0-459b-91d5-c4e6f77e9c5e"
                        max_uses_per_shopper:
                          max_uses: 1
                          includes_guests: false
                        consume_unit: "per_checkout"
                FullyConsumedPromotionCodeResponse:
                  summary: Response When a Promotion Code Has Been Fully Used
                  description: |
                    Response indicating that a **promotion code has already been fully consumed** by the shopper and is no longer valid for use.

                    - The `source.id` field provides the unique identifier of the promotion.
                    - The `source.code` field specifies the exact promotion code that has been fully consumed.
                    - The `title` field (`"Fully Consumed"`) serves as a user-friendly summary of the issue.
                    - The `description` field provides a clear explanation: `"You've already fully consumed this promotion code"`.

                    This response is useful for handling **errors when applying promotion codes**, ensuring that customers receive **clear feedback** if they attempt to reuse a code that has reached its usage limit.
                  value:
                    messages:
                      - source:
                          type: rule_promotion
                          id: "38861a5c-81bb-43bc-8934-e30cde108579"
                          code: "one_per_shopper"
                        title: "Fully Consumed"
                        description: "You've already fully consumed this promotion code"
                DuplicateCodeNameResponse:
                  summary: Message Response When Creating a Duplicate Promotion Code Name
                  value:
                    messages:
                      - source:
                          type: promotion_codes
                          codes: [ "duplicate-code" ]
                        title: "Duplicate code names"
                        description: "Code names duplicated in other promotions"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        status:
                          type: integer
                          example: 400
                        source:
                          type: string
                          example: "data.codes.0.max_uses_per_shopper"
                        title:
                          type: string
                          example: "missing_dependency"
                        detail:
                          type: string
                          example: "Has a dependency on max_uses"
              examples:
                MissingMaxUsesDependencyError:
                  summary: Error When `max_uses_per_shopper.includes_guests` is Provided Without `max_uses`
                  description: |
                    This error occurs when `max_uses_per_shopper.includes_guests` is provided **without specifying** `max_uses`.
                  value:
                    errors:
                      - status: 400
                        source: "data.codes.0.max_uses_per_shopper"
                        title: "missing_dependency"
                        detail: "Has a dependency on max_uses"
                FirstTimeShopperCodeError:
                  summary: Error When Setting Usage Limits While Assigning First-Time Shopper Codes
                  description: |
                    This error occurs when a **first-time shopper promotion code** is created **with restricted uses (`uses`) or assigned to specific users (`user`)**.
                  value:
                    errors:
                      - status: 400
                        source: ""
                        title: "Invalid Code"
                        detail: "Code - first_time_uses can't have limited uses or assigned to users since it's for first-time shoppers."
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        status:
                          type: integer
                          example: 422
                        source:
                          type: string
                          example: ""
                        title:
                          type: string
                          example: "Unsupported consume unit"
                        detail:
                          type: string
                          example: "Consume unit 'per_application' is not supported when using 'max_uses_per_shopper' features."
              examples:
                UnsupportedConsumeUnitError:
                  summary: Error When `max_uses_per_shopper.max_uses` is Used with `per_application`
                  description: |
                    This error occurs when `max_uses_per_shopper.max_uses` is set while using `consume_unit: per_application`, which is not supported.
                  value:
                    errors:
                      - status: 422
                        source: ""
                        title: "Unsupported consume unit"
                        detail: "Consume unit 'per_application' is not supported when using 'max_uses_per_shopper' features."
                NoCodesAllowedForAutomaticPromotion:
                  summary: Error When Attempting to Create Promotion Codes for Automatic Promotions
                  value:
                    errors:
                      - status: 422
                        title: "No codes allowed"
                        detail: "Cannot add codes to automatic promotion"

                DuplicatePromotionCodeError:
                  summary: Error When Creating a Promotion Code That Already Exists
                  description: |
                    This error occurs when attempting to create a promotion code that already exists within the same Rule Promotion.
                  value:
                    errors:
                      - status: 422
                        title: "Duplicate code"
                        detail: "Promotion code already in use"
    get:
      tags:
        - Rule Promotion Codes
      summary: Get Rule Promotion Codes
      description: |
        Retrieves the list of promotion codes associated with a specific Rule Promotion.
        
        - Returns all codes generated for the given promotion ID, including details on usage limits and redemption status.
        - Supports both automatically generated and manually created promotion codes.
        - Can be used to verify whether a promotion code is still valid or has reached its usage limit.

      operationId: getRulePromotionCodes
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: promotionID
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the rule promotion.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPromotionCodesResponse'
    delete:
      tags:
        - Rule Promotion Codes
      summary: Delete Rule Promotion Codes
      description: |
        Deletes one or more promotion codes from a specific rule promotion.
        
        - Supports **bulk deletion**, allowing multiple codes to be removed in a single request.
        - Removes promotion codes permanently, making them unavailable for future use.
        - If a code has already been redeemed, it will be removed from the system but may still reflect in historical transactions.
        
        A successful request returns a `204 No Content` response, indicating the specified promotion codes have been deleted.

      operationId: deleteRulePromotionCodes
      security:
        - BearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: promotionID
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the rule promotion.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromotionCodesRequest'
            examples:
              DeleteCodes:
                summary: Delete Rule Promotion Codes
                value:
                  data:
                    type: promotion_codes
                    codes:
                      - code: spring2024
                      - code: summer2024
                        consume_unit: per_checkout
                      - code: summer2024_limited
                        consume_unit: per_application
                        uses: 5
                      - code: summer2024_memberOnly
                        consume_unit: per_application
                        uses: 1
                        user: vip_shopper@email.com
      responses:
        '204':
          description: No Content

  /v2/rule-promotions/{promotionID}/codes/{codeID}:
    delete:
      tags:
        - Rule Promotion Codes
      summary: Delete A Single Rule Promotion Code
      description: |
        Deletes a single promotion code from a specific rule promotion.
        
        - Permanently removes the specified promotion code, making it unavailable for future use.
        - Can be used to **revoke a specific code** without affecting other codes under the same promotion.
        - If the code has already been redeemed, it will still be removed from the system but may still reflect in historical transactions.
        
        A successful request returns a `204 No Content` response, indicating the specified promotion code has been deleted.

      operationId: deleteSingleRulePromotionCode
      security:
        - BearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: promotionID
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the rule promotion.
        - name: codeID
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the rule promotion code.
      responses:
        '204':
          description: No Content

  /v2/rule-promotions/{uuid}/jobs:
    post:
      summary: Create a Rule Promotion Job
      description: |
        Creates an asynchronous job for a specific Rule Promotion. Jobs are used to generate or export promotion codes in bulk.

        The following job types are supported:
        - **`code_generate`**: Generates a batch of unique promotion codes.
        - **`code_export`**: Exports all existing promotion codes as a downloadable CSV file.

        Job processing occurs asynchronously. The job request is queued, and its status must be checked separately.

        ### Job Processing Status
        Jobs can have the following statuses:
        - `pending`: Job is in the queue, waiting to be processed.
        - `processing`: Job is actively being processed.
        - `completed`: Job completed successfully.
        - `failed`: Job encountered an error and did not complete.
        - `cancelling`: Cancellation in progress (for long-running jobs).
        - `cancelled`: Job was successfully cancelled.

        Please refer to the **OpenAPI examples** section on this page for sample job creation requests.

      tags:
        - Rule Promotion Jobs
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the rule promotion.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  description: Must be set to `promotion_job`.
                  type: string
                  enum: [promotion_job]
                job_type:
                  description: |
                    Specifies the type of task to run.
                  type: string
                  enum:
                    - code_generate
                    - code_export
                name:
                  type: string
                  description: Represents the name of the job. The maximum allowed length is 50 characters.
                  maxLength: 50
                parameters:
                  type: object
                  properties:
                    number_of_codes:
                      type: integer
                      description:
                        Specifies the number of codes to be generated.
                      maximum: 1000
                    max_uses_per_code:
                      type: integer
                      description: Specifies the maximum number of usages per code. If set to zero, you cannot use this promotion. If no value is set, it can be used unlimited times.
                    consume_unit: *ConsumeUnit
                    code_prefix:
                      type: string
                      description: Prefix for generated promotion codes (e.g., `SUMMER-`).
                    code_length:
                      type: integer
                      description: Code length.
                      maximum: 16
                      minimum: 8
                      default: 8
            examples:
              GenerateBulkPromotionCodes:
                summary: Create a Job to Generate 100 Bulk Promotion Codes
                description: |
                  Create an asynchronous job to generate **100 unique promotion codes** with specific parameters.

                  - The `job_type` is `"code_generate"`, meaning this job will generate new promotion codes.
                  - The `parameters` field defines:
                    - `number_of_codes: 100`, meaning **100 unique codes will be generated**.
                    - `max_uses_per_code: 1`, restricting **each code to a single use**.
                    - `consume_unit: per_checkout`, meaning **each code is consumed once per successful checkout**.
                    - `code_prefix: "summer-"`, ensuring that **each generated code starts with "summer-"**.
                    - `code_length: 8`, specifying that **each code will have 8 characters after the prefix**.

                  **Job Processing:**
                  - The job will run asynchronously, and the status must be checked separately.
                  - You can retrieve the job's status and results using the **Get Rule Promotion Jobs** endpoint.
                value:
                  data:
                    type: promotion_job
                    job_type: code_generate
                    name: "Demo bulk code generate"
                    parameters:
                      number_of_codes: 100
                      max_uses_per_code: 1
                      consume_unit: per_checkout
                      code_prefix: "summer-"
                      code_length: 8
              ExportPromotionCodes:
                summary: Create a Rule Promotion Job to Export All Promotion Codes
                description: |
                  Create an asynchronous job to export all **existing promotion codes** as a downloadable CSV file.

                  **Job Processing:**
                  - The job runs asynchronously, and its status must be checked separately.
                  - Once the job completes, the exported file will be available for download.
                  - You can track the job's status using the **Get Rule Promotion Jobs** endpoint.
                value:
                  data:
                    type: promotion_job
                    job_type: code_export
                    name: "Demo export codes"
      responses:
        '201':
          $ref: '#/components/schemas/PromotionJobCreatedResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        status:
                          type: string
                          example: "400"
                        title:
                          type: string
                          example: "Too many jobs"
                        detail:
                          type: string
                          example: "Only 1 pending or processing job is allowed per promotion."
              examples:
                TooManyJobsError:
                  summary: Error When Attempting to Create a Job While Another Job is Still Processing
                  description: |
                    This error occurs when a **new job is requested while another job is still pending or processing** for the same promotion.
          value:
            errors:
              - status: "400"
                title: "Too many jobs"
                detail: "Only 1 pending or processing job is allowed per promotion."
      security:
        - bearerAuth: [ ]
    get:
      summary: Get Rule Promotion Jobs
      description: |
        Retrieves a list of jobs associated with a specific rule promotion. Each job represents an asynchronous operation such as promotion code generation or export.

        The response includes details such as:
        - **Job type** (`code_generate` or `code_export`)
        - **Job status** (`pending`, `processing`, `completed`, `failed`, `cancelling`, or `cancelled`)
        - **Parameters used** (such as number of codes generated)
        - **Results** (such as number of codes successfully generated or deleted)

        ### Filtering
        You can filter jobs by:
        - **Job Type** (`eq(job_type, code_export)`)
        - **Status** (`eq(status, complete)`)

      tags:
        - Rule Promotion Jobs
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of a rule promotion.
        - name: filter
          in: query
          required: false
          schema:
            type: string
          description: Specifies filter attributes.
      responses:
        '200':
          $ref: '#/components/schemas/PromotionJobsListResponse'
      security:
        - bearerAuth: [ ]

  /v2/rule-promotions/{uuid}/jobs/{job-uuid}/file:
    get:
      summary: Get Rule Promotion Code Exported File
      description: |
        Retrieves the exported promotion codes for a rule promotion job in a CSV format.

        - The file contains the generated codes along with relevant metadata.
        - This endpoint is applicable only for jobs of type `code_export`.
        - The job must be in a `completed` state before the file can be retrieved.

      tags:
        - Rule Promotion Jobs
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the rule promotion.
        - name: job-uuid
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the job associated with the file.
      responses:
        '200':
          $ref: '#/components/schemas/PromotionCodeExportedFileResponse'
      security:
        - bearerAuth: [ ]

  /v2/rule-promotions/{uuid}/jobs/{job-uuid}/cancel:
    post:
      summary: Cancel a Rule Promotion Job
      description: |
        Cancels an asynchronous job for a rule promotion if its status is `pending` or `processing`.

        - Only jobs that have not yet completed can be canceled.
        - Once canceled, no further processing occurs, and partially completed results may be deleted.

      tags:
        - Rule Promotion Jobs
      parameters:
        - name: uuid
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the rule promotion.
        - name: job-uuid
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the job to be canceled.
      responses:
        '200':
          description: Successfully Canceled the Rule Promotion Job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromotionJobCanceledResponse'
              examples:
                PromotionJobCancellingResponse:
                  summary: Successful Cancellation Request for a Rule Promotion Job
                  description: |
                    This response indicates that the **job cancellation request was successfully submitted**, and the job is now in the `"cancelling"` state.

                    - The job has entered the **cancelling state**, meaning the system is stopping it.
                    - To check the job's final status, use the **Get Rule Promotion Jobs** endpoint.
                    - If the job successfully cancels, it will transition to `"cancelled"`.
                    - If cancellation fails (e.g., the job completes before being stopped), it may remain `"completed"`.
                  value:
                    data:
                      type: "promotion_job"
                      id: "9bc1391c-1b65-419e-940e-66ed86c07001"
                      rule_promotion_id: "8c150382-b258-4c88-a2d4-b9ea0be74a07"
                      job_type: "code_generate"
                      name: "Demo bulk code generate"
                      parameters:
                        number_of_codes: 100
                        max_uses_per_code: 1
                        consume_unit: "per_checkout"
                        code_prefix: "summer-"
                        code_length: 8
                      status: "cancelling"
                      meta:
                        timestamps:
                          created_at: "2024-12-03T23:31:40.962680423Z"
                          updated_at: "2024-12-03T23:31:40.962680423Z"
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        status:
                          type: string
                          example: "422"
                        title:
                          type: string
                          example: "Unprocessable Entity"
                        detail:
                          type: string
                          example: "Only pending or processing jobs can be cancelled."
              examples:
                CannotCancelCompletedJobError:
                  summary: Error When Attempting to Cancel a Job That Is Not Pending or Processing
                  description: |
                    This error occurs when a **job cancellation request** is made for a job that **is not in a `pending` or `processing` state**.

                    **Possible Causes:**
                    - Attempting to cancel a job that has already **completed**, **failed**, or was **previously cancelled**.
                    - The job may have already transitioned out of `pending` or `processing` by the time the request was made.
                  value:
                    errors:
                      - status: "422"
                        title: "Unprocessable Entity"
                        detail: "Only pending or processing jobs can be cancelled."
      security:
        - bearerAuth: [ ]

  /v2/rule-promotions/usages/anonymize:
    post:
      tags:
        - Rule Promotion Usages
      summary: Anonymize Rule Promotion Usages
      description: |
        Anonymizes user-related data in Rule Promotion usage records. 
        This operation is typically used for GDPR compliance or privacy-related requests.

        - This process replaces identifiable user data with anonymized placeholders.
        - Affects all recorded promotion usages where customer data is stored.
        - Does not impact historical transaction records or applied discounts.

        A successful request returns a `200 OK` response with the anonymized usage records.

      operationId: anonymizeRulePromotionUsages
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    usage_ids:
                      type: array
                      items:
                        type: string
                      description: |
                        The unique identifiers of the usages to be anonymized.
                        Multiple usage IDs can be provided to anonymize in bulk.
              required:
                - data
            example:
              data:
                usage_ids:
                  - "ca4385ec-7fb2-4a95-8690-f752c508d68a"
                  - "d4e5f6g7-h8i9-0j1k-2l3m-4n5o6p7q8r9s"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RulePromotionUsage'
                example:
                  data:
                    - id: "ca4385ec-7fb2-4a95-8690-f752c508d68a"
                      order_id: "8edd5ca8-39b7-468d-aea9-a470690ca98d"
                      code_id: "00fc633b-9932-4e18-b122-fd5c3173caa3"
                      code: "node1off"
                      times_used: 1
                      used_on: "2023-06-19T18:05:20.846Z"
                      customer_id: "9ef25142-d67a-41d3-99b2-4d30aeef6c9d"
                      customer_email: "**"
                      meta:
                        timestamps:
                          updated_at: "2023-06-19T18:05:39.141Z"
                      updated_by: "Key-2439657140697170361"
                      anonymized: true
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  - status: 400
                    title: "Invalid Request"
                    detail: "The request payload is malformed or missing required fields."
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  - status: 404
                    title: "Usages Not Found"
                    detail: "Some usage IDs could not be found."
                    meta:
                      usage_ids:
                        - "invalid-usage-id-1"
                        - "invalid-usage-id-2"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  - status: 401
                    title: "Unauthorized"
                    detail: "Authentication credentials were missing or incorrect."

  /v2/rule-promotions/{promotionID}/usages:
    get:
      tags:
        - Rule Promotion Usages
      summary: Get Rule Promotion Usages
      description: |
        Retrieves a list of usage records for a specific Rule Promotion.

        - Provides details about when and how a promotion was used.
        - Can be filtered and paginated to refine results.
        - Useful for analyzing promotion effectiveness and customer engagement.

      operationId: getRulePromotionUsages
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: promotionID
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the rule promotion.
        - name: filter
          in: query
          required: false
          schema:
            type: string
          description: |
            Filter attributes to refine the usage records. Supported attributes:
            - `id`: Filter by usage ID.
            - `code`: Filter by promotion code.
            - `used_on`: Filter by usage date with operators `gt`, `ge`, `le`, `lt`.
          example: eq(code,cart1off)
        - name: page[limit]
          in: query
          required: false
          schema:
            type: integer
            description: The number of records per page.
            example: 10
        - name: page[offset]
          in: query
          required: false
          schema:
            type: integer
            description: The number of records to offset the results by.
            example: 0
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RulePromotionUsage'
                  meta:
                    $ref: '#/components/schemas/Response.PaginationMeta'
              example:
                data:
                  - id: "a9b73e4d-637f-4f1c-9b3e-2de1f8a70351"
                    order_id: "e3d7b9fa-4a90-4e98-bac2-d7a4b4f2f63f"
                    code_id: "8a2c3f47-9d3b-4562-8392-4e5e6cda3d2b"
                    code: "cart10off"
                    times_used: 1
                    used_on: "2024-02-20T15:42:00.000Z"
                    customer_id: "4f3e8c5d-37e4-43fb-9276-d1b76f0c3a2a"
                    customer_email: "shopper@example.com"
                    meta:
                      timestamps:
                        updated_at: "2024-02-20T15:45:00.000Z"
                      updated_by: "Admin-User-123"
                meta:
                  pagination:
                    total: 100
                    limit: 10
                    offset: 0
                    current: 1
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  - status: 401
                    title: "Unauthorized"
                    detail: "Authentication is required to access this resource."
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  - status: 404
                    title: "Promotion Not Found"
                    detail: "No usages found for the specified promotion ID."

  /v2/rule-promotions/{promotionID}/codes/{code}/usages:
    get:
      tags:
        - Rule Promotion Usages
      summary: Get Rule Promotion Code Usages
      description: |
        Retrieves a list of usage records for a specific Rule Promotion code.

        - Provides insights into how many times a specific code was used.
        - Can be filtered and paginated to refine results.
        - Useful for tracking the performance of individual promotion codes.

      operationId: getRulePromotionCodeUsages
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Authorization'
        - name: promotionID
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the rule promotion.
        - name: code
          in: path
          required: true
          schema:
            type: string
          description: The specific promotion code for which to retrieve usage records.
        - name: filter
          in: query
          required: false
          schema:
            type: string
          description: |
            Filter attributes to refine the results. Supported attributes:
            - `id`: Filter by usage ID.
            - `used_on`: Filter by date with operators `gt`, `ge`, `le`, `lt`.
          example: gt(used_on,2024-02-01T00:00:00Z)
        - name: page[limit]
          in: query
          required: false
          schema:
            type: integer
          description: The number of records per page.
          example: 10
        - name: page[offset]
          in: query
          required: false
          schema:
            type: integer
          description: The number of records to offset the results by.
          example: 0
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RulePromotionUsage'
                  meta:
                    $ref: '#/components/schemas/Response.PaginationMeta'
              example:
                data:
                  - id: "c2f45a8d-6ebf-4b6a-8b1c-d2e7c9e0f45f"
                    order_id: "1a3b5c7d-9e2f-4a5b-8c1d-6e3f9b0d4c5f"
                    code_id: "5d7e9f2b-3c4a-6b8d-1e9f-0a2b3c4d5e6f"
                    code: "holiday50"
                    times_used: 2
                    used_on: "2024-02-18T10:30:00.000Z"
                    customer_id: "7e6c5d4b-3a2f-1e9d-8b0c-9f4e7d6c3b5a"
                    customer_email: "vipuser@example.com"
                    meta:
                      timestamps:
                        updated_at: "2024-02-18T10:35:00.000Z"
                      updated_by: "Admin-User-456"
                meta:
                  pagination:
                    total: 20
                    limit: 10
                    offset: 0
                    current: 1
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  - status: 401
                    title: "Unauthorized"
                    detail: "Authentication is required to access this resource."
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  - status: 404
                    title: "Promotion Code Not Found"
                    detail: "No usages found for the specified promotion code."

components:
  schemas:
    RulePromotionRequest:
      type: object
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              enum: [rule_promotion]
            name:
              type: string
              description: Specifies a name for the promotion.
            description:
              type: string
              description: Specifies a description for the rule promotion.
            priority:
              type: integer
              description: Specifies the priority order of a promotion, with larger numbers indicating higher priorities.
            enabled:
              type: boolean
              description: Specifies whether the promotion is enabled. The options are true or false, and the default setting is false.
            automatic:
              type: boolean
              description: Specifies whether the promotion is applied automatically to the cart or a code is required to apply the promotion. The default setting is false. When this value is set to true, a code is autogenerated. If this value is set to false, you must create the code manually.
            stackable:
              type: boolean
              description: Specifies whether this promotion can stack with other promotions.
            override_stacking:
              type: boolean
              description: Enables a promotion to be stacked with an otherwise non-stackable promotion.
            start:
              type: string
              format: date-time
              description: Specifies the start date and time of the promotion or the start date of the promotion. You can provide a specific time in the HH:MM format. If no time is specified, the default start and end time is set to 00:00.
            end:
              type: string
              format: date-time
              description: Specifies the end date and time of the promotion or the end date of the promotion.
            rule_set:
              type: object
              properties:
                catalog_ids:
                  type: array
                  items:
                    type: string
                  description: Specifies the catalogs that are eligible for the promotion. By default, the promotion applies to all items, including custom items. However, when catalog_ids is defined, the promotion is only applied to items within the specified catalogs. If catalog IDs are specified, custom items cannot be applied as part of the promotion.
                currencies:
                  type: array
                  items:
                    type: string
                  description: Specifies currencies that are applied for the promotion.
                rules:
                  type: object
                  properties:
                    strategy:
                      type: string
                      description: Specifies a given strategy for the rule. Strategies determine how rules are applied. Supported strategies value include `cart_total`, `cart_custom_attribute`, `item_price`, `item_sku`, `item_product_id`, `item_quantity`, `item_category`, `item_attribute`, `item_identifier`, `and` and `or`.
                    operator:
                      type: string
                      description: Specifies the operators used for the rule strategy.
                    args:
                      type: array
                      items:
                        type: string
                      description: Represents the condition value associated with each rule within the rule set. It requires at least three arguments.
                    children:
                      type: array
                      items:
                        type: object
                        properties:
                          strategy:
                            type: string
                          operator:
                            type: string
                          args:
                            type: array
                            items:
                              type: string
                actions:
                  type: array
                  items:
                    type: object
                    properties:
                      strategy:
                        type: string
                        description: Specifies the strategy for the promotion action.
                      args:
                        type: array
                        items:
                          type: string
                      condition:
                        type: object
                        properties:
                          strategy:
                            type: string
                          children:
                            type: array
                            items:
                              type: object
                              properties:
                                strategy:
                                  type: string
                                operator:
                                  type: string
                                args:
                                  type: array
                                  items:
                                    type: string
                      limitations:
                        type: object
                        properties:
                          max_discount:
                            type: integer
                            description: Specifies the maximum amount of discount applied to the shopping cart.
                          max_quantity:
                            type: integer
                            description: Specifies the maximum quantity of each eligible item to which the promotion is applied.
                          items:
                            type: object
                            properties:
                              max_items:
                                type: integer
                                description: Specifies the maximum number of items eligible for the discount.
                              price_strategy:
                                type: string
                                enum: [cheapest, expensive]
                                description: Specifies the strategy for determining which items to discount based on their individual prices.
    RulePromotionResponse:
      type: object
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              enum: [rule_promotion]
            id:
              type: string
            store_id:
              type: string
            name:
              type: string
            description:
              type: string
            priority:
              type: integer
            enabled:
              type: boolean
            automatic:
              type: boolean
            stackable:
              type: boolean
            override_stacking:
              type: boolean
            rule_set:
              type: object
              properties:
                catalog_ids:
                  type: array
                  items:
                    type: string
                currencies:
                  type: array
                  items:
                    type: string
                rules:
                  type: object
                  properties:
                    strategy:
                      type: string
                    operator:
                      type: string
                    args:
                      type: array
                      items:
                        type: string
                    children:
                      type: array
                      items:
                        type: object
                        properties:
                          strategy:
                            type: string
                          operator:
                            type: string
                          args:
                            type: array
                            items:
                              type: string
                actions:
                  type: array
                  items:
                    type: object
                    properties:
                      strategy:
                        type: string
                      args:
                        type: array
                        items:
                          type: string
                      condition:
                        type: object
                        properties:
                          strategy:
                            type: string
                          children:
                            type: array
                            items:
                              type: object
                              properties:
                                strategy:
                                  type: string
                                operator:
                                  type: string
                                args:
                                  type: array
                                  items:
                                    type: string
                      limitations:
                        type: object
                        properties:
                          max_discount:
                            type: integer
                          max_quantity:
                            type: integer
                          items:
                            type: object
                            properties:
                              max_items:
                                type: integer
                              price_strategy:
                                type: string
                                enum: [cheapest, expensive]
            start:
              type: string
              format: date-time
            end:
              type: string
              format: date-time
            meta:
              type: object
              properties:
                timestamps:
                  type: object
                  properties:
                    created_at:
                      type: string
                      format: date-time
                    updated_at:
                      type: string
                      format: date-time
    MaxUsesPerShopper:
      type: object
      description: Object for setting max uses per shopper. Only include this object, when you want to set limit per shopper.
      properties:
        max_uses:
          type: integer
          description: Sets max number of times the code can be used by a shopper. NOTE - This cannot be set with `per_application` consume unit.
        includes_guests:
          type: boolean
          default: false
          description: The flag to include guest shoppers for the discount with max use restriction. **If this field is provided, the max_uses value is required.** When set to `true`, guest shoppers must have an email associated with the cart to use the code. A guest cart without an email cannot use the code. When set to `false`, guest shoppers cannot use the promo code, even if the cart has an associated guest email.
    PromotionCodesRequest:
      type: object
      properties:
        data:
          type: object
          properties:
            type:
              type: string
              enum: [promotion_codes]
            codes:
              type: array
              description: Specifies the code details in an array of objects.
              items:
                type: object
                properties:
                  code:
                    type: string
                    description: Specifies the string to use as a code for the promotion.
                  uses:
                    type: integer
                    description: Specifies the number of times the code can be used. If no value is set, the customer can use the code any number of times.
                  user:
                    type: string
                    description: Specifies the customer ID of the shopper who can use the code. For more information, see the [Create a customer](/docs/customer-management/customer-management-api/create-a-customer) section.
                  consume_unit: *ConsumeUnit
                  max_users_per_shopper:
                    $ref: '#/components/schemas/MaxUsesPerShopper'
                  is_for_new_shopper:
                    type: boolean
                    description: A flag indicating whether the coupon is for first-time shoppers. If set to `true`, the discount will only apply if the shopper has never made a payment on any order in the store. If set to `false` or left unset, it will be a regular discount that applies to all shoppers. When this flag is set to `true`, the coupon cannot have usage limitations or be assigned to specific users.
    GetPromotionCodeResponse:
      type: object
      properties:
        type:
          type: string
          enum: [ promotion_codes ]
        code:
          type: string
        uses:
          type: integer
        user:
          type: string
        consume_unit: *ConsumeUnit
        max_uses:
          type: integer
        max_users_per_shopper:
          $ref: '#/components/schemas/MaxUsesPerShopper'
        is_for_new_shopper:
          type: boolean
        created_by:
          type: string
        meta:
          type: object
          properties:
            timestamps:
              type: object
              properties:
                created_at:
                  type: string
                  format: date-time

    CreatePromotionCodeResponse:
      type: object
      properties:
        type:
          type: string
          enum: [promotion_codes]
        code:
          type: string
        uses:
          type: integer
        user:
          type: string
        consume_unit:
          type: string
          enum: [per_application, per_checkout]
        max_uses:
          type: integer
        max_users_per_shopper:
          $ref: '#/components/schemas/MaxUsesPerShopper'
        is_for_new_shopper:
          type: boolean
    GetPromotionCodesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/GetPromotionCodeResponse'
    CreatePromotionCodesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CreatePromotionCodeResponse'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/PromotionCodeMessage'

    GenerateResult:
      type: object
      description: |
        Represents the result of a promotion job, including the number of generated and deleted promotion codes.

        - `generated`: Total number of successfully generated codes.
        - `deleted`: Number of codes that were deleted during job cancellation, if applicable.
      properties:
        generated:
          type: integer
          description: Number of successfully generated promotion codes.
          example: 1000
        deleted:
          type: integer
          nullable: true
          description: Number of codes deleted due to job cancellation.
          example: 50
    PromotionJob:
      type: object
      properties:
        id:
          type: string
          description: A unique ID generated when a job is created.
        type:
          description: Always `promotion_job`.
          type: string
          enum: [promotion_job]
        rule_promotion_id:
          description: A unique ID of a promotion.
          type: string
        job_type:
          description: The type of job you want to run. For example, `code_generate` to generate codes or `code_export` to export codes.
          type: string
        name:
          description: The name of the job. The maximum length allowed is 50 characters.
          type: string
        parameters:
          type: object
        status:
          description: The status of the job. Please see [Overview](/docs/api/promotions/promotion-jobs).
          type: string
        error:
          description: The error encountered during job execution, if applicable.
          type: string
        meta:
          type: object
          properties:
            timestamps:
              type: object
              properties:
                created_at:
                  description: The creation date of the job.
                  type: string
                  format: date-time
                updated_at:
                  description: The last updated date of the job.
                  type: string
                  format: date-time
        generate_result:
          $ref: '#/components/schemas/GenerateResult'
    PromotionJobsListResponse:
      description: Successful response
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/PromotionJob'
    PromotionJobCreatedResponse:
      description: Promotion job created
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/PromotionJob'
    PromotionJobCanceledResponse:
      description: Job canceled successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/PromotionJob'
    PromotionCodeExportedFileResponse:
      description: Successful response
      content:
        application/json:
          schema:
            type: object
            properties:
              href:
                type: string
                description: URL to download the CSV file.

    RulePromotionUsage:
      type: object
      description: Represents a single rule promotion usage record.
      properties:
        id:
          type: string
          description: The unique identifier of the usage record.
        order_id:
          type: string
          nullable: true
          description: The associated order ID, if applicable.
        code_id:
          type: string
          description: The unique identifier of the promotion code.
        code:
          type: string
          description: The promotion code used.
        times_used:
          type: integer
          description: The number of times the promotion code has been used.
        used_on:
          type: string
          format: date-time
          description: The timestamp when the promotion was applied.
        customer_id:
          type: string
          nullable: true
          description: The customer identifier who used the promotion, if applicable.
        customer_email:
          type: string
          nullable: true
          description: The email of the customer who used the promotion, if applicable.
        meta:
          type: object
          properties:
            timestamps:
              type: object
              properties:
                updated_at:
                  type: string
                  format: date-time
                  description: The timestamp when the usage record was last updated.
        updated_by:
          type: string
          description: Identifier of the user or system that last updated the record.
        anonymized:
          type: boolean
          description: Indicates whether the usage record has been anonymized.

    Response.PaginationMeta:
      type: object
      properties:
        pagination:
          type: object
          properties:
            total:
              type: integer
              description: Total number of available records.
            limit:
              type: integer
              description: Number of records returned per page.
            offset:
              type: integer
              description: Number of records skipped.
            current:
              type: integer
              description: Current page number.

    Response.Error:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              status:
                type: integer
                description: HTTP status code.
              title:
                type: string
                description: Error title.
              detail:
                type: string
                description: Error details.

    PromotionCodeMessage:
      type: object
      properties:
        source:
          type: object
          description: Information about the affected promotion codes.
          properties:
            type:
              type: string
              enum: [ promotion_codes ]
              description: Indicates that the affected entity is a promotion code.
              example: "promotion_codes"
            codes:
              type: array
              description: A list of promotion codes that triggered the message.
              items:
                type: string
                example: "spring2024"
        title:
          type: string
          description: A brief title summarizing the message.
          example: "Duplicate code names"
        description:
          type: string
          description: A detailed explanation of the message.
          example: "Code names duplicated in other promotions"

  parameters:
    Authorization:
      name: Authorization
      in: header
      description: The Bearer token required to get access to the API.
      required: true
      schema:
        type: string
        format: Bearer
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer