openapi: "3.1.0"
info:
  version: 1.0.0
  title: Permissions Introduction
  # language=Markdown
  description: |
    A user's permissions are determined by their assigned role, which defines their level of access to APIs and Commerce Manager. These permissions ensure that users can only perform actions and access data relevant to their responsibilities.

    With [Commerce Extensions](/docs/api/commerce-extensions/commerce-extensions-introduction), you can create Custom APIs to extend the functionality of Commerce. Using Custom API Role Policies, you can specify the permissions for each role, ensuring fine-grained control over who can interact with these Custom APIs.
  contact:
    name: Elastic Path
    url: 'https://www.elasticpath.com'
    email: support@elasticpath.com
  license:
    name: MIT
    url: 'assets/LICENSE'
servers:
  - url: 'https://useast.api.elasticpath.com'
    description: US East
  - url: 'https://euwest.api.elasticpath.com'
    description: EU West
security:
  - bearerAuth: []
tags:
  - name: Built-in Roles
    # language=Markdown
    description: |
      Built-in Roles represent the various personas supported in Commerce. Some Roles pertain to store management and can be assigned to users through Commerce Manager, while others represent customers who shop at the store.
  - name: Custom API Role Policies
    # language=Markdown
    description: |
      A Custom API Role Policy defines the level of access a role has to a Custom API. By default, administrative roles like **Store Admin** or **Org Admin** have full access to all Custom APIs. To grant access to other roles, a policy must be created for that specific role and Custom API.

      Below are the permissions that can be assigned to a role:

      | Permission | Description                              |
      |------------|------------------------------------------|
      | **Create** | Create a Custom API Entry.               |
      | **List**   | Retrieve a list of Custom API Entries.   |
      | **Read**   | Get a Custom API Entry.                  |
      | **Update** | Update a Custom API Entry.               |
      | **Delete** | Delete a Custom API Entry.               |

paths:
  /v2/permissions/built-in-roles:
    get:
      tags:
        - Built-in Roles
      summary: List Built-in Roles
      operationId: ListBuiltInRoles
      # language=Markdown
      description: |
        Retrieves a list of Built-in Roles

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BuiltInRoleAttributes"
        '400':
          $ref: '#/components/responses/BadFilterError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /v2/permissions/built-in-roles/{built_in_role_id}:
    parameters:
      - $ref: "#/components/parameters/BuiltInRoleId"
    get:
      tags:
        - Built-in Roles
      summary: Get a Built-in Role
      operationId: GetABuiltInRole
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: "#/components/schemas/BuiltInRoleAttributes"
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /v2/permissions/custom-api-role-policies:
    post:
      tags:
        - Custom API Role Policies
      summary: Create A Custom API Role Policy
      operationId: CreateACustomAPIRolePolicy
      requestBody:
        content:
          application/json:
            schema:
              required:
                - data
              properties:
                data:
                  required:
                    - type
                    - create
                    - list
                    - read
                    - update
                    - delete
                    - relationships
                  $ref: "#/components/schemas/CustomAPIRolePolicyAttributes"
            examples:
              Create Example:
                summary: "Create a Custom API Role Policy"
                value:
                  {
                    "data": {
                      "type": "custom_api_role_policy",
                      "create": true,
                      "list": false,
                      "read": true,
                      "update": false,
                      "delete": true,
                      "relationships": {
                        "custom_api": {
                          "data": {
                            "id": "fded1d2a-8bb8-48b6-86a5-9eb05cc8626a",
                            "type": "custom_api"
                          }
                        },
                        "role": {
                          "data": {
                            "id": "f5f77dd6-71df-48a4-b4f4-d2605a79f3ca",
                            "type": "built_in_role"
                          }
                        }
                      }
                    }
                  }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: object
                    $ref: "#/components/schemas/CustomAPIRolePolicyAttributes"
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - Custom API Role Policies
      summary: List Custom API Role Policies
      operationId: ListCustomAPIRolePolicies
      # language=Markdown
      description: |
        Retrieves a list of Custom API Role Policies

        ## Filtering
        The following operators and attributes are available for [filtering](/guides/Getting-Started/filtering) Custom API Role Policies:

        | Attribute        | Operators                     | Example                                       |
        |------------------|-------------------------------|-----------------------------------------------|
        | `id`             | `lt`,`le`,`eq`,`gt`,`ge`,`in` | `eq(id,3fa85f64-5717-4562-b3fc-2c963f66afa6)` |
        | `created_at`     | `lt`,`le`,`eq`,`gt`,`ge`      | `ge(created_at,2024-04-29T00:00:00.000Z)`     |
        | `updated_at`     | `lt`,`le`,`eq`,`gt`,`ge`      | `le(updated_at,2024-04-29T00:00:00.000Z)`     |
        | `custom_api_id`  | `eq`                          | `eq(id,fded1d2a-8bb8-48b6-86a5-9eb05cc8626a)` |
        | `role_id`        | `eq`                          | `eq(id,f5f77dd6-71df-48a4-b4f4-d2605a79f3ca)` |

        ## Sorting
        The following attributes are available for sorting. When specified, the results are sorted in ascending order based on the value of the field. To sort in descending order, prefix the attribute with `-`, for example, `-updated_at`. The default sort order is `created_at` in descending order.
        - `id`
        - `created_at`
        - `updated_at`

      parameters:
        - $ref: '#/components/parameters/PageOffset'
        - $ref: '#/components/parameters/PageLimit'
        - $ref: '#/components/parameters/Filter'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CustomAPIRolePolicyAttributes"
                  meta:
                    $ref: "#/components/schemas/PaginationMeta"
                  links:
                    $ref: "#/components/schemas/PaginationLinks"
        '400':
          $ref: '#/components/responses/BadFilterError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /v2/permissions/custom-api-role-policies/{custom_api_role_policy_id}:
    parameters:
      - $ref: "#/components/parameters/CustomAPIRolePolicyId"
    get:
      tags:
        - Custom API Role Policies
      summary: Get a Custom API Role Policy
      operationId: GetACustomAPIRolePolicy
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: "#/components/schemas/CustomAPIRolePolicyAttributes"
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Custom API Role Policies
      summary: Update a Custom API Role Policy
      operationId: UpdateACustomAPIRolePolicy
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  required:
                    - type
                  $ref: "#/components/schemas/CustomAPIRolePolicyAttributes"
            examples:
              Update Example:
                summary: "Update a Custom API Role Policy"
                value:
                  {
                    "data": {
                      "type": "custom_api_role_policy",
                      "id": "3fa85f64-5717-4562-b3fc-2c963f66afa6",
                      "create": false,
                      "list": false,
                      "read": false,
                      "update": false,
                      "delete": false,
                    }
                  }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: "#/components/schemas/CustomAPIRolePolicyAttributes"
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Custom API Role Policies
      summary: Delete a Custom API Role Policy
      operationId: DeleteACustomAPIRolePolicy
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  parameters:
    BuiltInRoleId:
      name: built_in_role_id
      description: The ID of the Built-In Role.
      in: path
      required: true
      schema:
        type: string
      example: f5f77dd6-71df-48a4-b4f4-d2605a79f3ca
    CustomAPIRolePolicyId:
      name: custom_api_role_policy_id
      description: The ID of the Custom API Role Policy.
      in: path
      required: true
      schema:
        type: string
      example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
    PageOffset:
      name: page[offset]
      description: The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
      in: query
      required: false
      schema:
        type: integer
        format: int64
        minimum: 0
        maximum: 10000
    PageLimit:
      name: page[limit]
      description: The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
      in: query
      required: false
      schema:
        type: integer
        format: int64
        minimum: 0
    Filter:
      name: filter
      description: Filter attributes. For more information, see the [Filtering](/guides/Getting-Started/filtering) section.
      in: query
      required: false
      schema:
        type: string
        format: string
    Sort:
      name: sort
      description: Sort attributes, For more information, see the [Sorting](/docs/commerce-cloud/api-overview/sorting) section.
      in: query
      required: false
      schema:
        type: string
        format: string
  responses:
    BadFilterError:
      description: Bad request. The request failed validation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            missing-name:
              summary: Required field missing
              # language=JSON
              value: |
                {
                  "errors": [
                    {
                      "detail": "Invalid filter: unknown field [version] specified in search filter, allowed fields are [api_type created_at description id name slug updated_at]",
                      "status": "400",
                      "title": "Bad Request"
                    }
                  ]
                }

    ValidationError:
      description: Bad request. The request failed validation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            missing-name:
              summary: Required field missing
              # language=JSON
              value: |
                {
                  "errors": [
                    {
                      "title": "Bad Request",
                      "status": "400",
                      "detail": "The field 'name' is required."
                    }
                  ]
                }

    NotFoundError:
      description: Not found. The requested entity does not exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            not-found:
              summary: Requested entity not found
              # language=JSON
              value: |
                {
                  "errors": [
                    {
                      "title": "Not Found",
                      "status": "404",
                      "detail": "Not found"
                    }
                  ]
                }

    ConflictError:
      description: Unable to perform the operation at this time.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            duplicate-custom-api:
              summary: Duplicate Custom API
              # language=JSON
              value: |
                {
                  "errors": [
                    {
                      "title": "Conflict",
                      "status": "409",
                      "detail": "custom_api with the given api_type already exists"
                    }
                  ]
                }
            duplicate-custom-field:
              summary: Duplicate Custom Field
              # language=JSON
              value: |
                {
                  "errors": [
                    {
                      "title": "Conflict",
                      "status": "409",
                      "detail": "custom_field with the given slug already exists"
                    }
                  ]
                }

    InternalServerError:
      description: Internal server error. There was a system failure in the platform.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            internal-server-error:
              summary: Internal server error
              # language=JSON
              value: |
                {
                  "errors": [
                    {
                      "title": "Internal Server Error",
                      "status": "500",
                      "detail": "there was a problem processing your request"
                    }
                  ]
                }

  schemas:
    BuiltInRoleAttributes:
      properties:
        id:
          description: The unique identifier for the Built-in Role.
          type: string
          format: uuid
          readOnly: true
        type:
          description: Specifies the type of the resource object, use `built_in_role` for Built-in Roles.
          type: string
          const: built_in_role
        name:
          description: Specifies the name of the Built-in Role.
          type: string
          readOnly: true
        cm_user_assignable:
          description: Specifies if the Built-in Role can be assigned to a user in Commerce Manager.
          type: boolean
          readOnly: true
        links:
          readOnly: true
          $ref: '#/components/schemas/BuiltInRoleSelfLink'
    BuiltInRoleSelfLink:
      type: object
      properties:
        self:
          description: Specifies the URI of the Built-In Role.
          $ref: '#/components/schemas/LinkURI'
          example: /v2/permissions/built-in-roles/f5f77dd6-71df-48a4-b4f4-d2605a79f3ca
      readOnly: true
    CustomAPIRolePolicyAttributes:
      properties:
        id:
          description: The unique identifier for the Custom API Role Policy.
          type: string
          format: uuid
          readOnly: true
        type:
          description: Specifies the type of the resource object, use `custom_api_role_policy` for Custom API Role Policies.
          type: string
          const: custom_api_role_policy
        create:
          description: Specifies if the Built-in Role can create a Custom API Entry.
          type: boolean
        list:
          description: Specifies if the Built-in Role can retrieve a list of Custom API Entries.
          type: boolean
        read:
          description: Specifies if the Built-in Role can get a Custom API Entry.
          type: boolean
        update:
          description: Specifies if the Built-in Role can update a Custom API Entry.
          type: boolean
        delete:
          description: Specifies if the Built-in Role can delete a Custom API Entry.
          type: boolean
        links:
          readOnly: true
          $ref: '#/components/schemas/CustomAPIRolePolicySelfLink'
        meta:
          readOnly: true
          $ref: '#/components/schemas/Meta'
        relationships:
          $ref: '#/components/schemas/CustomAPIRolePolicyRelationships'
    CustomAPIRolePolicySelfLink:
      type: object
      properties:
        self:
          description: Specifies the URI of the Built-In Role.
          $ref: '#/components/schemas/LinkURI'
          example: /v2/permissions/custom-api-role-policies/3fa85f64-5717-4562-b3fc-2c963f66afa6
      readOnly: true
    CustomAPIRolePolicyRelationships:
      type: object
      required:
        - custom_api
        - role
      properties:
        custom_api:
          type: object
          required:
            - data
          properties:
            data:
              type: object
              required:
                - id
                - type
              properties:
                id:
                  description: The unique identifier for the related Custom API.
                  type: string
                  example: 652e39d8-d613-493e-8c20-fef99ad6327a
                type:
                  description: Specifies the type of the resource object.
                  type: string
                  const: custom_api
        role:
          type: object
          required:
            - data
          properties:
            data:
              type: object
              required:
                - id
                - type
              properties:
                id:
                  description: The unique identifier for the related Built-In Role.
                  type: string
                  example: f5f77dd6-71df-48a4-b4f4-d2605a79f3ca
                type:
                  description: Specifies the type of the resource object.
                  type: string
                  const: built_in_role
    ErrorResponse:
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
    Error:
      required:
        - status
        - title
      properties:
        title:
          description: A brief summary of the error.
          type: string
          examples:
            - "Bad Request"
        status:
          description: The HTTP response code of the error.
          type: string
          format: string
          examples:
            - "400"
        detail:
          description: Optional additional detail about the error.
          type: string
          examples:
            - "The field 'name' is required"
    LinkURI:
      type: [string, 'null']
      format: uri
      readOnly: true
    Timestamps:
      type: object
      required:
        - created_at
        - updated_at
      properties:
        updated_at:
          description: Specifies the date the entity is created.
          type: string
          readOnly: true
          example: 2017-01-10T11:41:19.244Z
        created_at:
          description: Specifies the date the entity is last updated.
          type: string
          readOnly: true
          example: 2017-01-10T11:41:19.244Z
    Meta:
      type: object
      required:
        - timestamps
      properties:
        timestamps:
          $ref: '#/components/schemas/Timestamps'
    PaginationMeta:
      type: object
      required:
        - page
        - results
      properties:
        results:
          type: object
          properties:
            total:
              description: Total number of results for the entire collection.
              type: integer
        page:
          type: object
          properties:
            limit:
              description: The maximum number of records for all pages.
              type: integer
              example: 100
            offset:
              description: The current offset by number of pages.
              type: integer
              example: 0
            current:
              description: The current number of pages.
              type: integer
              example: 1
            total:
              description: The total number of records for the entire collection.
              type: integer
              example: 1
    PaginationLinks:
      required:
        - current
        - first
        - last
        - next
        - prev
      type: object
      properties:
        current:
          description: Always the current page.
          type: [string, 'null']
          format: uri
          example: "/v2/settings/custom-apis?page[offset]=0&page[limit]=100"
        first:
          description: Always the first page.
          type: [string, 'null']
          format: uri
          example: "/v2/settings/custom-apis?page[offset]=0&page[limit]=100"
        last:
          description: Always `null` if there is only one page.
          type: [string, 'null']
          format: uri
          example: "/v2/settings/custom-apis?page[offset]=0&page[limit]=100"
        next:
          description: Always `null` if there is only one page.
          type: [string, 'null']
          example: null
        prev:
          description: Always `null` if the user is on the first page.
          type: [string, 'null']
          example: null
