# <%= name %> SDK

Below youâ€™ll find instructions on how to install, set up, and use the client, along with a list of available operations.

## Features

- type-safe response data and errors
- response data validation and transformation
- access to the original request and response
- granular request and response customization options
- minimal learning curve thanks to extending the underlying technology

---

## Installation

```bash
npm install <%= name %>
# or
pnpm install <%= name %>
# or
yarn add <%= name %>
```

---

## Client Usage

<%- include('partials/usageClientTemplate') %>

---

<%- include('partials/usageOperationTemplate') %>

### Local Storage Authentication Interceptor

The SDK provides a built-in local storage authentication interceptor that automatically handles token management:

```ts
import { client } from "@epcc-sdk/sdks-shopper"
import { createAuthLocalStorageInterceptor } from "@epcc-sdk/sdks-shopper"

// Add the interceptor to handle authentication automatically
client.interceptors.request.use(
  createAuthLocalStorageInterceptor({
    clientId: "YOUR_CLIENT_ID", // Required
    autoRefresh: true, // Optional, defaults to true
    autoStoreCredentials: true, // Optional, defaults to true
    storageKey: "my-custom-storage-key", // Optional, defaults to a predefined key
  }),
)
```

This interceptor:

- Stores authentication tokens in localStorage
- Automatically refreshes tokens when they expire
- Creates a new token if one doesn't exist
- Adds the Authorization header to each request

#### Configuration Options

| Option               | Type    | Default      | Description                                     |
| -------------------- | ------- | ------------ | ----------------------------------------------- |
| clientId             | string  | (required)   | Your storefront client ID                       |
| autoRefresh          | boolean | true         | Automatically refresh tokens when they expire   |
| autoStoreCredentials | boolean | true         | Automatically store credentials in localStorage |
| storageKey           | string  | (predefined) | Custom localStorage key for storing credentials |

## Build URL

If you need to access the compiled URL, you can use the buildUrl() method. It's loosely typed by default to accept almost any value; in practice, you will want to pass a type hint.

## Utilities

The SDK provides a set of utility functions that simplify common tasks when building a storefront.

### Cart Initialization

The `initializeCart` utility creates or retrieves a cart ID for the current shopper session:

```ts
import { initializeCart } from "@epcc-sdk/sdks-shopper/utils"

// Initialize cart with default storage key
const cartId = await initializeCart()

// Or with a custom storage key
const cartId = await initializeCart({
  storageKey: "my-custom-cart-key",
})
```

#### How it works:

1. Checks localStorage for an existing cart ID
2. If a cart ID exists, returns it immediately
3. If no cart ID exists, creates a new cart via the API
4. Stores the new cart ID in localStorage for future use
5. Returns the cart ID as a string

This utility is useful for implementing guest checkout flows and ensuring the shopper always has an active cart.

### Cart ID Retrieval

The `getCartId` utility provides a simple way to retrieve the current cart ID from localStorage:

```ts
import { getCartId } from "@epcc-sdk/sdks-shopper/utils"

// Get cart ID using default storage key
const cartId = getCartId()

// Or with a custom storage key
const cartId = getCartId({
  storageKey: "my-custom-cart-key",
})
```

Use this utility when you need to quickly check if a cart exists or need to pass the current cart ID to operations.

## Available Operations

<%- include('partials/operationList') %>

---
