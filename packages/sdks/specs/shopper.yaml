openapi: 3.1.0
info:
  title: Catalogs Introduction
  description: >
    Use the catalog-view Service API to create your catalogs.
                  
    You also have the flexibility to create catalogs for different scenarios by
    combining hierarchies of products with a price book. Scenarios might
    include:


    - Multiple geographical regions. Display different catalogs in different
    regions with suitable pricing or combine product hierarchies from two
    different regions to display in a third region.

    - Multiple channels. Display different catalogs based on how a shopper
    accesses your store, such as through a mobile app or a web storefront.

    - Direct to business versus direct to customers. Offer different products
    and prices for business customers versus retail customers.

    - Preferred customers. Offer special pricing to preferred customers while
    displaying a standard price catalog to all other shoppers.

    - Reward programs. Enable reward programs where catalog prices drop after a
    certain spending level is reached.

    - Product sales. Offer sale items for a limited time.
     
    Scenarios are created by defining the context within which a catalog is
    displays. Contexts can be a customer ID, a channel, or any other
    user-defined tag that can be passed to the APIs from the front-end shopper
    experiences.
  version: 1.0.0
servers:
  - url: https://euwest.api.elasticpath.com
    description: EU West Production Server
  - url: https://useast.api.elasticpath.com
    description: US East Production Server
tags:
  - name: Catalogs
    description: >
      A catalog contains the products available for sale either in your
      organization or store. A catalog also contains information about how to
      organize those products for navigation menus and search facets in a
      shopper experience.


      Before you create a catalog you must define the following resources:


      - Hierarchies: hierarchies and nodes to categorize the products. See
      [**Hierarchies**](/docs/api/pxm/products/hierarchies).

      - Products: product information, associated assets, and links to hierarchy
      nodes. See [**Products**](/docs/api/pxm/products/products).

      - Price Books: prices for the products associated with the hierarchies.
      See [**Price Books**](/docs/api/pxm/pricebooks).


      A catalog is a combination of hierarchies and a price book.
       
      ### Products
       
      Commerce automatically assigns types to the products you create. Product
      types can be used in catalogs. For example, in your catalog, you can
      filter on `parent` so that only your parent products are displayed in your
      storefront.
       
      You can use product tags to store or assign a key word against a product
      or service that you sell in your store. The product tag can then be used
      to describe or label that product. Product tags represent similarities
      between products who do not share the same attributes. Using product tags
      means that you can group your products together, for example, by brand,
      category, subcategory, colors, types, industries, and so on. Product tags
      can be used in catalogs. For example, you can categorize your products
      based on color. Your shoppers can then search your products by color,
      enabling shoppers to quickly find what they are looking for, increasing
      the likelihood of a purchase, and boosting conversion rates.
       
      ### Hierarchies
       
      The hierarchies determine which products appear in the catalog, that is,
      only the products that are associated with the selected hierarchies are
      included in the catalog. You can also specify the order you want your
      hierarchies to display in a published catalog. You can order your
      hierarchies on a catalog-by-catalog basis.
       
      ![Hierarchy_sorting](/assets/hierarchy_sorting.png)
       
      For more information, see [**create a
      Catalog**](/docs/api/pxm/catalog/create-catalog).
       
      #### Understanding How Products And Nodes Are Associated
       
      You can use `breadcrumb` metadata to understand how products and nodes are
      associated. it explains how products are associated with parent nodes and
      the relationship among the array of nodes. This is useful if you want to
      improve how your shoppers search within your store.
       
      The `breadcrumb` information that you get in an endpoint response depends
      on whether the endpoint is retrieving product or node details.
       
      |  Object |  Product/Node |  Description |

      | --- | --- | --- |

      | `breadcrumb` | Node | A list of nodes that a product is associated with.
      Up to 10 levels of nodes are displayed, depending on the number of levels
      of nodes you have. |

      | `bread_crumbs` | Product | The relationship among the array of nodes a
      product is associated with, demonstrating the linking of the children
      nodes with the parent nodes. Up to 10 levels of nodes are displayed,
      depending on the number of levels of nodes you have. |

      | `bread_crumb_nodes` | Product | An array of parent node IDs that a
      product is associated with. The `bread_crumb_node` metadata lists up to 10
      levels of parent nodes, depending on the number of levels of parent nodes
      you have. |
       
      #### Understanding `bread_crumbs` Metadata
       
      The following diagram illustrates a parent and child nodes.
       
      ![Breadcrumbs](/assets/breadcrumbs.PNG)
       
      1. The product is in **Node 2**. The ID for **Node 2** is shown first in
      the first set of breadcrumbs.

      1. **Node 2** is part of **Hierarchy 1**. The ID for **Hierarchy 1** is
      shown second.

      1. **Node 1** is the parent node of **Node 2**. The ID for **Node 1** is
      shown last.

      1. The product is also in **Node 3**. The ID for **Node 3** is shown first
      in the second set of breadcrumbs.

      1. **Node 3** is in the root of **Hierarchy 1**. The ID for **Hierarchy
      1** is shown last.
       
      In the `bread_crumb_nodes` metadata, you can see a list of parent nodes a
      product is associated with.
       
      If you subsequently add a product to a new node, then the
      `bread_crumb_nodes` metadata appends the new node to the top of the list.
      Using the example above, if we add the product to **Node 1**:
       
      1. The `bread_crumb_nodes` metadata is generated to show the new node
      appended to the top of the list.

      1. The `bread_crumbs` metadata is updated with the new node.
       
      #### Understanding Breadcrumb Metadata for Child Products
       
      When a catalog is published, the breadcrumb information for a child
      product includes the metadata mentioned for the parent product, in
      addition to the information specific to the child product. For example,
      **Product A** is the parent product, associated with **Node 1** and **Node
      2**. The metadata for child **Product B** includes **Node 1** and **Node
      2**, in addition to its own metadata information.
       
      ### Nodes
       
      The nodes determine which products appear under this in the catalog, that
      is, only the products that are associated with the selected node are shown
      under this node.
       
      ### Price books


      A price book contains the prices for each of the products in the catalog.
      You can create multiple price books for different scenarios, such as
      seasonal sales, business versus retail customer pricing, and reward
      programs. When creating a catalog, you can specify up to five price books.
      You must set a priority for your price books. Product prices are displayed
      in the catalog according to the priority of the price books. See [Create a
      catalog](/docs/api/pxm/catalog/create-catalog).
    x-displayName: Catalogs
  - name: Releases
    description: >
      When a catalog is published, a catalog release is created. A catalog
      release provides a snapshot of the product information taken at the time
      of publication. You can have one or more catalog releases available in
      your organization or in your store. If you publish a catalog for your
      organization, the catalog is available when the store is launched.


      If you have more than one catalog published for your store, use catalog
      rules to specify when to display each catalog. For example, you can use
      [**catalog rules**](/docs/api/pxm/catalog/rules) to schedule a catalog to
      appear during a particular date and time, such as a seasonal catalog. The
      catalog may have different pricing than the other catalogs.


      When a catalog is ready to be used in a store, you publish it. You can
      create and publish catalogs for different contexts and channels.


      Here are some pointers to understand a catalogs' lifecycle.


      - The default catalog is always the oldest published catalog and must have
      have at least one release.

      - At any time, the most recent three catalog releases are maintained.
      Hence, if there is a fourth catalog release, the first catalog release is
      automatically removed.

      - Until the catalog is published again, the previously created three
      catalog releases stay permanently.

      - If you want any other catalog to become the default catalog, you must
      create a catalog rule.

      - If you want the oldest published catalog to become the default catalog,
      you must remove the catalog rule.

      - Use the `sort_order` value in the `variations` to program your
      storefront to display the variation options in the order that you want.


      Here is a diagram that describes a catalogs' lifecycle:


      ![Catalogs' Lifecycle](/assets/catalog-lifecycle.png)
       
      ### Publishing catalogs
       
      When you publish a catalog, the `live` products in the hierarchies appear
      in a catalog release. A catalog release provides a snapshot of product
      information taken at the time of publication. You can have one or more
      catalog releases available in your organization or in your store. If you
      publish a catalog for your organization, the catalog is available when the
      store is launched.
       
      If you have more than one catalog published for your store, use catalog
      rules to specify when to display each catalog. For example, you can use
      [catalog rules](/docs/api/pxm/catalog/rules) to schedule a catalog to
      appear during a particular date and time, such as a seasonal catalog. The
      catalog may have different pricing than the other catalogs. You can have
      multiple published catalogs.
       
      When a catalog is ready to be used in a store, you publish it. You can
      create and publish catalogs for different contexts and channels. You can
      see the differences between the last two consecutive catalog releases. See
      [Publish a catalog](/docs/api/pxm/catalog/publish-release).
       
      You retrieve catalogs for your shopper experience by using the [Catalog
      View API](/docs/api/pxm/catalog/releases).
    x-displayName: Releases
  - name: Rules
    description: >
      If your store requires multiple catalogs, add catalog rules to control
      when a catalog is displayed. A catalog rule contains a catalog plus the
      criteria under which to display the catalog.


      :::caution


      You cannot create catalog rules for organization catalogs.


      :::


      You can use catalog rules to schedule a catalog to appear during a
      particular period, such as on a specific date or during summer. The
      catalog might offer different pricing during this period. The pricing
      depends on the associated price book.


      The following scenarios provides a few examples for using catalog rules.


      - **Multiple geographical regions**. Display different catalogs in
      different regions with suitable pricing or combine product hierarchies
      from two different regions to display in a third region.

      - **Multiple channels**. Display different catalogs based on how a shopper
      accesses your store, such as through a mobile app or a web storefront.

      - **Direct to business versus direct to customers**. Offer different
      products and prices for business customers versus retail customers.

      - **Preferred accounts**. Offer special pricing to a group of users while
      displaying a standard price catalog to other users.

      - **Preferred customers**. Offer special pricing to preferred customers
      while displaying a standard price catalog to all other shoppers.

      - **Reward programs**. Enable reward programs where catalog prices drop
      after a certain spending level is reached.

      - **Product sales**. Offer sale items for a limited time.

      - **Standard pricing**. Display a default catalog to the shoppers who do
      not meet the criteria of the other catalog rules.


      You can define a catalog rule with any of the following criteria.


      - **Accounts**. List the accounts that should see a catalog. When a user
      has logged in with the account, they see the configured catalog.

      - **Customers**. List the customers that should see a catalog. When the
      customer is logged in, they see the configured catalog.

      - **Channel**. Specify a shopper experience, such as web storefront or
      mobile app. Set up the channel to retrieve the catalog from the catalog
      rule that matches that channel.

      - **Other tags**. Create your own user-defined tags. For example, you
      might want to tag by regions or you might want to distinguish between
      business and consumer customers.


      If a catalog rule has no criteria defined, it is the default catalog rule.


      ### Resolving catalog rules


      When there is a request for a catalog, the store displays the catalog with
      the rule that matches the most attributes of the shoppers context.


      The request triggers the following steps:


      1. Compares the shoppers context against the defined catalog rules.

      1. Determines the best match.

      1. Retrieves the catalog associated with the matching catalog rule.


      The follow examples show how the best match might be resolved:


      - A shopper matches one of the `customer_ids` in one catalog rule only.
      The catalog for that catalog rule is displayed.

      - A shopper matches one of the `customer_ids` in one catalog rule only,
      but doesnʼt match any of the `tags` specified in that catalog rule.
      Because there are no other catalog rules for this `customer_id`, the
      catalog for the catalog rule is displayed because it is the best match.

      - A shopper is browsing a store using the stores mobile app, which matches
      `channel=mobile` in two catalog rules. The catalog displayed depends on
      matches with the `tags` or `customer_ids` attributes. If there is no other
      matching attribute, the first catalog rule found by the store is used. The
      best practice is to create catalog rules that cover all cases so that you
      avoid this situation.

      - An unknown shopper is browsing the only channel offered by the seller.
      The store displays the base catalog.
    x-displayName: Rules
  - name: Administrator Latest Releases Catalog API
    description: >
      Use the Administrator Latest Releases Catalog View API to retrieve
      product, hierarchy and node information.


      :::danger


      The Administrator Latest Releases Catalog View API is for Administrator
      use only. Do not use these endpoints on your customer-facing frontends.


      :::


      Publishing a catalog creates a release of that catalog that you can use in
      an organization or in a specific store or other shopper experience. You
      can retrieve the hierarchies, nodes, and the `live` products associated
      with a catalog release. You can see which parent nodes a product is
      associated with. This is useful if want to improve how your shoppers
      search your store, for example.


      Currently, published catalogs are limited to the current release and two
      releases prior to the current release.
    x-displayName: Administrator Latest Releases Catalog API
  - name: Shopper Catalog API
    description: >
      Use the Shopper Catalog View API to retrieve hierarchy, node and product
      information for a catalog release. When you publish a catalog for a store,
      you can define catalog rules so that you can show catalogs with different
      pricing or different products to preferred customers or channels. These
      endpoints can be used in your customer-facing frontends.


      A catalog is a combination of one or more hierarchies, products, and a
      price book. Use the Products API and Hierarchies API to create a hierarchy
      of products that can be included in a catalog. Use the Price Book API to
      associate prices with products.


      ### Characteristics of Shopper Catalogs


      Shopper catalogs can have the following characteristics.


      - Use catalog rules to schedule a catalog to appear during a particular
      date and time, such as a seasonal catalog. The catalog may have different
      pricing than the other catalogs. You can have multiple published catalogs.

      - If you have defined catalog rules and you want to retrieve a published
      catalog for a particular channel or a user-defined tag, you must set the
      appropriate headers in the request:
        - `EP-Channel` - The channel, such as website or mobile app. See [**Create a Catalog Rule**](/docs/api/pxm/catalog/create-rule).
        - `EP-Context-Tag` - A tag defined in the store, such as `clearance`. See [**Create a Catalog Rule**](/docs/api/pxm/catalog/create-rule).
      * When a catalog is ready to be used in a store, you publish it. See
      [**Publish a Catalog**](/docs/api/pxm/catalog/publish-release).

      * You can create and publish catalogs for different contexts and channels.
      You can see the differences between the last 2 consecutive catalog
      releases. See [**Publish a
      Catalog**](/docs/api/pxm/catalog/publish-release).

      * You retrieve catalogs for your shopper experience by using the Shopper
      Catalog View API. For more information on how you can retrieve a catalog
      as a shopper using the Catalog API.

      * When a catalog is published for a store, the corresponding events
      contain `store_id` and `org_id`. 

      * When a catalog is published for an organization, the corresponding
      events contain `org_id`. 

      * Use the `sort_order` value in `variations` to program your storefront to
      display the variation options in the order that you want.


      ### Shopper Catalog Caching


      When conducting a `GET` on `catalog` endpoints, all data returned,
      including catalog releases, products, nodes and hierarchies, are cached
      for 5 minutes. This means, if you call the same endpoint again, the
      catalog data is retrieved from the cached objects pool, optimizing the
      performance and efficiency of your store front.


      If you use any of the `catalog` endpoints with a `filter` or `include`
      query parameter, these are cached separately. 


      The cached entries disappear from the cached objects pool after 5 minutes.
    x-displayName: Shopper Catalog API
  - name: Cart Management
    description: >
      A Cart contains the product and custom cart items that a user intends to
      purchase. After a Cart is ready for Checkout, you can use the [Checkout
      endpoint](/docs/api/carts/checkout) to convert the cart to an order.


      :::note


      - Adding, modifying, or removing any cart items, custom items, or
      promotions always returns the cart meta, calculated using the calculation
      method. This is useful to update the client with up-to-date totals.

      - We will automatically delete carts 7 days after they were last updated.

      - If you do not pass a `X-MOLTIN-CURRENCY` header specifying what currency
      you would like the cart to use, the products in the cart are converted to
      your default currency.


      :::
    x-displayName: Cart Management
  - name: Account Cart Associations
    description: >
      You can create associations between an account and one or more carts.
      After cart associations exist for an account, those carts are accessible
      across any device. You can delete associations as required.


      There are two ways to access the cart: with an [Account Management
      Authentication Tokens](/docs/api/accounts/post-v-2-account-members-tokens)
      and without one.


      ### With an `Account Management Authentication` token


      These endpoints are for users who authenticated implicitly and require an
      Account Management Authentication token in the header to access the
      account cart associations APIs. For more information, see the [Account
      Token](/docs/api/accounts/post-v-2-account-members-tokens) documentation.


      #### Cart creation


      Shoppers create carts and can use any of the carts that they created to
      check out an order.


      :::note


      You can create a cart id, name, and description for the cart. The cart
      requires a name. Ensure that the string length is greater than or equal to
      one. Use any symbol in the name and description. For cart id, ensure that
      you follow the guidelines for safe characters. For more information about
      cart id naming requirements, see [Safe
      Characters](/guides/Getting-Started/safe-characters).


      :::


      ### Without an `Account Management Authentication` token


      These endpoints are for users who use the Client Credentials Token and do
      not require an account management authentication token in the header to
      access the account cart associations APIs. For more information, see the
      [Authentication](/docs/authentication/security) documentation.


      This user acts as a system administrator and can call any account cart
      association operations for any account and cart.


      ### Error Codes


      You might encounter the following response codes, depending on the
      scenario:


      * `400` - `The type does not exist or is not listed as account` - Ensure
      that the type is `account` and is present.


      * `403` - `Cannot associate more than one account`.


      * `403` - `Account does not have the required permissions to fulfill this
      request`.


      * `403` - `Invalid json payload` - Check JSON input. The request body must
      be an array `[]`. If the request body is an object, the error is
      generated.
    x-displayName: Account Cart Associations
  - name: Customer Cart Associations
    description: >
      You can create associations between a customer and one or more carts.
      After cart associations exist for a customer, those carts are accessible
      across any device. You can delete associations as required.


      There are two ways to access the cart: with a customer token and without
      one.


      ### With a `customer` token


      These endpoints are for users who authenticated implicitly and require a
      customer token in the header to access the customer cart associations
      APIs. For more information, see the [Customer
      Token](/docs/customer-management/customer-management-api/customer-tokens)
      documentation.


      #### Cart creation


      Shoppers create carts and can use any of the carts that they created to
      check out an order.


      :::note


      You can create a cart id, name, and description for the cart. The cart
      requires a name. Ensure that the string length is greater than or equal to
      one. Use any symbol in the name and description. For cart id, ensure that
      you follow the guidelines for safe characters. For more information about
      cart id naming requirements, see [Safe
      Characters](/guides/Getting-Started/safe-characters).


      :::


      ### Without a `customer` token


      These endpoints are for users who use the Client Credentials Token and do
      not require a Customer token in the header to access the customer cart
      associations APIs. For more information, see the
      [Authentication](/docs/authentication/security) documentation.


      This user acts as a system administrator and can call any customer cart
      association operations for any customer and cart.


      ### Error Codes


      You might encounter the following response codes, depending on the
      scenario:


      * `400` - `The type does not exist or is not listed as customer` - Ensure
      that the type is `customer` and is present.


      * `403` - `Cannot associate more than one customer`.


      * `403` - `Customer does not have the required permissions to fulfill this
      request`.


      * `403` - `Invalid json payload` - Check JSON input. The request body must
      be an array `[]`. If the request body is an object, the error is
      generated.
    x-displayName: Customer Cart Associations
  - name: Cart Items
    description: Products added to a cart are referred to as a `cart_item`.
    x-displayName: Cart Items
  - name: Checkout
    description: >

      The checkout workflow ties together many of the key concepts covered in
      this section. When a customer initiates the checkout process, an order is
      created from the cart. The order is incomplete until after a successful
      payment is made. A complete order can be shipped and the product deducted
      from inventory counts.


      ![Checkout workflow](/assets/checkout-flow.png)


      ### Summary of the checkout workflow


      1. Add a product to a cart. A cart and its reference number is generated.

      2. Manage the cart items. For example, you might add items, remove items,
      and change quantities.

      3. Check out the cart. An incomplete order is created.

      4. Pay for an order: provide billing and shipping details, if you are a
      new customer. The order is now in the processing status.

      5. If using a manual gateway, after you authorize and capture it,
      Composable Commerce considers the order complete. If you use a third-party
      integration supported by Composable Commerce (such as Stripe), after the
      third-party gateway authorizes and captures the payment, the order becomes
      complete. Usually capture does not occur at the same time as
      authorization. For more information, see the Capture section.

      6. After the order is shipped, you can manually flag it as fulfilled.


      ### Carts


      When a product is added to a cart, a cart is generated together with its
      unique reference ID that on checkout becomes a part of the order ID. If
      you are using our JavaScript software development kit, generating a cart
      reference ID is done for you; otherwise, add a cart reference generator to
      your functionality.


      ### Promotions and custom items


      Optionally, apply a promotion code on a cart, or add custom_items to
      modify the product price (typically to handle taxes, customs, or
      shipping).


      ### Checkout


      You can checkout a cart with an associated customer name and email
      (customer object). Typically, this would be used for new customers or ones
      that prefer to shop as guests. Use the customer.id checkout option to
      checkout for an existing customer. After a successful checkout is
      completed, the response contains an order.


      Email addresses that either begin or end with a period, or contain
      consecutive periods, are considered invalid, resulting in the following
      error:

      ```json

      "errors": [
        {
            "status": 400,
            "source": "data.customer.email",
            "title": "format",
            "detail": "Does not match format 'email'"
        }
      ]
        ```

      ### Payments


      On checkout, an incomplete order is created. You can then use a
      third-party integration to handle your payment gateway. If the payment
      gateway is supported by Composable Commerce, such as Stripe, the payment
      is processed externally but handled internally. When a successful
      validation is returned, Composable Commerce flags the order as complete.


      If you are using a payment method not officially supported by Composable
      Commerce, the gateway needs to be implemented and handled manually. After
      the payment has been authorized and captured either through Commerce
      Manager or API, the status of an order becomes complete.


      ### Shipping


      The status of an order and the status of shipping are handled separately,
      and so an order can be complete but not shipped. Orders that have not been
      shipped yet have a status of unfulfilled. This flag is generated
      automatically by Composable Commerce when an order is created. Currently,
      you can only update the shipping status manually, through the API. After
      the order is shipped, flag its shipping status as fulfilled.


      ### Inventory


      If enabled, you can manage your stock. As such, your stock is
      automatically updated as soon as a product is checked out.
    x-displayName: Checkout
  - name: Orders
    description: >
      An Order is created through the [checkout](/docs/api/carts/checkout)
      endpoint within the Carts API.


      An order is created after a customer checks out their cart. On creation,
      the order is marked unpaid. The customer is prompted for a shipping
      address, a billing address, and a payment method. After the order is
      successfully paid, you can trigger an inventory process and a shipping
      process.


      You can keep a history of orders associated with the customer account.


      ### Reorder


      A re-order is when a shopper copies items from a previous order from their
      order history into a cart of their choice. If a shopper re-orders to an
      empty cart, the same quantities as the past order are applied. If the
      shopper re-orders to an existing cart, and orders the same item, the
      quantity increases. If an item is out of stock, the item is not added to
      the cart, and the shopper sees an insufficient stock error. The tax for
      the items in a re-order is not applied. For more information, see [Tax
      Items](/docs/api/carts/tax-items).
    x-displayName: Orders
  - name: Payments
    description: >
      When you [checkout](/docs/api/carts/checkout) a
      [cart](/docs/api/carts/cart-management), an unpaid
      [order](/docs/api/carts/orders) is returned. You can process the payment
      for the order though a payment gateway.


      :::note


      - You need to configure and enable a payment gateway before you can accept
      payments for orders.

      - Configure your store to use [Manual
      Gateway](/docs/api/payments/update-manual-gateway) to process payments if
      the order total is zero or the payment is through non-supported payment
      providers.

      - There are a number of actions that happen to your inventory when
      checking out and paying for an order. For more information, see
      [Inventory](/docs/api/pxm/inventory/inventories-introduction).

      - We recommend to wait until the payment confirmation process is fully
      completed before proceeding with any additional updates to the order.
      Making simultaneous updates to the same entity immediately after payment
      confirmation can lead to a race condition. To learn more information on
      handling parallel calls to API objects, see [Parallel Calls to API
      Objects](/guides/Getting-Started/api-contract#parallel-calls-to-api-objects).


      :::


      ### Payment Methods


      Depending on the chosen gateway, you may or may not have access to capture
      funds immediately or authorize for later payment. For more information,
      see [Transactions](/docs/api/carts/transactions).


      To make a partial payment in Postman through any payment gateway, specify
      the desired payment amount in the amount field within the request body. To
      learn about Split Payments, see the [Split
      Payments](/docs/api/payments/payment-gateways-introduction#split-payments)
      section.


      #### Purchase


      The simplest method is purchase. The gateway attempts to charge the
      customer immediately, and the result of the attempt is returned.


      You can partially pay funds using purchase method. The gateway attempts to
      charge the customer immediately, and the payment status for an order shows
      `partially_paid`.


      When you Get an order, you can see the following fields in the meta
      object:


      - `balance_owing`: Specifies the outstanding funds required to complete an
      order. It considers all complete or pending transactions, including
      authorized, paid, and captured transactions. (`balance_owing` = order
      total - `authorized` amount - `paid` amount).

      - `paid`: Specifies the total amount of purchased or captured
      transactions.

      - `authorized`: Specifies the total amount of completed or pending
      authorized transactions for an order.


      #### Authorize


      You can `authorize` a payment so funds can later be captured when an item
      is dispatched or restocked.


      You can partially pay for an order using `authorize` payment method so
      that the order is `partially_authorized`. The transaction must be complete
      for the order status to be `partially_authorized`.


      For more information about order and payment statuses for split payments,
      see [Split
      Payments](/docs/api/payments/payment-gateways-introduction#split-payments).


      #### Capture


      After authorizing a transaction, you have to capture the authorized funds.


      :::note


      We recommend capturing payments several hours to days after the
      authorization to mitigate risks of fraud and chargebacks. When you sell
      digital goods that are delivered immediately, we recommend using a single
      purchase call instead of separate authorize and capture calls.


      :::


      After the payment is `partially_authorized`, you must `capture` the
      authorized transaction later. Once you capture the authorized
      transactions, the order payment status will change to `partially_paid`.


      #### Refunds


      You can use either the Refund through Composable Commerce or use the Mark
      as Refunded capability, or a combination of both capabilities.


      For more information about refund for split payments, see [Refund a
      Payment](/docs/api/carts/refund-a-transaction).


      #### Refund through Composable Commerce


      You can start a full or partial refund to a supported payment provider
      directly from Commerce Manager or the API. When you start the refund
      process, the refund request is sent to the payment gateway. You no longer
      have to log on to your payment gateway’s console to process the refund.


      When you process a refund, use the refund endpoint to pass the refund
      amount. If you don’t pass an amount, the refund is processed as Mark as
      refunded. For more information, see the Mark as Refunded section.


      Each time a partial refund is triggered, the transaction.updated event is
      generated and updated with refunded.amount. The `order.updated` event is
      also triggered. The `order.refunded` event generates when the full amount
      is refunded.



      #### Mark as Refunded


      You can use your payment gateway’s console to process a refund. Process
      the refund first in the payment gateway and then use the **Mark as
      Refunded** capability in Composable Commerce to complete the process.


      When an order is **Marked as refunded**, the payment status
      `order.payment.status` is set to refunded. In this case, the
      `order.updated`, `transaction.updated` and `order.refunded` events are
      generated.
    x-displayName: Payments
  - name: Transactions
    x-displayName: Transactions
  - name: Custom Discounts
    description: >
      With custom discounts, you can allow your shoppers to apply discounts from
      external services to their purchases. To apply custom discounts to carts
      and cart items, you need to set `custom_discounts_enabled` field to `true`
      in your [Cart Settings](/docs/api/settings/put-v-2-settings-cart).


      You cannot add custom discounts to an empty cart.


      :::caution


      - You can apply up to five custom discounts to cart and cart item.

      - The stores that use [simple calculation
      method](/guides/How-To/Carts/calculate-totals) do not support custom
      discounts.


      :::
    x-displayName: Custom Discounts
  - name: Tax Items
    description: >
      Taxes differ by country and can differ within the country by region,
      state, or province. Each jurisdiction has a unique tax code and rate. If
      your store serves many jurisdictions, integrate a third-party tax
      generator to manage taxes. If your store serves a few jurisdictions, you
      can use the API to define the tax codes and rates in Composable Commerce.


      Taxes are calculated after all promotional discounts have been applied.
      When calculating taxes on a cart or order, you can choose from the
      following methods for calculating taxes:

        - Simple calculation method: Taxes are calculated at the unit level and are rounded to the nearest penny for the unit.
        - Line calculation method: Default. Taxes are calculated at the line level and are rounded to the nearest penny for the line.
          For more information about calculation methods, see [Calculate cart and order totals](/guides/How-To/Carts/calculate-totals).

      :::note

      Tax items can be added and removed using [client_credentials access
      tokens](/docs/api/authentication/create-an-access-token). Only
      administrators with `client-credentials` access tokens are able to manage
      tax items.

      :::
    x-displayName: Tax Items
  - name: Products
    description: >
      Create the products and services that you want to offer in a subscription.
      For example, an online streaming service organization might have different
      services available for subscription, such as Standard Definition
      Streaming, High-Definition Streaming, and 4K Streaming; each service
      provides a specific level of video quality. 

      Products can have additional attributes, such as price, and rich media
      assets, such as images or files containing additional product details.

       In addition, you can build offerings with products created in Product Experience Manager. Product Experience Manager manages product information, hierarchies, and price books. Ideally, Product Experience Manager becomes the single source of truth for product data across your organization. See [**Create a Product**](/docs/api/pxm/products/create-product).

      You combine your products and plans into offerings. Offerings can contain
      any combination of products and plans. See [**Building an
      Offering**](/docs/api/subscriptions/build-offering).


      Product data is stored in a database. After you have added your products,
      you can update your product information at any time, and include those
      products in your subscription offerings.


      ### Product Media

      Images and files are linked to repeat products using a hypertext reference
      (HREF). You can either upload your images to Commerce using the Commerce
      Files API or you can use your own content delivery network. If you are
      using the Commerce Files API, use [**Create a
      File**](/docs/api/pxm/files/create-a-file) to upload your file and return
      an HREF link in the response.

      An extensive range of [**media and file
      extensions**](/docs/api/pxm/files/files) are supported.


      ### Product Pricing

      You can assign prices for your products and services. You can display
      prices to your customers in their local currency. You can configure up to
      10 currencies per subscription. Use the Commerce Currencies API to
      [**create a currency**](/docs/api/pxm/currencies/create-a-currency). You
      must select one currency to be the default currency. If a default currency
      is not selected, the store uses the United States Dollar (USD). 


      In addition, you can specify a unit price for a product. A unit price is
      the timeframe during which the product price is applicable, either days or
      months. For example, for a streaming service, the price is $12.99 and the
      unit price is months. In other words, the streaming service is available
      for $12.99 a month. You may want to specify a unit price if you have many
      products that all have different prices. Rather than having to create
      separate plans for each product, you can specify the timeframe during
      which the product price is applicable and then create one plan that
      determines the billing frequency for those products.


      Alternatively, when creating a plan, you can configure a total price for
      all the products in an offering. This is useful, as it allows you to
      provide a fixed price for all products in an offering, enabling those
      products to be offered at a discounted price. The prices you specify for a
      plan override the individual product prices you specified when creating a
      product. See [**Plan
      Pricing**](/docs/api/subscriptions/plans#plan-pricing).
    x-displayName: Products
  - name: Plans
    description: >
      You can use plans to model your subscription. Plans are a set of rules and
      conditions that manage the provision of repeat products in an offering. 


      - **Billing Cycles** - Plans specify the frequency at which your customer
      is billed – yearly, monthly, or weekly. See [**Billing
      Cycles**](#billing-cycles).

      - **Trial Periods** - Plans specify any trial periods. See [**Trial
      Periods**](#trial-periods).

      - **Recurring Payments** - Plans specify if the subscription is rolling,
      (customers pay regularly and repeatedly), or closed (customers split
      purchases into a few payments). See [**Recurring
      Payments**](#recurring-payments).

      - **Pricing** - Plans may also specify whether a discount is offered and
      specify the timeframe during which the discount is available to your
      customers. See [**Plan Pricing**](#plan-pricing). 


      You create plans based on your business requirements. Once the plans are
      available, you can associate the repeat products and plans in an offering.
      You can combine and reuse plans in your offerings. Offerings can contain
      any combination of products and plans. For example, your company provides
      customized meal boxes; you can create different subscription plans, like
      weekly or monthly meal boxes at specific prices.


      ### Trial Periods


      You can configure a trial period when creating a plan by providing a value
      in `trial_period`. `trial_period` works with `billing_interval_type`. For
      example, if `billing_interval_type` is months, and `trial_period` is `1`
      then the trial period is 1 month. The trial period becomes active as soon
      as a subscription becomes active. When creating a subscription with a
      trial period, no payment method is required for the customer. An immediate
      invoice is still created, but for a price of zero.


      When a trial period ends, Subscriptions automatically generates an
      invoice. 


      ### Billing Cycles


      You can configure the billing cycle when creating a plan. A plan's billing
      cycle is determined by `billing_interval_type` and `billing_frequency`.
      For example, a customer with a monthly subscription set to cycle on the
      2nd of the month is always billed on the second. The plan is cycled from
      the date a subscription becomes active. 


      You can also combine `billing_interval_type` with `trial_period` to create
      a [**trial period**](#trial-period). 


      ### Plan Pricing

      You can provide a price for the total cost of a plan, or, provide a
      discount on the total cost of all products within an offering. For
      example, you can configure a percentage discount on the total cost of any
      products within an offering.  


      You can configure a total price for all the products in an offering. This
      is useful, as it allows you to provide a fixed price for all products in
      an offering, enabling these products to be offered at a discounted price.
      You can enter a price for all the currencies you have configured for your
      store. See [**Create a
      Currency**](/docs/api/pxm/currencies/create-a-currency).


      Alternatively, when creating your products, you can configure individual
      prices for a product. The prices you specify for a plan override the
      individual product prices you specified when creating a product. See
      [**Repeat Products**](/docs/api/subscriptions/products#product-pricing).


      ### Recurring Payments

      There are two types of recurring payments:

      - customers pay regularly and repeatedly

      - customers split purchases into a few payments


      You can configure this using `end_behavior`. If `end_behaviour` is
      `rolling`, the customers pay regularly and repeatedly. If `end_behavior`
      is `closed`, it allows you to create instalment plans where the customer's
      pay a total amount in a limited number of partial payments.
    x-displayName: Plans
  - name: Features
    description: >
      A feature indicates some benefit that is received as a result of having an
      active subscription. This translates to tags being applied to the
      subscriber's account allowing access to some resource to be controlled.


      There are three types of feature - `access`, `promotion`, and `usage`.


      The `access` feature is designed to simply give access to some resource,
      for example a streaming service. If its tag is present on the subscriber's
      account then access to that resource should be provided.


      The `promotion` feature coupled with the [promotions
      service](/docs/promotions-builder/overview) allows subscribers to get
      access to a specific promotion. This is achieved using a tag which is used
      as a constraint on the promotion. A promotion feature may have multiple
      promotions associated with it, but just one must be selected when
      configuring the feature for an offering's product.

       The `usage` feature is designed to measure some sort of usage of a resource. This currently relies on [commerce extensions](/docs/api/commerce-extensions/commerce-extensions-introduction) to manage usage.

       Once defined a feature may be attached to an offering, making it available for use with any of that offering's products. Once attached it must be configured for each of the offering's products it is applicable to. For the `promotion` feature this involves specifying which of that feature's tags, and hence which promotion, should be applied when subscribed to that offering. Similarly, for the `promotion` feature the default value for the usage metric must be supplied.
    x-displayName: Features
  - name: Offerings
    description: >
      An offering is a combination of products and plans; products are combined
      with one or more plans to form an offering. 


      For example, your company provides online
       streaming of movies, web-series, and music. Your customers can purchase these services through either a weekly or monthly plan.

      Offering products can be either:


      - a subscription product, see [**Create a
      product**](/docs/api/subscriptions/create-product).

      - a Product Experience Manager product, see [**Create a
      product**](/docs/api/pxm/products/create-product)


      ### Offering Examples


      Offerings can have any combination of products and plans. The pricing of
      an offering is determined by the pricing you have configured for your
      products and plans.


      | Example | Product | Plans | Offering |

      | --- | --- | --- | --- |

      | Single product and plan | One product with a product price of $50 | A
      monthly plan with a 5% discount | An offering with a monthly plan for
      $47.50 a month |

      | Single product with multiple plans | One product with a product price of
      $50 | <ul><li>A monthly plan with a 5% discount</li><li>A yearly plan with
      a 10% discount</li></ul> | An offering with two plans: <ul><li>A monthly
      plan for $47.50 a month</li><li>A yearly plan for $45 a month</li></ul> |

      | Multiple products and plan | Two products: <ul><li>One product with a
      product price of $50.</li><li>One product with a product price of
      $75.</li></ul> | A monthly plan with a 5% discount. | An offering with a
      monthly plan for $118.75 a month. | 

      | Multiple products with multiple plans | Two products: <ul><li>One
      product with a product price of $50.</li><li>One product with a product
      price of $75.</li></ul> | <ul><li>A monthly plan with a 5%
      discount</li><li>A yearly plan with a 10% discount</li></ul> | An offering
      with two plans: <ul><li>A monthly plan for $118.75 a month</li><li>A
      yearly plan for $112.50 a month</li></ul> | 


      ### Building an Offering


      Offerings represent a snapshot of their products and plans. If you make
      updates to products or plans within an offering, the original products and
      plans are not updated. Only the products and plans within the offering are
      updated. Alternatively, you can create new products or plans and attach
      them to a new offering.


      When you are building an offering:


      - you can create new plans and products.

      - you can modify existing products and plans. For example, you can modify
      the product price or any attributes of a plan included in the offering.


      Here's how you build an offering:


      1. Create your repeat products. Products can either be subscription
      products or Product Experience Manager products. 

           - to create a subscription product, see [**Create a product**](/docs/api/subscriptions/create-product).
           - to create a Product Experience Manager product, see [**Create a product**](/docs/api/pxm/products/create-product)
      2. Create your plans. 
           - Plans are the rules that govern your subscription, for example, any discount. 
           - You can combine and reuse plans for as many products as you want, making it quick and easy to create your subscription offerings. 
           - An offering must have at least one plan. See [**Create a plan**](/docs/api/subscriptions/create-product).
      3. [**Build your offerings**](/docs/api/subscriptions/build-offering).
      Offerings are the products and plans that a customer can choose. An
      offering can consist of many combinations of a product or plans, depending
      on the products and services you offer.

           - When a [**customer**](/docs/api/subscriptions/subscribers) chooses a plan, a subscription is created. See [**Subscriptions**](/docs/api/subscriptions/subscriptions).
           - Elastic Path Subscriptions manages the billing and recurring payments associated with the subscription. See [**Invoicing and Billing**](/docs/api/subscriptions/jobs).

      ### Editing Offerings


      After saving an offering, you can, at any time:


      - update an offering's details, for example, name or description. See
      [**Update an Offering**](/docs/api/subscriptions/update-offering).

      - update the existing product and plans. 

      - replace an existing product in an offering with a new one. See
      [**Replace a Product**](/docs/api/subscriptions/replace-offering-product)

      - attach a new plan to an offering. See [**Attach a
      Plan**](/docs/api/subscriptions/attach-offering-plan).

      - remove plans. See [**Removing a plan from an
      offering**](/docs/api/subscriptions/delete-offering-plan).


      Any modifications that you make to offerings, and products or plans in an
      offering, does not affect any active subscriptions. The changes take
      effect on all new subscriptions that are created.
    x-displayName: Offerings
  - name: Subscriptions
    description: >
      Elastic Path Subscriptions enables you to manage your subscriptions
      products and plans, using offerings. Offerings can contain any combination
      of plans and a product. When a customer chooses a plan, a subscription is
      created.  


      ### Managing the Subscription Lifecycle


      The subscription lifecycle is the states that a subscription can go
      through when a customer subscribes to a service or a product. 


      A subscription can have the following states:


      - `pending`

      - `canceled`

      - `paused`

      - `resumed`


      #### Creating a pending subscription 


      A subscription can be created in a `pending` state. This is useful for
      several reasons.


      - If there are subscriptions that require user setup or onboarding, for
      example, installing software or setting up preferences. This helps reduce
      shopper frustration during the onboarding process, as the shopper is not
      paying for a service that they cannot use yet.

      - When offering a free trial or promotion, keeping the subscription in a
      pending state until the trial or promotion starts or ends allows you to
      manage transitions more smoothly. 

      - Before a subscription becomes active, you may need to verify the payment
      method or authorize the first payment. Keeping the subscription in a
      pending state allows time to complete these steps without activating the
      subscription.


      For a subscription with a `pending` state, you can also configure a
      `go_live_after` date. The subscription starts from the `go_live_after`
      date. This is useful as it ensures both the subscription provider and
      subscriber are clear about when a subscription officially begins. Once the
      `go_live_after` date is passed, the subscription becomes `active`,
      initiating the billing and payment runs. If a subscription is activated
      this way, you can see this in the `timestamp` meta.   


      You can configure a `go_live_after` date to be a past date. This is
      useful, for example, for backdating a subscription or managing a delay in
      activating a subscription. Setting the `go_live_after` date in the past
      ensures the subscriptions timeline correctly aligns with the agreed-upon
      service start date. 


      :::caution


      Although, billing runs generate one invoice per subscription, if a
      `go_live_date` is set far in the past, multiple invoices could be
      generated over the course of several billing runs, which could be
      frustrating and confusing to your subscribers. 


      :::


      See [create a subscription](/docs/api/subscriptions/create-subscription).


      #### Cancelling or pausing and resuming subscriptions


      A subscriber can decide to cancel or pause and/or resume a subscription.
      The following example describes pausing or canceling and resuming a
      subscription.


      1. The subscriber pauses or cancels the subscription. 
         - The subscription status is `active`. 
         - either `paused` or `cancelled` is set to `true`.
         - either the `paused_at` or `cancelled_at` timestamp is populated with the date and time the subscription is paused or cancelled.
      2. When the next billing run is due, the billing run checks the
      subscription state. If the subscription state is paused or cancelled then
      no invoice is created and the subscription status is updated to
      `inactive`.

      3. Subsequent billing runs skip that subscription completely as the
      subscription status is `inactive`.

      4. If the subscriber resumes the subscription:
         - either `paused` or `cancelled` is set to `false`.
         - the `resumed_at` timestamp is populated with the date and time the subscription is resumed.
      5. When the next billing run is due, the billing run checks the
      subscription state. If the `paused` or `cancelled` is set to `false` then
      the billing run creates an invoice.

      6. The payment run processes the invoice. Once the payment succeeds then
      the payment run updates the status of the subscription to `active`.


      ### Orders


      When a customer chooses a subscription, they need to add the subscription
      to a cart, checkout the cart and then pay for the order. 


      1. When a customer adds a subscription to cart, this is handled using the
      `Add subscription to cart` endpoint. 

      2. Once a subscription has been added to a cart, the [**Checkout
      API**](/docs/carts-orders/checkout-account-management-authentication-token)
      converts the cart to an order. 

      3. Once the order is created, payment needs to be taken. This is handled
      by Elastic Path Payments Powered by Stripe. See
      [**Payments**](/docs/api/subscriptions/invoices#payments).
    x-displayName: Subscriptions
  - name: Jobs
    description: >
      Jobs are an asynchronous process that can be triggered manually or
      scheduled. 


      There are three types of job:


      - a billing run. Subscriptions generates an
      [**invoice**](/docs/api/subscriptions/invoices) when a billing run occurs.
      Billing runs generate invoices for the remaining billing cycles for each
      subscription. The invoice dates come from your plans. Billing runs are
      independent of payment runs.

      - a tax run. Invoices where `tax_required` is `true` will not have payment
      taken until a tax run has added the required tax to the invoice.

      - a payment run. The payment run identifies invoices that are outstanding
      and attempts to take payment for them. If the payment succeeds the the
      invoice is no longer outstanding. If the payment fails for any reason,
      then the invoice remains outstanding and is picked up by the next payment
      run to retry the payment.


      By scheduling billing and payment runs, you automate the process, reducing
      manual intervention and ensuring the jobs are run in a timely manner. See
      [**Schedules**](/docs/api/subscriptions/schedules).


      ### Characteristics of Billing, Tax & Payments Jobs


      Billing and payment jobs have the following characteristics.


      - Jobs are asynchronous.

      - Jobs have a different status, depending on where a job is in its
      lifecycle.

      - Jobs report any errors to help you understand the reason for any failed
      jobs.

      - Only one billing run and payment run is allowed per store at a time.
      Although billing and payments are constantly generated, the jobs are
      queued. Subscriptions looks for any jobs that have a status of PENDING and
      starts the job with the earliest created date. This process is repeated
      until all jobs are processed.


      ### Billing, Tax & Payments Jobs Lifecycle


      A job can have the following status types:


      - PENDING - Subscriptions has received the request but is currently busy
      processing other requests.

      - STARTED - Subscriptions has started processing the job.

      - SUCCESS - The job has successfully completed.

      - FAILED - The job has failed.


      ### Billing, Tax & Payment Reports


      You can track your Subscriptions billing, payment and tax operations using
      reports. There are three types of report:


      - `BillingRunReport` - This report provides invoice summaries such as
      invoices ready for payment, invoices that require tax, and invoice
      failures.

      - `TaxRunReport` - This report provides invoice summaries such as invoices
      to which tax was successfully or unsuccessfully added.

      - `PaymentRunReport` - This report provides invoice summaries such as
      invoices for which payment was attempted, failed payment attempts and
      totals collected by a payment run. 


      See [Get a job](/docs/api/subscriptions/get-job) and [List
      jobs](/docs/api/subscriptions/list-jobs).
    x-displayName: Jobs
  - name: Imports
    description: >
      You can import subscription products, plans and subscribers using
      Subscriptions Import. This is useful if you want to import subscriptions
      from an external system into Elastic Path Subscriptions. 


      The API uses a [**JSONL**](https://jsonlines.org/) file. Here is an
      [**example of a JSONL file**](/assets/subscriptions_import.jsonl).


      When you send an import request, an import job is created. Jobs are
      processed one at a time. You can continue to send import requests, but
      those jobs are queued. In other words, Subscriptions looks for any jobs
      that have a status of PENDING and starts the job with the earliest created
      date. This process is repeated until all jobs are processed. Use [List
      import jobs](/docs/api/subscriptions/list-import-jobs) to see a list of
      all import jobs.


      A file can include up to 50,000 objects. If you have more than 50,000
      objects, then you must create a separate file, and import each file, one
      at a time.


      ### Characteristics of Subscriptions Import


      The Subscriptions Import API has the following characteristics:


      - The Subscriptions Import API reads the entire file and then creates the
      subscription objects. This means the subscription objects can be in any
      order in the file.


      - Subscriptions imports are asynchronous and are processed one at a time.
      You can continue to send import requests, but these are queued. 


      - The API works on a "best endeavours" approach. In other words, the API
      does its best to create the subscription objects based on the file that
      you provide. 


      ### Subscriptions Import File


      The following table describes the subscriptions objects, and their
      attributes, that the import file can include.


      | Object | Attributes |

      | --- | --- |

      | A product object | The attributes you specify for a product object are
      the attributes you specify when [creating a
      product](/docs/api/subscriptions/create-product). |

      | A plan object | The attributes you specify for a product object are the
      attributes you specify when [creating a
      plan](/docs/api/subscriptions/create-plan). | 

      | A subscriber object | The attributes you specify for a product object
      are the attributes you specify when [creating a
      subscriber](/docs/api/subscriptions/create-subscriber). |

      | An offering object | The attributes you specify for an offering object
      are the attributes you specify when [building an
      offering](/docs/api/subscriptions/build-offering). |
    x-displayName: Imports
  - name: Schedules
    description: >
      You can schedule your billing, tax, and payment runs. By scheduling
      billing, tax, and payment runs, you automate the process, reducing manual
      intervention and ensuring the jobs are run in a timely manner.  You can
      define a schedule in the format (`* * * * *`) which is a set of five
      fields in a line, indicating when a job should be executed. For example,
      you can define a schedule so that your job runs multiple times a day, or
      runs on specific days and months.


      Subscriptions runs on Coordinated Universal Time (UTC) time and conforms
      to [**RFC 3339**](https://www.rfc-editor.org/rfc/rfc3339). 


      ### Unrestricted fields


      Setting a field to an asterisk (`*`) is sometimes referred to as leaving a
      field unrestricted because it is not restricted to a specific value.


      You can use the asterisk (`*`) to indicate the range of all values for the
      field. When you use the asterisk, the first value in the range is: 0 for
      the minute, hour, and day of the week (Sunday) fields, and 1 for day of
      the month and the month fields.


      ### Configuring fields


      The time fields have the following format and possible values and must be
      specified in the following order:


      | Field | Format | Description 
      |                                                                                                    

      | --- | --- | -----|

      | Minute | 0-59 | Indicates how far past the top of the hour your job
      runs, in minutes. For example if a minute is set to 0, then the job runs
      at the top of the hour because it is 0 minutes after the hour. This means
      if the hour is 8.00 AM, the job runs at 8.00 AM. |

      | Hour | 0-23 | Indicates how far past midnight your job runs, in hours.
      This is rounded down to the nearest hours. This is because minutes are
      indicated by the minute field. |

      | Day of the month | 0-31 | Indicates the calendar date of the month. For
      example, 1 for the first day of the month. |

      | Month | 1-12 or JAN to DEC | Indicates the month. Specify the month
      number or the first three letters of the month name in uppercase. For
      example, 1 or JAN for January.  |

      | Day of the week | 0-6 (or SUN to SAT, or 7 for Sunday) | Indicates the
      day of the week. Monday is 1, Tuesday is 2, and so on. Either 0 or 7
      indicates Sunday. Alternatively, specify the day of the week using the
      first three letters of the weekday name in uppercase. For example SUN for
      Sunday. If you use this field with the day of the month field, then this
      field is evaluated as an inclusive OR. For example, if the day of the
      month is set to 1 and the day of the week is set to SAT, the job runs on
      the first day of the month and on every Saturday of the month, even if the
      first day of the month is not a Saturday. If the day of the week is marked
      by an asterisk (*) then the field is marked as unrestricted. This means
      the job only runs on the first day of the month. |


      ### Matching all values


      To match all values for a field, set the field to an asterisk (`*`). When
      a field is set to an asterisk, the field matches all valid values for that
      field whenever the other field conditions are satisfied. 

       Here are some examples.

       - `* 0 1 1 1`: the job runs every minute of the midnight hour on January 1st and Mondays.
       - `* * * * *`: the job runs every minute (of every hour, of every day of the month, of every month, every day of the week, because each of these is unrestricted).

       ### Matching a range

       To match a range of values, specify your start and stop values, separated by a hyphen (`-`). Do not include spaces in the range. Ranges are inclusive. The first number must be less than the second number. If you are using abbreviated names for the month or weekday (for example, JAN instead of 1 for the first month of the year), the first value must come earlier in the month or week than the second value.

      The following equivalent examples run at midnight on Mondays, Tuesdays,
      Wednesdays, Thursdays, and Fridays (for all months):

       - `0 0 * * 1-5`
       - `0 0 * * MON-FRI`

      ### Matching a list


      Lists can contain any valid value for the field, including ranges. Specify
      your values, separated by a comma (,). Do not include spaces in the list.


      Examples:


      - `0 0,12 * * *`: the job runs at midnight and noon.

      - `0-5,30-35 * * * *`: the job runs in each of the first five minutes of
      every half hour (at the top of the hour and at half past the hour).


      ### Skipping values in a range


      You can skip values in a range by specifying a rate at which to step
      through the range. To do this, specify the range, followed by the forward
      slash (`/`) and the rate at which you want to skip through the range.


      The step value cannot be larger than the largest possible value for the
      field. The default step is 1, so the step function `/1` is the same as not
      using a step function at all.


      Example ranges that use step functions:


      - `*/2`: this is a valid step function for any field. 
          - For the minute field, it matches 0, 2, 4, ... , 58. 
          - For the hour, it matches 0, 2, 4, ... , 22. 
          - For the day of the month, it matches 1, 3, 5, ... , 31 (for a month with 31 days). 
          - For the month, it matches 1, 3, 5, ... , 11. 
          - For the day of the week, it matches 0, 2, 4, 6.

      - `0-12/2`: this is a valid step function for the minute and hour fields.
      It matches 0, 2, 4, ... , 12.


      Example schedules using step functions:


      - `*/2 * * * *`: the job runs every two minutes.

      - `0 0-12/2 * * *`: the job runs every two hours, on the hour. The first
      run is at midnight. The last run is at noon.
    x-displayName: Schedules
  - name: Subscribers
    description: |
      A subscriber is a someone who subscribes to your product or service.
    x-displayName: Subscribers
  - name: Invoices
    description: >
      Invoices represent the amount a customer owes for a subscription. Elastic
      Path Subscriptions generates an invoice for every period in a subscription
      billing cycle. Invoices provide:


      - an itemized list of goods and services provided by a subscription.

      - the cost of a subscription.

      - if applicable, any taxes.


      The invoice lifecycle is described below.


      1. When a subscription is created, an invoice for the first billing period
      is created. When a subscription is created as part of an order, the
      payment for the order covers the first billing period.

      2. Subscription invoices are created by [**billing
      runs**](/docs/api/subscriptions/jobs). The billing run identifies
      subscriptions that require a new invoice for their next billing period and
      creates them. At this point, invoices are marked as outstanding.

      3. Invoices where `tax_required` is `true` will not have payment taken
      until a tax run has added the required tax to the invoice.  

      3. The [**payment run**](/docs/api/subscriptions/jobs) identifies invoices
      that are still outstanding and attempts to take payment for them. If the
      payment succeeds the the invoice is no longer outstanding. If the payment
      fails for any reason, then the invoice remains outstanding and is picked
      up by the next payment run to retry the payment. If an invoice has a
      failed payment, payment is only retried if the fixed interval has passed
      from the last payment attempt as defined in Settings.


      ### Payment Retries


      It is important to limit the number of times Subscriptions retries a
      failed payment request for many reasons, including: frequent payment
      retries can indicate fraudulent activities; multiple failed payment
      attempts can lead to customers accounts being locked out or flagged for
      suspicious activity resulting in poor customer experience; and excessive
      retries places an unnecessary load on your payment processing system.


      In Subscriptions, by default, the number of payment retries is 10. You can
      set this to a limit between 0 - 20, depending on your requirements. Each
      payment retry is made as a payment run. 


      Once the number of payment retries reaches the limit, the payment retries
      stop, resulting in status of the invoice being unpaid. See
      [Invoices](#invoices).


      When configuring payment retries, you have the following options.


      | Attribute | Required | Description |

      | --- | --- | --- |

      | `payment_retry_type` | Optional | One of the following options:
      <ul><li>`fixed` - use `fixed` if you want a fixed time interval between
      payment retries.</li><li>`backoff` - use `backoff` if you want the time
      between retry attempts to increase exponentially.</li><li>`tiered` - use
      `tiered` if you want to specify a list of time durations.</li></ul>  |

      | `payment_retry_interval` | Optional | Represents the retry interval. For
      example, if `payment_retry_unit` is `week` and `payment_retry_interval` is
      `1` then, the payment retry interval is 1 week.  |

      | `payment_retry_multiplier` | Optional | Use when `payment_retry_type` is
      `tiered` and represents the factor by which the time duration increases
      after each retry.   |

      | `payment_retry_unit` | Optional | Represents the unit of time, either
      `day` or `week`. |


      ### Rounding


      Subscriptions always rounds down to the penny. 


      ### Tax


      Subscriptions allows you to apply any number of tax rates to your invoices
      and subscriptions. When applying a tax rate, you must specify:


      - a name that appears on your customer's invoice that describes the
      specific type of tax.

      - the tax rate which is the percentage of the subscription amount that is
      required to be paid as tax.


      In addition, you can optionally specify the jurisdiction which is the
      geographic area or political entity that has authority to levey and
      collect taxes.


      You can apply more than one tax rate for all items in an invoice. You
      cannot apply a tax rate per line item.


      ### Payments


      When your customers add a subscription to a cart and the cart is checked
      out, an unpaid order is returned. You can process the payment for the
      order though a payment gateway. You can do this using:


      - Elastic Path Payments Powered by Stripe. The Elastic Path Payments
      Powered by Stripe gateway interacts with Stripe to allow your subscribers
      to pay for their subscriptions. 

      - Authorize.Net. 


      #### Using Elastic Path Payments Powered by Stripe


      To use Elastic Path Payments Powered by Stripe gateway, contact the
      [**Customer Success Team**](mailto:customersuccess@elasticpath.com). 


      Create your Stripe account in [**Stripe
      Dashboard**](https://dashboard.stripe.com/login) and complete an
      onboarding form to make payments using the gateway. For more information,
      see [**Onboarding**](/docs/payments/onboarding).


      Once you have signed up for Elastic Path Payments Powered by Stripe, you
      must configure the payment gateway so that your shoppers can make
      payments. See [**Configure Elastic Path Payments Powered by
      Stripe**](/docs/payments/onboarding).


      #### Using Authorize.Net


      To use Authorize.Net, you must have: 


      - an active merchant account with Authorize.Net

      - obtained API credentials. These include an **API Login ID** and a
      **Transaction Key**.

      - Enabled Authorize.Net in Commerce Manager. See [Enabling
      Authorize.net](/docs/commerce-manager/payments/configure-other-payment-gateways#enabling-authorizenet).


      #### Payment Requests


      Subscriptions only supports the `purchase` payment mechanism. The gateway
      attempts to charge the customer immediately, and the result of the attempt
      is returned. If a payment fails, the invoice is kept as outstanding and
      the payment information, with the reason for the failure is attached to
      the invoice. A new payment run is required to attempt another payment. 


      When sending a payment request to the Payments service, you must specify
      the following.


      | Attribute | Required | Description |

      | --- | --- | --- |

      | `gateway` | Required| Either `elastic_path_payments_stripe` or
      `authorize_net`. |

      | `method` | Required | Must be `purchase`.

      | `payment` | Required | The type of payment, for example,
      `pm_card_visa_debit`.

      | `options` | Required | These options must be set as they set up the card
      to be used in future without the customer being present. If these options
      are not set, future payments may fail. There are two options.
      <ul><li>`off_session`. Must be set to `true`. </li><li>`confirm`. Must be
      set to `true`.</li></ul> |


      #### External Payments


      External payments are payment methods not offered by Elastic Path
      Subscriptions (such as Elastic Path Payments powered by Stripe or
      Authorize.net), but they can still be integrated with Subscriptions. To do
      this, you must configure your subscriptions to use external payments by
      setting `manual_payments` to `true`. See [Create a
      Subscription](/docs/api/subscriptions/create-subscription).


      When a subscription is created with `manual_payments` set to `true`:


      1. When the payment run processes the generated invoice, it creates a
      pending payment. A `subscription-invoice-created` event is emitted that
      includes the `subscription_id`, `invoice_id` and `payment_id`. No payment
      is taken. 

      2. You can use the events generated by Elastic Path Subscriptions to
      configure your external payment system to respond to these events,
      ensuring that your external payment system knows when the payment schedule
      has run and it's time to process the payment.

      3. When the external payment system handles the payment (either takes the
      payment successfully or the payment fails) the [Update Invoice
      Payment](/docs/api/subscriptions/update-invoice-payment) endpoint, enables
      the update of the pending payment. 
          - If payment is successful, the invoice is updated to `paid` and the billing/payment cycle continues as normal.
          - If payment fails, the invoice continues to be marked as `outstanding`. The payment is not `pending` anymore. This is because a payment attempt has been made. Following on from this, the next payment run generates another manual pending payment. The external system is notified of this using the `subscription-invoice-payment-updated`.

      #### Card Declines


      Card payments can fail for a variety of reasons, including insufficient
      funds, incorrect card data or fraudulent activity. You can use the
      `card_id` and `customer_id` attributes to program your front-end
      implementation to allow your preferred payment service provider to update
      a subscription with new card details, enabling you to easily manage your
      subscription changes.
    x-displayName: Invoices
  - name: Dunning Rules
    description: >
      Dunning is the process of handling failed payment attempts. This is
      important for recovering revenue from failed payments, reduces customer
      churn and maintains cashflow. By implementing efficient dunning processes,
      you can enhance financial health and operational efficiency.


      Subscriptions enables you to create a dunning rule that allows you to
      configure payment retry schedules. Subscriptions retries failed payments
      automatically. You can customize the timing and frequency of the payment
      retries.


      Dunning is enabled by default. You can choose to disable dunning. If no
      dunning rule is configured, then payment is retried once a day for 10
      days, in total 11 payments. You can decide what action to take after the
      Subscriptions has stopped retrying the payments.


      - Do nothing - the subscription remains active and Subscriptions does not
      attempt to retry the payment. However, the subscription is still available
      for a subscriber to use.

      - Suspend the subscription. Subscriptions does not attempt to retry the
      payment. A subscriber can choose to pay the outstanding invoice. However,
      a subscriber cannot renew their subscription; a merchandizer must renew
      the subscription on behalf of the subscriber.

      - close a subscription. The subscription ends and it's status becomes
      `inactive`. However, a merchandizer can choose to resume the subscription
      if a subscriber pays the outstanding payment.
    x-displayName: Dunning Rules
  - name: Proration Policies
    description: >
      Proration is the adjustment of charges or credits on a subscriber's
      account based on the amount of time a service is used. Proration ensures
      that subscribers are only charged for the actual time they use the
      service, whether they upgrade, downgrade, start, or cancel their
      subscription partway through a billing cycle. This means fair billing for
      your subscribers and provides you with the flexibility to change your
      subscribers subscriptions at any time. 


      ::: note


      Subscriptions use client credentials to enable changes to subscriptions,
      so if you want your shoppers to have the ability to make changes, you can
      implement a BFF layer using this approach.


      :::


      Proration occurs for:


      - Plan upgrades/downgrades:  If a subscriber changes their plan in the
      middle of a billing cycle, proration adjusts the charges to reflect the
      time spent on each plan.

      - Service cancellation: If a subscriber cancels a subscription before the
      end of a billing cycle, they may receive a prorated invoice for the used
      portion of the subscription.

      - Mid-cycle subscription: If a subscriber starts a subscription in the
      middle of a billing cycle, they are charged a prorated amount for the
      remaining days in the billing cycle.


      There are several scenarios when implementing proration policies.


      1. You may want one policy for multiple offerings because only some
      subscriptions need prorating.

      2. You may want a default proration policy for your store.

      3. You may want several policies for different offerings. 


      In Subscriptions, charges only prorate by day. As soon as a subscriber
      changes their subscription, a manual billing run is triggered and an
      invoice is generated with the new price on the next billing run and the
      difference in price is prorated over days.  


      By default, proration is not enabled for Subscriptions. Once you have
      attached a proration policy to an offering, proration is enabled
      automatically.


      ### End dates when switching plans


      Subscriptions manages the subscription end date when shoppers switch from
      one plan to another. Whether or not an end date is configured depends on
      the end behavior of the plans you are switching between.


      | Current Subscription | New Subscription | Proration Behavior | End date
      |

      | --- | --- | --- | --- |

      | `close` | `roll` | The subscription switches from a plan with a fixed
      end date to a rolling plan so no end date is set after proration. | No end
      date is configured. |

      | `roll` | `close` | The subscription switches to a fixed plan, and the
      end date is configured based on the duration of the plan. | An end date is
      configured. |

      | `close` | `close` | The remaining time on the current plan is not
      carried over to the new plan. For example, if your current plan has 3
      months remaining and you switch to a new plan that has a fixed length of 6
      months, the new end date is calculated as 6 months from the day you switch
      plans, effectively resetting the subscription length to the new plan. |
      New end date calculated from the day you switched plan. |
    x-displayName: Proration Policies
  - name: Observable Events
    description: >
      You can integrate Subscriptions with external systems like enterprise
      resource planning, fulfilment and other systems. For example, when a
      subscriber updates their address, the Customer Relationship Management
      system is updated with the change. 


      Events are actions that occur in Subscriptions, such as a subscriber
      changing their address or a subscription changing from active to inactive.
      You can create custom functions that perform additional processing outside
      of Subscriptions, and create integrations so that when an event occurs in
      your store, the custom function is run.


      Events are processed concurrently. This means that events may not be
      delivered in the order they are created. For example, if a subscription is
      updated multiple times, the events may not be delivered in the same
      sequence they were updated. Events operate on an "at least once" delivery
      policy. We aim to deliver messages within 30 minutes or less. Ensure that
      you design your receiving code accordingly.


      For more information about integrating Subscriptions, see [**Integrations
      (Event
      Subscriptions/Notifications)**](/docs/api/integrations/integrations-event-subscriptions-notifications#integration-types).


      | Resource | Action | Observable Key | Availability |

      | --- | --- | --- | --- |

      | Product | <ul><li>Created</li><li>Updated</li><li>Deleted</li></ul> |
      <ul><li>`subscription-product.created`</li><li>`subscription-product.updated`</li><li>`subscription-product.deleted`</li></ul>
      | Store |

      | Plan |  <ul><li>Created</li><li>Updated</li><li>Deleted</li></ul> |
      <ul><li>`subscription-plan.created`</li><li>`subscription-plan.updated`</li><li>`subscription-plan.deleted`</li></ul>
      | Store |

      | Offering |  <ul><li>Created</li><li>Updated</li><li>Deleted</li></ul> |
      <ul><li>`subscription-offering.created`</li><li>`subscription-offering.updated`</li><li>`subscription-offering.deleted`</li></ul>
      | Store |

      | Subscription |
      <ul><li>Created</li><li>Create-failed</li><li>Paused</li><li>Canceled</li><li>Pending-cancel</li><li>Pending-pause</li><li>Resumed</li><li>Closed</li></ul>
      |
      <ul><li>`subscription.created`</li><li>`subscription.create-failed`</li><li>`subscription.canceled`</li><li>`subscription.paused`</li><li>`subscription.pending_cancel`</li><li>`subscription.pending_pause`</li><li>`subscription.resumed`</li><li>`subscription.closed`</li></ul>
      | Store |

      | Job | <ul><li>Created</li><li>Updated</li><li>Deleted</li></ul> |
      <ul><li>`subscription-job.created`</li><li>`subscription-job.updated`</li><li>`subscription-job.deleted`</li></ul>
      | Store |

      | Invoices | <ul><li>Created</li><li>Deleted</li></ul> |
      <ul><li>`subscription-invoice.created`</li><li>`subscription-invoice.deleted`</li></ul>
      | Store |

      | Schedule | <ul><li>Created</li><li>Updated</li><li>Deleted</li></ul> |
      <ul><li>`subscription-schedule.created`</li><li>`subscription-schedule.updated`</li><li>`subscription-schedule.deleted`</li></ul>
      | Store |

      | Subscriber | <ul><li>Created</li><li>Updated</li><li>Deleted</li></ul> |
      <ul><li>`subscription-subscriber.created`</li><li>`subscription-subscriber.updated`</li><li>`subscription-subscriber.deleted`</li></ul>
      | Store |
    x-displayName: Observable Events
  - name: Inventory
    description: >
      The Inventory API allows you to manage stock for products at both
      organization and store levels. Each product keeps a history of inventory
      transactions, enabling easier stock auditing.


      You can specify an initial stock level when you create a product. The
      stock is set to `0` by default.


      :::caution 


      You cannot create multiple inventories of the same organization-level
      product in different stores because no unique stock ID, specific to each
      store, is currently generated. Hence, when you try to manage inventory of
      the same product for different stores, you get an invalid product
      identifier error. 


      :::
    x-displayName: Inventory
  - name: InventoriesTransactions
    description: Methods to allow you to modify and view a products stock via transactions.
    x-displayName: InventoriesTransactions
  - name: Locations
    x-displayName: Locations
paths:
  /catalog:
    get:
      operationId: getByContextRelease
      summary: Get the catalog release as shoppers
      description: Returns a list of all published releases of the specified catalog.
      parameters:
        - $ref: '#/components/parameters/accept-language'
        - $ref: '#/components/parameters/channel'
        - $ref: '#/components/parameters/tag'
      responses:
        '200':
          description: The catalog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/release-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Releases
      security:
        - bearerAuth: []
  /catalog/hierarchies:
    get:
      operationId: getByContextAllHierarchies
      summary: Get all Hierarchies
      description: >
        Returns all hierarchies from a catalog.


        If you have multiple catalog rules defined, the rule that best matches
        the shoppers context is used to determine which catalog is retrieved.
        For information about how rules are matched, see [Resolving Catalog
        Rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).


        ### Filtering


        This endpoint supports filtering. For general syntax, see
        [Filtering](/guides/Getting-Started/filtering).


        | Operator | Description | Supported Attributes | Example |

        |:--- |:--- |:--- |:--- |

        | `Eq` | Checks if the values of two operands are equal. If they are,
        the condition is true. | `name`, `slug`| `filter=eq(name,some-name)` |

        | `In` | Checks if the values are included in the specified string. If
        they are, the condition is true. | `id` | `filter=in(id,some-id)` |


        ### Building breadcrumbs in a storefront


        In a catalog, you can use a filter to return a list of nodes in a
        hierarchy structure that a product belongs to. You can use this to build
        breadcrumbs in your storefront. An example is shown below.


        `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`


        - Specify the node Ids in the filter expression.

        - You can have as many node Ids as you want.

        - It does not matter what order you specify the node Ids. The nodes are
        returned in the order they were last updated.
      parameters:
        - $ref: '#/components/parameters/accept-language'
        - $ref: '#/components/parameters/channel'
        - $ref: '#/components/parameters/tag'
        - $ref: '#/components/parameters/filter-hierarchy'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The hierarchies of the catalog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hierarchy-list-data'
        default:
          description: An unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Shopper Catalog API
      security:
        - bearerAuth: []
  /catalog/hierarchies/{hierarchy_id}:
    get:
      operationId: getByContextHierarchy
      summary: Get a Hierarchy
      description: >
        Returns a hierarchy from the catalog.


        If you have multiple catalog rules defined, the rule that best matches
        the shoppers context is used to determine which catalog to retrieve. For
        information about how catalog rules are matched, see [Resolving Catalog
        Rules](/docs/api/pxm/catalog/rules).
      parameters:
        - $ref: '#/components/parameters/accept-language'
        - $ref: '#/components/parameters/channel'
        - $ref: '#/components/parameters/tag'
        - name: hierarchy_id
          in: path
          description: The catalog hierarchy ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The catalog hierarchy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hierarchy-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Shopper Catalog API
      security:
        - bearerAuth: []
  /catalog/hierarchies/{hierarchy_id}/nodes:
    get:
      operationId: getByContextHierarchyNodes
      summary: Get a Hierarchy's Nodes
      description: >
        Returns all the nodes for the specified hierarchy.


        If you have multiple catalog rules defined, the rule that best matches
        the shoppers context is used to determine which catalog is retrieved.
        For information about how rules are matched, see [Resolving Catalog
        Rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).


        In the `bread_crumb` metadata, you can identify the parent nodes that a
        node is associated with. This is useful if you want to improve how your
        shoppers search your store, for example. See [Product and Node
        Associations in Breadcrumb
        Metadata](/guides/How-To/Catalogs/breadcrumbs).
         
        ### Filtering


        This endpoint supports filtering. For general syntax, see
        [Filtering](/guides/Getting-Started/filtering).


        | Operator | Description | Supported Attributes | Example |

        |:--- |:--- |:--- |:--- |

        | `Eq` | Checks if the values of two operands are equal. If they are,
        the condition is true. | `name`, `slug`| `filter=eq(name,some-name)` |

        | `In` | Checks if the values are included in the specified string. If
        they are, the condition is true. | `id` | `filter=in(id,some-id)` |
         
        ### Building breadcrumbs in a storefront


        In a catalog, you can use a filter to return a list of nodes in a
        hierarchy structure that a product belongs to. You can use this to build
        breadcrumbs in your storefront. An example is shown below.


        `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`


        - Specify the node Ids in the filter expression.

        - You can have as many node Ids as you want.

        - It does not matter what order you specify the node Ids. The nodes are
        returned in the order they were last updated.
      parameters:
        - $ref: '#/components/parameters/channel'
        - $ref: '#/components/parameters/tag'
        - $ref: '#/components/parameters/accept-language'
        - $ref: '#/components/parameters/filter-node'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - name: hierarchy_id
          in: path
          description: The catalog hierarchy ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The child nodes of a catalog hierarchy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/node-list-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Shopper Catalog API
      security:
        - bearerAuth: []
  /catalog/hierarchies/{hierarchy_id}/children:
    get:
      operationId: getByContextHierarchyChildNodes
      summary: Get a Hierarchy's Children
      description: >
        Returns the parent nodes for the specified hierarchy.
         
        ![Parent Nodes](/assets/rootnodes.PNG)
         
        If you have multiple catalog rules defined, the rule that best matches
        the shopperʼs context is used to determine which catalog is retrieved.
        For information about how rules are matched, see [Resolving Catalog
        Rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).


        In the `bread_crumb` metadata, you can identify the parent nodes that a
        node is associated with. This is useful if you want to improve how your
        shoppers search your store, for example. See [Product and Node
        Associations in Breadcrumb
        Metadata](/guides/How-To/Catalogs/breadcrumbs).
         
        ### Filtering


        The following operators and attributes are available when filtering on
        this endpoint.


        | Operator | Description | Supported Attributes | Example |

        |:--- |:--- |:--- |:--- |

        | `Eq` | Checks if the values of two operands are equal. If they are,
        the condition is true. | `name`, `slug`| `filter=eq(name,some-name)` |

        | `In` | Checks if the values are included in the specified string. If
        they are, the condition is true. | `id` | `filter=in(id,some-id)` |


        For more information, see
        [Filtering](/guides/Getting-Started/filtering).


        ### Building breadcrumbs in a storefront


        In a catalog, you can use a filter to return a list of nodes in a
        hierarchy structure that a product belongs to. You can use this to build
        breadcrumbs in your storefront. An example is shown below.


        `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`


        - Specify the node Ids in the filter expression.

        - You can have as many node Ids as you want.

        - It does not matter what order you specify the node Ids. The nodes are
        returned in the order they were last updated.
      parameters:
        - $ref: '#/components/parameters/channel'
        - $ref: '#/components/parameters/tag'
        - $ref: '#/components/parameters/accept-language'
        - $ref: '#/components/parameters/filter-node'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - name: hierarchy_id
          in: path
          description: The catalog hierarchy ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The child nodes of a catalog hierarchy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/node-list-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Shopper Catalog API
      security:
        - bearerAuth: []
  /catalog/nodes:
    get:
      operationId: getByContextAllNodes
      summary: Get all Nodes
      description: >
        Returns all nodes in the catalog.


        If you have multiple catalog rules defined, the rule that best matches
        the shoppers context is used to determine which catalog is retrieved.
        For information about how rules are matched, see [Resolving Catalog
        Rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).


        You can see the parent nodes a node is associated with in the
        `bread_crumb` metadata for each node. This is useful if you want to
        improve how your shoppers search your store, for example. See [Product
        and Node Associations in Breadcrumb
        Metadata](/guides/How-To/Catalogs/breadcrumbs).


        In a catalog, you can use a filter to return a list of nodes in a
        hierarchy structure that a product belongs to. You can use this to build
        breadcrumbs in your storefront. For more information, see [Building
        breadcrumbs in a storefront](#building-breadcrumbs-in-a-storefront).


        The response lists the products associated with the nodes. If products
        are [curated](/guides/How-To/Products/curating-products), they are
        displayed in `curated_products`. Product curation allows you to promote
        specific products within each of your hierarchies, enabling you to
        create unique product collections in your storefront.


        - You can only curate 20 products or less. You cannot have more than 20
        curated products.

        - If a curated product is removed from a node, the product is also
        removed from the `curated_products` list.


        ### Filtering


        This endpoint supports filtering. For general syntax, see
        [Filtering](/guides/Getting-Started/filtering). The following operators
        and attributes are available.


        | Operator  | Description | Attributes | Example |

        | --- | --- | --- | --- |

        | `Eq` | Checks if the values of two operands are equal. If they are,
        the condition is true. | `name`, `slug` | `filter=eq(name,some-name)` |

        | `in`      | Checks if the values are included in the specified string.
        If they are, the condition is true.

        | `Id` | 
        `filter=in(id,9214719b-17fe-4ea7-896c-d61e60fc0d05,e104d541-2c52-47fa-8a9a-c4382480d97c,65daaf68-ff2e-4632-8944-370de835967d)`
        |


        ### Building breadcrumbs in a storefront


        In a catalog, you can use a filter to return a list of nodes in a
        hierarchy structure that a product belongs to. You can use this to build
        breadcrumbs in your storefront. An example is shown below.


        `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`


        - Specify the node Ids in the filter expression.

        - You can have as many node Ids as you want.

        - It does not matter what order you specify the node Ids. The nodes are
        returned in the order they were last updated.
      parameters:
        - $ref: '#/components/parameters/channel'
        - $ref: '#/components/parameters/tag'
        - $ref: '#/components/parameters/accept-language'
        - $ref: '#/components/parameters/filter-node'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The nodes of the catalog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/node-list-data'
        default:
          description: An unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Shopper Catalog API
      security:
        - bearerAuth: []
  /catalog/nodes/{node_id}:
    get:
      operationId: getByContextNode
      summary: Get a Node
      description: >
        Returns a node from the catalog.


        If you have multiple catalog rules defined, the rule that best matches
        the shoppers context is used to determine which catalog is retrieved.
        For information about how rules are matched, see [Resolving Catalog
        Rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).


        You can see the parent nodes a node is associated with in the
        `bread_crumb` metadata for each node. This is useful if you want to
        improve how your shoppers search your store, for example. See [Product
        and Node Associations in Breadcrumb
        Metadata](/guides/How-To/Catalogs/breadcrumbs).


        The response lists the products associated with a node. If products are
        [curated](/guides/How-To/Products/curating-products), they are displayed
        in `curated_products`. Product curation allows you to promote specific
        products within each of your nodes, enabling you to create unique
        product collections in your storefront.


        - If you don't provide any `curated_products`, products are listed by
        their `updated_at` time in descending order, with the most recently
        updated product first.

        - If you configure `curated_products` for only a few products, the
        curated products are displayed first and the other products are
        displayed in the order of `updated_at` time.

        - You can only curate 20 products or less. You cannot have more than 20
        curated products.

        - A product that is curated has the `"curated_product": true` attribute
        displayed.

        - If a curated product is removed from a node, the product is also
        removed from the `curated_products` list.
      parameters:
        - $ref: '#/components/parameters/channel'
        - $ref: '#/components/parameters/tag'
        - $ref: '#/components/parameters/accept-language'
        - name: node_id
          in: path
          description: The catalog node ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The catalog node.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/node-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Shopper Catalog API
      security:
        - bearerAuth: []
  /catalog/nodes/{node_id}/relationships/children:
    get:
      operationId: getByContextChildNodes
      summary: Get a Node's Children
      description: >
        Returns the child nodes for a node in the catalog.
         
        If you have multiple catalog rules defined, the rule that best matches
        the shoppers context is used to determine which catalog is retrieved.
        For information about how rules are matched, see [Resolving Catalog
        Rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).


        You can see which parent nodes a node is associated with in the
        `bread_crumb` metadata for each node. This is useful if you want to
        improve how your shoppers search your store, for example. See [Product
        and Node Associations in Breadcrumb
        Metadata](/guides/How-To/Catalogs/breadcrumbs).


        The response lists the products associated with the nodes. If products
        are [curated](/guides/How-To/Products/curating-products), they are
        displayed in `curated_products`. Product curation allows you to promote
        specific products within each of your hierarchies, enabling you to
        create unique product collections in your storefront.
         
        - If you don't provide any curated_products, products are listed by
        their updated_at time in descending order, with the most recently
        updated product first.

        - If you configure curated_products for only a few products, the curated
        products are displayed first and the other products are displayed in the
        order of updated_at time.

        - You can only curate 20 products or less. You cannot have more than 20
        curated products.

        - A product that is curated has the "curated_product": true attribute
        displayed.

        - If a curated product is removed from a node, the product is also
        removed from the curated_products list.
         
        ### Filtering
         
        This endpoint supports filtering. For general syntax, see
        [Filtering](/guides/Getting-Started/filtering). The following operators
        and attributes are available.
         
        | Operator  | Description | Attributes | Example |

        | --- | --- | --- | --- |

        | `Eq` | Checks if the values of two operands are equal. If they are,
        the condition is true. | `name`, `slug` | `filter=eq(name,some-name)` |

        | `in`      | Checks if the values are included in the specified string.
        If they are, the condition is true.

        | `Id` | 
        `filter=in(id,9214719b-17fe-4ea7-896c-d61e60fc0d05,e104d541-2c52-47fa-8a9a-c4382480d97c,65daaf68-ff2e-4632-8944-370de835967d)`
        |
         
        ### Building breadcrumbs in a storefront
         
        In a catalog, you can use a filter to return a list of nodes in a
        hierarchy structure that a product belongs to. You can use this to build
        breadcrumbs in your storefront. An example is shown below.
         
        `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`
         
        - Specify the node Ids in the filter expression.

        - You can have as many node Ids as you want.

        - It does not matter what order you specify the node Ids. The nodes are
        returned in the order they were last updated.
      parameters:
        - $ref: '#/components/parameters/channel'
        - $ref: '#/components/parameters/tag'
        - $ref: '#/components/parameters/accept-language'
        - $ref: '#/components/parameters/filter-node'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - name: node_id
          in: path
          description: The catalog node ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The child nodes of a catalog node.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/node-list-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Shopper Catalog API
      security:
        - bearerAuth: []
  /catalog/products:
    get:
      operationId: getByContextAllProducts
      summary: Get all Products
      description: >
        Retrieves the list of products from the catalog. Only the products in a
        live status are retrieved.


        ### Catalog Rules
         
        If you have multiple catalog rules defined, the rule that best matches
        the shoppers context is used to determine which catalog is retrieved. If
        no catalog rules are configured, the first catalog found is returned.
        For information about how rules are matched, see [Resolving Catalog
        Rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).


        ### Product and Node Associations

         You can see the parent nodes a product is associated within the `bread_crumbs` and `bread_crumb_nodes` metadata for each product. For example, this is useful if you want to improve how your shoppers search your store. See [Product and Node Associations in Breadcrumb Metadata](/guides/How-To/Catalogs/breadcrumbs).

         
        ### Including Resources


        Using the `include` parameter, you can retrieve top-level resources,
        such as, files or main image, bundle component products and product
        attributes, such as SKU or slug. 


        | Parameter | Required |
        Description                                                                                                                                                                                                   
        |

        | 
        :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

        | `component_products` | Optional | The  component product data and key
        attribute data, such as SKU or slug, to return for component products in
        a product bundle.  |

        | `main_image`         | Optional | The main images associated with a
        product. |

        | `files`              | Optional | Any files associated with a product.
        |


        See [**Including Resources**](/guides/Getting-Started/includes).
         
        ### Filtering
         
        This endpoint supports filtering. For general filtering syntax, see
        [Filtering](/guides/Getting-Started/filtering). The following operators
        and attributes are available when filtering on this endpoint.
         
        | Operator |
        Description                                                                                    
        | Supported Attributes                                     | Example |

        |:---|:------------------------------------------------------------------------------------------------|:---------------------------------------------------------|:---
        |

        | `Eq` | Checks if the values of two operands are equal. If they are,
        the condition is true. For `product_types` and `tags`, you can only
        specify one. For example, `filter=eq(product_types,child)`.            |
        `name`, `sku`, `slug`, `manufacturer_part_num`, `upc_ean`,
        `product_types`, `tags` | `filter=eq(name,some-name)` |

        | `In` | Checks if the values are included in the specified string. If
        they are, the condition is true. For `product_types` and `tags`, you can
        specify more than one. For example,
        `filter=in(product_types,child,bundle)`. | `id`, `name`, `sku`, `slug`,
        `manufacturer_part_num`, `upc_ean`, `product_types`, `tags`          |
        `filter=in(id,some-id)` |


        ### Building breadcrumbs in a storefront
         
        In a catalog, you can use a filter to return a list of nodes in a
        hierarchy structure that a product belongs to. You can use this to build
        breadcrumbs in your storefront. An example is shown below.
         
        `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`
         
        - Specify the node Ids in the filter expression.

        - You can have as many node Ids as you want.

        - It does not matter what order you specify the node Ids. The nodes are
        returned in the order they were last updated.
      parameters:
        - $ref: '#/components/parameters/accept-language'
        - $ref: '#/components/parameters/channel'
        - $ref: '#/components/parameters/tag'
        - $ref: '#/components/parameters/filter-product'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The products of a catalog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product-list-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Shopper Catalog API
      security:
        - bearerAuth: []
  /catalog/products/{product_id}:
    get:
      operationId: getByContextProduct
      summary: Get a Product
      description: >
        Returns the specified product from the catalog. The product must be in
        the `live` status.


        If you have multiple catalog rules defined, the rule that best matches
        the shoppers context is used to determine which catalog is retrieved.
        For information about how rules are matched, see [Resolving Catalog
        Rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).


        You can see the parent nodes a product is associated with in the
        `bread_crumbs` and `bread_crumb_nodes` metadata for each product. This
        is useful if you want to improve how your shoppers search your store,
        for example. See [Product and Node Associations in Breadcrumb
        Metadata](/guides/How-To/Catalogs/breadcrumbs).


        Using the `include` parameter, you can retrieve top-level resources,
        such as, files or main image, bundle component products and product
        attributes, such as SKU or slug. 


        | Parameter | Required |
        Description                                                                                                                                                                                                      
        |

        | 
        :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

        | `component_products` | Optional | The  component product data and key
        attribute data, such as SKU or slug, to return for component products in
        a product bundle.  |

        | `main_image`         | Optional | The main images associated with a
        product. |

        | `files`              | Optional | Any files associated with a product.
        |


        See [**Including Resources**](/guides/Getting-Started/includes).
      parameters:
        - $ref: '#/components/parameters/include'
        - $ref: '#/components/parameters/channel'
        - $ref: '#/components/parameters/tag'
        - name: product_id
          in: path
          description: The product ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The product of a catalog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Shopper Catalog API
      security:
        - bearerAuth: []
  /catalog/products/{product_id}/relationships/component_products:
    get:
      operationId: getByContextComponentProductIDs
      summary: Get a Bundle's Component Products
      description: >
        With Product Experience Manager, you can
        [create](/docs/api/pxm/products/create-product) and manage bundles. A
        bundle is a purchasable product, comprising of one or more products that
        you want to sell together. 


        You can create multiple components within a bundle. Each component must
        have at least one or more options. Each option is a product and a
        quantity.


        This endpoint returns a list of component product IDs for the specified
        bundle.
      parameters:
        - $ref: '#/components/parameters/channel'
        - $ref: '#/components/parameters/tag'
        - name: product_id
          in: path
          description: The product ID.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: >-
            The list of component product IDs of a bundle product from a
            catalog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product-reference-list-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Shopper Catalog API
      security:
        - bearerAuth: []
  /catalog/products/{product_id}/relationships/children:
    get:
      operationId: getByContextChildProducts
      summary: Get a Parent Product's Child Products
      description: >
        For a specified product and catalog release, retrieves a list of child
        products from a parent product. Any product other than a base product
        results in a `422 Unprocessable Entity` response. Only the products in a
        `live` status are retrieved.
         
        If you have multiple catalog rules defined, the rule that best matches
        the shopperʼs context is used to determine which catalog is retrieved.
        If no catalog rules are configured, the first catalog found is returned.
        For information about how rules are matched, see [Resolving Catalog
        Rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).
         
        You can see the parent nodes a product is associated within the
        `breadcrumbs` metadata for each product. For example, this is useful if
        you want to improve how your shoppers search your store. See [Product
        and Node Associations in Breadcrumb
        Metadata](/guides/How-To/Catalogs/breadcrumbs).
         
        ### Filtering
         
        This endpoint supports filtering. For general filtering syntax, see
        [Filtering](/guides/Getting-Started/filtering). The following operators
        and attributes are available when filtering on this endpoint.
         
        | Operator |
        Description                                                                                    
        | Supported Attributes                                     | Example |

        |:---|:------------------------------------------------------------------------------------------------|:---------------------------------------------------------|:---
        |

        | `Eq` | Checks if the values of two operands are equal. If they are,
        the condition is true. For `product_types` and `tags`, you can only
        specify one. For example, `filter=eq(product_types,child)`.            |
        `name`, `sku`, `slug`, `manufacturer_part_num`, `upc_ean`,
        `product_types`, `tags` | `filter=eq(name,some-name)` |

        | `In` | Checks if the values are included in the specified string. If
        they are, the condition is true. For `product_types` and `tags`, you can
        specify more than one. For example,
        `filter=in(product_types,child,bundle)`. | `id`, `name`, `sku`, `slug`,
        `manufacturer_part_num`, `upc_ean`, `product_types`, `tags`          |
        `filter=in(id,some-id)` |
         
        ### Building breadcrumbs in a storefront
         
        In a catalog, you can use a filter to return a list of nodes in a
        hierarchy structure that a product belongs to. You can use this to build
        breadcrumbs in your storefront. An example is shown below.
         
        `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`
         
        - Specify the node Ids in the filter expression.

        - You can have as many node Ids as you want.

        - It does not matter what order you specify the node Ids. The nodes are
        returned in the order they were last updated.
         
        ### Including Resources
         
        Using the `include` parameter, you can retrieve top-level resources,
        such as, files or main image, bundle component products and product
        attributes, such as SKU or slug. 
         
        | Parameter | Required |
        Description                                                                                                                                                                                                   
        |

        | 
        :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

        | `component_products` | Optional | The  component product data and key
        attribute data, such as SKU or slug, to return for component products in
        a product bundle.  |

        | `main_image`         | Optional | The main images associated with a
        product. |

        | `files`              | Optional | Any files associated with a product.
        |
         
        See [**Including Resources**](/guides/Getting-Started/includes).
      parameters:
        - $ref: '#/components/parameters/channel'
        - $ref: '#/components/parameters/tag'
        - name: product_id
          in: path
          description: The product ID.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/accept-language'
        - $ref: '#/components/parameters/filter-product'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of child products of a parent product from a catalog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product-list-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Shopper Catalog API
      security:
        - bearerAuth: []
  /catalog/hierarchies/{hierarchy_id}/products:
    get:
      operationId: getByContextProductsForHierarchy
      summary: Get a Hierarchy's Products
      description: >
        Returns the products associated with the specified hierarchy in the
        catalog. The products must be in the live status.


        If you have multiple catalog rules defined, the rule that best matches
        the shoppers context is used to determine which catalog is retrieved.
        See [Resolving catalog
        rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).


        You can see the parent nodes a product is associated with in the
        `bread_crumbs` and `bread_crumb_nodes` metadata for each product. This
        is useful if you want to improve how your shoppers search your store,
        for example. See [Product and Node Associations in Breadcrumb
        Metadata](/guides/How-To/Catalogs/breadcrumbs).
         
        ### Filtering


        This endpoint supports filtering. For general filtering syntax, see
        [Filtering](/guides/Getting-Started/filtering). The following operators
        and attributes are available when filtering on this endpoint.


        | Operator |
        Description                                                                                    
        | Supported Attributes                                     | Example |

        |:---|:------------------------------------------------------------------------------------------------|:---------------------------------------------------------|:---
        |

        | `Eq` | Checks if the values of two operands are equal. If they are,
        the condition is true. For `product_types` and `tags`, you can only
        specify one. For example, `filter=eq(product_types,child)`.            |
        `name`, `sku`, `slug`, `manufacturer_part_num`, `upc_ean`,
        `product_types`, `tags` | `filter=eq(name,some-name)` |

        | `In` | Checks if the values are included in the specified string. If
        they are, the condition is true. For `product_types` and `tags`, you can
        specify more than one. For example,
        `filter=in(product_types,child,bundle)`. | `id`, `name`, `sku`, `slug`,
        `manufacturer_part_num`, `upc_ean`, `product_types`, `tags`          |
        `filter=in(id,some-id)` |


        ### Building breadcrumbs in a storefront


        In a catalog, you can use a filter to return a list of nodes in a
        hierarchy structure that a product belongs to. You can use this to build
        breadcrumbs in your storefront. An example is shown below.


        `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`


        - Specify the node Ids in the filter expression.

        - You can have as many node Ids as you want.

        - It does not matter what order you specify the node Ids. The nodes are
        returned in the order they were last updated.
         
        ### Including Resources
         
        Using the `include` parameter, you can retrieve top-level resources,
        such as, files or main image, bundle component products and product
        attributes, such as SKU or slug. 
         
        | Parameter | Required |
        Description                                                                                                                                                                                                   
        |

        | 
        :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

        | `component_products` | Optional | The  component product data and key
        attribute data, such as SKU or slug, to return for component products in
        a product bundle.  |

        | `main_image`         | Optional | The main images associated with a
        product. |
           `files`              | Optional | Any files associated with a product. |

         
        See [**Including Resources**](/guides/Getting-Started/includes).
      parameters:
        - $ref: '#/components/parameters/accept-language'
        - $ref: '#/components/parameters/channel'
        - $ref: '#/components/parameters/tag'
        - $ref: '#/components/parameters/filter-product'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - name: hierarchy_id
          in: path
          description: The catalog hierarchy ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The products of a catalog hierarchy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product-list-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Shopper Catalog API
      security:
        - bearerAuth: []
  /catalog/nodes/{node_id}/relationships/products:
    get:
      operationId: getByContextProductsForNode
      summary: Get a Node's Products
      description: >
        Returns the products associated with the specified hierarchy node in the
        catalog. The products must be in the `live` status. If the products have
        been curated then the products are returned in the order specified in
        the `curated_products` attribute. A product that is curated has the
        `"curated_product": true` attribute displayed.


        If you have multiple catalog rules defined, the rule that best matches
        the shoppers context is used to determine which catalog is retrieved.
        See [Resolving catalog
        rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).


        You can see the parent nodes a product is associated with in the
        `bread_crumbs` and `bread_crumb_nodes` metadata for each product. This
        is useful if you want to improve how your shoppers search your store,
        for example. See [Product and Node Associations in Breadcrumb
        Metadata](/guides/How-To/Catalogs/breadcrumbs).
         
        ### Filtering


        This endpoint supports filtering. For general filtering syntax, see
        [Filtering](/guides/Getting-Started/filtering). The following operators
        and attributes are available when filtering on this endpoint.


        | Operator |
        Description                                                                                    
        | Supported Attributes                                     | Example |

        |:---|:------------------------------------------------------------------------------------------------|:---------------------------------------------------------|:---
        |

        | `Eq` | Checks if the values of two operands are equal. If they are,
        the condition is true. For `product_types` and `tags`, you can only
        specify one. For example, `filter=eq(product_types,child)`.            |
        `name`, `sku`, `slug`, `manufacturer_part_num`, `upc_ean`,
        `product_types`, `tags` | `filter=eq(name,some-name)` |

        | `In` | Checks if the values are included in the specified string. If
        they are, the condition is true. For `product_types` and `tags`, you can
        specify more than one. For example,
        `filter=in(product_types,child,bundle)`. | `id`, `name`, `sku`, `slug`,
        `manufacturer_part_num`, `upc_ean`, `product_types`, `tags`          |
        `filter=in(id,some-id)` |


        ### Building breadcrumbs in a storefront


        In a catalog, you can use a filter to return a list of nodes in a
        hierarchy structure that a product belongs to. You can use this to build
        breadcrumbs in your storefront. An example is shown below.


        `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`


        - Specify the node Ids in the filter expression.

        - You can have as many node Ids as you want.

        - It does not matter what order you specify the node Ids. The nodes are
        returned in the order they were last updated.


        ### Including Resources


        Using the `include` parameter, you can retrieve top-level resources,
        such as, files or main image, bundle component products and product
        attributes, such as SKU or slug.


        | Parameter | Required |
        Description                                                                                                                                                                                                   
        |

        | 
        :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

        | `component_products` | Optional | The  component product data and key
        attribute data, such as SKU or slug, to return for component products in
        a product bundle.  |

        | `main_image`         | Optional | The main images associated with a
        product. |

        | `files`              | Optional | Any files associated with a product.
        |


        See [**Including Resources**](/guides/Getting-Started/includes).
      parameters:
        - $ref: '#/components/parameters/accept-language'
        - $ref: '#/components/parameters/channel'
        - $ref: '#/components/parameters/tag'
        - $ref: '#/components/parameters/filter-product'
        - name: node_id
          in: path
          description: The catalog node ID.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The products of a catalog node.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product-list-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Shopper Catalog API
      security:
        - bearerAuth: []
  /catalog/products/{product_id}/configure:
    post:
      operationId: configureByContextProduct
      summary: Configure a Shopper Bundle
      description: >
        Once you have configured your product bundles, you can display them in
        your storefront in your published catalog. Depending on how you have
        configured the minimum and maximum values for the product options in
        your components, you can allow your shoppers to choose which products
        they want to select. For example, you can enable a shopper to select 1
        or more product options from a list of 10, giving your shoppers greater
        flexibility when selecting products in your store front.


        - Products must be in a `live` status.

        - If you have not specified any minimum or maximum values for the
        product options in your components, your shoppers can select any
        combination of product options.


        If you have configured minimum and maximum values using [Create a
        Bundle](/docs/api/pxm/products/create-product), this becomes part of the
        `bundle_configuration`. You can check how your bundle is configured
        using [Get a product in a catalog
        release](/docs/api/pxm/catalog/get-product) in `bundle_configuration`
        under `meta`. The `bundle_configuration` forms the body of the request.


        The response updates the `bundle_configuration` with the product options
        the shopper selects. The `meta` data is updated with the `meta` data of
        the selected product options. In your storefront, you could display this
        as a summary of the product options a shopper has selected.


        ### Including Resources


        Using the `include` parameter, you can retrieve top-level resources,
        such as, files or main image, bundle component products and product
        attributes, such as SKU or slug. 


        | Parameter | Required |
        Description                                                                                                                                                                                                   
        |

        | 
        :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

        | `component_products` | Optional | The  component product data and key
        attribute data, such as SKU or slug, to return for component products in
        a product bundle.  |

        | `main_image`         | Optional | The main images associated with a
        product. |

        | `files`              | Optional | Any files associated with a product.
        |


        See [**Including Resources**](/guides/Getting-Started/includes).
      parameters:
        - $ref: '#/components/parameters/accept-language'
        - $ref: '#/components/parameters/channel'
        - $ref: '#/components/parameters/tag'
        - name: product_id
          in: path
          description: The product ID.
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/bundle-configuration-data'
      responses:
        '200':
          description: The configured product of a catalog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Shopper Catalog API
      security:
        - bearerAuth: []
  /catalogs:
    post:
      operationId: createCatalog
      summary: Creates a new catalog
      description: >
        Before you create a catalog, you must define the following resources:


        - Hierarchies - hierarchies and nodes to categorize the products.

        - Products - product information, associated assets, and links to
        hierarchy nodes.

        - Price Books - prices for the products associated with the hierarchies.
        You can create multiple price books for different scenarios, such as
        seasonal sales, business versus retail customer pricing, and reward
        programs. When creating a catalog, you can specify up to five price
        books. You must configure a priority for your price books. Product
        prices are displayed in the catalog according to the priority of the
        price books. Priority is a number and the price book with the highest
        number has the highest priority.
      requestBody:
        description: Creates a catalog with the following attributes.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/catalog-create-data'
      responses:
        '201':
          description: The created catalog
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/catalog-data'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Catalogs
      security:
        - bearerAuth: []
    get:
      operationId: getCatalogs
      summary: Gets all authorized catalogs
      description: >
        Retrieves a list of all the catalogs that you are authorized to view.
        Currently, published catalogs are limited to the current release and two
        releases prior to the current release. You can see the differences
        between the last 2 consecutive catalog releases using the delta link
        returned in the response of a [publish a
        catalog](/docs/api/pxm/catalog/publish-release) endpoint.
         
        You can use the `is_full_delta` attribute returned from the `get a
        release of a catalog` endpoint to determine if you need to refresh the
        data in your company system before publishing a catalog release and
        injecting fresh data in a delta link. The `is_full_delta` attribute
        tells you if this is a full publish of a catalog release. Using a search
        service as an example, if the `is_full_delta` attribute is `true`, you
        should remove all data about that catalog from the search service before
        publishing a catalog release and injecting fresh data from the delta
        file. See [Publish a catalog](/docs/api/pxm/catalog/publish-release).


        If the `is_full_publish` attribute returned in the response is `false`,
        data from the previous catalog release overlaid the existing data in the
        delta file. The `is_full_publish` attribute is always `true` the first
        time a catalog is published.
      responses:
        '200':
          description: The list of catalogs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/catalog-list-data'
        default:
          description: An unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Catalogs
      security:
        - bearerAuth: []
  /catalogs/{catalog_id}:
    get:
      operationId: getCatalogByID
      summary: Get a catalog by ID
      description: Retrieves the specified catalog.
      parameters:
        - name: catalog_id
          in: path
          description: The catalog ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The catalog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/catalog-data'
        default:
          description: An unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Catalogs
      security:
        - bearerAuth: []
    put:
      operationId: updateCatalog
      summary: Updates a catalog
      description: >-
        Specify whichever attributes you want to change. The values of the other
        attributes remain the same. If the attributes section is empty, the
        catalog is not updated.
      parameters:
        - name: catalog_id
          in: path
          description: The catalog ID.
          required: true
          schema:
            type: string
      requestBody:
        description: Updated catalog.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/catalog-update-data'
      responses:
        '200':
          description: An updated catalog with the following attributes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/catalog-data'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Catalogs
      security:
        - bearerAuth: []
    delete:
      operationId: deleteCatalogByID
      summary: Deletes a catalog
      description: >-
        Deletes an unpublished catalog. Use [**Delete a
        Release**](/docs/api/pxm/catalog/delete-release-by-id) and [**Delete All
        Releases**](/docs/api/pxm/catalog/delete-releases) to delete releases of
        a catalog. If the catalog is associated with any catalog rules, you must
        first update the catalog rules to remove the catalog.
      parameters:
        - name: catalog_id
          in: path
          description: The catalog ID.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: A 204 response indicates that the catalog has been deleted.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Catalogs
      security:
        - bearerAuth: []
  /catalogs/{catalog_id}/releases:
    post:
      operationId: publishRelease
      summary: Publishes a catalog
      description: >
        Publishes a catalog. You must publish a catalog before you can retrieve
        that catalog in an organization or store. The hierarchies, live
        products, and prices associated with a published catalog are in
        read-only mode. If you make a change to these resources, for example, a
        change to your price book or hierarchies, you need to republish the
        catalog.
         
        You can get [a catalog release](/docs/api/pxm/catalog/get-release-by-id)
        to retrieve a published catalog. Currently, published catalogs are
        limited to the current release and two releases prior to the current
        release.
         
        You can see the differences between the last 2 consecutive catalog
        releases. This is useful if want to understand how your products have
        changed in your catalog, ensuring your site search integration is kept
        up-to-date.
         
        Once a catalog release has completed publishing, the delta relationship
        links to the delta document.


        The `delta` links are signed and only valid for 1 hour. Re-reading a
        catalog release, for example, using [Getting a release of a
        catalog](/docs/pxm/catalogs/catalog-latest-release/get-a-release-of-a-catalog)
        returns a fresh a link.
         
        You can use the `is_full_delta` attribute returned from the `get a
        release of a catalog` endpoint to determine if you need to refresh the
        data in your company system before injecting fresh data in a `delta`
        link. The `is_full_delta` attribute tells you if this is a full publish
        of the catalog. Using a search service as an example, if the
        `is_full_delta` attribute is `true`, you should remove all data about
        that catalog from the search service before injecting fresh data from
        the `delta` file. If the `is_full_delta` attribute is `false`, then data
        from the previous catalog overlays the existing data in the `delta`
        file. To publish a catalog and inject fresh data in a `delta` link, set
        `export_full_delta` to `true`.
         
        If a previous catalog publish date is greater than 90 days, then a full
        catalog publish is automatically performed. If you publish your catalogs
        infrequently, Commerce may perform a full publish when you are expecting
        a delta publish.
         
        :::caution


        Generating a full delta is resource intensive and slows down the
        publishing process and so should only be performed in certain
        circumstances, for example, when initializing an integration with a
        service like Algolia.
         
        :::
         
        The `is_full_delta` attribute is always `true` the first time a catalog
        is published. The information is stored in a collection of `json`
        documents in a compressed file. You can either manually check the file
        or, for example, use them to automatically update another company system
        you may have.
         
        - Delta files are only available for 30 days.

        - Delta files are removed when a catalog release is deleted.
         
        Each document has a `delta_type` with one of the following values,
        depending on whether a product has been deleted, updated or created in a
        catalog release.
         
        - `delete` describes products deleted from this release of a catalog.

        - `createupdate` describes products updated in this release of a
        catalog.
         
        ### Multi-Store Management Solutions
         
        In a multi-store management solution.
         
        - You can create organization catalogs. Your organization catalogs are
        available for your stores to use.

        - Your stores can create their own catalogs.

        - Your stores can create catalogs that have a combination of
        organization products and store products.
         
        If you are publishing a catalog in a store that contains resources from
        an organization, in Commerce Manager, you must enable the **Include
        Organization Resources in Catalog Publishes** checkbox.
         
        1. Go to **SYSTEM** > **Store Settings**.

        2. Click **General Settings**.

        3. Select **PXM** from the list.

        4. Select the **Include Organization Resources in Catalog Publishes**
        checkbox.
      parameters:
        - name: catalog_id
          in: path
          description: The catalog ID.
          required: true
          schema:
            type: string
      requestBody:
        description: Options for catalog release publishing
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/catalog-release-create-data'
      responses:
        '201':
          description: Publishes a catalog release with the following attributes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/release-data'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Releases
      security:
        - bearerAuth: []
    get:
      operationId: getReleases
      summary: Gets all authorized catalog releases
      description: >
        Returns a list of all published releases of the specified catalog.
        Currently, published catalogs are limited to the current release and two
        releases prior to the current release. You can see the differences
        between the last 2 consecutive catalog releases using the `delta` link
        returned in the response of a `publish a catalog` endpoint.


        You can use the `is_full_delta` attribute returned from the `get a
        release of a catalog` endpoint to determine if you need to refresh the
        data in your company system before publishing a catalog release and
        injecting fresh data in a delta link. The `is_full_delta` attribute
        tells you if this is a full publish of a catalog release. Using a search
        service as an example, if the `is_full_delta` attribute is `true`, you
        should remove all data about that catalog from the search service before
        publishing a catalog release and injecting fresh data from the delta
        file. 


        If the `is_full_publish` attribute returned in the response is `false`,
        data from the previous catalog release overlaid the existing data in the
        delta file. The `is_full_publish` attribute is always `true` the first
        time a catalog is published.
      parameters:
        - $ref: '#/components/parameters/accept-language'
        - name: catalog_id
          in: path
          description: The catalog ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The list of catalogs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/release-list-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Releases
      security:
        - bearerAuth: []
    delete:
      operationId: deleteReleases
      summary: Deletes all releases
      description: Deletes all releases of the specified published catalog.
      parameters:
        - name: catalog_id
          in: path
          description: The catalog ID.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: A 204 response indicates that the releases have been deleted.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Releases
      security:
        - bearerAuth: []
  /catalogs/{catalog_id}/releases/{release_id}:
    get:
      operationId: getReleaseByID
      summary: Get a catalog release by ID
      description: Retrieves the specified catalog release.
      parameters:
        - $ref: '#/components/parameters/accept-language'
        - name: catalog_id
          in: path
          description: The catalog ID.
          required: true
          schema:
            type: string
        - name: release_id
          in: path
          description: The catalog release ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The catalog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/release-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Releases
      security:
        - bearerAuth: []
    delete:
      operationId: deleteReleaseByID
      summary: Deletes a release
      description: Deletes the specified published catalog release.
      parameters:
        - name: catalog_id
          in: path
          description: The catalog ID.
          required: true
          schema:
            type: string
        - name: release_id
          in: path
          description: The catalog release ID.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: A 204 response indicates that the release has been deleted.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Releases
      security:
        - bearerAuth: []
  /catalogs/rules:
    post:
      operationId: createRule
      summary: Creates a new catalog rule
      description: >
        If you have multiple catalogs, create catalog rule resources. With
        catalog rules, you can display different catalogs to different shoppers.
        For example, you can display a preferred pricing catalog to a few
        special customers. Or you can display one catalog to shoppers using your
        website and a different catalog to shoppers using your mobile app.
        Finally, you can define custom criteria by creating tags.


        :::note


        - If you have one catalog for all customers and channels, you can omit
        creating this resource.

        - Due to the way catalogs are cached in Commerce, using catalog rules to
        display catalogs sometimes causes a 5-minute time delay before the
        catalogs are displayed.

        - You cannot create catalog rules for organization catalogs.


        :::


        For ideas about the kinds of business scenarios you can achieve with
        catalog rules, see [Catalog Rules](/docs/api/pxm/catalog/rules). To
        understand how catalogs are matched to shoppers by using rules, see
        [Resolving Catalog
        Rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).
      requestBody:
        description: Creates a catalog rule with the following attributes.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rule-create-data'
      responses:
        '201':
          description: The created catalog rule
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rule-data'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Rules
      security:
        - bearerAuth: []
    get:
      operationId: getRules
      summary: Gets all authorized catalog rules
      description: >
        Retrieves all authorized catalog rules.


        ### Filtering


        This endpoint supports filtering. For general filtering syntax, see
        [Filtering](/guides/Getting-Started/filtering). The following operators
        and attributes are supported.


        | Operator | Description | Supported Attributes | Example |

        |:--- |:--- |:--- |:--- |

        | `In` | Checks if the values are included in the specified string. If
        they are, the condition is true. | `id` | `filter=in(id,some-id)` | 
      parameters:
        - $ref: '#/components/parameters/filter-rule'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The list of catalog rules.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rule-list-data'
        default:
          description: An unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Rules
      security:
        - bearerAuth: []
  /catalogs/rules/{catalog_rule_id}:
    get:
      operationId: getRuleByID
      summary: Get a catalog rule by ID
      parameters:
        - name: catalog_rule_id
          in: path
          description: The catalog rule ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The catalog rile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rule-data'
        default:
          description: An unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Rules
      security:
        - bearerAuth: []
    put:
      operationId: updateRule
      summary: Updates a catalog rule
      description: >-
        Specify whichever attributes you want to change. The values of the other
        attributes remain the same. If the attributes section is empty, the
        catalog rule is not updated.
      parameters:
        - name: catalog_rule_id
          in: path
          description: The catalog rule ID.
          required: true
          schema:
            type: string
      requestBody:
        description: An updated catalog rule with the following attributes.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rule-update-data'
      responses:
        '200':
          description: An Updated catalog rule with the following attributes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rule-data'
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Rules
      security:
        - bearerAuth: []
    delete:
      operationId: deleteRuleByID
      summary: Deletes a catalog rule
      parameters:
        - name: catalog_rule_id
          in: path
          description: The catalog rule ID.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: A 204 response indicates that the catalog rule has been deleted.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Rules
      security:
        - bearerAuth: []
  /catalogs/{catalog_id}/releases/{release_id}/hierarchies:
    get:
      operationId: getAllHierarchies
      summary: Get all Hierarchies
      description: >
        Returns the hierarchies from a published catalog.
         
        :::note
         
        Currently, published catalogs are limited to the current release and two
        releases prior to the current release.
         
        :::
         
        ### Filtering
         
        This endpoint supports filtering. For general syntax, see
        [Filtering](/guides/Getting-Started/filtering).


        | Operator | Description | Supported Attributes | Example |

        |:--- |:--- |:--- |:--- |

        | `Eq` | Checks if the values of two operands are equal. If they are,
        the condition is true. | `name`, `slug`| `filter=eq(name,some-name)` |

        | `In` | Checks if the values are included in the specified string. If
        they are, the condition is true. | `id` | `filter=in(id,some-id)` | 
         
        ### Building breadcrumbs in a storefront


        In a catalog, you can use a filter to return a list of nodes in a
        hierarchy structure that a product belongs to. You can use this to build
        breadcrumbs in your storefront. An example is shown below.


        `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`


        - Specify the node Ids in the filter expression.

        - You can have as many node Ids as you want.

        - It does not matter what order you specify the node Ids. The nodes are
        returned in the order they were last updated.
      parameters:
        - $ref: '#/components/parameters/accept-language'
        - name: catalog_id
          in: path
          description: The catalog ID.
          required: true
          schema:
            type: string
        - name: release_id
          in: path
          description: >-
            The unique identifier of a published release of the catalog or
            `latest` for the most recently published version.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/filter-hierarchy'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The hierarchies of a catalog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hierarchy-list-data'
        default:
          description: An unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Administrator Latest Releases Catalog API
      security:
        - bearerAuth: []
  /catalogs/{catalog_id}/releases/{release_id}/hierarchies/{hierarchy_id}:
    get:
      operationId: getHierarchy
      summary: Get a Hierarchy
      description: >
        Returns the specified hierarchy from a published catalog.


        :::note


        Currently, published catalogs are limited to the current release and two
        releases prior to the current release.


        :::
      parameters:
        - $ref: '#/components/parameters/accept-language'
        - name: catalog_id
          in: path
          description: The catalog ID.
          required: true
          schema:
            type: string
        - name: release_id
          in: path
          description: >-
            The unique identifier of a published release of the catalog or
            `latest` for the most recently published version.
          required: true
          schema:
            type: string
        - name: hierarchy_id
          in: path
          description: The catalog hierarchy ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The catalog hierarchy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hierarchy-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Administrator Latest Releases Catalog API
      security:
        - bearerAuth: []
  /catalogs/{catalog_id}/releases/{release_id}/hierarchies/{hierarchy_id}/nodes:
    get:
      operationId: getHierarchyNodes
      summary: Get a Hierarchy's Nodes
      description: >
        Returns all nodes for the specified hierarchy from a published catalog.


        :::note


        Currently, published catalogs are limited to the current release and two
        releases prior to the current release.


        :::


        In the `bread_crumb` metadata, you can identify the parent nodes that a
        node is associated with. This is useful if you want to improve how your
        shoppers search your store, for example. See [Product and Node
        Associations in Breadcrumb
        Metadata](/guides/How-To/Catalogs/breadcrumbs).


        ### Filtering


        This endpoint supports filtering. For general syntax, see
        [Filtering](/guides/Getting-Started/filtering).


        | Operator | Description | Supported Attributes | Example |

        |:--- |:--- |:--- |:--- |

        | `Eq` | Checks if the values of two operands are equal. If they are,
        the condition is true. | `name`, `slug`| `filter=eq(name,some-name)` |

        | `In` | Checks if the values are included in the specified string. If
        they are, the condition is true. | `id` | `filter=in(id,some-id)` | 


        ### Building breadcrumbs in a storefront


        In a catalog, you can use a filter to return a list of nodes in a
        hierarchy structure that a product belongs to. You can use this to build
        breadcrumbs in your storefront. An example is shown below.


        `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`


        - Specify the node Ids in the filter expression.

        - You can have as many node Ids as you want.

        - It does not matter what order you specify the node Ids. The nodes are
        returned in the order they were last updated.
      parameters:
        - name: catalog_id
          in: path
          description: The catalog ID.
          required: true
          schema:
            type: string
        - name: release_id
          in: path
          description: The catalog release ID.
          required: true
          schema:
            type: string
        - name: hierarchy_id
          in: path
          description: The catalog hierarchy ID.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/accept-language'
        - $ref: '#/components/parameters/filter-node'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The child nodes of a catalog hierarchy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/node-list-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Administrator Latest Releases Catalog API
      security:
        - bearerAuth: []
  /catalogs/{catalog_id}/releases/{release_id}/hierarchies/{hierarchy_id}/children:
    get:
      operationId: getHierarchyChildNodes
      summary: Get a Hierarchy's Children
      description: >
        Returns the parent nodes for the specified hierarchy from a published
        catalog.


        ![Parent Nodes](/assets/rootnodes.PNG)


        :::note


        Currently, published catalogs are limited to the current release and two
        releases prior to the current release.


        :::


        In the `bread_crumb` metadata, you can identify the parent nodes that a
        node is associated with. This is useful if you want to improve how your
        shoppers search your store, for example. See [Product and Node
        Associations in Breadcrumb
        Metadata](/guides/How-To/Catalogs/breadcrumbs).


        ### Filtering


        This endpoint supports filtering. For general syntax, see
        [Filtering](/guides/Getting-Started/filtering).


        | Operator | Description | Supported Attributes | Example |

        |:--- |:--- |:--- |:--- |

        | `Eq` | Checks if the values of two operands are equal. If they are,
        the condition is true. | `name`, `slug`| `filter=eq(name,some-name)` |

        | `In` | Checks if the values are included in the specified string. If
        they are, the condition is true. | `id` | `filter=in(id,some-id)` | 


        ### Building breadcrumbs in a storefront


        In a catalog, you can use a filter to return a list of nodes in a
        hierarchy structure that a product belongs to. You can use this to build
        breadcrumbs in your storefront. An example is shown below.


        `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`


        - Specify the node Ids in the filter expression.

        - You can have as many node Ids as you want.

        - It does not matter what order you specify the node Ids. The nodes are
        returned in the order they were last updated.
      parameters:
        - name: catalog_id
          in: path
          description: The catalog ID.
          required: true
          schema:
            type: string
        - name: release_id
          in: path
          description: >-
            The unique identifier of a published release of the catalog or
            `latest` for the most recently published version.
          required: true
          schema:
            type: string
        - name: hierarchy_id
          in: path
          description: The catalog hierarchy ID.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/accept-language'
        - $ref: '#/components/parameters/filter-node'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The child nodes of a catalog hierarchy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/node-list-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Administrator Latest Releases Catalog API
      security:
        - bearerAuth: []
  /catalogs/{catalog_id}/releases/{release_id}/nodes:
    get:
      operationId: getAllNodes
      summary: Get all Nodes
      description: >
        Returns the child nodes from a published catalog.
         
        :::note
         
        Currently, published catalogs are limited to the current release and two
        releases prior to the current release.
         
        :::
         
        You can see the parent nodes a node is associated with in the
        `bread_crumb` metadata for each node. This is useful if you want to
        improve how your shoppers search your store, for example. See [Product
        and Node Associations in Breadcrumb
        Metadata](/guides/How-To/Catalogs/breadcrumbs).


        In a catalog, you can use a filter to return a list of nodes in a
        hierarchy structure that a product belongs to. You can use this to build
        breadcrumbs in your storefront. See [Building breadcrumbs in a
        storefront](#building-breadcrumbs-in-a-storefront).


        The response lists the products associated with the nodes. If products
        are [curated](/guides/How-To/Products/curating-products), they are
        displayed in `curated_products`. Product curation allows you to promote
        specific products within each of your hierarchies, enabling you to
        create unique product collections in your storefront.


        - If you don't provide any `curated_products`, products are listed by
        their `updated_at` time in descending order, with the most recently
        updated product first.

        - If you configure `curated_products` for only a few products, the
        curated products are displayed first and the other products are
        displayed in the order of `updated_at` time.

        - You can only curate 20 products or less. You cannot have more than 20
        curated products.

        - If a curated product is removed from a node, the product is also
        removed from the `curated_products` list.

        - A product that is curated has the `"curated_product": true` attribute
        displayed.
         
        ### Filtering
         
        This endpoint supports filtering. For general syntax, see
        [Filtering](/guides/Getting-Started/filtering). The following operators
        and attributes are available.


        | Operator  | Description | Attributes | Example |

        | --- | --- | --- | --- |

        | `Eq` | Checks if the values of two operands are equal. If they are,
        the condition is true. | `name`, `slug` | `filter=eq(name,some-name)` |

        | `in`      | Checks if the values are included in the specified string.
        If they are, the condition is true.

        | `Id` | 
        `filter=in(id,9214719b-17fe-4ea7-896c-d61e60fc0d05,e104d541-2c52-47fa-8a9a-c4382480d97c,65daaf68-ff2e-4632-8944-370de835967d)`
        |
         
        ### Building breadcrumbs in a storefront


        In a catalog, you can use a filter to return a list of nodes in a
        hierarchy structure that a product belongs to. You can use this to build
        breadcrumbs in your storefront. An example is shown below.


        `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`


        - Specify the node Ids in the filter expression.

        - You can have as many node Ids as you want.

        - It does not matter what order you specify the node Ids. The nodes are
        returned in the order they were last updated.
      parameters:
        - name: catalog_id
          in: path
          description: The catalog ID.
          required: true
          schema:
            type: string
        - name: release_id
          in: path
          description: >-
            The unique identifier of a published release of the catalog or
            `latest` for the most recently published version.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/accept-language'
        - $ref: '#/components/parameters/filter-node'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The nodes of a catalog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/node-list-data'
        default:
          description: An unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Administrator Latest Releases Catalog API
      security:
        - bearerAuth: []
  /catalogs/{catalog_id}/releases/{release_id}/nodes/{node_id}:
    get:
      operationId: getNode
      summary: Get a Node
      description: >
        Returns a node from a published catalog.
         
        :::note
         
        Currently, published catalogs are limited to the current release and two
        releases prior to the current release.
         
        :::
         
        You can see the parent nodes a node is associated with in the
        `bread_crumb` metadata for each node. This is useful if you want to
        improve how your shoppers search your store, for example. See [Product
        and Node Associations in Breadcrumb
        Metadata](/guides/How-To/Catalogs/breadcrumbs).
         
        The response lists the products associated with the nodes. If products
        are [curated](/guides/How-To/Products/curating-products), they are
        displayed in `curated_products`. Product curation allows you to promote
        specific products within each of your hierarchies, enabling you to
        create unique product collections in your storefront.
         
        - If you don't provide any `curated_products`, products are listed by
        their `updated_at` time in descending order, with the most recently
        updated product first.

        - If you configure `curated_products` for only a few products, the
        curated products are displayed first and the other products are
        displayed in the order of `updated_at` time.

        - You can only curate 20 products or less. You cannot have more than 20
        curated products.

        - If a curated product is removed from a node, the product is also
        removed from the `curated_products` list.

        - A product that is curated has the `"curated_product": true` attribute
        displayed.
      parameters:
        - $ref: '#/components/parameters/accept-language'
        - name: catalog_id
          in: path
          description: The catalog ID.
          required: true
          schema:
            type: string
        - name: release_id
          in: path
          description: >-
            The unique identifier of a published release of the catalog or
            `latest` for the most recently published version.
          required: true
          schema:
            type: string
        - name: node_id
          in: path
          description: The catalog node ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The catalog node.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/node-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Administrator Latest Releases Catalog API
      security:
        - bearerAuth: []
  /catalogs/{catalog_id}/releases/{release_id}/nodes/{node_id}/relationships/children:
    get:
      operationId: getChildNodes
      summary: Get a Node's Children
      description: >
        Returns the child nodes for a node from a published catalog.


        :::note


        Currently, published catalogs are limited to the current release and two
        releases prior to the current release.


        :::


        You can see the parent nodes a node is associated with in the
        `bread_crumb` metadata for each node. This is useful if you want to
        improve how your shoppers search your store, for example. See [Product
        and Node Associations in Breadcrumb
        Metadata](/guides/How-To/Catalogs/breadcrumbs).


        In a catalog, you can use a filter to return a list of nodes in a
        hierarchy structure that a product belongs to. You can use this to build
        breadcrumbs in your storefront. For more information, see [Building
        breadcrumbs in a storefront](#building-breadcrumbs-in-a-storefront).


        The response lists the products associated with the nodes. If products
        are [curated](/guides/How-To/Products/curating-products), they are
        displayed in `curated_products`. Product curation allows you to promote
        specific products within each of your hierarchies, enabling you to
        create unique product collections in your storefront.


        - If you don't provide any `curated_products`, products are listed by
        their `updated_at` time in descending order, with the most recently
        updated product first.

        - If you configure `curated_products` for only a few products, the
        curated products are displayed first and the other products are
        displayed in the order of `updated_at` time.

        - You can only curate 20 products or less. You cannot have more than 20
        curated products.

        - If a curated product is removed from a node, the product is also
        removed from the `curated_products` list.

        - A product that is curated has the `"curated_product": true` attribute
        displayed.


        ### Filtering


        This endpoint supports filtering. For general syntax, see
        [Filtering](/guides/Getting-Started/filtering). The following operators
        and attributes are available.


        | Operator  | Description | Attributes | Example |

        | --- | --- | --- | --- |

        | `Eq` | Checks if the values of two operands are equal. If they are,
        the condition is true. | `name`, `slug` | `filter=eq(name,some-name)` |

        | `in`      | Checks if the values are included in the specified string.
        If they are, the condition is true.

        | `Id` | 
        `filter=in(id,9214719b-17fe-4ea7-896c-d61e60fc0d05,e104d541-2c52-47fa-8a9a-c4382480d97c,65daaf68-ff2e-4632-8944-370de835967d)`
        |


        ### Building breadcrumbs in a storefront


        In a catalog, you can use a filter to return a list of nodes in a
        hierarchy structure that a product belongs to. You can use this to build
        breadcrumbs in your storefront. An example is shown below.


        `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`


        - Specify the node Ids in the filter expression.

        - You can have as many node Ids as you want.

        - It does not matter what order you specify the node Ids. The nodes are
        returned in the order they were last updated.
      parameters:
        - name: catalog_id
          in: path
          description: The catalog ID.
          required: true
          schema:
            type: string
        - name: release_id
          in: path
          description: >-
            The unique identifier of a published release of the catalog or
            `latest` for the most recently published version.
          required: true
          schema:
            type: string
        - name: node_id
          in: path
          description: The catalog node ID.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/accept-language'
        - $ref: '#/components/parameters/filter-node'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The child nodes of a catalog node.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/node-list-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Administrator Latest Releases Catalog API
      security:
        - bearerAuth: []
  /catalogs/{catalog_id}/releases/{release_id}/products:
    get:
      operationId: getAllProducts
      summary: Get all Products
      description: >
        Returns the products from a published catalog. Only the products in a
        `live` status are retrieved. Currently, published catalogs are limited
        to the current release and two releases prior to the current release.


        You can see the parent nodes a product is associated with in the
        `bread_crumbs` and `bread_crumb_nodes` metadata for each product. This
        is useful if you want to improve how your shoppers search your store,
        for example. See [Product and Node Associations in Breadcrumb
        Metadata](/guides/How-To/Catalogs/breadcrumbs).


        The `variations` object lists the variation IDs and variation option IDs
        and their corresponding product IDs that are generated when the
        variation and variation options are built with a product. The
        `variations` object can then be added to your catalogs. By default,
        variations and variation options are sorted randomly. You can use the
        `sort_order` attribute to sort the order of your variation and variation
        options in `variations`. Once a parent product is published in a
        catalog, the [Get a List of products in a catalog
        release](/docs/api/pxm/catalog/get-all-products) response displays the
        sorted variations and variation options. Variations and variation
        options are displayed in descending order according to their
        `sort_order` values.
         
        ### Including Resources


        Using the `include` parameter, you can retrieve top-level resources,
        such as, files or main image, bundle component products and product
        attributes, such as SKU or slug. 


        | Parameter           | Required |
        Description                                                                                                                                                                                                          
        |

        | 
        :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

        | `component_products` | Optional | The  component product data and key
        attribute data, such as SKU or slug, to return for component products in
        a product bundle.  |

        | `main_image`         | Optional | The main images associated with a
        product.                                                                                                          
        |

        | `files`              | Optional | Any files associated with a
        product. 


        See [**Including Resources**](/guides/Getting-Started/includes).
         
        ### Filtering
         
        This endpoint supports filtering. For general filtering syntax, see
        [Filtering](/guides/Getting-Started/filtering). The following operators
        and attributes are available when filtering on this endpoint.
         
        | Operator |
        Description                                                                                    
        | Supported Attributes                                     | Example |

        |:---|:------------------------------------------------------------------------------------------------|:---------------------------------------------------------|:---
        |

        | `Eq` | Checks if the values of two operands are equal. If they are,
        the condition is true. For `product_types`, you can only specify one
        product type. For example, `filter=eq(product_types,child)`.           
        | `name`, `sku`, `slug`, `manufacturer_part_num`, `upc_ean`,
        `product_types`, `tags` | `filter=eq(name,some-name)` |

        | `In` | Checks if the values are included in the specified string. If
        they are, the condition is true. For `product_types`, you can specify
        more than one product type. For example,
        `filter=in(product_types,child,bundle)`. | `id`, `name`, `sku`, `slug`,
        `manufacturer_part_num`, `upc_ean`, `product_types`, `tags`          |
        `filter=in(id,some-id)` |
         
        ### Building breadcrumbs in a storefront


        In a catalog, you can use a filter to return a list of nodes in a
        hierarchy structure that a product belongs to. You can use this to build
        breadcrumbs in your storefront. An example is shown below.


        `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`


        - Specify the node Ids in the filter expression.

        - You can have as many node Ids as you want.

        - It does not matter what order you specify the node Ids. The nodes are
        returned in the order they were last updated.
      parameters:
        - $ref: '#/components/parameters/accept-language'
        - $ref: '#/components/parameters/filter-product'
        - name: catalog_id
          in: path
          description: The catalog ID.
          required: true
          schema:
            type: string
        - name: release_id
          in: path
          description: >-
            The unique identifier of a published release of the catalog or
            `latest` for the most recently published version.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The products of a catalog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product-list-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Administrator Latest Releases Catalog API
      security:
        - bearerAuth: []
  /catalogs/{catalog_id}/releases/{release_id}/products/{product_id}:
    get:
      operationId: getProduct
      summary: Get a Product
      description: >
        Returns a product from a published catalog. The product must be in
        `live` status. Currently, published catalogs are limited to the current
        release and two releases prior to the current release.


        ### Product and Node Associations in Breadcrumb Metadata


        You can see the parent nodes a product is associated with in the
        `bread_crumbs` and `bread_crumb_nodes` metadata for each product. This
        is useful if you want to improve how your shoppers search your store,
        for example. See [Product and Node Associations in Breadcrumb
        Metadata](/guides/How-To/Catalogs/breadcrumbs).


        ### Product Variations


        The `variations` object lists the variation IDs and variation option IDs
        and their corresponding product IDs that are generated when the
        variation and variation options are built with a product. The
        `variations` object can then be added to your catalogs. By default,
        variations and variation options are sorted randomly. You can use the
        `sort_order`attribute to sort the order of your variation and variation
        options in `variations`. Once a parent product is published in a
        catalog, the get a product in a catalog release response displays the
        sorted variations and variation options. Variations and variation
        options are displayed in descending order according to their
        `sort_order` values.


        ### Including Resources


        Using the `include` parameter, you can retrieve top-level resources,
        such as, files or main image, bundle component products and product
        attributes, such as SKU or slug. 


        | Parameter          | Required |
        Description                                                                                                                                                                                                          
        |

        | 
        :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

        | `component_products` | Optional | The  component product data and key
        attribute data, such as SKU or slug, to return for component products in
        a product bundle.  |

        | `main_image`         | Optional | The main images associated with a
        product.                                                                                                          
        |

        | `files`              | Optional | Any files associated with a
        product. 


        See [**Including Resources**](/guides/Getting-Started/includes).
      parameters:
        - $ref: '#/components/parameters/accept-language'
        - name: catalog_id
          in: path
          description: The catalog ID.
          required: true
          schema:
            type: string
        - name: release_id
          in: path
          description: >-
            The unique identifier of a published release of the catalog or
            `latest` for the most recently published version.
          required: true
          schema:
            type: string
        - name: product_id
          in: path
          description: The product ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The product of a catalog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Administrator Latest Releases Catalog API
      security:
        - bearerAuth: []
  /catalogs/{catalog_id}/releases/{release_id}/products/{product_id}/relationships/component_products:
    get:
      operationId: getComponentProductIDs
      summary: Get a Bundle's Component Products
      description: >
        With Product Experience Manager, you can
        [create](/docs/api/pxm/products/create-product) and manage bundles. A
        bundle is a purchasable product, comprising of one or more products that
        you want to sell together. 


        You can create multiple components within a bundle. Each component must
        have at least one or more options. Each option is a product and a
        quantity.


        This endpoint returns a list of component product IDs for the specified
        bundle.


        ### Including Resources


        Using the `include` parameter, you can retrieve top-level resources,
        such as, files or main image, bundle component products and product
        attributes, such as SKU or slug. 


        | Parameter | Required |
        Description                                                                                                                                                                                                   
        |

        | 
        :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

        | `component_products` | Optional | The  component product data and key
        attribute data, such as SKU or slug, to return for component products in
        a product bundle.  |

        | `main_image`         | Optional | The main images associated with a
        product. |

        | `files`              | Optional | Any files associated with a product.
        |


        See [**Including Resources**](/guides/Getting-Started/includes).
      parameters:
        - name: catalog_id
          in: path
          description: The catalog ID.
          required: true
          schema:
            type: string
        - name: release_id
          in: path
          description: >-
            The unique identifier of a published release of the catalog or
            `latest` for the most recently published version.
          required: true
          schema:
            type: string
        - name: product_id
          in: path
          description: The product ID.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: >-
            The list of component product IDs of a specific bundle product from
            a catalog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product-reference-list-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Administrator Latest Releases Catalog API
      security:
        - bearerAuth: []
  /catalogs/{catalog_id}/releases/{release_id}/products/{product_id}/relationships/children:
    get:
      operationId: getChildProducts
      summary: Get a Parent Product's Child Products
      description: >
        For a specified product and catalog release, retrieves a list of child
        products from a parent product. Any product other than a base product
        results in a `422 Unprocessable Entity` response. Only the products in a
        `live` status are retrieved.
         
        If you have multiple catalog rules defined, the rule that best matches
        the shoppers context is used to determine which catalog is retrieved. If
        no catalog rules are configured, the first catalog found is returned.
        For information about how rules are matched, see [Resolving Catalog
        Rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).
         
        You can see the parent nodes a product is associated within the
        breadcrumbs metadata for each product. For example, this is useful if
        you want to improve how your shoppers search your store. See [Product
        and Node Associations in Breadcrumb
        Metadata](/guides/How-To/Catalogs/breadcrumbs).
         
        ### Filtering
         
        This endpoint supports filtering. For general filtering syntax, see
        [Filtering](/guides/Getting-Started/filtering). The following operators
        and attributes are available when filtering on this endpoint.
         
        | Operator |
        Description                                                                                    
        | Supported Attributes                                     | Example |

        |:---|:------------------------------------------------------------------------------------------------|:---------------------------------------------------------|:---
        |

        | `Eq` | Checks if the values of two operands are equal. If they are,
        the condition is true. For `product_types`, you can only specify one
        product type. For example, `filter=eq(product_types,child)`.           
        | `name`, `sku`, `slug`, `manufacturer_part_num`, `upc_ean`,
        `product_types`, `tags` | `filter=eq(name,some-name)` |

        | `In` | Checks if the values are included in the specified string. If
        they are, the condition is true. For `product_types`, you can specify
        more than one product type. For example,
        `filter=in(product_types,child,bundle)`. | `id`, `name`, `sku`, `slug`,
        `manufacturer_part_num`, `upc_ean`, `product_types`, `tags`          |
        `filter=in(id,some-id)` |
         
        ### Building breadcrumbs in a storefront
         
        In a catalog, you can use a filter to return a list of nodes in a
        hierarchy structure that a product belongs to. You can use this to build
        breadcrumbs in your storefront. An example is shown below.
         
        `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`
         
        - Specify the node Ids in the filter expression.

        - You can have as many node Ids as you want.

        - It does not matter what order you specify the node Ids. The nodes are
        returned in the order they were last updated.
         
        ### Including Resources
         
        Using the `include` parameter, you can retrieve top-level resources,
        such as, files or main image, bundle component products and product
        attributes, such as SKU or slug. 
         
        | Parameter | Required |
        Description                                                                                                                                                                                                   
        |

        | 
        :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

        | `component_products` | Optional | The  component product data and key
        attribute data, such as SKU or slug, to return for component products in
        a product bundle.  |

        | `main_image`         | Optional | The main images associated with a
        product. |

        | `files`              | Optional | Any files associated with a product.
        |
         
        See [**Including Resources**](/guides/Getting-Started/includes).
      parameters:
        - name: catalog_id
          in: path
          description: The catalog ID.
          required: true
          schema:
            type: string
        - name: release_id
          in: path
          description: >-
            The unique identifier of a published release of the catalog or
            `latest` for the most recently published version.
          required: true
          schema:
            type: string
        - name: product_id
          in: path
          description: The product ID.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/accept-language'
        - $ref: '#/components/parameters/filter-product'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: >-
            The list of child products of a specific base product from a
            catalog.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product-list-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Administrator Latest Releases Catalog API
      security:
        - bearerAuth: []
  /catalogs/{catalog_id}/releases/{release_id}/hierarchies/{hierarchy_id}/products:
    get:
      operationId: getProductsForHierarchy
      summary: Get a Hierarchy's Products
      description: >
        Returns the products associated with the specified hierarchy in the
        catalog. The products must be in the `live` status.


        If you have multiple catalog rules defined, the rule that best matches
        the shoppers context is used to determine which catalog is retrieved.
        See [Resolving catalog
        rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).


        You can see the parent nodes a product is associated with in the
        `bread_crumbs` and `bread_crumb_nodes` metadata for each product. This
        is useful if you want to improve how your shoppers search your store,
        for example. See [Product and Node Associations in Breadcrumb
        Metadata](/guides/How-To/Catalogs/breadcrumbs).


        The `variations` object lists the variation IDs and variation option IDs
        and their corresponding product IDs that are generated when the
        variation and variation options are built with a product. The variations
        object can then be added to your catalogs. By default, variations and
        variation options are sorted randomly. You can use the `sort_order`
        attribute to sort the order of your variation and variation options in
        variations. Once a parent product is published in a catalog, the [Get a
        List of products in a catalog](/docs/api/pxm/catalog/get-all-products)
        release response displays the sorted variations and variation options.
        Variations and variation options are displayed in descending order
        according to their `sort_order` values.


        ### Filtering


        This endpoint supports filtering. For general filtering syntax, see
        [Filtering](/guides/Getting-Started/filtering). The following operators
        and attributes are available when filtering on this endpoint.


        | Operator |
        Description                                                                                    
        | Supported Attributes                                     | Example |

        |:---|:------------------------------------------------------------------------------------------------|:---------------------------------------------------------|:---
        |

        | `Eq` | Checks if the values of two operands are equal. If they are,
        the condition is true. For `product_types`, you can only specify one
        product type. For example, `filter=eq(product_types,child)`.          |
        `name`, `sku`, `slug`, `manufacturer_part_num`, `upc_ean`,
        `product_types`, `tags` | `filter=eq(name,some-name)` |

        | `In` | Checks if the values are included in the specified string. If
        they are, the condition is true. For `product_types`, you can specify
        more than one product type. For example,
        `filter=in(product_types,child,bundle)`. | `id`, `name`, `sku`, `slug`,
        `manufacturer_part_num`, `upc_ean`, `product_types`, `tags`          |
        `filter=in(id,some-id)` |


        ### Building breadcrumbs in a storefront


        In a catalog, you can use a filter to return a list of nodes in a
        hierarchy structure that a product belongs to. You can use this to build
        breadcrumbs in your storefront. An example is shown below.


        `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`


        - Specify the node Ids in the filter expression.

        - You can have as many node Ids as you want.

        - It does not matter what order you specify the node Ids. The nodes are
        returned in the order they were last updated.


        ### Including Resources


        Using the `include` parameter, you can retrieve top-level resources,
        such as, files or main image, bundle component products and product
        attributes, such as SKU or slug. 


        | Parameter | Required |
        Description                                                                                                                                                                                                   
        |

        | 
        :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

        | `component_products` | Optional | The  component product data and key
        attribute data, such as SKU or slug, to return for component products in
        a product bundle.  |

        | `main_image`         | Optional | The main images associated with a
        product. |

        | `files`              | Optional | Any files associated with a product.
        |


        See [**Including Resources**](/guides/Getting-Started/includes).
      parameters:
        - $ref: '#/components/parameters/accept-language'
        - name: catalog_id
          in: path
          description: The catalog ID.
          required: true
          schema:
            type: string
        - name: release_id
          in: path
          description: >-
            The unique identifier of a published release of the catalog or
            `latest` for the most recently published version.
          required: true
          schema:
            type: string
        - name: hierarchy_id
          in: path
          description: The catalog hierarchy ID.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/filter-product'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The products of a catalog hierarchy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product-list-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Administrator Latest Releases Catalog API
      security:
        - bearerAuth: []
  /catalogs/{catalog_id}/releases/{release_id}/nodes/{node_id}/relationships/products:
    get:
      operationId: getProductsForNode
      summary: Get a Node's Products
      description: >
        Returns the products associated with the specified hierarchy node in the
        catalog. The products must be in the `live` status. If the products have
        been curated, then the products are returned in the order specified in
        the `curated_products` attribute. A product that is curated has the
        `"curated_product": true` attribute displayed.
         
        :::note
         
        Currently, published catalogs are limited to the current release and two
        releases prior to the current release.
         
        :::


        If you have multiple catalog rules defined, the rule that best matches
        the shoppers context is used to determine which catalog is retrieved.
        See [Resolving catalog
        rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).


        You can see the parent nodes a product is associated with in the
        `bread_crumbs` and `bread_crumb_nodes` metadata for each product. This
        is useful if you want to improve how your shoppers search your store,
        for example. See [Product and Node Associations in Breadcrumb
        Metadata](/guides/How-To/Catalogs/breadcrumbs).
         
        The `variations` object lists the variation IDs and variation option IDs
        and their corresponding product IDs that are generated when the
        variation and variation options are built with a product. The
        `variations` object can then be added to your catalogs. By default,
        variations and variation options are sorted randomly. You can use the
        `sort_order` attribute to sort the order of your variation and variation
        options in `variations`. Once a parent product is published in a
        catalog, the [Get a List of products in a catalog
        release](/docs/api/pxm/catalog/get-all-products) response displays the
        sorted variations and variation options. Variations and variation
        options are displayed in descending order according to their
        `sort_order` values.


        ### Filtering
         
        This endpoint supports filtering. For general filtering syntax, see
        [Filtering](/guides/Getting-Started/filtering). The following operators
        and attributes are available when filtering on this endpoint.
         
        | Operator |
        Description                                                                                    
        | Supported Attributes                                     | Example |

        |:---|:------------------------------------------------------------------------------------------------|:---------------------------------------------------------|:---
        |

        | `Eq` | Checks if the values of two operands are equal. If they are,
        the condition is true. For `product_types` and `tags`, you can only
        specify one. For example, `filter=eq(product_types,child)`.          |
        `name`, `sku`, `slug`, `manufacturer_part_num`, `upc_ean`,
        `product_types`, `tags` | `filter=eq(name,some-name)` |

        | `In` | Checks if the values are included in the specified string. If
        they are, the condition is true. For `product_types` and `tags`, you can
        specify more than one. For example,
        `filter=in(product_types,child,bundle)`. | `id`, `name`, `sku`, `slug`,
        `manufacturer_part_num`, `upc_ean`, `product_types`, `tags`          |
        `filter=in(id,some-id)` |
         
        ### Building breadcrumbs in a storefront
         
        In a catalog, you can use a filter to return a list of nodes in a
        hierarchy structure that a product belongs to. You can use this to build
        breadcrumbs in your storefront. An example is shown below.
         
        `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`
         
        - Specify the node Ids in the filter expression.

        - You can have as many node Ids as you want.

        - It does not matter what order you specify the node Ids. The nodes are
        returned in the order they were last updated.
         
        ### Including Resources
         
        Using the `include` parameter, you can retrieve top-level resources,
        such as, files or main image, bundle component products and product
        attributes, such as SKU or slug. 
         
        | Parameter | Required |
        Description                                                                                                                                                                                                   
        |

        | 
        :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

        | `component_products` | Optional | The  component product data and key
        attribute data, such as SKU or slug, to return for component products in
        a product bundle.  |

        | `main_image`         | Optional | The main images associated with a
        product. |

        | `files`              | Optional | Any files associated with a product.
        |
         
        See [**Including Resources**](/guides/Getting-Started/includes).
      parameters:
        - $ref: '#/components/parameters/accept-language'
        - $ref: '#/components/parameters/filter-product'
        - name: catalog_id
          in: path
          description: The catalog ID.
          required: true
          schema:
            type: string
        - name: release_id
          in: path
          description: >-
            The unique identifier of a published release of the catalog or
            `latest` for the most recently published version.
          required: true
          schema:
            type: string
        - name: node_id
          in: path
          description: The catalog node ID.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: The products of a catalog node.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/product-list-data'
        default:
          description: The unexpected error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error-response'
      tags:
        - Administrator Latest Releases Catalog API
      security:
        - bearerAuth: []
  /v2/carts:
    get:
      tags:
        - Cart Management
      summary: Get Shopper Carts
      description: >
        You can retrieve the carts that are associated with an
        [account](/docs/api/carts/account-cart-associations) or a
        [customer](/docs/api/carts/customer-cart-associations).


        When a shopper retrieves their latest carts, the carts are sorted in
        descending order by the updated_date. For more information, see
        [Pagination](/guides/Getting-Started/pagination).


        :::note


        Requires an `implicit` token with only one of [Account Management
        Authentication
        Token](/docs/api/accounts/post-v-2-account-members-tokens) or [customer
        token](/docs/customer-management/customer-management-api/customer-tokens).


        :::
      operationId: getCarts
      parameters:
        - name: EP-Account-Management-Authentication-Token
          in: header
          description: >-
            An Account Management Authentication token to access a specific
            account's carts.
          style: simple
          schema:
            type: string
            examples:
              - '{{accountToken}}'
        - name: x-moltin-customer-token
          in: header
          description: A customer token to access a specific customer's carts.
          style: simple
          schema:
            type: string
            examples:
              - '{{customerToken}}'
      responses:
        '200':
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response.Data'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/CartResponse'
                      links:
                        $ref: '#/components/schemas/Response.PageLinks'
                      meta:
                        $ref: '#/components/schemas/Response.Meta.Carts'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    post:
      tags:
        - Cart Management
      summary: Create a Cart
      description: >

        Creates a cart. Call this endpoint each time a customer creates a cart.


        Each shopper can have multiple carts. Use the carts API to create a
        cart. The carts are distinct from one another. Shoppers can add
        different items to their carts. They can check out one of the carts
        without affecting the content or status of their other carts.


        After the shopper checks out the cart, the cart remains available to the
        shopper. The cart is persistent and stays with the shopper after it is
        used.


        You can also create a cart to specify custom discounts. You can enable
        custom discounts when the `discount_settings.custom_discounts_enabled`
        field is set to `true`. Default is set from cart discount settings for
        the store. See [Update Cart
        Settings](/docs/api/settings/put-v-2-settings-cart).


        ### Preview Cart


        You can set a future date for your shopping cart and view the promotions
        that will be available during that time period. This feature enables you
        to validate your promotion settings and observe how they will be applied
        in the cart.


        :::caution

        - Once the cart is in preview mode, you cannot revert it to a regular
        cart.

        - Carts with `snapshot_date` are same as preview carts.

        - You cannot checkout a cart that includes a `snapshot_date`.

        - To delete a promotion preview cart, use [Delete a
        cart](/docs/api/carts/delete-a-cart) endpoint.

        - The promotion preview cart has the same expiration time as a regular
        cart based on the store's [cart
        settings](/docs/api/settings/put-v-2-settings-cart).

        - Preview cart interactions skip inventory checks and events, allowing
        users to preview future carts without impacting related external
        systems.

        :::


        ### Custom Attributes

        You can create custom attributes for the cart object to include
        additional information, enabling promotions that target specific cart
        attributes.

        For example:

        ```

        "custom_attributes":{
          "membership": {
            "type": "string",
            "value": "VIP"
          }
        }

        ```

        See [adding cart custom attributes in promotions
        builder](/docs/commerce-manager/promotions-builder/creating-a-promotion-in-promotions-builder#adding-cart-custom-attributes)


        Cart custom attributes remain with the corresponding cart for the extent
        of its lifecycle.  These custom attributes carry over to the resulting
        order objects on checkout and those on carts are deleted with their
        carts upon cart deletions.

        Custom attributes can be updated or removed using a PUT request. To
        delete specific custom attributes, simply exclude the unwanted attribute
        objects from the PUT request body.


        ### Contact Email

        You can attach an email to carts via the `contact.email` field.  These
        values help identify guest shopper carts and, in the case of promotions
        with maximum usage settings for guest and registered shopper, track
        per-shopper promotion usages.

        See [Create Max Uses Per Shopper Promotion
        Codes](/docs/promotions-builder/promotions-builder-codes/create-max-use-limit-promotion-codes)


        For example:

        ```

        "contact": {
          "email": "tester@email.com"
        }

        ```


        Please note, this value is not supported for registered shopper carts
        (that is, carts with accounts or customers associated), as these carts
        already have email values associated via the shopper details. 
        Accordingly, requests to add contact email information to registered
        shopper carts (and vice versa) result in error messages.


        ### Errors


        - `400 Bad Request` : This is returned when the submitted request does
        not adhere to the expected API contract for the endpoint.

           - For example, in the case of string fields, this error might indicate issues in the length or format of submitted strings. For more information about valid string fields, refer to Safe Characters section.
           - In the case of preview carts (those with `snapshot_date`), an error is returned for invalid actions, such as removing the preview date, setting a preview date in the past, or attempting to checkout a cart with a `snapshot_date`.
      operationId: createACart
      parameters:
        - name: x-moltin-customer-token
          in: header
          description: A customer token to be associated with the cart.
          style: simple
          schema:
            type: string
            examples:
              - '{{customerToken}}'
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CartsRequest'
            examples:
              Create Cart:
                value:
                  data:
                    name: Bob’s cart
                    description: For Holidays
                    discount_settings:
                      custom_discounts_enabled: true
              Create Preview Cart:
                value:
                  data:
                    name: promotion preview cart
                    description: preview promotions
                    snapshot_date: '2026-09-10T00:12:00Z'
              Create a Cart with Custom Attributes:
                value:
                  data:
                    name: cart with custom attributes
                    description: cart description
                    custom_attributes:
                      affiliate_link:
                        type: string
                        value: https://site.com?tag=influencer04-20
              Create a Cart with Contact Email:
                value:
                  data:
                    name: cart with contact email
                    description: cart description
                    contact:
                      email: tester@email.com
        required: false
      responses:
        '200':
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response.Data'
                  - properties:
                      data:
                        $ref: '#/components/schemas/CartResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/carts/{cartID}:
    get:
      tags:
        - Cart Management
      summary: Get a Cart
      description: >
        Use this endpoint to retrieve a specific cart. If a cart ID does not
        exist, a new cart will be automatically created. If the cart is
        associated with shipping groups, calling this endpoint displays the
        associated shipping group IDs in the `relationships` section.


        You can easily get a new or existing cart by providing the unique cart
        reference in the request. If the cart is associated with shipping
        groups, calling this endpoint displays the associated shipping group IDs
        in the relationships section.


        :::note


        - The default cart name is Cart. However, you can update the cart name
        as required. Ensure that the string length of the name is greater than
        or equal to one. Follow the safe character guidelines for name and
        description naming. For more information about cart ID naming
        requirements, see the [Safe
        Characters](/guides/Getting-Started/safe-characters) section.

        - Outside of the JS-SDK, we don't handle creating cart references. You
        need to create your own.


        :::


        :::caution


        An empty cart is returned for any carts that don’t currently exist. For
        more information about the cart items object, see [Get Cart
        Items](/docs/api/carts/get-cart-items).


        :::


        ### Query parameters



        | Name      | Required | Type     |
        Description                                |

        |:----------|:---------|:---------|:-------------------------------------------|

        | `include` | Optional | `string` | Comma-delimited string of entities
        that can be included. The information included are `items`,`tax_items`,
        `custom_discounts`, or `promotions`. |
      operationId: getCart
      parameters:
        - name: cartID
          in: path
          description: The unique identifier for this cart that you created.
          required: true
          style: simple
          schema:
            type: string
          $ref: '#/components/parameters/cart_include'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response.Data'
                  - properties:
                      data:
                        $ref: '#/components/schemas/CartResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    put:
      tags:
        - Cart Management
      summary: Update a Cart
      description: >
        Updates cart properties for the specified cartID.


        You can also update a cart to specify custom discounts. You can enable
        custom discounts when the `discount_settings.custom_discounts_enabled`
        field is set to `true`. Default is set from cart discount settings for
        the store. See [Cart
        Settings](/docs/api/settings/put-v-2-settings-cart).
      operationId: updateACart
      parameters:
        - name: cartID
          in: path
          description: The unique identifier of a cart created by you.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CartsRequest'
            examples:
              Update a Cart:
                value:
                  data:
                    name: my cart
                    description: my first cart
                    discount_settings:
                      custom_discounts_enabled: false
                      use_rule_promotions: true
                    snapshot_date: '2026-09-10T00:12:00Z'
              Remove Payment Intent from a Cart:
                value:
                  data:
                    payment_intent_id: ''
              Update Cart with Custom Attributes:
                value:
                  data:
                    name: cart with custom attribute
                    description: cart description
                    custom_attributes:
                      affiliate_link:
                        type: string
                        value: https://site.com?tag=influencer04-21
              Update Cart with Contact Email:
                value:
                  data:
                    name: cart with contact email
                    description: cart description
                    contact:
                      email: tester@email.com
        required: false
      responses:
        '200':
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response.Data'
                  - properties:
                      data:
                        $ref: '#/components/schemas/CartResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    delete:
      tags:
        - Cart Management
      summary: Delete a Cart
      description: >
        You can delete a cart, including the items, name, description, and
        remove all associations.


        ### Errors


        The following error message is received when you attempt to delete a
        cart that is associated with a customer. Before deletion, ensure that
        the cart is disassociated.


        ```json

        message: {
            errors: [
              {
                status: 400,
                title: 'Last cart',
                detail: 'This is the last cart associated with a customer and it cannot be deleted, try disassociating instead'
              }
            ]
          }
        ````
      operationId: deleteACart
      parameters:
        - name: cartID
          in: path
          description: The unique identifier of the cart that you want to delete.
          required: true
          style: simple
          schema:
            type: string
      responses:
        '204':
          description: No Content
          headers: {}
          content: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/carts/{cartID}/items:
    get:
      tags:
        - Cart Items
      summary: Get Cart Items
      description: >

        Use this endpoint to retrieve cart items. If the cart is associated with
        shipping groups, calling this endpoint displays the associated shipping
        group IDs.


        You can use this endpoint to retrieve the breakdown of cart items by
        promotion ID. For example, if you have Promotions Standard item discount
        with code *sale2024*, Rule Promotions item discount with code
        *sale2024*, and Rule Promotions cart discount with code *sale2024*, the
        `discounts.constituents` field in the response example will show the
        breakdown of the same promotion code used in both Promotions Standard
        and Rule Promotions.


        ```json

        "data": [

        {
            "id": "98de010d-dd10-4fa5-a070-0b9bcdc72974",
            "type": "cart_item",
            "product_id": "5a4662d2-9a2b-4f6e-a215-2970db914b0c",
            "name": "sku1",
            "description": "sku1",
            "sku": "sku1",
            "slug": "sku1",
            "image": {
                "mime_type": "",
                "file_name": "",
                "href": ""
            },
            "quantity": 1,
            "manage_stock": false,
            "unit_price": {
                "amount": 10000,
                "currency": "USD",
                "includes_tax": false
            },
            "value": {
                "amount": 10000,
                "currency": "USD",
                "includes_tax": false
            },
            "discounts": [
                {
                    "amount": {
                        "amount": -2000,
                        "currency": "USD",
                        "includes_tax": false
                    },
                    "code": "sale2024",
                    "id": "e4d929d5-f471-4317-9a86-a84a6c572b44",
                    "promotion_source": "rule-promotion",
                    "is_cart_discount": true
                },
                {
                    "amount": {
                        "amount": -1000,
                        "currency": "USD",
                        "includes_tax": false
                    },
                    "code": "sale2024",
                    "id": "de19a043-a6da-4bde-b896-d17e16b77e25",
                    "promotion_source": "rule-promotion"
                },
                {
                    "amount": {
                        "amount": -1000,
                        "currency": "USD",
                        "includes_tax": false
                    },
                    "code": "sale2024",
                    "id": "509295ee-2971-45b6-801e-95df09756989"
                },
                {
                    "amount": {
                        "amount": -1000,
                        "currency": "USD",
                        "includes_tax": false
                    },
                    "code": "sale2024",
                    "id": "ca79e606-7ecd-41ac-9478-af4c8c28c546",
                    "promotion_source": "rule-promotion",
                    "is_cart_discount": true
                }
            ],
            "links": {
                "product": "https://useast.api.elasticpath.com/v2/products/5a4662d2-9a2b-4f6e-a215-2970db914b0c"
            },
            "meta": {
                "display_price": {
                    "with_tax": {
                        "unit": {
                            "amount": 5000,
                            "currency": "USD",
                            "formatted": "$50.00"
                        },
                        "value": {
                            "amount": 5000,
                            "currency": "USD",
                            "formatted": "$50.00"
                        }
                    },
                    "without_tax": {
                        "unit": {
                            "amount": 5000,
                            "currency": "USD",
                            "formatted": "$50.00"
                        },
                        "value": {
                            "amount": 5000,
                            "currency": "USD",
                            "formatted": "$50.00"
                        }
                    },
                    "tax": {
                        "unit": {
                            "amount": 0,
                            "currency": "USD",
                            "formatted": "$0.00"
                        },
                        "value": {
                            "amount": 0,
                            "currency": "USD",
                            "formatted": "$0.00"
                        }
                    },
                    "discount": {
                        "unit": {
                            "amount": -5000,
                            "currency": "USD",
                            "formatted": "-$50.00"
                        },
                        "value": {
                            "amount": -5000,
                            "currency": "USD",
                            "formatted": "-$50.00"
                        }
                    },
                    "without_discount": {
                        "unit": {
                            "amount": 10000,
                            "currency": "USD",
                            "formatted": "$100.00"
                        },
                        "value": {
                            "amount": 10000,
                            "currency": "USD",
                            "formatted": "$100.00"
                        }
                    },
                    "discounts": {
                        "sale2024": {
                            "amount": -5000,
                            "currency": "USD",
                            "formatted": "-$50.00",
                            "constituents": {
                                "509295ee-2971-45b6-801e-95df09756989": {
                                    "amount": -1000,
                                    "currency": "USD",
                                    "formatted": "-$10.00"
                                },
                                "ca79e606-7ecd-41ac-9478-af4c8c28c546": {
                                    "amount": -1000,
                                    "currency": "USD",
                                    "formatted": "-$10.00"
                                },
                                "de19a043-a6da-4bde-b896-d17e16b77e25": {
                                    "amount": -1000,
                                    "currency": "USD",
                                    "formatted": "-$10.00"
                                },
                                "e4d929d5-f471-4317-9a86-a84a6c572b44": {
                                    "amount": -2000,
                                    "currency": "USD",
                                    "formatted": "-$20.00"
                                }
                            }
                        }
                    }
                },
                "timestamps": {
                    "created_at": "2024-05-24T18:00:58Z",
                    "updated_at": "2024-05-24T18:00:58Z"
                }
            },
            "catalog_id": "09b9359f-897f-407f-89a2-702e167fe781",
            "catalog_source": "pim"
        }

        ```
      operationId: getCartItems
      parameters:
        - name: cartID
          in: path
          description: The unique identifier of the cart that you created.
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    put:
      tags:
        - Cart Items
      summary: Bulk Update Items in Cart
      description: >
        The bulk update feature allows shoppers to update an array of items to
        their cart in one action, rather than updating each item one at a time.
        Shoppers can update quantity and shipping group details in bulk
        requests. This minimizes the time for shoppers while updating items to
        their cart. Shoppers can even update multiple items with the same or
        different shipping groups to their cart.


        When you update multiple items that qualify for free gifts in the cart,
        the corresponding free gifts for all eligible products are also
        automatically updated in the cart.
      operationId: bulkUpdateItemsInCart
      parameters:
        - name: cartID
          in: path
          description: The unique identifier of the cart that you created.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/BulkUpdateCartsItems'
            examples:
              Bulk Update Items in Cart:
                value:
                  data:
                    - id: 8a4f1c77-4435-4b83-b0e4-020af02999c3
                      quantity: 2
                    - id: 14f1d7f8-43ed-4e7a-92ea-d73ea605c338
                      quantity: 3
                    - id: 9a47cf8b-41ff-499b-93dc-38b3564a4033
                      shipping_group_id: 59aad410-218f-4683-896a-8919dfe224bf
                  options:
                    add_all_or_nothing: false
        required: false
      responses:
        '200':
          description: ''
          headers: {}
          content: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    post:
      tags:
        - Cart Items
      summary: Add Items to Cart
      description: >

        ### Add Product to Cart


        Adding a Product to Cart is the most common Cart action. If you want to
        add any custom products or promotions, you need to do that as a separate
        action.


        #### Dynamic Bundles


        A bundle is a purchasable product that is composed of a combination of
        two or more products that you want to sell together. You can create
        multiple components within a bundle. Each component can have one or more
        options. Each option is a product and a quantity. You can configure
        minimum and/or maximum values for the number of product options in a
        component that your shoppers can select. For example, you can enable a
        shopper to select 1 or more product options from a list of 10. These are
        called [dynamic
        bundles](/docs/api/pxm/products/products#dynamic-bundles).


        Your dynamic bundles are displayed in your published catalogs.


        1. Use the configure a shopper endpoint to allow shoppers to make their
        selections from a bundle.

        2. In the response of the configure a shopper, the
        `bundle_configuration` object contains the bundle selections a shopper
        has made.

        3. In the add a product to cart request, use the `bundle_configuration`
        object to add the customers selections to a cart.


        ```json
          "bundle_configuration": {
               "selected_options": {
                   "games": {
                       "d7b79eb8-19d8-45ea-86ed-2324a604dd9c": 1
                   },
                   "toys": {
                       "0192ccdd-6d33-4898-87d7-c4d87f2bf8ea": 1,
                       "1aea6f97-f0d9-452c-b3c1-7fb5629ead82": 1
                   }
               }
        }

        ```


        When a cart is checked out, the options a shopper selected are added to
        the order. See [order items](/docs/api/carts/get-order-items).


        #### Personalized Products


        You can allow shoppers to personalize their goods by adding custom text
        inputs to products directly. This feature is particularly useful for
        customizable items, such as personalized T-shirts or greeting cards. You
        can use this functionality by leveraging the `custom_inputs` attribute,
        and defining the details and validation rules for the custom text.


        First, you must configure a `custom_inputs` attribute when creating a
        new product or updating an existing product. Once you have defined your
        custom inputs on a product, you must configure the custom inputs in your
        orders.


        For example, you may sell T-shirts that can have personalized text on
        the front and back of the shirt.


        ```json
            {
              "data": {
                "type": "product",
                  "attributes": {
                      "custom_inputs": {
                          "front": {
                              "name": "T-Shirt Front",
                              "validation_rules": [
                              {
                                  "type": "string",
                                  "options": {
                                  "max_length": 50
                              }
                          }
                      ],
                            "required": false
                },
                          "back": {
                            "name": "T-Shirt Back",
                            "validation_rules": [
                        {
                              "type": "string",
                              "options": {
                              "max_length": 50
                    }
                  }
                ],
                           "required": false
                }
              }
            }
          }
        }

        ```


        If the same product has different `custom_inputs` attributes, then these
        are added as separate items in a cart.


        The `custom_inputs` attribute is stored in the cart item and the text
        for `custom_input` must not exceed 255 characters in length. When a cart
        is checked out, the `custom_inputs` attribute becomes part of the order.


        #### Limitations on Usage of `custom_inputs` with Specific Promotion
        Types


        When you add products to a cart with `custom_inputs`, there are certain
        limitations on usage of the `custom_inputs` with the following promotion
        types:

          - For [Free Gift Promotions](/docs/api/promotions/create-a-promotion), you can add `custom_inputs` to gift items.
          - For [Fixed Bundle Discount Promotions](/docs/api/promotions/create-a-promotion), the promotion applies as long as the cart contains the bundle SKUs even when there are different `custom_inputs`.
          - For [X for Y Discount Promotion and X for amount discount promotion](/docs/api/promotions/create-a-promotion), the promotion applies when there are two SKUs with the same `custom_inputs`. The promotion does not apply when there are different `custom_inputs` and the SKUs are in different line items.

        #### Stock locations


        When adding to a cart it is possible to specify which [stock
        location](/docs/api/pxm/inventory_mli/inventories-introduction?#multi-location-inventories)
        should be used for tracking inventory for that product by specifying its
        slug in `location`. This might represent the warehouse a product is
        shipped from or the store holding the stock in a Buy Online Pick Up In
        Store scenario.


        Each line item is restricted to a single stock location. If the same
        product is added with a different location then the most
        recently-specified location will be used for the total quantity of that
        line item.


        :::note


        - Any requests to add a product to cart returns the collection of cart
        items.

        - [Tax items](/docs/api/carts/tax-items) may optionally be added with
        the product. Only administrators with [client_credentials access
        tokens](/docs/api/authentication/create-an-access-token) are able to do
        this. If included, they replace any existing taxes on the product.

        - The cart currency is set when the first item is added to the cart.

        - The product being added to the cart requires a price in the same
        currency as the other items in the cart. The API returns a 400 error if
        a price is not defined in the correct currency.

        - A cart can contain a maximum of 100 unique items. Items include
        products, custom items, tax items, and promotions.

        - There are a number of actions that happen to your inventory when
        checking out and paying for an order. For more information, see the
        [Inventory](/docs/api/pxm/inventory/inventories-introduction)
        documentation.


        :::


        ### Including Resources


        When you make an `Add Product to Cart` request to the catalog-view
        service, you can obtain details of the component products. If you
        include the optional parameter `include=component_products` in the
        request, the response will include details for each component product.


        When a bundle with selected component products is added to a cart, the
        cart displays both the bundle pricing and component product IDs.


        The response example is returned with a new field called
        `component_products` under `bundle_configuration`, which is a list of
        component products that the user has selected for dynamic bundles.


        | Parameter               | Required     | Description        |

        |:------------------------|:-------------|:-------------------|

        | `component_products`    | Optional     | The component product data
        and key attribute data, such as SKU or slug, to return for component
        products in a product bundle. |

        | `main_image`            | Optional     | The main images associated
        with a product. |

        | `files`                 | Optional     | Any files associated with a
        product. |


        ```json

        "bundle_configuration": {
            "selected_options": {
                "mixed-shirts": {
                    "16a6cc14-6ebb-4156-9973-e6a0f92f5731": 3,
                    "55037cc5-f382-4039-95c6-1e04ac0351d3": 2,
                "standard-shirts"
                    "70f1c9d2-c580-4839-bd6c-a0a9b91d5159": 5
                }
            },
            "component_products": [
                {
                    "id": "16a6cc14-6ebb-4156-9973-e6a0f92f5731",
                    "type": "product",
                    "attributes": {
                        "name": "Red T-shirt",
                        "description": "Standard red t-shirt.",
                        "slug": "red-t-shirt-slug",
                        "sku": "red-t-shirt-sku",
                        "status": "live",
                        "commodity_type": "physical"
                    },
                    "meta": {
                        "display_price": {
                            "without_tax": {
                                "amount": 500,
                                "currency": "USD",
                                "formatted": "$5.00"
                            }
                        }
                    }
                },
                {
                    "id": "55037cc5-f382-4039-95c6-1e04ac0351d3",
                    "type": "product",
                    "attributes": {
                        "name": "Blue T-shirt",
                        "description": "Standard blue t-shirt.",
                        "slug": "blue-t-shirt-slug",
                        "sku": "blue-t-shirt-sku",
                        "status": "live",
                        "commodity_type": "physical"
                    },
                    "meta": {
                        "display_price": {
                            "without_tax": {
                                "amount": 500,
                                "currency": "USD",
                                "formatted": "$5.00"
                            }
                        }
                    }
                },
                {
                    "id": "70f1c9d2-c580-4839-bd6c-a0a9b91d5159",
                    "type": "product",
                    "attributes": {
                        "name": "White T-shirt",
                        "description": "Standard white t-shirt.",
                        "slug": "white-t-shirt-slug",
                        "sku": "white-t-shirt-sku",
                        "status": "live",
                        "commodity_type": "physical"
                    },
                    "meta": {
                        "display_price": {
                            "without_tax": {
                                "amount": 500,
                                "currency": "USD",
                                "formatted": "$5.00"
                            }
                        }
                    }
                }
            ]
        }

        ```


        See [Including
        Resources](https://elasticpath.dev/guides/Getting-Started/includes).


        ### Add Subscription to Cart


        To add a subscription to your cart, you need to provide the ID of the
        subscription offering and the ID of the plan within that offering that
        you want to subscribe to.


        ```json
          {
            {
              "data": {
                "id": "5b9be99f-1c94-4ddd-9718-81adab0cc3e0",
                "type": "subscription_item",
                "quantity": 1,
                "subscription_configuration": {
                  "plan": "40010dde-2f38-489b-8b3f-14a13cbfb431"
                }
            }
          }
        ```


        The price of the subscription item in the cart reflects the cost of the
        subscription's initial billing period. Once the cart has been checked
        out and the order paid for, the subscription will be automatically
        created in the subscriptions service.


        ### Add Custom Item to Cart


        You can add a custom item to the cart when you don't manage things like
        shipping, taxes and inventory in Commerce.


        For [Shipping Groups](/docs/ship-groups/shipping-groups/index), once you
        have created a [cart shipping
        group](/docs/ship-groups/shipping-groups/shipping-groups-api/create-cart-shipping-group),
        you need to link it to the cart items. This is important, because it is
        necessary to associate items with shipping groups in order to include
        shipping groups in the corresponding cart, order, and totals.


        :::note


        - Custom Cart Items are available when using [implicit access
        tokens](/docs/api/authentication/create-an-access-token). Ensure that
        you always check each order has the correct details for each item, most
        importantly, price.


        :::


        ### Add Promotion to Cart


        You can use the Promotions API to apply discounts to your cart as a
        special cart item type. Any requests to add a product to cart will
        return a collection of cart items.

         There are certain limitations on usage of the `custom_inputs` attribute with some promotion types. See [Limitations on Usage of `custom_inputs` with Specific Promotion Types](/docs/api/carts/manage-carts#limitations-on-usage-of-custom_inputs-with-specific-promotion-types).

        To remove promotion from the cart via the promotion code, see [Delete
        Promotion Code from
        Cart](/docs/api/carts/delete-a-promotion-via-promotion-code).


        ### Re-order


        From a shopper’s order history, they can add the items from a previous
        order into their carts. Shoppers can add items regardless of past order
        status, such as incomplete or not paid. For more information, see
        [Orders](/docs/api/carts/orders).


        :::note
          - Any requests to add an item to cart return a collection of [cart items](/docs/api/carts/cart-items).
          - A cart can contain a maximum of 100 unique items. Items include products, custom items, and promotions.
          - When a shopper creates a cart and re-orders items from an order with properties such as custom attributes, custom discounts, and payment intent ID, these properties will remain unchanged in the original cart.
          - Custom items do not exist in catalogs, and therefore cannot be reordered.
        :::


        ### Merging Carts


        A shopper can have multiple carts, and the system may automatically
        merge items from an anonymous cart into the shopper's registered cart
        when they sign in. For example, if a shopper has an existing cart with
        items `A`, `B` and `C`, and later adds items `D` and `E` while not
        signed in, the system can merge these carts when the shopper signs in.
        After the carts merge, the cart contains items `A`, `B`, `C`, `D` and
        `E`.


        If any items are duplicated from the anonymous cart to the registered
        cart, their quantities are incremented accordingly. For example, if a
        shopper's existing cart with items `A`, `B` and `C`, and they later add
        two more `A` items and one `B` item while not signed in, the system will
        merge the carts when the shopper signs in. The existing cart will now
        contain three `A` items, two `B` items, and one `C` item.


        :::note


        When the system merges items from one cart into another cart, properties
        such as custom attributes, custom discounts, and payment intent ID will
        remain unchanged in the original cart.


        :::


        ### Best Practices


        We recommend to include a unique `sku` code within the request body
        while adding custom items to carts. If the same `sku` is used for
        multiple products, they are merged into a single line item.


        For example, if a cart consists of the following items:


        - `product-1` with quantity 1 and sku code as `sku-1`

        - `product-2` with quantity 1 and sku code as `sku-1`

        - `product-3` with quantity 1 and sku code as `sku-2`.


        The following response is returned where it combines all products with
        the same sku codes into a single line item, while products with a unique
        sku codes are represented as separate items:


        ```json

        {
          "data": [
              {
              "id": "c58760f4-8889-4719-b34d-be1f1d11ae59",
              "type": "custom_item",
              "name": "product-1",
              "description": "My first custom item!",
              "sku": "sku-1",
              "slug": "",
              "image": {
                "mime_type": "",
                "file_name": "",
                "href": ""
              },
              "quantity": 2,
              "manage_stock": false,
              "unit_price": {
                "amount": 20000,
                "currency": "USD",
                "includes_tax": true
              },
              "value": {
                "amount": 40000,
                "currency": "USD",
                "includes_tax": true
                },
              "links": {},
              "meta": {
                "display_price": {
                    "with_tax": {
                        "unit": {
                          "amount": 20000,
                          "currency": "USD",
                          "formatted": "$200.00"
                        },
                        "value": {
                          "amount": 40000,
                          "currency": "USD",
                          "formatted": "$400.00"
                            }
                        },
                    "without_tax": {
                        "unit": {
                          "amount": 20000,
                          "currency": "USD",
                          "formatted": "$200.00"
                            },
                        "value": {
                          "amount": 40000,
                          "currency": "USD",
                          "formatted": "$400.00"
                            }
                          },
                        "tax": {
                          "unit": {
                            "amount": 0,
                            "currency": "USD",
                            "formatted": "$0.00"
                          },
                          "value": {
                              "amount": 0,
                              "currency": "USD",
                              "formatted": "$0.00"
                            }
                          },
                          "discount": {
                              "unit": {
                                "amount": 0,
                                "currency": "USD",
                                "formatted": "$0.00"
                            },
                              "value": {
                                "amount": 0,
                                "currency": "USD",
                                "formatted": "$0.00"
                                }
                            },
                            "without_discount": {
                                "unit": {
                                   "amount": 20000,
                                   "currency": "USD",
                                   "formatted": "$200.00"
                                  },
                                  "value": {
                                      "amount": 40000,
                                      "currency": "USD",
                                      "formatted": "$400.00"
                                        }
                                      }
                                    },
                "timestamps": {
                  "created_at": "2023-05-02T16:28:11Z",
                  "updated_at": "2023-05-02T16:28:18Z"
                }
            }
          }
          ```
      operationId: manageCarts
      parameters:
        - name: cartID
          in: path
          description: The unique identifier of the cart that you created.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CartItemsObjectRequest'
                - $ref: '#/components/schemas/CartMergeObjectRequest'
                - $ref: '#/components/schemas/CustomItemObject'
                - $ref: '#/components/schemas/ReOrderObjectRequest'
                - $ref: '#/components/schemas/PromotionItemObject'
                - $ref: '#/components/schemas/BulkAddItemsRequest'
            examples:
              Add Cart Item:
                value:
                  data:
                    type: cart_item
                    id: df32387b-6ce6-4802-9b90-1126a5c5a54f
                    quantity: 1
                    custom_inputs:
                      name:
                        tshirt_front: Jane
                        tshirt_back: Jane Doe's Dance Academy
              Add Subscription Item:
                value:
                  data:
                    type: subscription_item
                    id: 1f49c20c-54b9-453b-a57c-ef8303a6415f
                    quantity: 1
                    subscription_configuration:
                      plan: a2cd9dae-3a28-4185-93b7-1b02a8ce0c2e
              Add Custom Item:
                value:
                  data:
                    type: custom_item
                    name: My Custom Item
                    sku: my-custom-item
                    description: My first custom item!
                    quantity: 1
                    price:
                      amount: 10000
              Add Promotion to Cart:
                value:
                  data:
                    type: promotion_item
                    code: PROMO_CODE
              Reorder Items:
                value:
                  data:
                    - type: order_items
                      order_id: da0b0a12-8232-4be1-a354-a1a64b11de91
                  options:
                    add_all_or_nothing: false
              Merge Carts:
                value:
                  data:
                    - type: cart_items
                      order_id: da0b0a12-8232-4be1-a354-a1a64b11de91
                  options:
                    add_all_or_nothing: false
              Bulk Add Items to Cart:
                value:
                  data:
                    - type: cart_item
                      id: df32387b-6ce6-4802-9b90-1126a5c5a54f
                      quantity: 1
                    - type: custom_item
                      name: My Custom Item
                      sku: my-custom-item
                      description: My first custom item!
                      quantity: 1
                      price:
                        amount: 10000
                    - type: promotion_item
                      code: PROMO_CODE
                  options:
                    add_all_or_nothing: true
              Add Bundle to Cart:
                value:
                  data:
                    id: 5ab67bb3-b2c3-4348-af33-e370bd39b0c9
                    type: cart_item
                    quantity: 1
                    bundle_configuration:
                      selected_options:
                        tshirt:
                          23759a57-13c1-4887-9ec2-fb47444751bd: 1
                        comics:
                          c7bcf7fd-1fab-4635-8ae0-7f187a9dbbce: 1
                          d9768b40-cf28-406e-bafc-a6d130627eca: 1
              Add Item with Shipping Group ID:
                value:
                  data:
                    type: custom_item
                    name: My Custom Item
                    sku: my-custom-item
                    description: My first custom item!
                    quantity: 1
                    price:
                      amount: 10000
                      includes_tax: true
                    shipping_group_id: eb063818-939a-458f-97a4-2601c0c2b445
      responses:
        '200':
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    delete:
      tags:
        - Cart Items
      summary: Delete all Cart Items
      description: >
        A shopper can clean up their cart, deleting custom items, promotions,
        and so on, while the empty cart remains available. The cart id, name,
        description, and any account or customer associations persist. The
        shopper can continue to add items to the cart.
      operationId: deleteAllCartItems
      parameters:
        - name: cartID
          in: path
          description: The unique identifier of the cart created by you.
          required: true
          style: simple
          schema:
            type: string
      responses:
        '204':
          description: No Content
          headers: {}
          content: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/carts/{cartID}/items/{cartitemID}:
    put:
      tags:
        - Cart Items
      summary: Update a Cart Item
      description: >-
        You can easily update a cart item. A successful update returns the cart
        items.
      operationId: updateACartItem
      parameters:
        - name: cartID
          in: path
          description: A unique identifier of the cart that you created.
          required: true
          style: simple
          schema:
            type: string
        - name: cartitemID
          in: path
          description: A unique identifier of the cart item.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/UpdateCartsItems'
            examples:
              Update Cart Item:
                value:
                  data:
                    type: cart_item
                    id: 76746981-f63a-45f4-ba9e-59773d89dc2e
                    custom_inputs:
                      personalization: My personal message
                    quantity: 2
              Update a Bundle:
                value:
                  data:
                    id: 5ab67bb3-b2c3-4348-af33-e370bd39b0c9
                    type: cart_item
                    quantity: 1
                    bundle_configuration:
                      selected_options:
                        games:
                          d7b79eb8-19d8-45ea-86ed-2324a604dd9c: 1
                        toys:
                          0192ccdd-6d33-4898-87d7-c4d87f2bf8ea: 1
                          1aea6f97-f0d9-452c-b3c1-7fb5629ead82: 1
              Add Item with Shipping Group ID:
                value:
                  data:
                    type: cart_item
                    id: 76746981-f63a-45f4-ba9e-59773d89dc2e
                    shipping_group_id: eb063818-939a-458f-97a4-2601c0c2b445
        required: false
      responses:
        '200':
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    delete:
      tags:
        - Cart Items
      summary: Delete a Cart Item
      description: Use this endpoint to delete a cart item.
      operationId: deleteACartItem
      parameters:
        - name: cartID
          in: path
          description: The unique identifier of the cart created by you.
          required: true
          style: simple
          schema:
            type: string
        - name: cartitemID
          in: path
          description: The unique identifier of the cart that you want to delete.
          required: true
          style: simple
          schema:
            type: string
      responses:
        '204':
          description: No Content
          headers: {}
          content: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/carts/{cartID}/relationships/accounts:
    post:
      tags:
        - Account Cart Associations
      summary: Create an Account Cart Association
      description: >-
        You can create associations between an account and one or more carts.
        After cart associations exist for an account, the account can access
        those carts across any device.
      operationId: createAccountCartAssociation
      parameters:
        - name: cartID
          in: path
          description: >-
            The ID for the cart created by the account. Ensure that you follow
            the guidelines for [Safe
            Characters](/guides/Getting-Started/safe-characters).
          required: true
          style: simple
          schema:
            type: string
        - name: EP-Account-Management-Authentication-Token
          in: header
          description: >-
            An Account Management Authentication token to access a specific
            account's carts.
          style: simple
          schema:
            type: string
            examples:
              - '{{accountToken}}'
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CartsRelationshipsAccountsData'
        required: false
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/CartsRelationshipsAccountsData'
        '204':
          description: >-
            No Content is sent back in case the account has already been
            associated to the cart.
          headers: {}
          content: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    delete:
      tags:
        - Account Cart Associations
      summary: Delete Account Cart Association
      description: You can delete an association between an account and a cart.
      operationId: deleteAccountCartAssociation
      parameters:
        - name: cartID
          in: path
          description: The ID for the cart created by the account.
          required: true
          style: simple
          schema:
            type: string
        - name: EP-Account-Management-Authentication-Token
          in: header
          description: >-
            An Account Management Authentication token to access a specific
            account's carts.
          style: simple
          schema:
            type: string
            examples:
              - '{{accountToken}}'
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CartsRelationshipsAccountsData'
        required: false
      responses:
        '204':
          description: No Content
          headers: {}
          content: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/carts/{cartID}/relationships/customers:
    post:
      tags:
        - Customer Cart Associations
      summary: Create a Customer Cart Association
      description: >-
        You can create associations between a customer and one or more carts.
        After cart associations exist for a customer, the customer can access
        those carts across any device.
      operationId: createCustomerCartAssociation
      parameters:
        - name: cartID
          in: path
          description: >-
            The ID for the cart created by the customer. Ensure that you follow
            the guidelines for [Safe
            Characters](/guides/Getting-Started/safe-characters).
          required: true
          style: simple
          schema:
            type: string
        - name: x-moltin-customer-token
          in: header
          description: A customer token to access a specific customer's carts.
          style: simple
          schema:
            type: string
            examples:
              - '{{customerToken}}'
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CartsRelationshipsCustomersData'
        required: false
      responses:
        '200':
          description: OK
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/CartsRelationshipsCustomersData'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    delete:
      tags:
        - Customer Cart Associations
      summary: Delete Customer Cart Association
      description: You can delete an association between a customer and a cart.
      operationId: deleteCustomerCartAssociation
      parameters:
        - name: cartID
          in: path
          description: The ID for the cart created by the customer.
          required: true
          style: simple
          schema:
            type: string
        - name: x-moltin-customer-token
          in: header
          description: A customer token to access a specific customer's carts.
          style: simple
          schema:
            type: string
            examples:
              - '{{customerToken}}'
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CartsRelationshipsCustomersData'
        required: false
      responses:
        '204':
          description: No Content
          headers: {}
          content: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/carts/{cartID}/discounts/{promoCode}:
    delete:
      tags:
        - Cart Items
      summary: Delete a Promotion via Promotion Code
      description: >-
        You can remove promotion code from a cart if it was applied manually.
        This endpoint does not work if the promotion is applied automatically.
      operationId: deleteAPromotionViaPromotionCode
      parameters:
        - name: cartID
          in: path
          description: Specifies the unique identifier of a cart created by you.
          required: true
          style: simple
          schema:
            type: string
        - name: promoCode
          in: path
          description: Specifies the promotion code to be deleted.
          required: true
          style: simple
          schema:
            type: string
      responses:
        '204':
          description: No Content
          headers: {}
          content: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/carts/{cartID}/items/{cartitemID}/taxes:
    post:
      tags:
        - Tax Items
      summary: Add Tax Item to Cart
      description: >

        Use this endpoint to add a tax item to a cart.


        :::note


        There is a soft limit of 5 unique tax items per cart item at any one
        time.


        :::
      operationId: addTaxItemToCart
      parameters:
        - name: cartID
          in: path
          description: The unique identifier of the cart.
          required: true
          style: simple
          schema:
            type: string
        - name: cartitemID
          in: path
          description: The unique identifier of the cart item.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Response.Data'
                - properties:
                    data:
                      $ref: '#/components/schemas/CartsItemsTaxesObject'
        required: false
      responses:
        '200':
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response.Data'
                  - properties:
                      data:
                        $ref: '#/components/schemas/CartsItemsTaxesObject'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
        '422':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 422
                  title: Unprocessable Entity
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/carts/{cartID}/taxes:
    post:
      tags:
        - Tax Items
      summary: Bulk Add Tax Items to Cart
      description: >
        :::note


        A cart item can only have a maximum of five tax items.


        :::


        ### Errors


        `422 Unprocessable Entity`


        In this example, when `options.add_all_or_nothing` is set to `true` and
        if one of cart items is not found or has reached its maximum tax item
        limit, the following error response is returned:


        ```json

        {
                    "status": 422,
                    "title": "Add all or nothing.",
                    "detail": "Add all or nothing set to (true). Could not bulk add tax items to cart."
                }

        ```


        In this example, if you add more than five tax items to the same cart
        item, the following error response is returned:


        ```json

        {
                    "status": 422,
                    "title": "Tax item not added to cart item.",
                    "detail": "Cannot exceed tax item limit of (5) on cart item.",
                    "meta": {
                        "id": "f88e6370-cb35-40b2-a998-c759f31dec0a"
                    }
                }
        ```


        `404`


        In this example, if there is a mismatch between
        `cart_item`/`custom_item` and the `relationships.item.data.type`
        specified in the bulk add tax item, the following error response is
        returned:


        ```json

        {
            "data": [],
            "errors": [
                {
                    "status": 404,
                    "title": "Tax item not added to cart item.",
                    "detail": "Mismatch between bulk tax item type(cart_item) and cart item type(custom_item).",
                    "meta": {
                        "id": "56aab5d1-1dd4-45ed-88ed-4d0cc396b62d"
                    }
                },
                {
                    "status": 404,
                    "title": "Tax item not added to cart item.",
                    "detail": "Mismatch between bulk tax item type(cart_item) and cart item type(custom_item).",
                    "meta": {
                        "id": "56aab5d1-1dd4-45ed-88ed-4d0cc396b62d"
                    }
                }
            ]
        }

        ```
      operationId: bulkAddTaxItemsToCart
      parameters:
        - name: cartID
          in: path
          description: The unique identifier of the cart.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CartsBulkTaxes'
        required: false
      responses:
        '200':
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/CartsBulkTaxes'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    delete:
      tags:
        - Tax Items
      summary: Bulk Delete Tax Items from Cart
      description: Use this endpoint to bulk delete tax items from cart.
      operationId: bulkDeleteTaxItemsFromCart
      parameters:
        - name: cartID
          in: path
          description: The unique identifier of the cart.
          required: true
          style: simple
          schema:
            type: string
      responses:
        '204':
          description: No Content
          headers: {}
          content: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/carts/{cartID}/items/{cartitemID}/taxes/{taxitemID}:
    put:
      tags:
        - Tax Items
      summary: Update a Tax Item
      description: Use this endpoint to update a tax item.
      operationId: updateATaxItem
      parameters:
        - name: cartID
          in: path
          description: The unique identifier of the cart.
          required: true
          style: simple
          schema:
            type: string
        - name: cartitemID
          in: path
          description: The unique identifier of the cart item.
          required: true
          style: simple
          schema:
            type: string
        - name: taxitemID
          in: path
          description: The unique identifier of the tax item.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Response.Data'
                - properties:
                    data:
                      $ref: '#/components/schemas/CartsItemsTaxesObject'
        required: false
      responses:
        '200':
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response.Data'
                  - properties:
                      data:
                        $ref: '#/components/schemas/CartsItemsTaxesObject'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    delete:
      tags:
        - Tax Items
      summary: Delete a Tax Item
      description: Use this endpoint to delete a tax item.
      operationId: deleteATaxItem
      parameters:
        - name: cartID
          in: path
          description: The unique identifier of the cart.
          required: true
          style: simple
          schema:
            type: string
        - name: cartitemID
          in: path
          description: The unique identifier of the cart item.
          required: true
          style: simple
          schema:
            type: string
        - name: taxitemID
          in: path
          description: The unique identifier of the tax item.
          required: true
          style: simple
          schema:
            type: string
      responses:
        '204':
          description: No Content
          headers: {}
          content: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/carts/{cartID}/custom-discounts:
    post:
      tags:
        - Custom Discounts
      summary: Bulk Add Custom Discounts to Cart
      description: >
        The default value for custom discounts on both the cart and cart items
        is set to 5 if this parameter is not configured in the store. To verify
        the custom discount limit value, call [Get all
        settings](/docs/api/settings/get-v-2-settings) endpoint.


        To increase the custom discount value, contact [Elastic Path Support
        team](https://support.elasticpath.com/hc/en-us).
      operationId: bulkAddCustomDiscountsToCart
      parameters:
        - name: cartID
          in: path
          description: >-
            Specifies the system generated ID for the cart that the shopper
            created.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CartsBulkCustomDiscounts'
        required: false
      responses:
        '200':
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/CartsBulkCustomDiscountsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    delete:
      tags:
        - Custom Discounts
      summary: Bulk Delete Custom Discounts From Cart
      description: Use this endpoint to bulk delete custom discounts from cart.
      operationId: bulkDeleteCustomDiscountsFromCart
      parameters:
        - name: cartID
          in: path
          description: Specifies the unique ID for the cart.
          required: true
          style: simple
          schema:
            type: string
      responses:
        '204':
          description: No Content
          headers: {}
          content: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/carts/{cartID}/custom-discounts/{customdiscountID}:
    put:
      tags:
        - Custom Discounts
      summary: Update Custom Discount For Cart
      description: Use this endpoint to update a custom discount in your cart.
      operationId: updateCustomDiscountForCart
      parameters:
        - name: cartID
          in: path
          description: Specifies the unique ID for the cart.
          required: true
          style: simple
          schema:
            type: string
        - name: customdiscountID
          in: path
          description: Specifies the ID for the custom discount to be updated.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Response.Data'
                - properties:
                    data:
                      $ref: '#/components/schemas/CartsCustomDiscountsObject'
        required: false
      responses:
        '200':
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response.Data'
                  - properties:
                      data:
                        $ref: '#/components/schemas/CartsCustomDiscountsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    delete:
      tags:
        - Custom Discounts
      summary: Delete Custom Discount From Cart
      description: Use this endpoint to delete custom discount from cart.
      operationId: deleteCustomDiscountFromCart
      parameters:
        - name: cartID
          in: path
          description: Specifies the unique ID for the cart.
          required: true
          style: simple
          schema:
            type: string
        - name: customdiscountID
          in: path
          description: Specifies the ID for the custom discount to be deleted.
          required: true
          style: simple
          schema:
            type: string
      responses:
        '204':
          description: No Content
          headers: {}
          content: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/carts/{cartID}/items/{cartitemID}/custom-discounts:
    post:
      tags:
        - Custom Discounts
      summary: Add Custom Discount To Cart Item
      description: Use this endpoint to add a custom discount to cart item.
      operationId: addCustomDiscountToCartItem
      parameters:
        - name: cartID
          in: path
          description: Specifies the ID for the cart.
          required: true
          style: simple
          schema:
            type: string
        - name: cartitemID
          in: path
          description: Specifies the unique identifier for the cart item.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CartsCustomDiscountsObject'
          required: false
      responses:
        '200':
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response.Data'
                  - properties:
                      data:
                        $ref: '#/components/schemas/CartsCustomDiscountsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/carts/{cartID}/items/{cartitemID}/custom-discounts/{customdiscountID}:
    put:
      tags:
        - Custom Discounts
      summary: Update Custom Discount For Cart Item
      description: Use this endpoint to update a custom discount in your cart item.
      operationId: updateCustomDiscountForCartItem
      parameters:
        - name: cartID
          in: path
          description: Specifies the ID for the cart.
          required: true
          style: simple
          schema:
            type: string
        - name: cartitemID
          in: path
          description: Specifies the ID for the cart item.
          required: true
          style: simple
          schema:
            type: string
        - name: customdiscountID
          in: path
          description: Specifies the ID for the custom discount to be updated.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Response.Data'
                - properties:
                    data:
                      $ref: '#/components/schemas/CartsCustomDiscountsObject'
          required: false
      responses:
        '200':
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response.Data'
                  - properties:
                      data:
                        $ref: '#/components/schemas/CartsCustomDiscountsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    delete:
      tags:
        - Custom Discounts
      summary: Delete Custom Discount From Cart Item
      description: Use this endpoint to delete custom discount from cart item.
      operationId: deleteCustomDiscountFromCartItem
      parameters:
        - name: cartID
          in: path
          description: Specifies the ID for the cart.
          required: true
          style: simple
          schema:
            type: string
        - name: cartitemID
          in: path
          description: Specifies the ID for the cart item.
          required: true
          style: simple
          schema:
            type: string
        - name: customdiscountID
          in: path
          description: Specifies the ID for the custom discount to be deleted.
          required: true
          style: simple
          schema:
            type: string
      responses:
        '204':
          description: No Content
          headers: {}
          content: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/carts/{cartID}/payments:
    post:
      tags:
        - Payments
      summary: Create Stripe Payment Intent for a Cart
      description: >
        The Cart Payment Intent feature enables the creation of a Stripe Payment
        Intent specifically tied to a shopping cart and its subsequent order.
        This allows Payment Intent users to track payment details from the cart
        stage and seamlessly maintain consistency in payment information
        throughout the order stage. Using these features, you can create Payment
        Intents for their carts, update Payment Intents with final cart details,
        and synchronize Payment Intents from Stripe to Commerce.


        :::note


        - Typically, in Commerce, inventory is allocated at the time of payment
        initiation after an order is created. However, in the case of Cart
        Payment Intent, information about the payment is received only upon
        synchronizing the order from Stripe to Commerce. This may happen after
        the payment is completed. Therefore, there might be a delay between the
        payment made and allocation, increasing the chance of paying for items
        that are not in stock.

        - There are certain fields you can choose to set up when [creating a
        payment intent](https://stripe.com/docs/api/payment_intents/create).
        However, if you decide to update a payment intent, the available options
        may not be the same as those allowed while creating a payment intent.
        See [updating a payment
        intent](https://stripe.com/docs/api/payment_intents/update).


        :::


        The following steps outline the workflow associated with the Payment
        Intent:


        1. [Add items to
        cart](/docs/api/carts/manage-carts#add-custom-item-to-cart).

        1. [Create a Payment Intent for the
        cart](/docs/api/carts/create-cart-payment-intent). The Payment Intent is
        created in Stripe, reflecting the cart and transaction details,
        including currency, amounts, payment type, and any optional Stripe
        details. The Payment Intent ID is generated and linked to the cart.

        1. [Update a Payment
        Intent](/docs/carts-orders/update-cart-payment-intent). This step is
        optional but becomes necessary when there are changes in the cart
        details at the time of payment. It ensures the Payment Intent accurately
        reflects the current cart details when processing the payments on the
        front end.

        1. [Checkout the cart](/docs/api/carts/checkout). An unpaid order is
        created, and the Payment Intent ID is linked to the order.

        1. [Confirm the order](/docs/carts-orders/confirm-an-order). This is
        important because after checkout, it is essential to confirm the Payment
        Intent and synchronize it with Commerce. This results in a corresponding
        transaction and change in order statuses in Commerce. Additionally, the
        Payment Intent ID is removed from the order once it is linked via the
        transaction.


        ### Best Practices


        We recommend you follow these practices to maintain consistency and
        accuracy when using Cart Payment Intent.


        - After checkout, we recommend clearing the shopping cart. You can
        achieve this using a [Delete a cart](/docs/api/carts/delete-a-cart)
        endpoint or [Update a cart](/docs/api/carts/update-a-cart) to remove the
        Payment Intent ID. This helps to avoid potential issues where subsequent
        checkouts for the same cart might unintentionally use the previous
        Stripe Payment Intent ID.

        - If it is not reasonable to clear the cart immediately after checkout
        due to several subsequent, duplicate checkouts to the same cart, ensure
        that you only synchronize the Payment Intent when finalizing the order.
        Each order confirmation is unaware of the others, and syncing Payment
        Intent IDs for each confirmation can lead to duplicate transactions in
        Commerce. In other words, if you synchronize Payment Intents for earlier
        versions of a repeated checkout, you'll end up with multiple orders from
        the same cart, each having transactions linked to the same Payment
        Intent.

        - To pay the entire amount at once, use the [Update Cart Payment
        Intent](/docs/carts-orders/update-cart-payment-intent) endpoint to
        update the Stripe Payment Intent with the final cart details when
        preparing to take the payment. Doing so, ensures that the Payment Intent
        accurately reflects the current cart details when processing payments on
        the front end. We do not recommend calling the [Update Cart Payment
        Intent](/docs/carts-orders/update-cart-payment-intent) for each
        individual change in the cart, as this can lead to more requests and may
        slow down the front-end performance.
      operationId: createCartPaymentIntent
      parameters:
        - name: cartID
          in: path
          required: true
          style: simple
          schema:
            type: string
          description: >-
            The universally unique identifier of the cart for which you want to
            create a payment intent.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElasticPathPaymentsPoweredByStripePayment'
            examples:
              Create Stripe Payment Intent for a Cart:
                value:
                  data:
                    gateway: elastic_path_payments_stripe
                    method: purchase
                    options:
                      automatic_payment_methods:
                        enabled: true
                      receipt_email: john@example.com
              Create Stripe Payment Intent for a Cart Using Specific Payment Methods:
                value:
                  data:
                    gateway: elastic_path_payments_stripe
                    method: purchase
                    payment_method_types:
                      - affirm
                      - card
                      - link
                    options:
                      description: Cart payment
                      receipt_email: john@example.com
      responses:
        '201':
          description: Payment Intent created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/carts/{cartID}/checkout:
    post:
      tags:
        - Checkout
      summary: Checkout API
      description: >
        When a Cart is ready for checkout, you can convert the cart to an order.
        The cart remains and can be modified and checked out again if required.


        A cart can be checked out with a customer ID, customer object, or with
        an account by authenticating with the `Client Credentials Token`.


        After a successful checkout, a response that contains the order is
        returned. If the cart is linked to a shipping group, the shipping group
        is also associated with the order after checkout.


        You can checkout using one of the following methods:

        - **Customer ID**: You can checkout a cart with an existing customer ID.

        - **Guest Checkout** (Checkout with Customer Object): You can checkout a
        cart with an associated customer name and email.

        - **Checkout with Account**: The shopper authenticates with the `Client
        Credentials` Token.

        - **Checkout with Account Management Authentication Token**: The shopper
        authenticates with the `Implicit Token` and the
        `EP-Account-Management-Authentication-Token`.


        :::note


        - The cart currency is set when the first item is added to the cart.

        - The product being added to the cart requires a price in the same
        currency as the other items in the cart. The API returns a 400 error if
        a price is not defined in the correct currency.

        - To ensure that a free gift is automatically applied to an order, set
        the promotion to automatic. The checkout process will not be successful
        if free gift items are out of stock. See [Errors](#errors) section.


        :::


        :::caution


        - By default, carts are automatically deleted 7 days after the last
        update. You can change this setting by [updating cart
        settings](/docs/api/settings/put-v-2-settings-cart).

        - Your inventory is modified during checkout and payment of an order.
        For more information about the changes in the inventory, see the
        [Inventory](/docs/api/pxm/inventory/inventories-introduction) section.


        :::

         You can pass `order_number` and `external_ref` in the checkout endpoint or when [updating an order](/docs/api/carts/update-an-order). The `order_number` is an optional, user-managed field that is used as an alternative to `order_id`. When processing transactions through Authorize.net, the `order_number` is sent instead of the `order_id`, and it will appear in the invoice number section. If no `order_number` is provided, the `order_id` is sent to Authorize.net on payment by default. There are no duplication restrictions on the `order_number` value.

        ### Next Steps


        After a cart has been converted to an Order using either of the previous
        methods, you most likely want to capture payment for order. See [Paying
        for an Order](/docs/api/carts/payments).


        ### Errors


        The following error response is returned during checkout when an
        eligible item is added to the cart, and the free gift is out of stock.


        ```json

        {
            "errors": [
                {
                    "status": 400,
                    "title": "Insufficient stock",
                    "detail": "There is not enough stock to add gift2 to your cart",
                    "meta": {
                        "id": "f2b68648-9621-45a3-aed6-1b526b0f5beb",
                        "sku": "gift2"
                    }
                }
            ]
        }

        ```
      operationId: checkoutAPI
      parameters:
        - name: cartID
          in: path
          description: The ID of the cart that you want to checkout.
          required: true
          style: simple
          schema:
            type: string
        - name: EP-Account-Management-Authentication-Token
          in: header
          description: >-
            An account management authentication token that identifies the
            authenticated account member.
          style: simple
          schema:
            type: string
            examples:
              - '{{accountToken}}'
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CustomerCheckout'
                - $ref: '#/components/schemas/AccountCheckout'
            examples:
              CheckoutWithCustomerID:
                summary: Checkout with Customer ID
                value:
                  data:
                    order_number: 1234
                    external_ref: e-123456789
                    customer:
                      id: c8c1c511-beef-4812-9b7a-9f92c587217c
                    billing_address:
                      first_name: John
                      last_name: Doe
                      company_name: Moltin
                      line_1: 1234 Disney Drive
                      line_2: Disney Resort
                      city: Anaheim
                      county: Orange
                      region: CA
                      postcode: 92802
                      country: US
                    shipping_address:
                      first_name: John
                      last_name: Doe
                      phone_number: (555) 555-1234
                      company_name: Moltin
                      line_1: 1234 Disney Drive
                      line_2: Disney Resort
                      city: Anaheim
                      county: Orange
                      region: CA
                      postcode: 92802
                      country: US
                      instructions: Leave in porch
              CheckoutWithCustomerObject:
                summary: Guest Checkout (Checkout with Customer Object)
                value:
                  data:
                    order_number: 1234
                    external_ref: e-123456789
                    customer:
                      email: john@moltin.com
                      name: John Doe
                    billing_address:
                      first_name: John
                      last_name: Doe
                      company_name: Moltin
                      line_1: 1234 Disney Drive
                      line_2: Disney Resort
                      city: Anaheim
                      county: Orange
                      region: CA
                      postcode: 92802
                      country: US
                    shipping_address:
                      first_name: John
                      last_name: Doe
                      phone_number: (555) 555-1234
                      company_name: Moltin
                      line_1: 1234 Disney Drive
                      line_2: Disney Resort
                      city: Anaheim
                      county: Orange
                      region: CA
                      postcode: 92802
                      country: US
                      instructions: Leave in porch
              CreateCheckoutWithAccount:
                summary: Create Checkout with Account
                value:
                  data:
                    order_number: 1234
                    external_ref: e-123456789
                    account:
                      id: 8cee1b9e-3e39-4d5f-bd4a-86cdb985c6ee
                      member_id: 338f84bf-e6c9-4704-9f33-2708addd462b
                    contact:
                      email: john@email.com
                      name: John Doe
                    billing_address:
                      first_name: John
                      last_name: Doe
                      company_name: ElasticPath
                      line_1: 1234 Disney Drive
                      line_2: Disney Resort
                      city: Anaheim
                      county: Orange
                      region: CA
                      postcode: 92802
                      country: US
                    shipping_address:
                      first_name: John
                      last_name: Doe
                      company_name: ElasticPath
                      phone_number: (555) 555-1234
                      line_1: 1234 Disney Drive
                      line_2: Disney Resort
                      city: Anaheim
                      county: Orange
                      region: CA
                      postcode: 92802
                      country: US
                      instructions: Leave in porch
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response.Data'
                  - properties:
                      data:
                        $ref: '#/components/schemas/OrderResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/orders:
    get:
      tags:
        - Orders
      summary: Get all Orders
      description: >
        This endpoint returns all orders with custom flow fields. The pagination
        offset is set to fetch a maximum of 10,000 orders. If the store has
        10,000 orders and you fetch the orders without using filters, an error
        is returned. Use a filter to view orders when the order is beyond the
        10,000 mark.


        :::note


        - Pass the `X-Moltin-Customer-Token` header to limit orders to a
        specific customer. See [Customer
        Tokens](/docs/customer-management/customer-management-api/customer-tokens).

        - Pass the `EP-Account-Management-Authentication-Token` header to limit
        orders to a specific account. See [Account Management
        Token](/docs/api/accounts/post-v-2-account-members-tokens).

        - You can use pagination with this resource. For more information, see
        [pagination](/guides/Getting-Started/pagination).


        :::


        ### Filtering


        The following operators and attributes are available for filtering
        orders.


        | Attribute | Type | Operator | Example |

        | :--- | :--- | :--- | :--- |

        | `status` | `string` | `eq` | `eq(status,complete)` |

        | `payment` | `string` | `eq` | `eq(payment,paid)` |

        | `shipping` | `string` | `eq` | `eq(shipping,unfulfilled)` |

        | `name` (`customer.name`) | `string` | `eq` / `like` |
        `like(name,Brad*)` |

        | `email` (`customer.email`) | `string` | `eq` / `like` |
        `like(email,*@elasticpath.com)` |

        | `customer_id` | `string` | `eq` / `like` | `eq(customer_id,
        e5a0d684-a4af-4919-a348-f66b0b4955e0)` |

        | `account_id` | `string` | `eq` / `like` |
        `eq(account_id,3d7200c9-a9bc-4085-9822-63e80fd94a09)` |

        | `account_member_id` | `string` | `eq` / `like` |
        `eq(account_member_id,2a8a3a92-2ccd-4b2b-a7af-52d3896eaecb)` |

        | `contact.name` | `string` | `eq` / `like` | `eq(name,John Doe)` |

        | `contact.email` | `string` | `eq` / `like` | `eq(email,John Doe)` |

        | `shipping_postcode` | `string` | `eq` / `like` |
        `like(shipping_postcode,117*)` |

        | `billing_postcode` | `string` | `eq` / `like` |
        `like(billing_postcode,117*)` |

        | `with_tax` | `integer` | `gt`/`ge`/`lt`/`le` | `ge(with_tax,10000)` |

        | `without_tax` | `integer` | `gt`/`ge`/`lt`/`le` |
        `ge(without_tax,10000)` |

        | `currency` | `string` | `eq` | `eq(currency,USD)` |

        | `product_id` | `string` | `eq` |
        `eq(product_id,6837058c-ae42-46db-b3c6-7f01e0c34b40)` |

        | `product_sku` | `string` | `eq` | `eq(product_sku,deck-shoe-001)` |

        | `created_at` | `date` | `eq` / `gt` / `ge`/ `le` / `lt` |
        `gt(created_at,YYYY-MM-DD)` |

        | `updated_at` | `date` | `eq` / `gt` / `ge`/ `le`/ `lt` |
        `lt(updated_at,YYYY-MM-DD)` |

        | `external_ref` | `string` | `eq` / `like` | `like(external_ref,
        16be*)` |

        | `order_number` | `string` | `eq` / `like` | `like(order_number, 123*)`
        |
      operationId: getCustomerOrders
      parameters:
        - name: x-moltin-customer-token
          in: header
          description: A customer token to access a specific customer's orders.
          style: simple
          schema:
            type: string
            examples:
              - '{{customerToken}}'
      responses:
        '200':
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response.Data'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/OrderResponse'
                      links:
                        $ref: '#/components/schemas/Response.PageLinks'
                      meta:
                        $ref: '#/components/schemas/Response.Meta.Orders'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/orders/{orderID}:
    get:
      tags:
        - Orders
      summary: Get an Order
      description: Use this endpoint to retrieve a specific order.
      operationId: getAnOrder
      parameters:
        - name: orderID
          in: path
          description: The ID of the order.
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response.Data'
                  - properties:
                      data:
                        $ref: '#/components/schemas/OrderResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    put:
      tags:
        - Orders
      summary: Update an Order
      description: >
        You can only update custom data, `shipping`, `shipping_address`, and
        status of orders. All other settings in the order object are immutable.

         This endpoint allows you to:

        - **Update an order number and external reference**: You can update an
        existing order that does not have an `order_number` and `external_ref`,
        modify the `order_number` and `external_ref` values, or remove them by
        passing an empty value in the `order_number` and `external_ref` fields.

        - **Cancel an order**: You can cancel an order only if it has not been
        fulfilled.

        - **Fulfill an order**: You can fulfill a paid order only.


        :::caution


        You can update `shipping`, `shipping_address`, and status of an order
        only if the order is not fulfilled. You can use the refund API to refund
        an order only if the payment status is `paid`. Canceling an order does
        not automatically refund a payment. You must refund the orders manually.


        :::


        :::note


        - This request is only accessible to client credentials token users with
        Seller Admin role.

        - Non client credentials token users cannot access this endpoint. See
        [Permissions](/docs/authentication/Tokens/permissions).

        - The `order_number` will appear as the invoice number in Authorize.net
        transactions.


        :::
      operationId: updateAnOrder
      parameters:
        - name: orderID
          in: path
          description: The unique identifier of the order.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/OrdersUpdateRequest'
            examples:
              CancelAnOrder:
                summary: Cancel an Order
                value:
                  data:
                    type: order
                    status: cancelled
              FulfillAnOrder:
                summary: Fulfill an Order by ID. You can fulfill a paid order only.
                value:
                  data:
                    type: order
                    shipping: fulfilled
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response.Data'
                  - properties:
                      data:
                        $ref: '#/components/schemas/OrderResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/orders/{orderID}/items:
    get:
      tags:
        - Orders
      summary: Get Order Items
      description: Use this endpoint to retrieve order items.
      operationId: getOrderItems
      parameters:
        - name: orderID
          in: path
          description: The ID of the order.
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response.Data'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/OrderItemResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/orders/anonymize:
    post:
      tags:
        - Orders
      summary: Anonymize Orders
      description: >
        You can anonymize an order when it is fulfilled, canceled, or fully
        refunded.


        When anonymization is successful, Personal Identifiable Information such
        as customer details, `shipping_address`, and `billing_address` are
        replaced with *.
      operationId: anonymizeOrders
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/OrdersAnonymizeRequest'
                - examples:
                    - data:
                        order_ids:
                          - '{{orderID}}'
              contentMediaType: application/json
            examples:
              default:
                value:
                  data:
                    order_ids:
                      - '{{orderID}}'
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response.Data'
                  - properties:
                      data:
                        $ref: '#/components/schemas/OrderResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
        '422':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  detail: >-
                    Order has status: order:incomplete, payment:unpaid,
                    shipping:unfulfilled; only fulfilled or refunded or
                    cancelled orders may be anonymized
                  status: 422
                  title: Could not anonymize orders
                  meta:
                    order_id: 496c29a1-6e7a-4ab6-a4e7-d1ec9a08b85e
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/orders/{orderID}/payments:
    post:
      tags:
        - Payments
      summary: Payment Setup
      description: >
        Depending on the payment gateway, you may have access to different
        transaction types such as capturing funds immediately or authorizing
        them for later. For more information, see
        [Transactions](/docs/api/carts/transactions).


        The following types of payment methods are available depending on the
        payment gateway:


        - `purchase`: This is the simplest method. The gateway attempts to
        charge the customer immediately.

        - `authorize`: This method authorizes a payment so that funds can be
        captured later, for example, when an item is dispatched or restocked.

        - `purchase_setup`: This method prepares the system for a purchase by
        verifying payment details without actually charging the customer. For
        example, a customer adds items to their cart and proceeds to checkout.
        Before finalizing the purchase, the system runs `purchase_setup` to
        confirm all payment details, but no funds are transferred until the
        customer confirms the order.

        - `authorize_setup`: This method prepares the system for an
        authorization-only transaction. This process holds the necessary funds
        but does not transfer them, ensuring that the customer has sufficient
        balance for the transaction. It sets up the conditions for a future
        capture of the authorized funds. For example, a customer places a
        pre-order for a product that will ship in two weeks. The merchant uses
        `authorize_setup` to prepare for the payment authorization. This holds
        the customer's funds to ensure they can cover the purchase but waits to
        capture the payment until the product ships. This ensures that payment
        is secured but not collected prematurely.


        :::note


        Split payments can be performed using any methods for any gateway.


        - You can partially pay funds using `purchase` method. The gateway
        attempts to charge the customer immediately, and the payment status for
        an order will show `partially_paid`

        - You can partially pay for an order using `authorize` method where the
        order will be marked as `partially_authorized`. The transaction must be
        completed for the order status to be `partially_authorized`.

        - A `purchase_setup` method allows verification of payment details for
        partial payments without transferring funds until the customer confirms
        the full order.

        - An `authorize_setup` method can be used to hold a partial amount of
        the total funds, ensuring the customer has enough balance for a future
        capture.

        Until a payment is made neither `purchase_setup` nor `authorize_setup`
        affects the payment statuses, and the order remains unpaid. For more
        information about order and payment statuses for split payments, see
        [Split
        payments](/docs/api/payments/payment-gateways-introduction#split-payments).


        :::
      operationId: paymentSetup
      parameters:
        - name: orderID
          in: path
          description: >-
            The Universally Unique Identifier (UUID) of the order you want to
            pay for.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/PaymentsRequest'
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response.Data'
                  - properties:
                      data:
                        $ref: '#/components/schemas/TransactionResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/orders/{orderID}/transactions/{transactionID}/confirm:
    post:
      tags:
        - Payments
      summary: Confirm Payment
      description: >
        Confirm Payment serves as a mechanism to synchronize transaction
        information from the third-party payment provider back to our system.
        This ensures that Composable Commerce accurately reflects the values
        from the payment provider.


        ### Handling 3D Secure Validations for Stripe Payments


        For Stripe Payments requiring 3D Secure validation, the transaction
        response will include the `client_parameters` object, which provides
        credentials to support validation of these payment requests on the
        payment provider's side. We recommend using the Stripe's client
        libraries to manage these 3D Secure validations. Once the validation
        succeeds, proceed with a confirmation request to sync the validated
        transaction into Composable Commerce and continue with the payment
        process.
      operationId: confirmPayment
      parameters:
        - name: orderID
          in: path
          description: The unique identifier of the order.
          required: true
          style: simple
          schema:
            type: string
        - name: transactionID
          in: path
          description: The unique identifier of the transaction.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/OrdersTransactionsConfirmRequest'
      responses:
        '200':
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response.Data'
                  - properties:
                      data:
                        $ref: '#/components/schemas/TransactionResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/orders/{orderID}/transactions/{transactionID}/capture:
    post:
      tags:
        - Transactions
      summary: Capture a Transaction
      description: >-
        Use this endpoint to capture a previously authorized payment. In this
        step, you can also pass in a custom reference, such as the payment
        reference from your chosen gateway.
      operationId: captureATransaction
      parameters:
        - name: orderID
          in: path
          description: The UUID of the order.
          required: true
          style: simple
          schema:
            type: string
        - name: transactionID
          in: path
          description: The UUID of the transaction to capture.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/OrdersTransactionsCaptureRequest'
        required: false
      responses:
        '200':
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response.Data'
                  - properties:
                      data:
                        $ref: '#/components/schemas/TransactionResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/orders/{orderID}/transactions/{transactionID}/refund:
    post:
      tags:
        - Transactions
      summary: Refund a Transaction
      description: >
        There are two ways to refund; through your payment gateway and mark it
        refunded in Commerce Manager, or directly through Commerce Manager or
        API.


        * Mark as Refunded: You can manually mark a transaction as refunded.
        Before you can mark the order as refunded, you need to handle the actual
        refund on your side with your payment provider. Mark as Refunded is a
        full refund made to the transaction.

        * Refund through Composable Commerce: You can process a full or partial
        refund to a supported payment provider directly from Commerce Manager or
        API by providing the refund amount. When you start the refund process,
        the request is directly sent to the payment gateway.


        :::caution


        If you use manual gateway for partial or full refund, you need to handle
        the actual refund on your side with your payment provider.


        :::
      operationId: refundATransaction
      parameters:
        - name: orderID
          in: path
          description: The UUID of the order.
          required: true
          style: simple
          schema:
            type: string
        - name: transactionID
          in: path
          description: The UUID of the transaction you want to refund.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/OrdersTransactionsRefundRequest'
        required: false
      responses:
        '200':
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response.Data'
                  - properties:
                      data:
                        $ref: '#/components/schemas/TransactionResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/orders/{orderID}/transactions:
    get:
      tags:
        - Transactions
      summary: Get Order Transactions
      description: Get order transactions
      operationId: getOrderTransactions
      parameters:
        - name: orderID
          in: path
          description: The unique identifier of the order.
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response.Data'
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/TransactionResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/orders/{orderID}/transactions/{transactionID}:
    get:
      tags:
        - Transactions
      summary: Get a Transaction
      description: Retrieves a transaction
      operationId: getATransaction
      parameters:
        - name: orderID
          in: path
          description: >-
            The unique identifier of the order that you require transactions
            for.
          required: true
          style: simple
          schema:
            type: string
        - name: transactionID
          in: path
          description: The unique identifier of the transaction.
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response.Data'
                  - properties:
                      data:
                        $ref: '#/components/schemas/TransactionResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/orders/{orderID}/transactions/{transactionID}/cancel:
    post:
      tags:
        - Transactions
      summary: Cancel a Transaction
      description: >
        Use this endpoint to cancel or void a pending or authorized transaction.
        The transaction can be canceled or voided when it is in `pending` and
        `completed` statuses.


        :::caution


        This endpoint works only for Stripe and PayPal and does not work for
        manual gateway.


        :::
      operationId: cancelATransaction
      parameters:
        - name: orderID
          in: path
          description: The unique identifier of the order.
          required: true
          style: simple
          schema:
            type: string
        - name: transactionID
          in: path
          description: The unique identifier of the transaction to be canceled or voided.
          required: true
          style: simple
          schema:
            type: string
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/OrdersTransactionsCancelRequest'
        required: false
      responses:
        '200':
          description: ''
          headers: {}
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response.Data'
                  - properties:
                      data:
                        $ref: '#/components/schemas/TransactionResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response.Error'
              example:
                errors:
                  status: 401
                  title: Unauthorized
      deprecated: false
      security:
        - bearerAuth: []
    parameters: []
  /v2/subscriptions/products/{product_uuid}:
    parameters:
      - name: product_uuid
        in: path
        description: The unique identifier of a product.
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionsUUID'
    get:
      operationId: GetSubscriptionProduct
      summary: Get product
      responses:
        '200':
          description: Success. The product details are returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/SubscriptionsValidationError'
        '404':
          $ref: '#/components/responses/SubscriptionsNotFoundError'
        '500':
          $ref: '#/components/responses/SubscriptionsInternalServerError'
      tags:
        - Products
      x-sdk-filter:
        - shopper
      security:
        - BearerToken: []
  /v2/subscriptions/plans/{plan_uuid}:
    parameters:
      - name: plan_uuid
        in: path
        description: The unique identifier of the plan.
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionsUUID'
    get:
      operationId: GetPlan
      summary: Get plan
      responses:
        '200':
          description: Success. The details of the plan are returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Plan'
        '400':
          $ref: '#/components/responses/SubscriptionsValidationError'
        '404':
          $ref: '#/components/responses/SubscriptionsNotFoundError'
        '500':
          $ref: '#/components/responses/SubscriptionsInternalServerError'
      tags:
        - Plans
      x-sdk-filter:
        - shopper
      security:
        - BearerToken: []
  /v2/subscriptions/offerings:
    parameters:
      - $ref: '#/components/parameters/SubscriptionsFilter'
    get:
      operationId: ListOfferings
      summary: List offerings
      description: >
        Retrieves a list of all subscription offerings.


        ### Filtering


        This endpoint supports filtering. For the general syntax, see
        [**Filtering**](/guides/Getting-Started/filtering).


        The following attributes and operators are supported.


        | Operator | Attribute | Description |

        | --- | --- | --- | 

        | `eq` | `external_ref`, `products.external_ref`, `proration_policy_id`
        | Equals. Checks if the values of two operands are equal. If they are,
        the condition is true. |

        | `in` | `products.external_ref` | In. Checks if the values are included
        in the specified string. If they are, the condition is true. |
      parameters:
        - $ref: '#/components/parameters/SubscriptionsPageOffset'
        - $ref: '#/components/parameters/SubscriptionsPageLimit'
        - $ref: '#/components/parameters/Include'
      responses:
        '200':
          description: Success. A list of offerings is returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Offering'
                  included:
                    $ref: '#/components/schemas/OfferingIncludes'
                  links:
                    $ref: '#/components/schemas/Links'
        '400':
          $ref: '#/components/responses/SubscriptionsValidationError'
        '500':
          $ref: '#/components/responses/SubscriptionsInternalServerError'
      tags:
        - Offerings
      x-sdk-filter:
        - shopper
      security:
        - BearerToken: []
  /v2/subscriptions/offerings/{offering_uuid}:
    parameters:
      - name: offering_uuid
        in: path
        description: The unique identifier of the offering.
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionsUUID'
    get:
      operationId: GetOffering
      summary: Get offering
      parameters:
        - $ref: '#/components/parameters/Include'
      responses:
        '200':
          description: Success. The details of the subscription offering are returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Offering'
                  included:
                    $ref: '#/components/schemas/OfferingIncludes'
        '400':
          $ref: '#/components/responses/SubscriptionsValidationError'
        '404':
          $ref: '#/components/responses/SubscriptionsNotFoundError'
        '500':
          $ref: '#/components/responses/SubscriptionsInternalServerError'
      tags:
        - Offerings
      x-sdk-filter:
        - shopper
      security:
        - BearerToken: []
  /v2/subscriptions/offerings/{offering_uuid}/plans:
    parameters:
      - name: offering_uuid
        in: path
        description: The unique identifier of the offering.
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionsUUID'
    get:
      operationId: ListOfferingPlans
      summary: List an offering's plans
      parameters:
        - $ref: '#/components/parameters/SubscriptionsPageOffset'
        - $ref: '#/components/parameters/SubscriptionsPageLimit'
      responses:
        '200':
          description: Success. A list of plans attached with the offering is returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/OfferingPlan'
                  links:
                    $ref: '#/components/schemas/Links'
        '404':
          $ref: '#/components/responses/SubscriptionsNotFoundError'
        '500':
          $ref: '#/components/responses/SubscriptionsInternalServerError'
      tags:
        - Offerings
      x-sdk-filter:
        - shopper
      security:
        - BearerToken: []
  /v2/subscriptions/offerings/{offering_uuid}/features:
    parameters:
      - name: offering_uuid
        in: path
        description: The unique identifier of the offering.
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionsUUID'
    get:
      operationId: ListOfferingFeatures
      summary: List an offering's features
      parameters:
        - $ref: '#/components/parameters/SubscriptionsPageOffset'
        - $ref: '#/components/parameters/SubscriptionsPageLimit'
      responses:
        '200':
          description: >-
            Success. A list of subscription features attached to the offering is
            returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/OfferingFeature'
                  links:
                    $ref: '#/components/schemas/Links'
        '404':
          $ref: '#/components/responses/SubscriptionsNotFoundError'
        '500':
          $ref: '#/components/responses/SubscriptionsInternalServerError'
      tags:
        - Offerings
      x-sdk-filter:
        - shopper
      security:
        - BearerToken: []
  /v2/subscriptions/offerings/{offering_uuid}/products:
    parameters:
      - name: offering_uuid
        in: path
        description: The unique identifier of the offering.
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionsUUID'
    get:
      operationId: ListOfferingProducts
      summary: List an offering's products
      parameters:
        - $ref: '#/components/parameters/SubscriptionsPageOffset'
        - $ref: '#/components/parameters/SubscriptionsPageLimit'
      responses:
        '200':
          description: >-
            Success. A list of subscription products attached to the offering is
            returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/OfferingProduct'
                  links:
                    $ref: '#/components/schemas/Links'
        '404':
          $ref: '#/components/responses/SubscriptionsNotFoundError'
        '500':
          $ref: '#/components/responses/SubscriptionsInternalServerError'
      tags:
        - Offerings
      x-sdk-filter:
        - shopper
      security:
        - BearerToken: []
  /v2/subscriptions/features/{feature_uuid}:
    parameters:
      - name: feature_uuid
        in: path
        description: The unique identifier of a feature.
        required: true
        schema:
          $ref: '#/components/schemas/SubscriptionsUUID'
    get:
      operationId: GetFeature
      summary: Get feature
      responses:
        '200':
          description: Success. The feature details are returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Feature'
        '400':
          $ref: '#/components/responses/SubscriptionsValidationError'
        '404':
          $ref: '#/components/responses/SubscriptionsNotFoundError'
        '500':
          $ref: '#/components/responses/SubscriptionsInternalServerError'
      tags:
        - Features
      x-sdk-filter:
        - shopper
      security:
        - BearerToken: []
  /v2/inventories/{product_uuid}:
    parameters:
      - name: product_uuid
        in: path
        description: The unique identifier of the product.
        required: true
        schema:
          $ref: '#/components/schemas/InventoriesUUID'
    get:
      operationId: GetStock
      summary: Get Stock for Product
      description: Gets the stock for the product matching the specified unique identifier.
      responses:
        '200':
          description: Success. Returns the stock for the given product UUID
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/StockResponse'
                required:
                  - data
        '404':
          $ref: '#/components/responses/InventoriesNotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
      tags:
        - Inventory
      x-sdk-filter:
        - shopper
      security:
        - bearerAuth: []
  /v2/inventories/locations:
    get:
      operationId: ListLocations
      summary: List Locations
      description: Lists all Inventory Locations
      parameters:
        - $ref: '#/components/parameters/InventoriesPageOffset'
        - $ref: '#/components/parameters/InventoriesPageLimit'
        - $ref: '#/components/parameters/InventoriesFilter'
      responses:
        '200':
          description: Success. A list of locations is returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Location'
                  links:
                    $ref: '#/components/schemas/Links'
              example:
                data:
                  - id: ebc7652d-bb7d-4359-9a83-78f2998208d9
                    type: inventory_location
                    attributes:
                      name: Milton Keynes Warehouse
                      external_ref: mk-stock-warehouse-walnut-tree
                      slug: milton-keynes-warehouse
                      description: Southern dispatch location for all inventory
                      address:
                        - Troughton Supplies
                        - 38 Pipernel Grove
                        - Walnut Tree
                        - MK7 4UL
                      geolocation:
                        lat: -90
                        lon: 180
        '400':
          $ref: '#/components/responses/InventoriesValidationError'
      tags:
        - Locations
      x-sdk-filter:
        - shopper
      security:
        - bearerAuth: []
components:
  parameters:
    accept-language:
      description: >-
        The language and locale your storefront prefers. See
        [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
      in: header
      name: accept-language
      required: false
      schema:
        type: string
    channel:
      description: >-
        The list of channels in which this catalog can be displayed. A channel
        is the shopping experience, such as a mobile app or web storefront. If
        empty, the catalog rule matches all channels. The channel will
        eventually be included in the bearer token that is used for
        authorization, but currently, you must set the `EP-Channel` header in
        your requests.
      in: header
      name: EP-Channel
      required: false
      schema:
        type: string
    filter-hierarchy:
      name: filter
      in: query
      description: |
        This endpoints supports filtering. See [Filtering](#filtering).
      required: false
      schema:
        type: string
    filter-node:
      name: filter
      in: query
      description: |
        This endpoint supports filtering, see [Filtering](#filtering).
      required: false
      schema:
        type: string
    filter-product:
      name: filter
      in: query
      description: |
        This endpoints support filtering. See [Filtering](#filtering).
      required: false
      schema:
        type: string
    filter-rule:
      name: filter
      in: query
      description: |
        This endpoint supports filtering. See [Filtering](#filtering).
      required: false
      schema:
        type: string
    include:
      name: include
      in: query
      description: >
        Using the `include` parameter, you can retrieve top-level resources,
        such as, files or main image, bundle component products.
      required: false
      schema:
        type: array
        items:
          type: string
          enum:
            - main_images
            - files
            - component_products
    include-component-products:
      name: include
      in: query
      description: >
        Using the `include=component_products` parameter, you can retrieve key
        attribute data for the bundle component products in the product bundle,
        such as SKU or slug .
      required: false
      schema:
        type: string
    limit:
      description: >-
        The maximum number of records per page for this response. You can set
        this value up to 100. If no page size is set, the [page
        length](/docs/api/settings/settings-introduction#page-length) store
        setting is used.
      name: page[limit]
      in: query
      required: false
      schema:
        type: integer
        format: int64
        minimum: 1
    offset:
      description: >-
        The current offset by number of records, not pages. Offset is
        zero-based. The maximum records you can offset is 10,000. If no page
        size is set, the [page
        length](/docs/api/settings/settings-introduction#page-length) store
        setting is used.
      name: page[offset]
      in: query
      required: false
      schema:
        type: integer
        format: int64
        maximum: 10000
        minimum: 0
    tag:
      description: >-
        Product tags are used to store or assign a key word against a product.
        The product tag can then be used to describe or label that product.
        Using product tags means that you can group your products together, for
        example, by brand, category, subcategory, colors, types, industries, and
        so on. You can enhance your product list using tags, enabling you to
        refine your product list and run targeted promotions. Tags are used to
        refine the eligibility criteria for a rule. Requests populate the
        catalog rule tag using the `EP-Context-Tag` header.
      in: header
      name: EP-Context-Tag
      required: false
      schema:
        type: string
    cart_include:
      name: include
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
          enum:
            - items
    Include:
      name: include
      in: query
      required: false
      schema:
        description: >-
          A comma-separated list of resources to include. See [Characteristics
          of Include
          Parameter](/guides/Getting-Started/includes#characteristics-of-include-parameter).
        type: string
        examples:
          - products,plans
    SubscriptionsFilter:
      name: filter
      in: query
      required: false
      schema:
        description: >
          Some Subscriptions API endpoints support filtering. For the general
          syntax, see [**Filtering**](/guides/Getting-Started/filtering), but
          you must go to a specific endpoint to understand the attributes and
          operators an endpoint supports.
        type: string
        format: string
        examples:
          - eq(name,Alan Turing)
    SubscriptionsPageLimit:
      name: page[limit]
      description: >-
        The maximum number of records per page for this response. You can set
        this value up to 100. If no page size is set, the [page
        length](/docs/commerce-cloud/global-project-settings/settings-overview#page-length)
        store setting is used.
      in: query
      required: false
      schema:
        type: integer
        format: int64
        examples:
          - 100
        minimum: 0
    SubscriptionsPageOffset:
      name: page[offset]
      description: >-
        The current offset by number of records, not pages. Offset is
        zero-based. The maximum records you can offset is 10,000. If no page
        size is set, the [page
        length](/docs/commerce-cloud/global-project-settings/settings-overview#page-length)
        store setting is used.
      in: query
      required: false
      schema:
        type: integer
        format: int64
        examples:
          - 10
        maximum: 10000
        minimum: 0
    InventoriesFilter:
      name: filter
      in: query
      required: false
      schema:
        description: >
          Some Inventories API endpoints support filtering. For the general
          syntax, see [**Filtering**](/guides/Getting-Started/filtering), but
          you must go to a specific endpoint to understand the attributes and
          operators an endpoint supports.
        type: string
        format: string
        examples:
          - eq(location,new-york)
    InventoriesPageLimit:
      description: >-
        The maximum number of records per page for this response. You can set
        this value up to 100. If no page size is set, the the [**page
        length**](https://elasticpath.dev/docs/commerce-cloud/global-project-settings/settings-overview#page-length)
        store setting is used.
      name: page[limit]
      in: query
      required: false
      schema:
        type: integer
        format: int
        examples:
          - 100
        minimum: 0
    InventoriesPageOffset:
      name: page[offset]
      description: >-
        The current offset by number of records, not pages. Offset is
        zero-based. The maximum records you can offset is 10,000. If no page
        size is set, the [**page
        length**](https://elasticpath.dev/docs/commerce-cloud/global-project-settings/settings-overview#page-length)
        store setting is used.
      in: query
      required: false
      schema:
        type: integer
        format: int
        examples:
          - 10
        maximum: 10000
        minimum: 0
  schemas:
    amount:
      description: The three-letter ISO code for the currency associated with this price.
      type: object
      properties:
        amount:
          description: >-
            The price in the lowest denomination for the specified currency.
            This is a product's list price.
          type: integer
          format: int64
          examples:
            - 100
          x-go-name: Amount
          x-omitempty: false
        includes_tax:
          description: Whether this price includes tax.
          type: boolean
          examples:
            - false
          default: false
          x-go-name: IncludesTax
      title: Amount
      x-go-name: PriceAmount
    prioritized-pricebooks:
      description: >-
        If you want multiple price books for different scenarios, such as
        seasonal sales, business versus retail pricing, and reward programs,
        when creating a catalog, you can specify up to five price books. You
        must configure a priority for your price books. Product prices are
        displayed in the catalog according to the priority of the price books.
      type: array
      items:
        type: object
        properties:
          id:
            description: A unique identifier of a price book.
            type: string
            format: uuid
          priority:
            description: >-
              Priority is a number and the price book with the highest number
              has the highest priority.
            type: integer
        required:
          - priority
          - id
        x-go-name: PrioritizedPricebook
      maxItems: 5
    catalog:
      description: Creates a catalog with the following attributes.
      type: object
      properties:
        id:
          description: A unique identifier of a catalog.
          type: string
          examples:
            - 8dbb35b2-ef04-477e-974d-e5f3abe6faae
        attributes:
          type: object
          properties:
            name:
              description: The name of a catalog.
              type: string
              examples:
                - catalog-123
            description:
              description: >-
                A brief description of the catalog, such as the purpose of the
                catalog.
              type: string
              examples:
                - Catalog for Store 123
              default: ''
            hierarchy_ids:
              description: >-
                The unique identifiers of the hierarchies associated with a
                catalog.
              type: array
              items:
                type: string
            pricebook_id:
              description: >-
                The unique identifier of a price book associated with a catalog.
                If no price book is selected, the catalog is displayed without
                prices.
              type: string
            pricebook_ids:
              $ref: '#/components/schemas/prioritized-pricebooks'
            locales:
              description: >-
                Product Experience Manager supports localization of products and
                hierarchies. If you store supports multiple languages, you can
                localize product names and descriptions.
              type: object
              additionalProperties:
                description: >-
                  A [three-letter language
                  code](https://www.iso.org/iso-639-language-code) that
                  represents the name of language you have used.
                type: object
                additionalProperties:
                  description: >-
                    A [three-letter language
                    code](https://www.iso.org/iso-639-language-code) that
                    represents the name of language you have used.
                  type: string
            created_at:
              description: The date and time a catalog is created.
              type: string
              format: date-time
              examples:
                - '2020-09-22T09:00:00'
            updated_at:
              description: The date and time a catalog was updated.
              type: string
              format: date-time
              examples:
                - '2020-09-22T09:00:00'
            owner:
              description: >-
                The owner of this resource, can be either `organization` or
                `store`.
              type:
                - string
                - 'null'
              default: store
              enum:
                - store
                - organization
              x-go-name: Owner
          required:
            - name
            - hierarchy_ids
            - created_at
            - updated_at
        relationships:
          description: >-
            Relationships are established between different catalog entities.
            For example, a catalog rule and a price book are related to a
            catalog, as both are associated with it.
          type: object
          properties:
            rules:
              description: The catalog rules related to a catalog.
              type: object
              properties:
                links:
                  $ref: '#/components/schemas/related-link'
            releases:
              description: >-
                When a catalog is published, a catalog release is created. This
                is a URL to all catalog published releases available for this
                catalog.
              type: object
              properties:
                links:
                  $ref: '#/components/schemas/related-link'
                meta:
                  type: object
                  properties:
                    count:
                      description: The number releases available for a catalog.
                      type: integer
          title: CatalogRelationships
        type:
          type: string
          examples:
            - catalog
          const: catalog
      required:
        - id
        - type
        - attributes
      title: Catalog
    catalog-create-data:
      description: Creates a catalog with the following attributes.
      type: object
      properties:
        data:
          type: object
          properties:
            attributes:
              type: object
              properties:
                name:
                  description: The name of the catalog.
                  type: string
                  examples:
                    - catalog-123
                  minLength: 1
                description:
                  description: A brief description of the catalog.
                  type:
                    - string
                    - 'null'
                  examples:
                    - Catalog for Store 123
                hierarchy_ids:
                  description: >-
                    The unique identifiers of the hierarchies to associate with
                    a catalog.
                  type: array
                  items:
                    type: string
                pricebook_id:
                  description: >
                    The unique identifier of the price book to associate with
                    this catalog. You can specify either a `pricebook_id` or
                    `pricebook_ids` but not both. If you specify both a
                    `pricebook_id` and `pricebook_ids`, a `422 Unprocessable
                    Entity` error is displayed.
                  type: string
                pricebook_ids:
                  $ref: '#/components/schemas/prioritized-pricebooks'
                locales:
                  description: >-
                    Product Experience Manager supports localization of products
                    and hierarchies. If you store supports multiple languages,
                    you can localize product names and descriptions.
                  type: object
                  additionalProperties:
                    description: >-
                      A [three-letter language
                      code](https://www.iso.org/iso-639-language-code) that
                      represents the name of language you have used.
                    type: object
                    additionalProperties:
                      description: >-
                        A [three-letter language
                        code](https://www.iso.org/iso-639-language-code) that
                        represents the name of language you have used.
                      type: string
              required:
                - name
                - hierarchy_ids
            type:
              description: Represents the type of object being returned. Always `Catalog`.
              type: string
              examples:
                - catalog
              const: catalog
          required:
            - type
            - attributes
      required:
        - data
      title: CatalogCreateData
    catalog-data:
      description: Container for a single catalog.
      type: object
      properties:
        data:
          $ref: '#/components/schemas/catalog'
        links:
          $ref: '#/components/schemas/links'
      required:
        - data
      title: CatalogData
    catalog-list-data:
      description: Container for a list of catalogs.
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/catalog'
        links:
          $ref: '#/components/schemas/links'
      required:
        - data
      title: CatalogListData
    catalog-update-data:
      description: A catalog combines price books, product lists, and hierarchies.
      type: object
      properties:
        data:
          type: object
          properties:
            attributes:
              type: object
              properties:
                name:
                  description: The name of the catalog.
                  type:
                    - string
                    - 'null'
                  examples:
                    - catalog-123
                  minLength: 1
                description:
                  description: A brief description of the catalog.
                  type:
                    - string
                    - 'null'
                  examples:
                    - Catalog for Store 123
                hierarchy_ids:
                  description: >-
                    The unique identifiers of the hierarchies to associate with
                    a catalog.
                  type:
                    - array
                    - 'null'
                  items:
                    type: string
                pricebook_id:
                  description: >-
                    The unique identifier of a price book to associate with a
                    catalog. You can specify a `pricebook_id` or a
                    `pricebook_ids` but not both. If you specify both, a `422
                    unprocessable entity` error is displayed.
                  type:
                    - string
                    - 'null'
                pricebook_ids:
                  $ref: '#/components/schemas/prioritized-pricebooks'
                locales:
                  description: >-
                    Product Experience Manager supports localization of products
                    and hierarchies. If you store supports multiple languages,
                    you can localize product names and descriptions.
                  type: object
                  additionalProperties:
                    description: >-
                      A [three-letter language
                      code](https://www.loc.gov/standards/iso639-2/) that
                      represents the name of language you have used.
                    type: object
                    additionalProperties:
                      description: >-
                        A [three-letter language
                        code](https://www.loc.gov/standards/iso639-2/) that
                        represents the name of language you have used.
                      type: string
            id:
              description: The unique identifier of the catalog to be updated.
              type: string
              examples:
                - 8dbb35b2-ef04-477e-974d-e5f3abe6faae
              x-go-name: ID
            type:
              description: >-
                This represents the type of object being returned. Always
                `catalog`.
              type: string
              examples:
                - catalog
              const: catalog
          required:
            - type
            - id
            - attributes
      required:
        - data
      title: CatalogUpdateData
    component-product:
      description: The unique identifier of the component, for example, `games`.
      type: object
      properties:
        name:
          description: The component name is the name that is displayed in your storefront.
          type: string
          x-go-name: Name
        min:
          description: >-
            The minimum number of product options a shopper can select from this
            component.
          type:
            - integer
            - 'null'
          x-go-name: Min
        max:
          description: >-
            The maximum number of product options a shopper can select from this
            component.
          type:
            - integer
            - 'null'
          x-go-name: Max
        sort_order:
          description: >-
            The sort order of the components. The `create a bundle` and `update
            a bundle` endpoints do not sort the components. You can use the
            `sort_order` attribute when programming your storefront to display
            the components in the order that you want.
          type:
            - integer
            - 'null'
          x-go-name: Sort Order
        options:
          description: >-
            The product options included in a component. This can be the ID of
            another bundle.
          type: array
          items:
            $ref: '#/components/schemas/component-product-option'
          x-go-name: Options
      title: Component Product
    component-product-option:
      description: >-
        The product options included in a component. This can be the ID of
        another bundle.
      type: object
      properties:
        id:
          description: A unique identifier of the product you want to add to a component.
          type: string
          format: uuid
          x-go-name: ID
        type:
          description: This represents the type of object being returned. Always `product`.
          type: string
          examples:
            - product
          default: product
          const: product
          x-go-name: Type
        quantity:
          description: The number of this product option that a shopper must purchase.
          type: integer
          examples:
            - 2
          x-go-name: Quantity
        sort_order:
          description: >-
            The sort order of the options. The `create a bundle` and `update a
            bundle` endpoints do not sort the options. You can use the
            `sort_order` attribute when programming your storefront to display
            the options in the order that you want.
          type:
            - integer
            - 'null'
          examples:
            - 15
          x-go-name: Sort Order
        default:
          description: >-
            The boolean indicates whether the current option is a default option
            for the component.
          type:
            - boolean
            - 'null'
          examples:
            - true
          default: false
          x-go-name: Default
      title: Component Product Option
    components:
      additionalProperties:
        $ref: '#/components/schemas/component-product'
      description: >-
        A bundle is a purchasable product, comprising of one or more products
        that you want to sell together. You can create multiple components
        within a bundle. Each component must have at least one or more options.
        Each option is a product and a quantity.
      title: Components
      type: object
    custom-input-validation-rule-options:
      description: The length of the custom input text field.
      type: object
      properties:
        max_length:
          description: >-
            The number of characters the custom text field can be. You can
            specify a maximum length up to 255 characters, as the limit is 255
            characters.
          type: integer
          examples:
            - 255
          x-go-name: MaxLength
      x-go-name: CustomInputValidationRuleOptions
    custom-input-validation-rule:
      description: The validation rules for the custom text.
      type: object
      properties:
        type:
          description: This represents the type of object being returned. Must be `string`.
          type: string
          examples:
            - string
          default: string
          const: string
          x-go-name: Type
        options:
          $ref: '#/components/schemas/custom-input-validation-rule-options'
      title: Custom Input Validation Rule
      x-go-name: CustomInputValidationRule
    custom-input:
      description: >-
        The name of the custom input. You can rename the input to something more
        representative of the input that shoppers are adding, for example,
        `message` or `front`.
      type: object
      properties:
        name:
          description: >-
            The name for the custom text field that is displayed in your
            storefront.
          type: string
          examples:
            - Message
          x-go-name: Name
        validation_rules:
          description: The validation rules for the custom text.
          type: array
          items:
            $ref: '#/components/schemas/custom-input-validation-rule'
          x-go-name: ValidationRules
        required:
          description: >-
            This is `true` or `false` depending on whether the custom text is
            required.
          type:
            - boolean
            - 'null'
          examples:
            - false
          default: false
          x-go-name: Required
      title: Custom Input
    custom_inputs:
      description: >
        You can allow your shoppers to add custom text to a product when adding
        product items to their carts. This is useful, for example, if you have a
        product like a T-shirt that can be personalized or you sell greetings
        cards that can be printed with your shoppers personalized messages.  You
        can do this using the `custom_inputs` attribute.

         - You can rename input to something more representative of the input that shoppers are adding, for example, `message` or `front`.
         - `name` is the name that is displayed in your storefront.
         - You can add validation rules. For example, the input field must be a string and/or up to 255 characters in length. The limit is 255 characters.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/custom-input'
      title: Custom Inputs
    currencies:
      description: >-
        A collection of one or more currencies objects that consists of the
        [**three-letter ISO
        code**](https://www.iso.org/iso-3166-country-codes.html) of the
        currencies associated with this price and the amount. This is the
        product's price.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/amount'
      title: Currencies
    shopper_attributes:
      description: >-
        The optional price extension with values in string format, viewable by
        shoppers.
      type: object
      additionalProperties:
        type: string
      title: ShopperAttributes
    diff-list-data:
      description: A list of differences between two releases.
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/product-diff'
        links:
          $ref: '#/components/schemas/links'
      title: DiffListData
    display-price:
      description: A price formatted for display.
      type: object
      properties:
        with_tax:
          $ref: '#/components/schemas/formatted-price'
        without_tax:
          $ref: '#/components/schemas/formatted-price'
      x-omitempty: true
    error:
      description: APIError is a json-api style part of an error response.
      type: object
      properties:
        detail:
          type: string
          examples:
            - not processable
          x-go-name: Detail
        status:
          type: string
          examples:
            - '422'
          x-go-name: Status
        title:
          type: string
          examples:
            - There was a problem processing your request.
          x-go-name: Title
      title: APIError
      x-go-name: APIError
    error-response:
      description: ErrorResponse is a json-api style Error response.
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/error'
          x-go-name: Errors
      title: ErrorResponse
      x-go-name: ErrorResponse
    extension:
      description: The name of the product template.
      type: object
      additionalProperties:
        description: The product attributes available for this template.
        type: object
      title: Extension
    extensions:
      description: >-
        With extension templates, you can attach a specific set of custom fields
        to your products in Product Experience Manager. For example, a **Book**
        template might contain the attributes, such as **ISBN**, **Author**,
        **Number of pages**, **Year Published**, or **Condition (New/Used)**.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/extension'
      title: Extensions
    file-reference:
      description: >-
        In Product Experience Manager, products can have associated rich media
        assets, such as product images or a file containing additional product
        details.
      type: object
      properties:
        type:
          description: This represents the type of object being returned. Always `file`.
          type: string
          examples:
            - file
          const: file
        id:
          description: A unique identifier for a file.
          type: string
          format: uuid
        created_at:
          description: The date and time a file is created.
          type: string
          format: date-time
          examples:
            - '1970-01-01T00:00:00.000'
          x-go-name: CreatedAt
      x-go-name: FileRelationship
    files-relationship:
      description: >-
        In Product Experience Manager, products can have associated rich media
        assets, such as product images or a file containing additional product
        details.
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/file-reference'
      x-omitempty: true
    component-products-relationship:
      description: >-
        A bundle is a purchasable product, comprising of one or more products
        that you want to sell together. You can create multiple components
        within a bundle. Each component must have at least one or more options.
        Each option is a product and a quantity. You can link to the products
        that make up your bundle components.
      type: object
      properties:
        data:
          $ref: '#/components/schemas/product-references'
        links:
          $ref: '#/components/schemas/self-link'
      x-omitempty: true
    formatted-price:
      description: A price formatted for display.
      type: object
      properties:
        amount:
          description: >-
            The price in the lowest denomination for the specified currency.
            This is a product's list price.
          type: integer
          examples:
            - '47500'
          x-omitempty: false
        currency:
          description: >-
            The three-letter ISO code of the currencies associated with this
            price and the amount.
          type: string
          examples:
            - USD
        formatted:
          description: The format of the price for display.
          type: string
          examples:
            - $475.00
      title: FormattedPrice
      x-omitempty: true
    hierarchy:
      description: >-
        A category hierarchy in a catalog. Hierarchies can have parent nodes and
        child nodes, as well as a list of attached products.
      type: object
      properties:
        attributes:
          $ref: '#/components/schemas/hierarchy-attributes'
        id:
          description: A unique identifier of a hierarchy.
          type: string
          examples:
            - e871df93-c769-49a9-9394-a6fd555b8e8a
          x-go-name: ID
        relationships:
          $ref: '#/components/schemas/hierarchy-relationships'
        type:
          description: >-
            This represents the type of object being returned. Always
            `hierarchy`.
          type: string
          examples:
            - hierarchy
          x-go-name: Type
        meta:
          $ref: '#/components/schemas/hierarchy-meta'
      title: Hierarchy
      x-go-name: Hierarchy
    hierarchy-meta:
      description: A hierarchy's metadata.
      type: object
      properties:
        language:
          description: >-
            Product Experience Manager supports localization of hierarchies. If
            your store supports multiple languages, you can localize hierarchy
            names and descriptions. This is [**three-letter language
            code**](https://www.iso.org/iso-639-language-code) that represents
            the name of the language you have used.
          type: string
          examples:
            - en-GB
      title: HierarchyMeta
      x-go-name: HierarchyMeta
      x-omitempty: true
    hierarchy-attributes:
      description: Resource attributes of a catalog hierarchy.
      type: object
      properties:
        created_at:
          description: The date and time a hierarchy is created.
          type: string
          format: date-time
          examples:
            - '1970-01-01T00:00:00.000'
          x-go-name: CreatedAt
        published_at:
          description: The date and time a hierarchy is published in a catalog.
          type:
            - string
            - 'null'
          format: date-time
          examples:
            - '1970-01-01T00:00:00.000'
        description:
          description: A description of a hierarchy.
          type: string
          examples:
            - Formal dresswear
          x-go-name: Description
        name:
          description: The name of a hierarchy.
          type: string
          examples:
            - Formal dresswear
          x-go-name: Name
        slug:
          description: A unique slug for a hierarchy.
          type: string
          examples:
            - formal
          x-go-name: Slug
        updated_at:
          description: The date and time a hierarchy was updated.
          type: string
          format: date-time
          examples:
            - '1970-01-01T00:00:00.000'
          x-go-name: UpdatedAt
      title: HierarchyAttributes
      x-go-name: HierarchyAttributes
    hierarchy-data:
      description: Container for hierarchies.
      type: object
      properties:
        data:
          $ref: '#/components/schemas/hierarchy'
        links:
          $ref: '#/components/schemas/links'
      title: HierarchyData
    hierarchy-list-data:
      description: Container for a list of hierarchies.
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/page-meta'
        data:
          type: array
          items:
            $ref: '#/components/schemas/hierarchy'
        links:
          $ref: '#/components/schemas/links'
      title: HierarchyListData
    hierarchy-relationships:
      description: Relationships to child nodes, and products.
      type: object
      properties:
        products:
          description: A URL to all the products associated with a hierarchy.
          type: object
          properties:
            links:
              $ref: '#/components/schemas/related-link'
        children:
          description: A URL to all the child products associated with a hierarchy.
          type: object
          properties:
            links:
              $ref: '#/components/schemas/related-link'
          required:
            - links
        nodes:
          description: A URL to all the nodes associated with a hierarchy.
          type: object
          properties:
            links:
              $ref: '#/components/schemas/related-link'
          required:
            - links
      title: HierarchyRelationships
      x-go-name: HierarchyRelationships
    links:
      description: Links allow you to move between requests.
      type: object
      properties:
        self:
          description: >-
            Single entities use a `self` parameter with a link the specific
            resource.
          type:
            - string
            - 'null'
          format: uri
        first:
          description: Always the first page.
          type:
            - string
            - 'null'
          format: uri
        last:
          description: This is `null` if there is only one page.
          type:
            - string
            - 'null'
          format: uri
        prev:
          description: This is `null` if there is only one page.
          type:
            - string
            - 'null'
          format: uri
        next:
          description: This is `null` if there is only one page.
          type:
            - string
            - 'null'
          format: uri
    main-image-relationship:
      description: >-
        In Product Experience Manager, products can also have associated product
        images.
      type: object
      properties:
        data:
          description: The images associated with a product.
          type: object
          properties:
            type:
              description: >-
                This represents the type of object being returned. Always
                `main_image`.
              type: string
              examples:
                - main_image
              const: main_image
            id:
              description: A unique identifier for an image.
              type: string
              format: uuid
          x-nullable: 'true'
      x-omitempty: true
    node:
      description: >-
        A category node in a catalog. Nodes can have child nodes, as well as a
        list of attached products.
      type: object
      properties:
        attributes:
          $ref: '#/components/schemas/node-attributes'
        id:
          description: The unique identifier of a node.
          type: string
          examples:
            - e871df93-c769-49a9-9394-a6fd555b8e8a
          x-go-name: ID
        relationships:
          $ref: '#/components/schemas/node-relationships'
        type:
          description: This represents the type of object being returned. Always `node`.
          type: string
          examples:
            - node
          x-go-name: Type
        meta:
          $ref: '#/components/schemas/node-meta'
      title: Node
      x-go-name: Node
    node-attributes:
      description: Resource attributes of a catalog node.
      type: object
      properties:
        created_at:
          description: The date and time a node was created.
          type: string
          format: date-time
          examples:
            - '1970-01-01T00:00:00.000'
          x-go-name: CreatedAt
        published_at:
          description: The date and time a node was published in a catalog.
          type:
            - string
            - 'null'
          format: date-time
          examples:
            - '1970-01-01T00:00:00.000'
        description:
          description: A description of a node.
          type: string
          examples:
            - Formal dresswear
          x-go-name: Description
        label:
          type: string
          examples:
            - category
          x-go-name: Label
        name:
          description: >-
            The name of a node. Names must be unique among sibling nodes in a
            hierarchy. Otherwise, a name can be non-unique within the hierarchy
            and across multiple hierarchies.
          type: string
          examples:
            - Formal dresswear
          x-go-name: Name
        slug:
          description: >-
            A slug for the node. Slugs must be unique among sibling nodes in the
            hierarchy. Otherwise, a slug can be non-unique within the hierarchy
            and across multiple hierarchies.
          type: string
          examples:
            - formal
          x-go-name: Slug
        curated_products:
          description: >-
            A list of curated products for a node. You can curate your products
            in your nodes product lists. Product curation allows you to promote
            specific products within each node in a hierarchy, enabling you to
            create unique product collections in your storefront.
          type: array
          items:
            type: string
            examples:
              - 8dbb35b2-ef04-477e-974d-e5f3abe6faae
          x-omitempty: true
        status:
          type: string
          examples:
            - live
          x-go-name: Status
        updated_at:
          description: The date and time a node was updated.
          type: string
          format: date-time
          examples:
            - '1970-01-01T00:00:00.000'
          x-go-name: UpdatedAt
      title: NodeAttributes
      x-go-name: NodeAttributes
    node-create-data:
      description: Container for nodes.
      type: object
      properties:
        data:
          description: >-
            A node in a catalog (e.g. a category node). Nodes can have child
            nodes, as well as a list of attached products
          type: object
          properties:
            attributes:
              description: Resource attributes of a catalog node.
              type: object
              properties:
                description:
                  type: string
                  examples:
                    - Formal dresswear
                  x-go-name: Description
                hierarchy_id:
                  description: hierarchy id of the node
                  type: string
                  examples:
                    - ddd401ac-db06-4d9e-af60-cf5206abb9bc
                label:
                  type: string
                  examples:
                    - category
                  x-go-name: Label
                name:
                  type: string
                  examples:
                    - Formal dresswear
                  x-go-name: Name
                slug:
                  type: string
                  examples:
                    - formal
                  x-go-name: Slug
                status:
                  type: string
                  examples:
                    - Live
                  x-go-name: Status
                locales:
                  type: object
                  additionalProperties:
                    type: object
                    additionalProperties:
                      type: string
              required:
                - name
              title: NodeCreateAttributes
            relationships:
              $ref: '#/components/schemas/node-relationships'
            id:
              type: string
              examples:
                - 8fccaa19-dba9-4621-8d11-31a222a68c7c
              x-go-name: ID
            type:
              type: string
              examples:
                - node
              x-go-name: Type
          required:
            - type
            - attributes
          title: NodeCreateArgs
        links:
          $ref: '#/components/schemas/links'
      required:
        - data
      title: NodeCreateData
    node-data:
      description: Container for nodes.
      type: object
      properties:
        data:
          $ref: '#/components/schemas/node'
        links:
          $ref: '#/components/schemas/links'
      title: NodeData
    node-list-data:
      description: Container for a list of nodes.
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/page-meta'
        data:
          type: array
          items:
            $ref: '#/components/schemas/node'
        links:
          $ref: '#/components/schemas/links'
      title: NodeListData
    node-meta:
      description: A node's metadata.
      type: object
      properties:
        language:
          description: The node details localized in the supported languages.
          type: string
          examples:
            - en-GB
        bread_crumb:
          description: >-
            Helps you understand the association of products with nodes. It
            explains how products are associated with parent nodes and the
            relationship among the array of nodes. This is useful if you want to
            improve how your shoppers search within you store.
          type: array
          items:
            type: string
            examples:
              - 8dbb35b2-ef04-477e-974d-e5f3abe6faae
          x-omitempty: true
      title: NodeMeta
      x-go-name: NodeMeta
      x-omitempty: true
    node-reference:
      description: Minimum set of information to identify a catalog node.
      type: object
      properties:
        id:
          description: The unique identifier of a hierarchy.
          type: string
          examples:
            - 65477ce0-fcb8-436b-a120-3d57979421dd
          x-go-name: ID
        label:
          description: A label for a hierarchy.
          type: string
          examples:
            - category
          x-go-name: Label
        name:
          description: The name of a hierarchy.
          type: string
          examples:
            - Formal dresswear
          x-go-name: Name
      title: NodeReference
      x-go-name: NodeReference
    node-relationships:
      description: Relationships to parent and child nodes, and products.
      type: object
      properties:
        products:
          description: A URL to all products associated with a node.
          type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/product-reference'
              x-omitempty: true
            links:
              $ref: '#/components/schemas/related-link'
        children:
          description: A URL to all child nodes associated with a node.
          type: object
          properties:
            links:
              $ref: '#/components/schemas/related-link'
          required:
            - links
        parent:
          description: A URL to all parent nodes associated with a node.
          type: object
          properties:
            data:
              type: object
              properties:
                type:
                  type: string
                  examples:
                    - node
                  const: node
                id:
                  type: string
                  examples:
                    - 8fccaa19-dba9-4621-8d11-31a222a68c7c
                  x-go-name: ID
              required:
                - id
                - type
            links:
              $ref: '#/components/schemas/related-link'
          required:
            - data
        hierarchy:
          description: A URL to the hierarchies associated with a node.
          type: object
          properties:
            data:
              type: object
              properties:
                type:
                  type: string
                  examples:
                    - hierarchy
                  const: hierarchy
                id:
                  type: string
                  examples:
                    - 8fccaa19-dba9-4621-8d11-31a222a68c7c
                  x-go-name: ID
              required:
                - id
                - type
            links:
              $ref: '#/components/schemas/related-link'
          required:
            - data
      title: NodeRelationships
      x-go-name: NodeRelationships
    node-relationships-data:
      description: Container for node relationships.
      type: object
      properties:
        data:
          $ref: '#/components/schemas/node-relationships'
        links:
          $ref: '#/components/schemas/links'
      title: NodeRelationshipsData
    page-meta:
      description: Contains the results for the entire collection.
      type: object
      properties:
        results:
          description: Total number of results for the entire collection.
          type: object
          properties:
            total:
              description: Total number of results for the entire collection.
              type: integer
              format: int64
        page:
          type: object
          properties:
            limit:
              description: The maximum number of records for all pages.
              type: integer
              format: int64
            offset:
              description: The current offset by number of pages.
              type: integer
              format: int64
            current:
              description: The current number of pages.
              type: integer
              format: int64
            total:
              description: The total number of records for the entire collection.
              type: integer
              format: int64
      title: PageMeta
    pricebook:
      description: >-
        Top level entity in the pricebooks domain model. It contains a list of
        product prices.
      type: object
      properties:
        id:
          description: The unique identifier of a price book.
          type: string
          examples:
            - 4c45e4ec-26e0-4043-86e4-c15b9cf985a7
          x-go-name: ID
        type:
          description: >-
            This represents the type of object being returned. Always
            `pricebook`.
          type: string
          examples:
            - pricebook
          default: pricebook
          const: pricebook
          x-go-name: Type
        attributes:
          type: object
          properties:
            created_at:
              type: string
              format: date-time
              examples:
                - '2020-09-22T09:00:00'
              x-go-name: CreatedAt
            description:
              type:
                - string
                - 'null'
              examples:
                - This is a pricebook
              x-go-name: Description
            name:
              type:
                - string
                - 'null'
              examples:
                - pricebook-store-abc
              x-go-name: Name
            updated_at:
              type: string
              format: date-time
              examples:
                - '2020-09-22T09:00:00'
              x-go-name: UpdatedAt
          required:
            - name
      additionalProperties: false
      required:
        - type
        - attributes
      title: Pricebook
      x-go-name: Pricebook
    pricebook-create-data:
      description: Container for pricebooks.
      type: object
      properties:
        data:
          description: New top level pricebook.
          type: object
          additionalProperties: false
          properties:
            type:
              type: string
              examples:
                - pricebook
              default: pricebook
              const: pricebook
              x-go-name: Type
            attributes:
              type: object
              properties:
                description:
                  type:
                    - string
                    - 'null'
                  examples:
                    - This is a pricebook
                  x-go-name: Description
                name:
                  type:
                    - string
                    - 'null'
                  examples:
                    - pricebook-store-abc
                  x-go-name: Name
              required:
                - name
          required:
            - type
            - attributes
          title: PricebookCreateArgs
        links:
          $ref: '#/components/schemas/links'
      required:
        - data
      title: PricebookData
    pricebook-data:
      description: Container for pricebooks.
      type: object
      properties:
        data:
          $ref: '#/components/schemas/pricebook'
        links:
          $ref: '#/components/schemas/links'
      required:
        - data
      title: PricebookData
    pricebook-price:
      description: >-
        ProductPrice associates a collection of locale specific prices with a
        product ID.
      type: object
      properties:
        type:
          type: string
          examples:
            - product-price
          default: product-price
          const: product-price
        attributes:
          type: object
          properties:
            currencies:
              $ref: '#/components/schemas/tiered-currencies'
            sales:
              $ref: '#/components/schemas/sales'
            sku:
              type: string
              examples:
                - 4c45e4ec-sku
          required:
            - currencies
            - sku
        id:
          type: string
          examples:
            - 4c45e4ec-26e0-4043-86e4-c15b9cf985a7
          x-go-name: ID
      additionalProperties: false
      required:
        - type
        - id
        - attributes
      title: PricebookPrice
    pricebook-price-create-data:
      description: Container for pricebook prices.
      type: object
      properties:
        data:
          description: >-
            ProductPrice associates a collection of locale specific prices with
            a product ID.
          type: object
          properties:
            type:
              type: string
              examples:
                - product-price
              default: product-price
              const: product-price
            attributes:
              type: object
              properties:
                currencies:
                  $ref: '#/components/schemas/tiered-currencies'
                sales:
                  $ref: '#/components/schemas/sales'
                sku:
                  type: string
                  examples:
                    - 4c45e4ec-sku
              required:
                - currencies
                - sku
          required:
            - type
            - attributes
          title: PricebookPriceCreateArgs
        links:
          $ref: '#/components/schemas/links'
      required:
        - data
      title: PricebookPriceCreateData
    pricebook-price-data:
      description: Container for pricebook prices.
      type: object
      properties:
        data:
          $ref: '#/components/schemas/pricebook-price'
        links:
          $ref: '#/components/schemas/links'
      required:
        - data
      title: PricebookPriceData
    product:
      description: A product in a catalog with the following attributes.
      type: object
      properties:
        attributes:
          $ref: '#/components/schemas/product-attributes'
        id:
          description: A unique identifier for a product.
          type: string
          examples:
            - 8fccaa19-dba9-4621-8d11-31a222a68c7c
          x-go-name: ID
        relationships:
          $ref: '#/components/schemas/product-relationships'
        type:
          description: This represents the type of object being returned. Always `product`.
          type: string
          examples:
            - product
          x-go-name: Type
        meta:
          $ref: '#/components/schemas/product-meta'
      title: Product
      x-go-name: Product
    product-attributes:
      description: A product's attributes.
      type: object
      properties:
        published_at:
          description: The date and time a product was published in a catalog.
          type:
            - string
            - 'null'
          format: date-time
          examples:
            - '1970-01-01T00:00:00.000'
        base_product:
          description: >-
            If this product is a `parent` product. A `parent` product is a
            product that has child products that have been built using the
            `build child products` endpoint.
          type: boolean
          examples:
            - false
          default: false
          x-go-name: BaseProduct
        base_product_id:
          description: The unique identifier of a `parent` product.
          type: string
          examples:
            - cdf574bc-e36e-48fc-9eac-01c87839b285
          x-go-name: BaseProductID
        commodity_type:
          description: The commodity type, either `physical` or `digital`.
          type: string
          examples:
            - physical
          x-go-name: CommodityType
        curated_product:
          description: >-
            If a product is curated, then the `curated_product` attribute with a
            value of `true` is displayed. If a product is not curated, the
            `curated_product` attribute is not displayed.
          type: boolean
          examples:
            - true
          x-go-name: CuratedProduct
          x-omitempty: true
        upc_ean:
          description: >-
            The universal product code or european article number of the
            product.
          type: string
          examples:
            - '0123456'
          x-go-name: UpcEan
        manufacturer_part_num:
          description: The manufacturer part number of the product.
          type: string
          examples:
            - mfn1
          x-go-name: ManufacturerPartNum
        tags:
          description: >-
            A list of tags associated with the product. A tag must be HTML
            compatible characters excluding commas and will be stored in
            lowercase letters.
          type: array
          items:
            description: A tag associated with the product.
            type: string
            examples:
              - tag-a
          x-go-name: Tags
          x-omitempty: true
        price_modifiers:
          description: A list of price modifier names.
          type: array
          items:
            description: A list of price modifier names.
            type: string
            examples:
              - modifier-1
          x-go-name: PriceModifiers
          x-omitempty: true
        created_at:
          description: The date and time a product was created.
          type: string
          format: date-time
          examples:
            - '1970-01-01T00:00:00.000'
          x-go-name: CreatedAt
        description:
          description: A description of the product.
          type: string
          examples:
            - This is a product
          x-go-name: Description
        name:
          description: A name of a product.
          type: string
          examples:
            - Blue shirt
          x-go-name: Name
        price:
          $ref: '#/components/schemas/currencies'
        shopper_attributes:
          $ref: '#/components/schemas/shopper_attributes'
        tiers:
          $ref: '#/components/schemas/tiers'
        components:
          $ref: '#/components/schemas/components'
        custom_inputs:
          $ref: '#/components/schemas/custom_inputs'
        sku:
          description: The unique stock keeping unit of the product.
          type: string
          examples:
            - blue-shirt
          x-go-name: Sku
        slug:
          description: >-
            A label for the product that is used in the URL paths. A slug can
            contain A to Z, a to z, 0 to 9, hyphen, underscore, and period.
            Spaces or other special characters like ^, [], *, and $ are not
            allowed. By default, the product name is used as the slug.
          type: string
          examples:
            - blue-shirt
          x-go-name: Slug
        status:
          description: The status of the product, either `live` or `draft`.
          type: string
          examples:
            - live
          x-go-name: Status
        external_ref:
          description: >-
            The unique attribute associated with the product. This could be an
            external reference from a separate company system, for example.
          type:
            - string
            - 'null'
          x-go-name: ExternalRef
        updated_at:
          description: The date and time a product was updated.
          type: string
          format: date-time
          examples:
            - '1970-01-01T00:00:00.000'
          x-go-name: UpdatedAt
        extensions:
          $ref: '#/components/schemas/extensions'
      title: ProductAttributes
      x-go-name: ProductAttributes
    product-create-data:
      description: Container for products.
      type: object
      properties:
        data:
          description: A new product in a catalog.
          type: object
          properties:
            attributes:
              description: A product's attributes.
              type: object
              properties:
                description:
                  type: string
                  examples:
                    - This is a product
                name:
                  type: string
                  examples:
                    - Blue shirt
                sku:
                  type: string
                  examples:
                    - blue-shirt
                slug:
                  type: string
                  examples:
                    - blue-shirt
                status:
                  type: string
                  examples:
                    - live
                locales:
                  type: object
                  additionalProperties:
                    type: object
                    additionalProperties:
                      type: string
              required:
                - name
                - status
              title: ProductCreateAttributes
            id:
              type: string
              examples:
                - 8fccaa19-dba9-4621-8d11-31a222a68c7c
              x-go-name: ID
            type:
              type: string
              examples:
                - product
              x-go-name: Type
          required:
            - attributes
            - type
          title: ProductCreateArgs
        links:
          $ref: '#/components/schemas/links'
      title: ProductData
    product-data:
      description: Container for products.
      type: object
      properties:
        data:
          $ref: '#/components/schemas/product'
        links:
          $ref: '#/components/schemas/links'
        included:
          $ref: '#/components/schemas/included'
      title: ProductData
    product-diff:
      type: object
      properties:
        id:
          type: string
          examples:
            - e871df93-c769-49a9-9394-a6fd555b8e8a
          x-go-name: ID
        type:
          type: string
          examples:
            - product_diff
          x-go-name: Type
        attributes:
          type: object
          properties:
            sku:
              type: string
            this_release_id:
              type: string
            other_release_id:
              type: string
            diff_created_at:
              type: string
              format: date-time
              examples:
                - '1970-01-01T00:00:00.000'
            exists:
              type: object
              properties:
                this:
                  type: boolean
                other:
                  type: boolean
              required:
                - this
                - other
              x-go-name: ProductDiffExists
            updated_at:
              type: object
              properties:
                this:
                  type:
                    - string
                    - 'null'
                  format: date-time
                  examples:
                    - '1970-01-01T00:00:00.000'
                  x-omitempty: true
                other:
                  type:
                    - string
                    - 'null'
                  format: date-time
                  examples:
                    - '1970-01-01T00:00:00.000'
                  x-omitempty: true
              x-go-name: ProductDiffUpdatedAt
      x-go-name: ProductDiff
    product-list-data:
      description: Container for a list of products.
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/page-meta'
        data:
          type: array
          items:
            $ref: '#/components/schemas/product'
          x-go-name: Data
        links:
          $ref: '#/components/schemas/links'
        included:
          $ref: '#/components/schemas/included'
      title: ProductListData
    product-meta:
      description: >-
        A product's metadata contains information about products, for example,
        the nodes a product is associated with, any child products, bundle
        configurations, and so on.
      type: object
      properties:
        bread_crumbs:
          description: >-
            The relationship among the array of nodes a product is associated
            with, demonstrating the linking of the children nodes with the
            parent nodes. Up to 10 levels of parent nodes are displayed,
            depending on the number of levels of parent nodes you have.
          type: object
          additionalProperties:
            type: array
            items:
              type: string
              examples:
                - 8dbb35b2-ef04-477e-974d-e5f3abe6faae
          x-omitempty: true
        bread_crumb_nodes:
          description: >-
            An array of parent node IDs that a product is associated with. Up to
            10 levels of parent nodes are displayed, depending on the number of
            levels of parent nodes you have.
          type: array
          items:
            type: string
            examples:
              - 8dbb35b2-ef04-477e-974d-e5f3abe6faae
          x-omitempty: true
        catalog_id:
          description: A unique identifier of the catalog a product is associated with.
          type: string
          examples:
            - 362a16dc-f7c6-4280-83d6-4fcc152af091
          x-go-name: CatalogID
        pricebook_id:
          description: >-
            The unique identifier of the price book a product is associated
            with.
          type:
            - string
            - 'null'
          examples:
            - f5466169-0037-460c-b181-b02682b6f4de
          x-go-name: PricebookID
        display_price:
          $ref: '#/components/schemas/display-price'
        catalog_source:
          description: The source of a catalog. Always `pim`.
          type: string
          examples:
            - pim
          const: pim
          x-go-name: CatalogSource
        sale_id:
          description: >-
            With sales pricing, a store can optionally add a sale price to a
            product price. For example, a store can schedule seasonal pricing on
            products without creating a new price book and catalog ruleset.
            Optionally, a store can schedule the date ranges for the sale
            products. This is the unique identifier of a sale.
          type: string
          x-go-name: SaleID
        sale_expires:
          description: The date and time a sale expires.
          type:
            - string
            - 'null'
          format: date-time
          examples:
            - '1970-01-01T00:00:00.000'
          x-go-name: SaleExpires
        original_price:
          $ref: '#/components/schemas/currencies'
        original_display_price:
          $ref: '#/components/schemas/display-price'
        bundle_configuration:
          $ref: '#/components/schemas/bundle-configuration'
        component_products:
          description: >-
            A bundle is a purchasable product, comprising of one or more
            products that you want to sell together. You can create multiple
            components within a bundle. Each component must have at least one or
            more options. Each option is a product and a quantity.
          type: object
          additionalProperties:
            type: object
            properties:
              sale_id:
                description: >-
                  With sales pricing, a store can optionally add a sale price to
                  a product price. For example, a store can schedule seasonal
                  pricing on products without creating a new price book and
                  catalog ruleset. Optionally, a store can schedule the date
                  ranges for the sale products. This is the unique identifier of
                  a sale.
                type: string
                x-go-name: SaleID
              sale_expires:
                description: The date and time a sale expires.
                type:
                  - string
                  - 'null'
                format: date-time
                examples:
                  - '1970-01-01T00:00:00.000'
                x-go-name: SaleExpires
              price:
                $ref: '#/components/schemas/currencies'
              display_price:
                $ref: '#/components/schemas/display-price'
              original_price:
                $ref: '#/components/schemas/currencies'
              original_display_price:
                $ref: '#/components/schemas/display-price'
              pricebook_id:
                type:
                  - string
                  - 'null'
                examples:
                  - f5466169-0037-460c-b181-b02682b6f4de
                x-go-name: PricebookID
            x-go-name: ComponentProductMeta
        price_modifiers:
          description: >-
            You can use price modifiers to change the price property of child
            products. By default, child products inherit the same price as their
            base products. Using price modifiers, you can enable child products
            to inherit a different price.
          type: object
          additionalProperties:
            description: >-
              A name for the modifier. The name must be unique and is
              case-sensitive.
            type: object
            properties:
              modifier_type:
                description: |
                  There are three modifier types.
                   
                   - The `price_increment` type increases the prices of a product.
                   - The `price_decrement` type decreases the price of a product.
                   - The `price_equals` type sets the price of a product to an amount you specify.
                type: string
                examples:
                  - price_equals
              currencies:
                $ref: '#/components/schemas/currencies'
            x-go-name: PriceModifierMeta
        tiers:
          description: >-
            You can use tiers to allow your store to offer different pricing for
            minimum quantities of items that your shoppers purchase.
          type: object
          additionalProperties:
            description: The name of the tier, such as `Pencils`.
            type: object
            properties:
              sale_id:
                description: The unique identifier of a sale.
                type: string
                x-go-name: SaleID
              sale_expires:
                description: The date and time a sale expires.
                type:
                  - string
                  - 'null'
                format: date-time
                examples:
                  - '1970-01-01T00:00:00.000'
                x-go-name: SaleExpires
              display_price:
                $ref: '#/components/schemas/display-price'
              original_price:
                $ref: '#/components/schemas/currencies'
              original_display_price:
                $ref: '#/components/schemas/display-price'
            x-go-name: ProductMetaTier
          x-go-name: ProductMetaTiers
        variation_matrix:
          description: >-
            The `variation_matrix` object lists the variation IDs and variation
            option IDs and their corresponding product IDs that are generated
            when the variation and variation options are built with a product.
            If no variations are available, the `variation_matrix` is empty.
          type: object
        variations:
          description: >-
            If you specified `build_rules` for a product, the `variations`
            object lists the variation option IDs that you specified to include
            when building your child products. If no `build_rules` are
            specified, all the variation and variation options available for a
            product are displayed. If a product does not have any variations,
            then the `variations` object is not displayed.
          type: array
          items:
            $ref: '#/components/schemas/variation'
          x-omitempty: true
        child_option_ids:
          description: An array of variation options IDs that a child product has.
          type:
            - array
            - 'null'
          items:
            type: string
            examples:
              - - 8dbb35b2-ef04-477e-974d-e5f3abe6faae
                - 6ddf2a66-d805-449c-a0e1-8e81335e31a6
          x-omitempty: true
        child_variations:
          description: >-
            If this is a child product, the `child_variations` object lists the
            variation option IDs that define this child product.
          type:
            - array
            - 'null'
          items:
            $ref: '#/components/schemas/variation'
          x-omitempty: true
        product_types:
          description: >
            Commerce automatically assigns types to the products you create. In
            Commerce Manager, you can see at a glance the product types in a
            list of a products. In addition, you can filter on product types in
            both the API and Commerce Manager.
             
             Product types can also be used in catalogs. For example, in your catalog, you can filter on parent so that only your parent products are displayed in your storefront.
             
             Products have one of the following types:

             - **standard** - Standard products are a standalone products.
             - **parent** - A parent product is a product that has child products that have been built using the `Build Child Products` endpoint.
              - **child** - When you configure product variations and variation options for parent products, the child products derived from the parent products are automatically created in Commerce.
             - **bundle** - A bundle is a purchasable product, comprising two or more standalone products (in other words, components) to be sold together. 
          type: array
          items:
            type: string
          x-go-name: ProductTypes
          x-omitempty: true
        language:
          description: >-
            If you storefront supports multiple languages, your storefront's
            preferred language and locale.
          type: string
          examples:
            - en-GB
      title: ProductMeta
      x-go-name: ProductMeta
      x-omitempty: true
    variation_option:
      description: The options available for a variation.
      type: object
      properties:
        id:
          description: A unique identifier for an option.
          type: string
          format: uuid
          x-go-name: ID
        name:
          description: The name of the option.
          type: string
        sort_order:
          description: >-
            If you specified a `sort_order` when creating your variations and
            variation options, then use the `sort_order` value to program your
            storefront to display the variations and variation options in the
            order that you want.
          type:
            - integer
            - 'null'
          x-go-name: Sort Order
        description:
          description: The option description to display to customers.
          type: string
      x-go-name: ProductVariationOption
    variation:
      type: object
      properties:
        id:
          description: A unique identifier of a variation.
          type: string
          format: uuid
          x-go-name: ID
        name:
          description: The name of a variation.
          type: string
        sort_order:
          description: >-
            If you specified a `sort_order` when creating your variations and
            variation options, then use the `sort_order` value to program your
            storefront to display the variations and variation options in the
            order that you want.
          type:
            - integer
            - 'null'
          x-go-name: Sort Order
        option:
          $ref: '#/components/schemas/variation_option'
        options:
          description: The options available for this variation.
          type: array
          items:
            $ref: '#/components/schemas/variation_option'
          x-omitempty: true
      x-go-name: ProductVariation
    bundle-configuration-data:
      description: Container for a bundle configuration.
      type: object
      properties:
        data:
          $ref: '#/components/schemas/bundle-configuration'
      required:
        - data
      title: BundleConfigurationData
    bundle-configuration:
      description: >-
        A bundle is a purchasable product, comprising of one or more products
        that you want to sell together. You can create multiple components
        within a bundle. Each component must have at least one or more options.
        Each option is a product and a quantity.
      type: object
      properties:
        selected_options:
          description: >-
            The product options included in a component. This can be the ID of
            another bundle.
          type: object
          additionalProperties:
            description: The unique identifier of the component, for example, `games`.
            type: object
            additionalProperties:
              description: The number of this product option that a shopper must purchase.
              type: integer
              format: int64
      required:
        - selected_options
      title: BundleConfiguration
      x-go-name: ProductBundleConfiguration
    product-reference:
      description: A product identifier.
      type: object
      properties:
        id:
          description: A unique identifier for a product.
          type: string
          format: uuid
          x-go-name: ID
        type:
          description: This represents the type of object being returned. Always `product`.
          type: string
          examples:
            - product
          const: product
          x-go-name: Type
      title: ProductReference
      x-go-name: ProductReference
      x-nullable: 'true'
    product-reference-list-data:
      description: Container for a list of product references.
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/page-meta'
        data:
          $ref: '#/components/schemas/product-references'
        links:
          $ref: '#/components/schemas/links'
      title: ProductReferenceListData
    product-references:
      description: A list of product identifiers.
      type: array
      items:
        $ref: '#/components/schemas/product-reference'
      title: ProductReferences
      x-go-name: ProductReferences
    product-relationships:
      description: >-
        Relationships allow you to move between requests. Includes links to the
        parent and child products, bundle component products, files, and main
        images associated with a product.
      type: object
      properties:
        parent:
          description: >-
            The details of a `parent` product. A `parent` product is a product
            that has child products that have been built using the `Build Child
            Products` endpoint.
          type: object
          properties:
            data:
              $ref: '#/components/schemas/product-reference'
          x-go-name: Parent
          x-omitempty: true
        children:
          description: >-
            The details of a `child` product. When you configure product
            variations and variation options for parent products, the child
            products derived from the parent products are automatically created
            in Commerce.
          type: object
          properties:
            data:
              $ref: '#/components/schemas/product-references'
            links:
              $ref: '#/components/schemas/self-link'
          x-go-name: Children
          x-omitempty: true
        files:
          $ref: '#/components/schemas/files-relationship'
        main_image:
          $ref: '#/components/schemas/main-image-relationship'
        component_products:
          $ref: '#/components/schemas/component-products-relationship'
      title: ProductRelationships
      x-go-name: ProductRelationships
      x-omitempty: true
    product-relationships-data:
      description: Container for product relationships.
      type: object
      properties:
        data:
          $ref: '#/components/schemas/product-relationships'
        links:
          $ref: '#/components/schemas/links'
      title: ProductRelationshipsData
    products-for-cart:
      description: >-
        A list of products to be added to cart. Can be type product-data or
        error-response.
      type: object
      properties:
        data:
          type: array
          items: {}
          x-go-name: Data
        included:
          type:
            - object
            - 'null'
          properties:
            component_products:
              type: array
              items:
                $ref: '#/components/schemas/product'
              x-go-name: ComponentProducts
          x-go-name: Included
      required:
        - data
      title: ProductsForCart
      x-go-name: ProductsForCart
    products-for-cart-configuration:
      description: A list of product id or sku and bundle configuration for cart.
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type:
                  - string
                  - 'null'
                format: uuid
                x-go-name: ID
              sku:
                type:
                  - string
                  - 'null'
                x-go-name: SKU
              bundle_configuration:
                $ref: '#/components/schemas/bundle-configuration'
          minItems: 1
          x-go-name: Data
      required:
        - data
      title: ProductsForCartConfiguration
      x-go-name: ProductsForCartConfiguration
    related-link:
      description: >-
        A URL to a related object, for example, catalog rules, hierarchies,
        price books, products and deltas.
      type: object
      properties:
        related:
          description: >-
            A URL to a related object, for example, catalog rules, hierarchies,
            price books, products and deltas.
          type: string
      required:
        - related
    self-link:
      description: Links are used to allow you to move between requests.
      type: object
      properties:
        self:
          description: >-
            Single entities use a self parameter with a link to that specific
            resource.
          type: string
      required:
        - self
    release:
      description: >-
        A catalog release represents a collection of hierarchical product data,
        price books and catalogs rules.
      type: object
      properties:
        id:
          description: A unique identifier for the catalog release.
          type: string
          examples:
            - 8dbb35b2-ef04-477e-974d-e5f3abe6faae
          x-go-name: ID
        attributes:
          type: object
          properties:
            name:
              description: The name of a release.
              type: string
              examples:
                - Clothing
            published_at:
              description: The date and time a release was published.
              type:
                - string
                - 'null'
              format: date-time
              examples:
                - '1970-01-01T00:00:00.000'
            catalog_id:
              description: A unique identifier for the catalog.
              type: string
              examples:
                - 0194f54d-f2a1-4e33-9a6e-9ec366152490
            description:
              description: A description of the catalog release.
              type: string
              examples:
                - Catalog for Store 123
              default: ''
            hierarchies:
              description: An array of hierarchy IDs associated with the release.
              type: array
              items:
                $ref: '#/components/schemas/node-reference'
              x-go-name: RootNodes
        relationships:
          $ref: '#/components/schemas/release-relationships'
        type:
          description: >-
            This represents the type of object being returned. Always
            `catalog-release`.
          type: string
          x-go-name: Type
        meta:
          $ref: '#/components/schemas/release-meta'
      title: Release
      x-go-name: Release
    release-data:
      description: Container for a catalog release.
      type: object
      properties:
        data:
          $ref: '#/components/schemas/release'
        links:
          $ref: '#/components/schemas/links'
      title: Release Data
    release-list-data:
      description: Container for a list of catalog releases.
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/release'
        links:
          $ref: '#/components/schemas/links'
      title: ReleaseListData
    release-meta:
      description: A release's metadata.
      type: object
      properties:
        created_at:
          description: The date and time a release is created.
          type: string
          format: date-time
          examples:
            - '1970-01-01T00:00:00.000'
        started_at:
          description: >-
            The date and time a release is available for use. In other words,
            the date and time the status of a catalog release changes to
            PUBLISHED, rather than IN PROGRESS.
          type:
            - string
            - 'null'
          format: date-time
          examples:
            - '1970-01-01T00:00:00.000'
        updated_at:
          description: The date and time a release is updated.
          type:
            - string
            - 'null'
          format: date-time
          examples:
            - '1970-01-01T00:00:00.000'
        release_status:
          description: The status of the current release.
          type: string
          enum:
            - PENDING
            - IN_PROGRESS
            - FAILED
            - PUBLISHED
        language:
          description: Your storefront's preferred language code and locale.
          type: string
          examples:
            - en-GB
        is_full_publish:
          description: >
            Indicates that a full publish was performed (either because this is
            the first time a catalog has been published or because of a change
            that occurred, for example, adding/removing a price book or
            hierarchy). When determining whether delta data needs to be
            refreshed, ignore this attribute and always use the `is_full_delta`
            attribute.
          type: boolean
          examples:
            - false
          default: false
          x-go-name: IsFullPublish
        is_full_delta:
          description: >
            Indicates whether the release delta file contains the full content
            of a catalog release. Using a search service as an example, if the
            `is_full_delta` attribute is `true`, you should remove all data
            about that catalog release from the search service before injecting
            fresh data from the delta file. If the `is_full_delta` attribute is
            `false`, then data from the previous catalog release overlays the
            existing data in the delta file. The `is_full_delta` attribute is
            always `true` the first time a catalog is published.
          type: boolean
          examples:
            - false
          default: false
          x-go-name: IsFullDelta
        total_products:
          description: The total number of products displayed in a catalog release.
          type:
            - integer
            - 'null'
          format: int64
          x-go-name: TotalProducts
        total_nodes:
          description: The total number of hierarchy nodes displayed in a catalog release.
          type:
            - integer
            - 'null'
          format: int64
          x-go-name: TotalNodes
        percent_completed:
          description: >-
            An integer that represents the progress of a catalog publish. The
            attribute starts at `0` and reaches `100` when publishing is
            complete.
          type:
            - integer
            - 'null'
          format: int32
          x-go-name: PercentCompleted
        owner:
          description: The owner of the resource, can be either `organization` or `store`.
          type:
            - string
            - 'null'
          enum:
            - store
            - organization
          x-go-name: Owner
      title: ReleaseMeta
      x-go-name: ReleaseMeta
      x-omitempty: true
    release-relationships:
      description: >-
        Relationships are established between different catalog entities. For
        example, products, hierarchies, price books, and catalog rules are
        related to a catalog, as they are associated with it.
      type: object
      properties:
        delta:
          description: >-
            A URL to a delta document that describes the changes between catalog
            releases.
          type: object
          properties:
            links:
              $ref: '#/components/schemas/related-link'
        products:
          description: A URL to all products included in a catalog release.
          type: object
          properties:
            links:
              $ref: '#/components/schemas/related-link'
        hierarchies:
          description: A URL to all hierarchies included in a catalog release.
          type: object
          properties:
            links:
              $ref: '#/components/schemas/related-link'
          required:
            - links
      title: ReleaseRelationships
      x-go-name: ReleaseRelationships
    rule:
      description: >-
        A catalog rule specifies which catalog to use for a given shopper
        context.
      type: object
      properties:
        id:
          description: >-
            The catalog rule ID. Use this to get, modify, or delete the catalog
            rule.
          type: string
          examples:
            - 8dbb35b2-ef04-477e-974d-e5f3abe6faae
        attributes:
          type: object
          properties:
            name:
              description: >-
                The name of a catalog rule. The name must not contain any
                spaces.
              type: string
              examples:
                - rule-123
            description:
              description: A brief description of the purpose of a catalog rule.
              type: string
              examples:
                - Catalog Rule for most favored customers
              default: ''
              x-omitempty: true
            account_ids:
              description: >-
                The list of accounts who are eligible to see this catalog. If
                this field is empty, the rule matches all accounts.
              type: array
              items:
                type: string
              x-omitempty: true
            customer_ids:
              description: >-
                The list of customers who are eligible to see this catalog. If
                empty, the rule matches all customers.
              type: array
              items:
                type: string
              x-omitempty: true
            channels:
              description: >-
                The list of channels in which this catalog can be displayed. A
                channel is the shopping experience, such as a mobile app or web
                storefront. If empty, the catalog rule matches all channels. The
                channel will eventually be included in the bearer token that is
                used for authorization, but currently, you must set the
                `EP-Channel` header in your requests.
              type: array
              items:
                type: string
              x-omitempty: true
            tags:
              description: >-
                A list of user-defined tags that can be used to further restrict
                the eligibility criteria for this rule. Requests populate the
                catalog rule tag using the `EP-Context-Tag` header.
              type: array
              items:
                type: string
              x-omitempty: true
            schedules:
              description: >
                Specifies a time period when a catalog is displayed, such as on
                a specific date or during summer. Requests populate the rule tag
                using the `EP-Context-Tag` header. 


                The schedules attribute must include the following.


                - `valid_from` matches the date and time that the catalog is
                displayed from. 

                - `valid_to` matches the date and time the catalog is displayed
                to. 


                Commerce runs on UTC time. 


                You can offset the timezone by adding the offset to the end of
                the date and time. For example, a catalog which contains a sale
                hierarchy that should appear for a set timeframe may be
                scheduled to publish on a given date and time within a given
                timezone. For instance, a sale that should begin on 1st of June
                2022 05:00 ET and end on the 15th of June 2022 at 23:50 PT would
                have a valid schedule of `"valid_from":
                "2022-06-01T05:00:00.000-05:00"`, `"valid_to":
                "2022-06-15T11:59:99.000-08:00"`.
              type: array
              items:
                $ref: '#/components/schemas/rule-schedule'
              x-omitempty: true
            catalog_id:
              description: The unique identifier of a catalog.
              type: string
              examples:
                - d09b4e16-08a5-4f42-817c-6e0d98acbb63
            created_at:
              description: The date and time a catalog rule was created.
              type: string
              format: date-time
              examples:
                - '2020-09-22T09:00:00'
            updated_at:
              description: The date and time a catalog release is updated.
              type: string
              format: date-time
              examples:
                - '2020-09-22T09:00:00'
          required:
            - name
            - catalog_id
            - created_at
            - updated_at
        type:
          description: >-
            This represents the type of object being returned. Always
            `catalog_rule`.
          type: string
          examples:
            - catalog_rule
          const: catalog_rule
      required:
        - id
        - type
        - attributes
      title: Catalog Rule
    rule-create-data:
      description: >-
        A catalog rule specifies which catalog to use for a given shopper
        context.
      type: object
      properties:
        data:
          type: object
          properties:
            attributes:
              type: object
              properties:
                name:
                  description: >-
                    The name of a catalog rule. The name must not contain
                    spaces.
                  type: string
                  examples:
                    - rule-123
                  minLength: 1
                description:
                  description: A brief description of the purpose of a catalog rule.
                  type:
                    - string
                    - 'null'
                  examples:
                    - Catalog Rule for most favored customers
                  default: ''
                account_ids:
                  description: >-
                    The list of accounts who are eligible to see this catalog.
                    If this field is empty, the rule matches all accounts.
                  type:
                    - array
                    - 'null'
                  items:
                    type: string
                customer_ids:
                  description: >-
                    The list of customers who are eligible to see this catalog.
                    If empty, the rule matches all customers.
                  type:
                    - array
                    - 'null'
                  items:
                    type: string
                channels:
                  description: >-
                    The list of channels in which this catalog can be displayed.
                    A channel is the shopping experience, such as a mobile app
                    or web storefront. If empty, the catalog rule matches all
                    channels. The channel will eventually be included in the
                    bearer token that is used for authorization, but currently,
                    you must set the `EP-Channel` header in your requests.
                  type:
                    - array
                    - 'null'
                  items:
                    type: string
                tags:
                  description: >-
                    A list of user-defined tags that can be used to further
                    restrict the eligibility criteria for this rule. Requests
                    populate the catalog rule tag using the `EP-Context-Tag`
                    header.
                  type:
                    - array
                    - 'null'
                  items:
                    type: string
                schedules:
                  description: >
                    Specifies a time period when a catalog is displayed, such as
                    on a specific date or during summer. Requests populate the
                    rule tag using the `EP-Context-Tag` header. 


                    The schedules attribute must include the following.


                    - `valid_from` matches the date and time that the catalog is
                    displayed from. 

                    - `valid_to` matches the date and time the catalog is
                    displayed to. 


                    Commerce runs on UTC time. 


                    You can offset the timezone by adding the offset to the end
                    of the date and time. For example, a catalog which contains
                    a sale hierarchy that should appear for a set timeframe may
                    be scheduled to publish on a given date and time within a
                    given timezone. For instance, a sale that should begin on
                    1st of June 2022 05:00 ET and end on the 15th of June 2022
                    at 23:50 PT would have a valid schedule of `"valid_from":
                    "2022-06-01T05:00:00.000-05:00"`, `"valid_to":
                    "2022-06-15T11:59:99.000-08:00"`.
                  type:
                    - array
                    - 'null'
                  items:
                    $ref: '#/components/schemas/rule-schedule'
                catalog_id:
                  description: The unique identifier of a catalog.
                  type: string
                  examples:
                    - d09b4e16-08a5-4f42-817c-6e0d98acbb63
              required:
                - name
                - catalog_id
            type:
              description: >-
                This represents the type of object being returned. Always
                `catalog_rule`.
              type: string
              examples:
                - catalog_rule
              const: catalog_rule
          required:
            - type
            - attributes
      required:
        - data
      title: CatalogRuleCreateData
    rule-data:
      description: Container for a single catalog rule.
      type: object
      properties:
        data:
          $ref: '#/components/schemas/rule'
        links:
          $ref: '#/components/schemas/links'
      required:
        - data
      title: CatalogRuleData
    rule-list-data:
      description: Container for a list of catalog rules.
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/page-meta'
        data:
          type: array
          items:
            $ref: '#/components/schemas/rule'
        links:
          $ref: '#/components/schemas/links'
      required:
        - data
      title: CatalogRuleListData
    rule-schedule:
      description: A period of time during which a catalog is valid
      type: object
      properties:
        valid_from:
          description: Matches the date and time that the catalog is displayed from.
          type:
            - string
            - 'null'
          format: date-time
          examples:
            - '2020-09-22T09:00:00'
          x-go-name: ValidFrom
        valid_to:
          description: Matches the date and time the catalog is displayed to.
          type:
            - string
            - 'null'
          format: date-time
          examples:
            - '2020-09-22T09:00:00'
          x-go-name: ValidTo
      title: Catalog Schedule
      x-go-name: RuleSchedule
    rule-update-data:
      description: >-
        A catalog rule specifies which catalog to use for a given shopper
        context.
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              description: >-
                The catalog rule ID. Use this to get, modify, or delete the
                catalog rule.
              type: string
              examples:
                - 8dbb35b2-ef04-477e-974d-e5f3abe6faae
            attributes:
              type: object
              properties:
                name:
                  description: >-
                    The name of a catalog rule. The name must not contain
                    spaces.
                  type:
                    - string
                    - 'null'
                  examples:
                    - rule-123
                  minLength: 1
                description:
                  description: A description of the purpose of a catalog rule.
                  type:
                    - string
                    - 'null'
                  examples:
                    - Catalog Rule for most favored customers
                  default: ''
                account_ids:
                  description: >-
                    Specifies the list of accounts who are eligible to see this
                    catalog. If this field is empty, the rule matches all
                    accounts.
                  type:
                    - array
                    - 'null'
                  items:
                    type: string
                customer_ids:
                  description: >-
                    The list of customers who are eligible to see this catalog.
                    If empty, the rule matches all customers.
                  type:
                    - array
                    - 'null'
                  items:
                    type: string
                channels:
                  description: >-
                    The list of channels in which this catalog can be displayed.
                    A channel is the shopping experience, such as a mobile app
                    or web storefront. If empty, the catalog rule matches all
                    channels. The channel will eventually be included in the
                    bearer token that is used for authorization, but currently,
                    you must set the `EP-Channel` header in your requests.
                  type:
                    - array
                    - 'null'
                  items:
                    type: string
                schedules:
                  description: >
                    Specifies a time period when a catalog is displayed, such as
                    on a specific date or during summer. Requests populate the
                    rule tag using the `EP-Context-Tag` header. 


                    The schedules attribute must include the following.


                    - `valid_from` matches the date and time that the catalog is
                    displayed from. 

                    - `valid_to` matches the date and time the catalog is
                    displayed to. 


                    Commerce runs on UTC time. 


                    You can offset the timezone by adding the offset to the end
                    of the date and time. For example, a catalog which contains
                    a sale hierarchy that should appear for a set timeframe may
                    be scheduled to publish on a given date and time within a
                    given timezone. For instance, a sale that should begin on
                    1st of June 2022 05:00 ET and end on the 15th of June 2022
                    at 23:50 PT would have a valid schedule of `"valid_from":
                    "2022-06-01T05:00:00.000-05:00"`, `"valid_to":
                    "2022-06-15T11:59:99.000-08:00"`.
                  type:
                    - array
                    - 'null'
                  items:
                    $ref: '#/components/schemas/rule-schedule'
                tags:
                  description: >-
                    A list of user-defined tags that can be used to further
                    restrict the eligibility criteria for this rule. Requests
                    populate the catalog rule tag using the `EP-Context-Tag`
                    header.
                  type:
                    - array
                    - 'null'
                  items:
                    type: string
                catalog_id:
                  description: The unique identifier of a catalog rule.
                  type:
                    - string
                    - 'null'
                  examples:
                    - d09b4e16-08a5-4f42-817c-6e0d98acbb63
            type:
              description: >-
                This represents the type of object being returned. Always
                `catalog_rule`.
              type: string
              examples:
                - catalog_rule
              const: catalog_rule
          required:
            - id
            - type
      required:
        - data
      title: CatalogRuleUpdateData
    sale:
      description: A set of sale prices and a validity period.
      type: object
      properties:
        schedule:
          $ref: '#/components/schemas/schedule'
        currencies:
          $ref: '#/components/schemas/tiered-currencies'
    sales:
      description: A set of sale specifications
      type: object
      additionalProperties:
        $ref: '#/components/schemas/sale'
      title: Sales
    schedule:
      description: A definition of the times at which a sale is valid
      type: object
      properties:
        valid_from:
          type:
            - string
            - 'null'
          format: date-time
          examples:
            - '2020-09-22T09:00:00'
          x-go-name: ValidFrom
        valid_to:
          type:
            - string
            - 'null'
          format: date-time
          examples:
            - '2020-09-22T09:00:00'
          x-go-name: ValidTo
      x-go-name: Schedule
    tier:
      description: The name of the tier, for example, `Pencils`.
      type: object
      properties:
        minimum_quantity:
          description: >-
            The minimum quantity of 1 or more defined for the specified price.
            If a minimum quantity is not specified, an error is returned.
          type: integer
          examples:
            - '5'
        price:
          $ref: '#/components/schemas/currencies'
      title: Tier
    tiered-amount:
      description: The three-letter ISO code for the currency associated with this price.
      type: object
      properties:
        amount:
          description: >-
            The price in the lowest denomination for the specified currency.
            This is a product's list price.
          type: integer
          format: int64
          examples:
            - 100
          x-go-name: Amount
          x-omitempty: false
        includes_tax:
          description: Whether this price includes tax.
          type: boolean
          examples:
            - false
          default: false
          x-go-name: IncludesTax
        tiers:
          description: >-
            The price tier that an item is eligible for based on the quantity
            purchased. You cannot have conflicting tiers within the same
            currencies block.
          type: object
          additionalProperties:
            description: The name of the tier, for example, `Pencils`.
            type: object
            properties:
              minimum_quantity:
                description: >-
                  The minimum quantity of 1 or more defined for the specified
                  price. If a minimum quantity is not specified, an error is
                  returned.
                type: integer
                examples:
                  - 5
                x-go-name: MinimumQuantity
              amount:
                description: The price for each quantity.
                type: integer
                format: int64
                examples:
                  - 100
                x-go-name: Amount
                x-omitempty: false
            x-go-name: TierAmount
          x-go-name: Tiers
      title: TieredAmount
      x-go-name: TieredAmount
    tiered-currencies:
      description: Collection of currency specific prices for a product.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/tiered-amount'
      title: TieredCurrencies
    tiers:
      description: >-
        The price tier that an item is eligible for based on the quantity
        purchased. You cannot have conflicting tiers within the same currencies
        block.
      type: object
      additionalProperties:
        $ref: '#/components/schemas/tier'
      title: Tiers
    catalog-release-create-data:
      description: Creates a catalog release with the following attributes.
      type: object
      properties:
        data:
          type: object
          properties:
            export_full_delta:
              description: >
                Set to `true` if you want to export all the data from a catalog
                release in a delta link. The `is_full_delta` attribute is
                returned from the `get a release of a catalog` endpoint. The
                `is_full_delta` attribute tells you if the delta file contains
                the full content of a catalog release. You can use the
                `is_full_delta` to determine if you need to refresh the data in
                your company system before publishing a catalog release with
                fresh data in a delta link. Using a search service as an
                example, if the `is_full_delta` attribute is true, you should
                remove all data about that catalog from the search service
                before publishing a catalog release and injecting fresh data
                from the delta file. If the `is_full_delta` attribute is false,
                then data from the previous catalog overlays the existing data
                in the delta file. The `is_full_delta` attribute is always
                `true` the first time a catalog is published.
              type: boolean
              x-go-name: ExportFullDelta
            include_organization_resources:
              description: >-
                If you are publishing a catalog in a store that contains
                resources from an organization, you must set this to true and
                you must enable the **Include Organization Resources in Catalog
                Publishes** checkbox in Commerce Manager. See [**Multi-Store
                Management Solutions**](/docs/api/pxm/catalog/publish-release).
              type:
                - boolean
                - 'null'
              x-go-name: IncludeOrganizationResources
      title: CatalogReleaseCreateData
    included:
      description: Included is an array of resources that are included in the response.
      type: object
      properties:
        main_images:
          description: The main images associated with a product.
          type: array
          items:
            $ref: '#/components/schemas/elastic-path-file'
        component_products:
          description: The component products associated with a product.
          type: array
          items:
            $ref: '#/components/schemas/product'
        files:
          description: The files associated with a product.
          type: array
          items:
            $ref: '#/components/schemas/elastic-path-file'
    elastic-path-file:
      type: object
      properties:
        id:
          description: The unique identifier for this file.
          type: string
          format: uuid
        type:
          description: The type represents the object being returned.
          type: string
          examples:
            - file
        file_name:
          description: The name of the file.
          type: string
          examples:
            - file_name.jpg
        mime_type:
          description: The mime type of the file.
          type: string
          examples:
            - image/jpeg
        file_size:
          description: The size of the file. Required when uploading files.
          type: integer
          examples:
            - 36000
        public:
          description: >-
            DEPRECATED Whether the file public or not. Required when uploading
            files.
          type: boolean
          examples:
            - true
        meta:
          $ref: '#/components/schemas/file-meta'
        links:
          $ref: '#/components/schemas/links'
        link:
          $ref: '#/components/schemas/file-link'
      title: ElasticPathFile
    file-meta:
      properties:
        timestamps:
          description: The date and time the file was created.
          type: object
          properties:
            created_at:
              description: The date and time the file was created.
              type: string
              examples:
                - '2023-10-11T13:02:25.293Z'
        dimensions:
          description: The file dimensions.
          type: object
          properties:
            width:
              description: The width of the file.
              type: integer
              examples:
                - 1800
            height:
              description: The height of the file.
              type: integer
              examples:
                - 1000
    file-link:
      description: The publicly available URL for this file.
      type: object
      properties:
        href:
          description: The publicly available URL for this file.
          type: string
          examples:
            - >-
              https://files-eu.epusercontent.com/e8c53cb0-120d-4ea5-8941-ce74dec06038/f8cf26b3-6d38-4275-937a-624a83994702.png
    CartsRequest:
      title: CartsRequest
      type: object
      properties:
        description:
          type: string
          description: The cart description.
          examples:
            - cart description
        discount_settings:
          $ref: '#/components/schemas/DiscountSettings'
        name:
          description: >-
            The cart name provided by the shopper. A cart name must contain 1 to
            255 characters. You cannot use whitespace characters, but special
            characters are permitted. For more information, see the [Safe
            Characters](/guides/Getting-Started/safe-characters) section.
          type: string
          examples:
            - my cart name
        contact:
          $ref: '#/components/schemas/CartContact'
        snapshot_date:
          description: >-
            This optional parameter sets a reference date for the cart. If this
            parameter is set, it allows the cart to act as one that might occur
            on that specified date. For example, such future carts might acquire
            future-enabled discounts, allowing users to test and validate future
            interactions with carts. The snapshot_date must be in the format
            2026-02-21T15:07:25Z. By default, this parameter is left empty.
          type: string
          examples:
            - '2026-09-10T00:12:00Z'
        custom_attributes:
          $ref: '#/components/schemas/CustomAttributes'
        payment_intent_id:
          description: >-
            To remove the Stripe payment intent from a cart, pass the empty
            value in the `payment_intent_id` field.  You must use an empty value
            for this field. You cannot use this endpoint to directly update the
            cart to use an existing Payment Intent.
          type: string
          examples:
            - ''
    CartContact:
      title: CartContact
      type: object
      properties:
        email:
          description: The email address attached to a cart.
          type: string
          format: email
          examples:
            - tester@email.com
    DiscountSettings:
      title: DiscountSettings
      type: object
      properties:
        custom_discounts_enabled:
          description: >-
            This parameter enables custom discounts for a cart. When set to
            true, Elastic Path promotions will not be applied to the new carts.
            Default is set from cart discount settings for the store. See [Cart
            Settings](/docs/api/settings/put-v-2-settings-cart).
          type: boolean
          examples:
            - false
        use_rule_promotions:
          description: >-
            When set to true, this parameter allows the cart to use rule
            promotions.
          type: boolean
          examples:
            - false
    CustomAttributes:
      title: CustomAttributes
      type: object
      properties:
        custom_attributes:
          description: >-
            Specifies the custom attributes for the cart object. The attribute
            can be any string, numerical, and underscore. A cart can have
            maximum of 20 custom attributes.
          type: object
          properties:
            attribute:
              description: Specifies the attribute `type` and `value`.
              type: object
              properties:
                type:
                  description: >-
                    Specifies the type of the attribute such as string, integer,
                    boolean, and float.
                  type: string
                value:
                  description: Specifies the value of the attribute.
                  oneOf:
                    - type: string
                    - type: number
                    - type: boolean
    CartResponse:
      title: CartResponse
      type: object
      properties:
        id:
          description: The unique identifier for the cart. Use SDK or create it yourself.
          type: string
        type:
          description: The type of object being returned.
          type: string
          examples:
            - cart
        name:
          description: The name of this cart.
          type: string
          examples:
            - cart name
        description:
          description: A description of the cart.
          type: string
          examples:
            - cart description
        contact:
          $ref: '#/components/schemas/CartContact'
        discount_settings:
          $ref: '#/components/schemas/DiscountSettings'
        payment_intent_id:
          description: Stripe-assigned unique identifier for the linked Payment Intent
          type: string
        links:
          type: object
          properties:
            self:
              description: A link to that specific resource.
              type: string
          examples:
            - https://useast.api.elasticpath.com/v2/carts/1
        meta:
          type: object
          properties:
            display_price:
              type: object
              properties:
                with_tax:
                  $ref: '#/components/schemas/FormattedPriceData'
                without_tax:
                  $ref: '#/components/schemas/FormattedPriceData'
                tax:
                  $ref: '#/components/schemas/FormattedPriceData'
                discount:
                  $ref: '#/components/schemas/FormattedPriceData'
                without_discount:
                  $ref: '#/components/schemas/FormattedPriceData'
                shipping:
                  $ref: '#/components/schemas/FormattedPriceData'
            timestamps:
              $ref: '#/components/schemas/CartCheckoutTimestamps'
        relationships:
          type: object
          properties:
            customers:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    type:
                      description: The type of related object.
                      type: string
                      examples:
                        - customers
                    id:
                      description: The ID of the customer.
                      type: string
                      format: uuid
                      readOnly: true
                      examples:
                        - 662461ad-ddcb-4dbd-8ed7-ade9aa63b5f9
            items:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    type:
                      description: The type of related object.
                      type: string
                      examples:
                        - cart_item
                    id:
                      description: The unique identifier for the cart item
                      type: string
                      format: uuid
                      readOnly: true
                      examples:
                        - 1cf8b15b-4f12-43c5-837c-dbbc09aefa55
    CartItemsObjectRequest:
      title: Cart Items Object Request
      oneOf:
        - $ref: '#/components/schemas/CartItemObject'
        - $ref: '#/components/schemas/SubscriptionItemObject'
        - $ref: '#/components/schemas/CartMergeObjectRequest'
        - $ref: '#/components/schemas/CustomItemObject'
        - $ref: '#/components/schemas/ReOrderObjectRequest'
        - $ref: '#/components/schemas/PromotionItemObject'
    CartItemObject:
      title: Cart Item Object
      type: object
      properties:
        data:
          allOf:
            - $ref: '#/components/schemas/CartItemObjectData'
            - $ref: '#/components/schemas/CartItemResponse'
    CartItemObjectData:
      title: Cart Item Object Data
      type: object
      required:
        - type
        - quantity
      properties:
        type:
          description: The type of object being returned.
          type: string
          enum:
            - cart_item
        quantity:
          description: The number of items added to the cart.
          type: number
          examples:
            - 2
        id:
          type: string
          format: uuid
          description: >-
            Specifies the ID of the product you want to add to cart. (use this
            OR sku)
          examples:
            - 78d7b5c2-c852-40ad-87bb-beb161f61f37
        sku:
          type: string
          description: >-
            Specifies the item SKU that you want to add to cart. (use this OR
            id)
          examples:
            - my-item
        custom_inputs:
          description: The custom text to be added to a product.
          type: object
        bundle_configuration:
          description: Object used to describe the bundle options selected.
          type: object
          properties:
            selected_options:
              description: Specifies selected options.
              type: object
            component_products:
              description: Array of component products for the selected options.
              type: array
        shipping_group_id:
          description: Identifier for a created Cart Shipping Group
          type: string
        location:
          description: The slug of a stock location.
          type: string
    SubscriptionItemObject:
      title: Subscription Item Object
      type: object
      properties:
        data:
          allOf:
            - $ref: '#/components/schemas/SubscriptionItemObjectData'
            - $ref: '#/components/schemas/CartItemResponse'
    SubscriptionItemObjectData:
      title: Subscription Item Object Data
      type: object
      required:
        - id
        - type
        - quantity
        - subscription_configuration
      properties:
        type:
          description: The type of object being returned.
          type: string
          enum:
            - subscription_item
        quantity:
          description: The number of items added to the cart.
          type: number
          examples:
            - 1
        id:
          type: string
          format: uuid
          description: >-
            Specifies the ID of the subscription offering you want to add to
            cart.
          examples:
            - 4ca958bc-7d69-4e2d-b5d4-c74bd5a6cde6
        subscription_configuration:
          type: object
          description: Specifies how the subscription offering should be configured.
          required:
            - plan
          properties:
            plan:
              type: string
              format: uuid
              description: >-
                The ID of the plan within the offering to use for the
                subscription.
    CartMergeObjectRequest:
      title: Cart Merge Object Request
      type: object
      properties:
        data:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/CartMergeObject'
          description: ''
        options:
          $ref: '#/components/schemas/AddAllOrNothingOptionsObject'
    CartMergeObject:
      title: Cart Merge Object
      type: object
      required:
        - type
        - cart_id
      properties:
        type:
          description: The type of object being returned. Must be `cart_items`.
          type: string
          enum:
            - cart_items
        cart_id:
          description: The original cart to be merged from.
          type: string
          format: uuid
          examples:
            - 78d7b5c2-c852-40ad-87bb-beb161f61f37
    CustomItemObject:
      title: Custom Item Object
      type: object
      properties:
        data:
          allOf:
            - $ref: '#/components/schemas/CustomItemObjectData'
          description: ''
    CustomItemObjectData:
      title: Custom Item Object Data
      type: object
      required:
        - type
        - name
        - quantity
        - price
      properties:
        type:
          description: The type of object being returned. Must be `custom_item`.
          type: string
          enum:
            - custom_item
        quantity:
          description: The number of custom items to add to cart.
          type: number
          examples:
            - 2
        price:
          type: object
          required:
            - amount
          properties:
            amount:
              description: The unit price of the custom item.
              type: number
              examples:
                - 10000
            includes_tax:
              description: >-
                Set to`true` if relevant taxes have been included in the price,
                `false` if not. Defaults to `true`.
              type: boolean
        description:
          description: A description of the custom item.
          type: string
          examples:
            - My first custom item!
        sku:
          type: string
          description: >-
            The `SKU` code to use for the custom item. See [best
            practices](https://elasticpath.dev/docs/commerce-cloud/carts/cart-items/add-custom-item-to-cart#best-practices)
            to use the `SKU` code.
          examples:
            - my-custom-item
        name:
          type: string
          description: The name of the custom item.
          examples:
            - My Custom Item
        custom_inputs:
          description: The custom text to be added to a product.
          type: object
        shipping_group_id:
          description: Identifier for a created Cart Shipping Group
          type: string
    ReOrderObjectRequest:
      title: Re-Order Object Request
      type: object
      properties:
        data:
          allOf:
            - $ref: '#/components/schemas/ReOrderObject'
        options:
          $ref: '#/components/schemas/AddAllOrNothingOptionsObject'
    ReOrderObject:
      title: Re Order Object
      type: object
      required:
        - type
        - order_id
      properties:
        type:
          description: The type of resource being returned. Use `order_items`.
          type: string
          enum:
            - order_items
        order_id:
          description: The unique identifier of the order.
          type: string
          format: uuid
          examples:
            - 78d7b5c2-c852-40ad-87bb-beb161f61f37
    BulkAddItemsRequest:
      title: Bulk Add Items Request
      type: object
      properties:
        data:
          anyOf:
            - $ref: '#/components/schemas/CartItemsObjectRequest'
            - $ref: '#/components/schemas/CartMergeObjectRequest'
            - $ref: '#/components/schemas/CustomItemObject'
            - $ref: '#/components/schemas/ReOrderObjectRequest'
            - $ref: '#/components/schemas/PromotionItemObject'
    PromotionItemObject:
      title: Promotion Item Object
      type: object
      properties:
        data:
          allOf:
            - $ref: '#/components/schemas/PromotionItemObjectData'
    PromotionItemObjectData:
      title: Promotion Item Object Data
      type: object
      required:
        - type
        - code
      properties:
        type:
          description: Specifies the type of resource, which is `promotion_item`.
          type: string
          enum:
            - promotion_item
        code:
          description: >-
            Specifies the promotion code. For more information about
            codes[].user[], see the [Create Promotion
            codes](/docs/api/promotions/create-promotion-codes) section.
          type: string
          examples:
            - PROMO_CODE
    BulkUpdateCartsItems:
      title: Bulk Update Carts Items
      type: object
      required:
        - id
        - quantity
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                description: >-
                  Specifies the ID of the cart item that you want to update in
                  cart.
                type: string
                examples:
                  - '{{cartitemID}}'
              quantity:
                description: Specifies the amount of items to update in the cart.
                type: number
                examples:
                  - 2
              custom_inputs:
                description: >-
                  Specifies the custom text to be added to a product. See
                  [custom
                  inputs](https://elasticpath.dev/docs/pxm/products/ep-pxm-products-api/update-a-product#using-custom-inputs-attribute).
                type: object
        options:
          $ref: '#/components/schemas/UpdateAllOrNothingOptionsObject'
    UpdateCartsItems:
      title: Update Carts Items
      type: object
      required:
        - quantity
      properties:
        data:
          type: object
          properties:
            id:
              description: The unique identifier of the cart item.
              type: string
              format: uuid
              examples:
                - '{{cartitemID}}'
            quantity:
              description: The amount of products to add to cart.
              type: number
              examples:
                - 2
            custom_inputs:
              description: The custom text to be added to a product.
              type: object
            shipping_group_id:
              description: >-
                The unique identifier of the shipping group to be added to the
                cart.
              type: string
              format: uuid
              examples:
                - 900ab9c1-4b39-43fe-b080-0dc2806065d9
    AddAllOrNothingOptionsObject:
      title: Add All Or Nothing Options Object
      type: object
      properties:
        add_all_or_nothing:
          description: >-
            When `true`, if an error occurs for any item, no items are added to
            the cart. When `false`, valid items are added to the cart and the
            items with errors are reported in the response. Default is `false`.
          type: boolean
          examples:
            - false
    UpdateAllOrNothingOptionsObject:
      title: Update All Or Nothing Options Object
      type: object
      properties:
        update_all_or_nothing:
          description: >-
            When set to`true`, if an error occurs for any item, no items are
            updated in the cart. When set to `false`, valid items are updated in
            the cart and the items with errors are reported in the response.
            Default is `true`.
          type: boolean
          examples:
            - false
    CartItemResponse:
      title: Cart Item Relationship
      type: object
      properties:
        product_id:
          description: The unique ID of the product.
          type: string
          format: uuid
          readOnly: true
          examples:
            - 55cda543-f9d7-42a4-b40a-665f2e4ff7c5
        subscription_offering_id:
          description: The unique ID of the subscription offering for subscription items.
          type: string
          format: uuid
          readOnly: true
          examples:
            - 9c13669e-29d7-42ea-bc95-1b32399adb9d
        name:
          description: The name of this item
          type: string
          readOnly: true
          examples:
            - shirt
        description:
          description: A description of the cart item.
          type: string
          readOnly: true
          examples:
            - T-shirt.
        catalog_id:
          description: >-
            The unique identifier of the catalog associated with the product is
            shown if catalog_source=pim is set.
          type: string
          readOnly: true
          format: uuid
          examples:
            - 11d3f9d2-c99b-472c-96c3-51842333daea
        catalog_source:
          description: The catalog source. Always `pim` or `legacy`.
          type: string
          readOnly: true
          examples:
            - pim
        image:
          type: object
          readOnly: true
          properties:
            mime_type:
              description: The MIME type for the uploaded file.
              type: string
              readOnly: true
              examples:
                - image/png
            file_name:
              description: The name of the image file that was uploaded.
              type: string
              readOnly: true
              examples:
                - shirt-trans.png
            href:
              description: The link to the image.
              type: string
              readOnly: true
              examples:
                - >-
                  https://files-eu.epusercontent.com/e8c53cb0-120d-4ea5-8941-ce74dec06038/7cc08cbb-256e-4271-9b01-d03a9fac9f0a.png
        manage_stock:
          description: null
          type: boolean
          readOnly: true
          examples:
            - true
        unit_price:
          readOnly: true
          $ref: '#/components/schemas/ItemPriceData'
        value:
          readOnly: true
          $ref: '#/components/schemas/ItemPriceData'
        links:
          type: object
          readOnly: true
          properties:
            product:
              description: A URL related to the resource.
              type: string
              examples:
                - >-
                  https://useast.api.elasticpath.com/products/9eda5ba0-4f4a-4074-8547-ccb05d1b5981
        meta:
          type: object
          readOnly: true
          properties:
            display_price:
              type: object
              properties:
                with_tax:
                  $ref: '#/components/schemas/FormattedPriceData'
                without_tax:
                  $ref: '#/components/schemas/FormattedPriceData'
                tax:
                  $ref: '#/components/schemas/FormattedPriceData'
                discount:
                  $ref: '#/components/schemas/FormattedPriceData'
                without_discount:
                  $ref: '#/components/schemas/FormattedPriceData'
            timestamps:
              $ref: '#/components/schemas/CartCheckoutTimestamps'
    CartsResponse:
      title: Carts Response
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            anyOf:
              - $ref: '#/components/schemas/CartItemObject'
        meta:
          type: object
          properties:
            display_price:
              type: object
              properties:
                with_tax:
                  $ref: '#/components/schemas/FormattedPriceData'
                without_tax:
                  $ref: '#/components/schemas/FormattedPriceData'
                tax:
                  $ref: '#/components/schemas/FormattedPriceData'
                discount:
                  $ref: '#/components/schemas/FormattedPriceData'
                without_discount:
                  $ref: '#/components/schemas/FormattedPriceData'
                discounts:
                  type: object
                  additionalProperties:
                    type: object
                    properties:
                      amount:
                        type: number
                        examples:
                          - -1000
                      currency:
                        type: string
                        examples:
                          - USD
                      formatted:
                        type: string
                        examples:
                          - '-$1.00'
            timestamps:
              $ref: '#/components/schemas/CartTimestamps'
    ItemPriceData:
      title: Order Price Data
      type: object
      properties:
        amount:
          description: The amount for this item as an integer.
          type: number
          readOnly: true
          examples:
            - 10000
        currency:
          description: The currency this item was added to the cart as.
          type: string
          readOnly: true
          examples:
            - USD
        includes_tax:
          description: Whether or not this price is tax inclusive.
          type: boolean
          readOnly: true
          examples:
            - false
    CartsRelationshipsAccountsData:
      title: Carts Relationships Accounts Data
      type: object
      properties:
        data:
          type: array
          items:
            properties:
              id:
                description: The ID of the account.
                type: string
                examples:
                  - '{{accountID}}'
              type:
                description: The type of related object. Ensure that it is account.
                type: string
                examples:
                  - account
    CartsRelationshipsCustomersData:
      title: Carts Relationships Customers Data
      type: object
      properties:
        data:
          type: array
          items:
            properties:
              id:
                description: The ID of the customer.
                type: string
                examples:
                  - '{{customerID}}'
              type:
                description: The type of related object. Ensure that it is customer.
                type: string
                examples:
                  - customer
    CartsItemsTaxesObject:
      title: Carts Items Taxes Object
      type: object
      required:
        - type
        - rate
      properties:
        code:
          description: A unique tax code in this jurisdiction.
          type: string
          examples:
            - TAX01
        jurisdiction:
          description: The relevant tax jurisdiction.
          type: string
          examples:
            - UK
        name:
          description: The name of the tax item.
          type: string
          examples:
            - Tax name
        rate:
          description: The tax rate represented as a decimal (12.5% -> 0.125).
          type: number
          examples:
            - 0.2
        type:
          description: The type of object being returned. Use `tax_item`.
          type: string
          examples:
            - tax_item
        id:
          description: The unique identifier for this tax item.
          type: string
          format: uuid
          readOnly: true
          examples:
            - 662461ad-ddcb-4dbd-8ed7-ade9aa63b5f9
    CartsBulkCustomDiscounts:
      title: CartsBulkCustomDiscounts
      type: object
      properties:
        data:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/CartsCustomDiscountsObject'
              - $ref: '#/components/schemas/CartItemBulkCustomDiscountObject'
        options:
          $ref: '#/components/schemas/AddAllOrNothingOptionsObject'
    CartsBulkCustomDiscountsResponse:
      title: CartsBulkCustomDiscountsResponse
      type: object
      properties:
        data:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/CartsCustomDiscountsResponse'
              - $ref: '#/components/schemas/artItemBulkCustomDiscountResponse'
        options:
          $ref: '#/components/schemas/AddAllOrNothingOptionsObject'
    CartItemBulkCustomDiscountObject:
      title: CartItemBulkCustomDiscountObject
      type: object
      allOf:
        - $ref: '#/components/schemas/CartsCustomDiscountsObject'
        - $ref: '#/components/schemas/CustomDiscountRelationshipsCartItemRequest'
    artItemBulkCustomDiscountResponse:
      title: artItemBulkCustomDiscountResponse
      type: object
      allOf:
        - $ref: '#/components/schemas/CartsCustomDiscountsResponse'
        - $ref: '#/components/schemas/CustomDiscountRelationshipsCartItemRequest'
    CartsCustomDiscountsObject:
      title: CartsCustomDiscountsObject
      type: object
      required:
        - amount
        - description
        - discount_code
        - discount_engine
        - external_id
        - type
      properties:
        amount:
          description: >-
            Specifies an amount to be applied for the custom discount. It must
            be less than zero.
          type: number
          examples:
            - -1000
        description:
          description: Specifies a description for the custom discount.
          type: string
          examples:
            - Custom discount description
        discount_code:
          description: Specifies the discount code used for the custom discount.
          type: string
          examples:
            - cart-custom-promo-code
        discount_engine:
          description: >-
            Specifies from where the custom discount is applied. For example,
            Talon.one.
          type: string
          examples:
            - Custom Discount Engine
        external_id:
          description: Specifies an external id for the custom discount.
          type: string
          examples:
            - custom-discount-external-id
        type:
          description: Specifies the type of the resource. Always `custom_discount`.
          type: string
          examples:
            - custom_discount
    CartsCustomDiscountsResponse:
      title: CartsCustomDiscountsResponse
      type: object
      properties:
        amount:
          type: object
          properties:
            amount:
              description: >-
                Specifies an amount to be applied for the custom discount. It
                must be less than zero.
              type: number
              examples:
                - -1000
            currency:
              description: The currency set for the custom discount.
              type: string
              examples:
                - USD
            formatted:
              description: The formatted value for the custom discount.
              type: string
              examples:
                - '-$10.00'
        description:
          description: Specifies a description for the custom discount.
          type: string
          examples:
            - Custom discount description
        discount_code:
          description: Specifies the discount code used for the custom discount.
          type: string
          examples:
            - cart-custom-promo-code
        discount_engine:
          description: >-
            Specifies from where the custom discount is applied. For example,
            Talon.one.
          type: string
          examples:
            - Custom Discount Engine
        external_id:
          description: Specifies an external id for the custom discount.
          type: string
          examples:
            - custom-discount-external-id
        type:
          description: Specifies the type of the resource. Always `custom_discount`.
          type: string
          examples:
            - custom_discount
        id:
          description: Specifies the UUID of the custom discount.
          type: string
          format: uuid
          readOnly: true
          examples:
            - 662461ad-ddcb-4dbd-8ed7-ade9aa63b5f9
    CustomDiscountRelationshipsCartItemRequest:
      title: CustomDiscountRelationshipsCartItemRequest
      type: object
      required:
        - type
        - id
      properties:
        relationships:
          type: object
          properties:
            item:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    type:
                      description: >-
                        Specifies the type of item. For example, `custom_item`
                        or `cart_item`.
                      type: string
                      examples:
                        - cart_item
                    id:
                      description: >-
                        Specifies the unique identifier of the `cart_item` or
                        `custom_item` in the cart.
                      type: string
                      format: uuid
                      examples:
                        - 5601a4b1-9d13-42d3-8fb7-03b35169d1b6
    CartItemRelationship:
      title: CartItemRelationship
      type: object
      required:
        - type
        - id
      properties:
        relationships:
          type: object
          properties:
            order:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    type:
                      description: This specifies the type of item.
                      type: string
                      examples:
                        - order
                    id:
                      description: >-
                        This specifies the ID of the cart_item or custom_item in
                        the cart.
                      type: string
                      format: uuid
                      examples:
                        - 5601a4b1-9d13-42d3-8fb7-03b35169d1b6
    CartsBulkTaxes:
      title: CartsBulkTaxes
      type: object
      properties:
        data:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/CartsItemsTaxesObject'
              - $ref: '#/components/schemas/CartItemRelationship'
        options:
          $ref: '#/components/schemas/AddAllOrNothingOptionsObject'
    OrdersAnonymizeRequest:
      title: OrdersAnonymizeRequest
      type: object
      properties:
        data:
          $ref: '#/components/schemas/OrdersAnonymizeData'
    OrdersAnonymizeData:
      title: OrdersAnonymizeData
      type: object
      properties:
        order_ids:
          description: >-
            The unique identifiers of the orders to be anonymized. You can
            anonymize multiple orders at the same time.
          type: array
          items:
            type: string
          examples:
            - - '{{orderID}}'
    OrdersUpdateRequest:
      title: OrdersUpdateRequest
      type: object
      properties:
        data:
          oneOf:
            - $ref: '#/components/schemas/OrdersAddressData'
            - $ref: '#/components/schemas/OrdersCancelData'
            - $ref: '#/components/schemas/OrdersFulfilledData'
    OrdersAddressData:
      title: OrdersAddressData
      type: object
      required:
        - type
        - shipping_address
      properties:
        order_number:
          description: >-
            Specifies a user-managed, optional field used as an alternative to
            the existing order_id. If provided, the order-number will be sent to
            Authorize.net instead of the order_id, and will appear as the
            invoice number in Authorize.net transactions.
          type: string
          examples:
            - 1234
        external_ref:
          description: >-
            Represents an optional external ID reference for an order. It can
            contain alphanumeric characters, special characters, and spaces, and
            is not required to be unique. The maximum allowed length is 64
            characters. It can be used to include an external reference from a
            separate company system.
          type: string
          examples:
            - external_order_123
        shipping_address:
          type: object
          properties:
            first_name:
              description: Specifies the first name of the address holder.
              type: string
              examples:
                - James
            last_name:
              description: Specifies the last name of the address holder.
              type: string
              examples:
                - Doe
            phone_number:
              description: Specifies the phone number of the address holder.
              type: string
              examples:
                - 5558679305
            company_name:
              description: Specifies the company name.
              type: string
              examples:
                - company name
            line_1:
              description: Specifies the first line of the address.
              type: string
              examples:
                - 1234 Disney Drive
            line_2:
              description: Specifies the second line of the address.
              type: string
              examples:
                - Disney Resort
            city:
              description: Specifies the name of the city in the shipping address.
              type: string
              examples:
                - Anaheim
            county:
              description: Specifies the county of the shipping address.
              type: string
              examples:
                - Orange
            region:
              description: >-
                Specifies the state, province, or region of the shipping
                address.
              type: string
              examples:
                - CA
            postcode:
              description: Specifies the postcode or ZIP code of the address.
              type: string
              examples:
                - 92802
            country:
              description: Specifies the country in the shipping address.
              type: string
              examples:
                - US
            instructions:
              description: Specifies any instructions provided with the shipping address.
              type: string
              examples:
                - Buzzer 10233
    OrdersCancelData:
      title: OrdersCancelData
      type: object
      required:
        - type
        - status
      properties:
        status:
          description: >-
            The status of the order. You can only update the status to
            `cancelled`.
          type: string
          examples:
            - cancelled
        type:
          description: The type of the resource. You must use order.
          type: string
          examples:
            - order
        external_ref:
          description: >-
            Represents an optional external ID reference for an order. It can
            contain alphanumeric characters, special characters, and spaces, and
            is not required to be unique. The maximum allowed length is 64
            characters. It can be used to include an external reference from a
            separate company system.
          type: string
          examples:
            - external_order_123
    OrdersFulfilledData:
      title: OrdersFulfilledData
      type: object
      required:
        - type
        - shipping
      properties:
        shipping:
          description: >-
            The shipping status of the order. You can only update the shipping
            status to `fulfilled`.
          type: string
          examples:
            - fulfilled
        type:
          description: The type of the resource. You must use order.
          type: string
          examples:
            - order
        external_ref:
          description: >-
            Represents an optional external ID reference for an order. It can
            contain alphanumeric characters, special characters, and spaces, and
            is not required to be unique. The maximum allowed length is 64
            characters. It can be used to include an external reference from a
            separate company system.
          type: string
          examples:
            - external_order_123
    PaymentsRequest:
      title: PaymentsRequest
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Data.PaymentObject'
    Data.BasePayments:
      title: Data.BasePayments
      type: object
      required:
        - gateway
        - method
      properties:
        gateway:
          type: string
          enum:
            - adyen
            - authorize_net
            - braintree
            - card_connect
            - cyber_source
            - elastic_path_payments_stripe
            - manual
            - paypal_express_checkout
            - stripe
            - stripe_connect
            - stripe_payment_intents
        method:
          description: Specifies the transaction method, such as `purchase` or `authorize`.
          type: string
          enum:
            - authorize
            - purchase
            - purchase_setup
            - authorize_setup
        amount:
          description: The amount to be paid for the transaction.
          type: number
          examples:
            - 10000
    Data.AdyenPayment:
      title: Data.AdyenPayment
      required:
        - payment
        - gateway
      allOf:
        - $ref: '#/components/schemas/Data.BasePayments'
        - type: object
          properties:
            gateway:
              description: Specifies the gateway. You must use `adyen`.
              type: string
              enum:
                - adyen
            options:
              type: object
              properties:
                shopper_reference:
                  description: >-
                    The shopper reference token associated with the saved
                    payment method.
                  type: string
                recurring_processing_model:
                  description: Enter CardOnFile for a one-time purchase.
                  type: string
            payment:
              description: The Adyen recurringDetailReference payment method identifier.
              type: string
    Data.AuthorizeNetPayment:
      title: Data.AuthorizeNetPayment
      required:
        - payment
        - gateway
      allOf:
        - $ref: '#/components/schemas/Data.BasePayments'
        - type: object
          properties:
            gateway:
              description: Specifies the gateway. You must use `authorize_net`.
              type: string
              enum:
                - authorize_net
            options:
              type: object
              properties:
                customer_payment_profile_id:
                  description: The Authorize.net customer payment profile ID.
                  type: string
            payment:
              description: The Authorize.net customer profile ID.
              type: string
    Data.BraintreePayment:
      title: Data.BraintreePayment
      required:
        - payment
        - gateway
      allOf:
        - $ref: '#/components/schemas/Data.BasePayments'
        - type: object
          properties:
            gateway:
              description: Specifies the gateway. You must use `braintree`.
              type: string
              enum:
                - braintree
            payment:
              description: The Braintree Customer ID that you want to bill.
              type: string
    Data.CardConnectPayment:
      title: Data.CardConnectPayment
      required:
        - payment
        - gateway
      allOf:
        - $ref: '#/components/schemas/Data.BasePayments'
        - type: object
          properties:
            gateway:
              description: Specifies the gateway. You must use `card_connect`.
              type: string
              enum:
                - card_connect
            payment:
              description: >-
                Enter account_id, profile_id from CardPointe API. For example,
                1|16178397535388255208.
              type: string
    Data.CyberSourcePayment:
      title: Data.CyberSourcePayment
      required:
        - payment
        - gateway
      allOf:
        - $ref: '#/components/schemas/Data.BasePayments'
        - type: object
          properties:
            gateway:
              description: Specifies the gateway. You must use `cyber_source`.
              type: string
              enum:
                - cyber_source
            payment:
              description: The CyberSource token.
              type: string
    ElasticPathPaymentsPoweredByStripePayment:
      title: Elastic Path Payments Powered By Stripe
      required:
        - gateway
      allOf:
        - $ref: '#/components/schemas/Data.BasePayments'
        - type: object
          properties:
            gateway:
              description: >-
                Specifies the gateway. You must use
                `elastic_path_payments_stripe`.
              type: string
              enum:
                - elastic_path_payments_stripe
            options:
              type: object
              properties:
                receipt_email:
                  description: >-
                    Provides the email address to which you want to send the
                    Stripe receipts for the transactions within the store. This
                    feature is available only in the live mode.
                  type: string
                automatic_payment_methods:
                  type: object
                  description: >-
                    Parent object determining whether to use Stripe's
                    `automatic_payment_methods` setting.
                  properties:
                    enabled:
                      type: boolean
                      description: >-
                        When set to true, it displays all enabled payment
                        methods from the Stripe dashboard. When set to false,
                        the Stripe default, which is card, is used.
            payment_method_types:
              type: array
              items:
                type: string
              description: >-
                Specifies the Stripe payment method types configured for the
                store. See [Stripe
                Documentation](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types).
              examples:
                - - card
            payment:
              description: Specifies the Stripe token or source.
              type: string
    Data.ManualPayment:
      title: Data.ManualPayment
      required:
        - gateway
      allOf:
        - $ref: '#/components/schemas/Data.BasePayments'
        - type: object
          properties:
            gateway:
              description: Specifies the type of payment gateway. You must use `manual`.
              type: string
              enum:
                - manual
            paymentmethod_meta:
              type: object
              properties:
                custom_reference:
                  description: >-
                    A reference associated with the payment method. This might
                    include loyalty points or gift card identifiers. We
                    recommend not to include personal information in this field.
                  type: string
                name:
                  description: A custom name associated with the payment method.
                  type: string
    Data.PayPalExpressCheckoutPayment:
      title: Data.PayPalExpressCheckoutPayment
      required:
        - gateway
      allOf:
        - $ref: '#/components/schemas/Data.BasePayments'
        - type: object
          properties:
            gateway:
              description: >-
                Specifies the type of payment gateway. You must use
                `paypal_express_checkout`.
              type: string
              enum:
                - paypal_express_checkout
            options:
              type: object
              properties:
                description:
                  description: The description for the payment.
                  type: string
                soft_descriptor:
                  description: >-
                    The descriptor appended to PayPal generated descriptor that
                    is visible on the card statement of the payer.
                  type: string
                application_context:
                  type: object
                  properties:
                    brand_name:
                      description: >-
                        The label that overrides the business name in the PayPal
                        account on the PayPal site.
                      type: string
                    locale:
                      description: >-
                        The locale pages that appear based on language and
                        country code. PayPal supports a five-character code. For
                        example, ja-JP.
                      type: string
                    landing_page:
                      description: >-
                        The type of landing page to show on the PayPal site for
                        customer checkout. Use values LOGIN, BILLING, or
                        NO_PREFERENCE.
                      type: string
                    shipping_preference:
                      description: >-
                        The shipping preference. Use SET_PROVIDED_ADDRESS value.
                        This parameter does allow the user to change their
                        address on PayPal site.
                      type: string
                    user_action:
                      description: >-
                        If you set `useraction=commit` in the query string, the
                        flow redirects the buyer to the PayPal payment page and
                        displays a Pay Now button. When the shopper clicks **Pay
                        Now**, call `DoExpressCheckoutPayment` to complete the
                        payment without additional interaction from the shopper.
                        Choose this flow when you know the final payment amount
                        when you initiate the checkout flow.
                      type: string
                    return_url:
                      description: >-
                        The callback URL for PayPal to redirect the user in the
                        case of approved payment.
                      type: string
                    cancel_url:
                      description: >-
                        The callback URL for PayPal to redirect user in the case
                        a cancelled payment.
                      type: string
    Data.StripePayment:
      title: Data.StripePayment
      required:
        - gateway
      allOf:
        - $ref: '#/components/schemas/Data.BasePayments'
        - type: object
          properties:
            gateway:
              description: Specifies the type of payment gateway. You must use `stripe`.
              type: string
              enum:
                - stripe
            options:
              type: object
              properties:
                receipt_email:
                  description: >-
                    The option to provide an email for Stripe receipts. Specify
                    live mode to access this feature.
                  type: string
            payment:
              description: The Stripe token or source.
              type: string
    Data.StripeConnectPayment:
      title: Data.StripeConnectPayment
      required:
        - gateway
      allOf:
        - $ref: '#/components/schemas/Data.BasePayments'
        - type: object
          properties:
            gateway:
              description: >-
                Specifies the type of payment gateway. You must use
                `stripe_connect`.
              type: string
              enum:
                - stripe_connect
            options:
              type: object
              properties:
                receipt_email:
                  description: >-
                    Provides the email address to which you want to send the
                    Stripe receipts for the transactions within the store. This
                    feature is available only in the live mode.
                  type: string
            payment:
              description: Specifies the Stripe token or source.
              type: string
    Data.StripePaymentIntentsPayment:
      title: Data.StripePaymentIntentsPayment
      required:
        - gateway
      allOf:
        - $ref: '#/components/schemas/Data.BasePayments'
        - type: object
          properties:
            gateway:
              description: >-
                Specifies the type of payment gateway. You must use
                `stripe_payment_intents`.
              type: string
              enum:
                - stripe_payment_intents
            options:
              type: object
              properties:
                receipt_email:
                  description: >-
                    Provides the email address to which you want to send the
                    Stripe receipts for the transactions within the store. This
                    feature is available only in the live mode.
                  type: string
            payment:
              description: Specifies the Stripe token or source.
              type: string
    Data.PaymentObject:
      oneOf:
        - $ref: '#/components/schemas/Data.AdyenPayment'
        - $ref: '#/components/schemas/Data.AuthorizeNetPayment'
        - $ref: '#/components/schemas/Data.BraintreePayment'
        - $ref: '#/components/schemas/Data.CardConnectPayment'
        - $ref: '#/components/schemas/Data.CyberSourcePayment'
        - $ref: '#/components/schemas/ElasticPathPaymentsPoweredByStripePayment'
        - $ref: '#/components/schemas/Data.ManualPayment'
        - $ref: '#/components/schemas/Data.PayPalExpressCheckoutPayment'
        - $ref: '#/components/schemas/Data.StripePayment'
        - $ref: '#/components/schemas/Data.StripeConnectPayment'
        - $ref: '#/components/schemas/Data.StripePaymentIntentsPayment'
    TransactionResponse:
      title: TransactionResponse
      type: object
      properties:
        id:
          description: The ID of the transaction.
          type: string
          format: uuid
          readOnly: true
        reference:
          description: The payment gateway reference.
          type: string
          examples:
            - manual
        name:
          description: A custom name associated with the payment method.
          type: string
          examples:
            - payment method name
        custom_reference:
          description: >-
            A reference associated with the payment method. This might include
            loyalty points or gift card identifiers. We recommend you not to
            include personal information in this field.
          type: string
          examples:
            - custom reference
        gateway:
          description: The name of the payment gateway used.
          type: string
          enum:
            - adyen
            - authorize_net
            - braintree
            - card_connect
            - cyber_source
            - elastic_path_payments_stripe
            - manual
            - paypal_express_checkout
            - stripe
            - stripe_connect
            - stripe_payment_intents
        amount:
          description: The amount for this transaction.
          type: number
          examples:
            - 10000
        refunded_amount:
          description: The refunded amount.
          type: number
          examples:
            - 0
        currency:
          description: The transaction currency.
          type: string
          examples:
            - USD
        transaction-type:
          description: >-
            The type of transaction, such as `purchase`, `capture`, `authorize`
            or `refund`.
          type: string
          examples:
            - capture
        status:
          description: >-
            The status provided by the gateway for this transaction, such as
            `complete` or `failed`.
          type: string
          examples:
            - complete
        relationships:
          type: object
          properties:
            order:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    type:
                      description: >-
                        Represents the type of the object being returned. It is
                        always `order`.
                      type: string
                      examples:
                        - order
                    id:
                      description: The ID of the order.
                      type: string
                      format: uuid
                      examples:
                        - 5601a4b1-9d13-42d3-8fb7-03b35169d1b6
        meta:
          type: object
          properties:
            display_price:
              $ref: '#/components/schemas/FormattedPriceData'
            display_refunded_amount:
              $ref: '#/components/schemas/FormattedPriceData'
            timestamps:
              $ref: '#/components/schemas/CartCheckoutTimestamps'
    OrdersTransactionsConfirmRequest:
      title: OrdersTransactionsConfirmRequest
      type: object
      properties:
        data:
          type: object
    OrdersTransactionsCaptureRequest:
      title: OrdersTransactionsCaptureRequest
      type: object
      properties:
        data:
          type: object
          properties:
            options:
              type: object
              properties:
                soft_descriptor:
                  type: string
                note_to_payer:
                  type: string
    OrdersTransactionsRefundRequest:
      title: OrdersTransactionsRefundRequest
      type: object
      properties:
        data:
          type: object
          properties:
            amount:
              description: >-
                The amount value to be refunded. If this field is not provided,
                it will be considered as manual refund (Mark as Refunded) and
                the refund process must be manually handled via payment
                provider. If the amount value is same as payment value, then it
                will be treated as a full refund and sent to the payment
                provider to process refund automatically.
              type: number
              examples:
                - 1000
            options:
              type: object
              properties:
                note:
                  description: >-
                    Provides comments about the refund. It is used by PayPal
                    Express.
                  type: string
    OrdersTransactionsCancelRequest:
      title: OrdersTransactionsCancelRequest
      type: object
      properties:
        data:
          type: object
          properties:
            options:
              type: object
            reason:
              description: >-
                Specifies the reason for canceling the transaction. The reason
                may include `duplicate`, `fraudulent`, `requested_by_customer`,
                or `abandoned`.
              type: string
              examples:
                - requested_by_customer
    OrderPriceData:
      title: OrderPriceData
      type: object
      properties:
        amount:
          description: The amount for this item.
          type: number
          examples:
            - 10000
        currency:
          description: The currency this item.
          type: string
          examples:
            - USD
        includes_tax:
          description: Whether or not this price is tax inclusive.
          type: boolean
          examples:
            - false
    FormattedPriceData:
      title: FormattedPriceData
      type: object
      properties:
        amount:
          description: The raw total of this cart.
          type: number
          examples:
            - 10000
        currency:
          description: The currency set for this cart.
          type: string
          examples:
            - USD
        formatted:
          description: The tax inclusive formatted total based on the currency.
          type: string
          examples:
            - $10.00
    OrderItemFormattedUnitPriceData:
      title: OrderItemFormattedUnitPriceData
      type: object
      properties:
        unit:
          $ref: '#/components/schemas/FormattedPriceData'
        value:
          $ref: '#/components/schemas/FormattedPriceData'
    DiscountData:
      title: DiscountData
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/OrderPriceData'
        code:
          type: string
          examples:
            - 10_off
        id:
          type: string
          format: uuid
          readOnly: true
          examples:
            - a01cf221-751b-46e4-b612-57ad3c645ee6
    OrderItemResponse:
      title: OrderItemResponse
      type: object
      properties:
        type:
          description: The type represents the object being returned.
          type: string
          examples:
            - order_item
        id:
          description: The unique identifier for this order item.
          type: string
          format: uuid
          readOnly: true
          examples:
            - 68bf8510-bebf-47b1-96ba-8a9930c7d928
        quantity:
          description: The quantity of this item were ordered.
          type: number
          examples:
            - 1
        product_id:
          description: The unique identifier for this order item.
          type: string
          format: uuid
          readOnly: true
          examples:
            - 4e9c6098-9701-4839-a69c-54d8256d9012
        subscription_offering_id:
          description: >-
            The unique identifier for the subscription offering for this order
            item.
          type: string
          format: uuid
          readOnly: true
          examples:
            - 69a39623-e681-415e-83c0-e1281010c77d
        name:
          description: The name of this order item.
          type: string
          examples:
            - Product 123
        sku:
          description: The SKU code for the order item.
          type: string
          examples:
            - IFD-1
        unit_price:
          $ref: '#/components/schemas/OrderPriceData'
        value:
          $ref: '#/components/schemas/OrderPriceData'
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/DiscountData'
        links:
          type: object
        meta:
          type: object
          properties:
            display_price:
              type: object
              properties:
                with_tax:
                  $ref: '#/components/schemas/OrderItemFormattedUnitPriceData'
                without_tax:
                  $ref: '#/components/schemas/OrderItemFormattedUnitPriceData'
                tax:
                  $ref: '#/components/schemas/OrderItemFormattedUnitPriceData'
                discount:
                  $ref: '#/components/schemas/OrderItemFormattedUnitPriceData'
                without_discount:
                  $ref: '#/components/schemas/OrderItemFormattedUnitPriceData'
                discounts:
                  type: object
                  additionalProperties:
                    type: object
                    properties:
                      amount:
                        type: number
                        examples:
                          - -1000
                      currency:
                        type: string
                        examples:
                          - USD
                      formatted:
                        type: string
                        examples:
                          - '-$1.00'
            timestamps:
              $ref: '#/components/schemas/CartCheckoutTimestamps'
        relationships:
          type: object
          properties:
            cart_item:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    type:
                      description: The type represents the object being returned.
                      type: string
                      examples:
                        - order_item
                    id:
                      description: The unique identifier for this item.
                      type: string
                      format: uuid
                      readOnly: true
                      examples:
                        - 5601a4b1-9d13-42d3-8fb7-03b35169d1b6
        catalog_id:
          description: >-
            The unique identifier of the catalog associated with the product is
            shown if `catalog_source=pim` is set.
          type: string
          examples:
            - default
        catalog_source:
          description: The catalog source. Always `pim` or `legacy`.
          type: string
          examples:
            - pim
            - legacy
    OrderResponse:
      title: OrderResponse
      type: object
      properties:
        type:
          description: Specifies the type of object being returned. You must use `order`.
          type: string
          examples:
            - order
        order_number:
          description: >-
            Specifies a user-managed, optional field used as an alternative to
            the existing `order_id`. If provided, the order-number will be sent
            to Authorize.net instead of the `order_id`, and will appear as the
            invoice number in Authorize.net transactions.
          type: string
          examples:
            - 1234
        external_ref:
          description: >-
            An optional external ID reference for an order. It can contain
            alphanumeric characters, special characters, and spaces, and is not
            required to be unique. The maximum allowed length is 64 characters.
            It can be used to include an external reference from a separate
            company system.
          type: string
          examples:
            - e-123456789
        id:
          description: Specifies the unique identifier of the order.
          type: string
          format: uuid
          readOnly: true
          examples:
            - aa854b8f-5930-476d-951a-e9b9cfbdefb1
        status:
          description: >-
            Specifies the status of the order, such as `incomplete`, `complete`,
            `processing`, or `cancelled`.
          type: string
          examples:
            - complete
            - incomplete
            - cancelled
        payment:
          description: >-
            Specifies the status of the payment, such as `unpaid`, `authorized`,
            `paid`, or `refunded`.
          type: string
          examples:
            - authorized
            - paid
            - unpaid
            - refunded
        shipping:
          description: >-
            Specifies the status of the shipment, such as `fulfilled` or
            `unfulfilled`.
          type: string
          examples:
            - unfulfilled
            - fulfilled
        anonymized:
          description: Specifies if the order is anonymized.
          type: boolean
          examples:
            - false
        meta:
          $ref: '#/components/schemas/OrderMeta'
        billing_address:
          $ref: '#/components/schemas/BillingAddress'
        contact:
          $ref: '#/components/schemas/Contact'
        shipping_address:
          $ref: '#/components/schemas/ShippingAddress'
    OrderMeta:
      title: OrderMeta
      type: object
      properties:
        timestamps:
          $ref: '#/components/schemas/CartCheckoutTimestamps'
        with_tax:
          $ref: '#/components/schemas/FormattedPriceData'
        without_tax:
          $ref: '#/components/schemas/FormattedPriceData'
        tax:
          $ref: '#/components/schemas/FormattedPriceData'
        discount:
          $ref: '#/components/schemas/FormattedPriceData'
        paid:
          $ref: '#/components/schemas/FormattedPriceData'
        authorized:
          $ref: '#/components/schemas/FormattedPriceData'
        without_discount:
          $ref: '#/components/schemas/FormattedPriceData'
    CustomerCheckout:
      title: Customer Checkout
      type: object
      properties:
        data:
          type: object
          properties:
            order_number:
              description: >-
                A user-managed, optional field used as an alternative to the
                existing `order_id`. If provided, the order-number will be sent
                to Authorize.net instead of the `order_id`, and will appear as
                the invoice number in Authorize.net transactions.
              type: string
            external_ref:
              description: >-
                An optional external ID reference for an order. It can contain
                alphanumeric characters, special characters, and spaces, and is
                not required to be unique. The maximum allowed length is 64
                characters. It can be used to include an external reference from
                a separate company system.
              type: string
            customer:
              type: object
              properties:
                id:
                  description: The ID of the customer.
                  type: string
            billing_address:
              $ref: '#/components/schemas/BillingAddress'
            shipping_address:
              $ref: '#/components/schemas/ShippingAddress'
    AccountCheckout:
      title: Account Checkout
      type: object
      properties:
        data:
          type: object
          properties:
            order_number:
              description: >-
                A user-managed, optional field used as an alternative to the
                existing `order_id`. If provided, the order-number will be sent
                to Authorize.net instead of the `order_id`, and will appear as
                the invoice number in Authorize.net transactions.
              type: string
            external_ref:
              description: >-
                An optional external ID reference for an order. It can contain
                alphanumeric characters, special characters, and spaces, and is
                not required to be unique. The maximum allowed length is 64
                characters. It can be used to include an external reference from
                a separate company system.
              type: string
            account:
              type: object
              properties:
                id:
                  description: The account ID.
                  type: string
                member_id:
                  description: The account member ID.
                  type: string
            contact:
              type: object
              properties:
                name:
                  description: The name of the account member.
                  type: string
                email:
                  description: The email address of the account member.
                  type: string
                  format: email
            billing_address:
              $ref: '#/components/schemas/BillingAddress'
            shipping_address:
              $ref: '#/components/schemas/ShippingAddress'
    BillingAddress:
      title: BillingAddress
      type: object
      required:
        - first_name
        - last_name
        - company_name
        - line_1
        - line_2
        - city
        - postcode
        - county
        - country
        - region
      properties:
        first_name:
          description: First name of the billing recipient.
          type: string
          examples:
            - John
        last_name:
          description: Last name of the billing recipient.
          type: string
          examples:
            - Doe
        company_name:
          description: Company name of the billing recipient.
          type: string
          examples:
            - John Doe Enterprises
        line_1:
          description: First line of the billing address.
          type: string
          examples:
            - 1 Sunny Street
        line_2:
          description: Second line of the billing address.
          type: string
        city:
          description: City of the billing address.
          type: string
          examples:
            - Los Angeles
        postcode:
          description: Postcode of the billing address.
          type: string
          examples:
            - '92802'
        county:
          description: County of the billing address.
          type: string
          examples:
            - Orange
        country:
          description: Country of the billing address.
          type: string
          examples:
            - US
        region:
          description: State, province, or region of the billing address.
          type: string
          examples:
            - CA
    Contact:
      title: Contact
      type: object
      properties:
        email:
          description: The email address of the contact.
          type: string
          examples:
            - johndoe@email.com
        name:
          description: The name of the contact.
          type: string
          examples:
            - John Doe
    ShippingAddress:
      title: ShippingAddress
      type: object
      required:
        - first_name
        - last_name
        - phone_number
        - company_name
        - line_1
        - line_2
        - city
        - postcode
        - county
        - country
        - region
        - instructions
      properties:
        first_name:
          description: First name of the shipping recipient.
          type: string
          examples:
            - John
        last_name:
          description: Last name of the shipping recipient.
          type: string
          examples:
            - Doe
        phone_number:
          description: Phone number of the shipping recipient.
          type: string
          examples:
            - (235) 765-8749
        company_name:
          description: Company of the shipping recipient.
          type: string
          examples:
            - John Doe Enterprises
        line_1:
          description: First line of the shipping address.
          type: string
          examples:
            - 1 Sunny Street
        line_2:
          description: Second line of the shipping address.
          type: string
          examples:
            - Apartment 123
        city:
          description: City of the shipping address.
          type: string
          examples:
            - Los Angeles
        postcode:
          description: Post code of the shipping address.
          type: string
          examples:
            - '92802'
        county:
          description: County of the shipping address.
          type: string
          examples:
            - Orange
        country:
          description: Country of the shipping address.
          type: string
          examples:
            - US
        region:
          description: State, province, or region of the shipping address.
          type: string
          examples:
            - CA
        instructions:
          description: Delivery instructions.
          type: string
          examples:
            - Please leave on porch
    Response.Meta.Carts:
      type: object
      properties:
        page:
          $ref: '#/components/schemas/Response.PaginationPage'
        results:
          $ref: '#/components/schemas/Response.PaginationResults'
    Response.Meta.Orders:
      type: object
      properties:
        page:
          $ref: '#/components/schemas/Response.PaginationPage'
        results:
          $ref: '#/components/schemas/Response.PaginationResults'
    Response.PaginationPage:
      type: object
      properties:
        current:
          description: The current page.
          type: integer
        limit:
          description: >-
            The maximum number of records per page for this response. You can
            set this value up to 100.
          type: integer
        offset:
          description: >-
            The current offset by number of records, not pages. Offset is
            zero-based.
          type: integer
        total:
          description: The total page count.
          type: integer
    Response.PaginationResults:
      type: object
      properties:
        total:
          description: The total page count.
          type: integer
    Response.PageLinks:
      type: object
      properties:
        current:
          description: Always the current page.
          type: string
        first:
          description: Always the first page.
          type: string
        last:
          description: If there is only one page, it is `null`.
          type: string
        next:
          description: If there is only one page, it is `null`.
          type: string
        prev:
          description: if the user is on the first page, it is `null`.
          type: string
    Response.Data:
      type: object
      properties:
        data: {}
    Response.Error:
      type: array
      properties:
        detail:
          type: string
        status:
          type: string
        title:
          type: string
    CartTimestamps:
      type: object
      properties:
        created_at:
          type: string
          examples: '2023-11-07T23:04:18.845Z'
        updated_at:
          examples: '2023-11-07T23:04:18.845Z'
        expires_at:
          examples: '2023-11-12T23:04:18.845Z'
    CartCheckoutTimestamps:
      type: object
      properties:
        created_at:
          description: The date this was created.
          type: string
          examples: '2023-11-07T23:04:18.845Z'
        updated_at:
          description: The date this was last updated.
          examples: '2023-11-07T23:04:18.845Z'
    cart_include:
      description: Included is an array of resources that are included in the response.
      type: object
      properties:
        items:
          description: The cart items associated with a cart.
          type: array
          items:
            $ref: '#/components/schemas/CartItemObject'
    ActivePlan:
      description: >-
        Whether a plan is active on a subscription using that offering. The
        `active_plan` attribute is null if a plan is not active in a
        subscription.
      type: boolean
      examples:
        - true
    ExternalRef:
      description: >-
        A unique attribute that you could use to contain information from
        another company system, for example. The maximum length is 2048
        characters.
      type: string
      examples:
        - abc123
      maxLength: 2048
    ExternalRefUpdate:
      description: >-
        A unique attribute that you could use to contain information from
        another company system, for example. The maximum length is 2048
        characters.
      type:
        - string
        - 'null'
      examples:
        - abc123
      maxLength: 2048
    SubscriptionType:
      type: string
      examples:
        - subscription
      const: subscription
    SubscriptionProductType:
      type: string
      examples:
        - subscription_product
      const: subscription_product
    ProrationPolicyType:
      type: string
      examples:
        - subscription_proration_policy
      const: subscription_proration_policy
    SubscriptionDunningRuleType:
      type: string
      examples:
        - subscription_dunning_rule
      const: subscription_dunning_rule
    SubscriptionPlanType:
      type: string
      examples:
        - subscription_plan
      const: subscription_plan
    SubscriptionFeatureType:
      type: string
      examples:
        - subscription_feature
      const: subscription_feature
    SubscriptionOfferingType:
      type: string
      examples:
        - subscription_offering
      const: subscription_offering
    SubscriptionOfferingFeatureType:
      type: string
      examples:
        - subscription_offering_feature
      const: subscription_offering_feature
    SubscriptionOfferingProductType:
      type: string
      examples:
        - subscription_offering_product
      const: subscription_offering_product
    SubscriptionOfferingPlanType:
      type: string
      examples:
        - subscription_offering_plan
      const: subscription_offering_plan
    SubscriptionJobType:
      type: string
      examples:
        - subscription_job
      const: subscription_job
    SubscriptionImportType:
      type: string
      examples:
        - subscription_import
      const: subscription_import
    SubscriptionImportErrorType:
      type: string
      examples:
        - subscription_import_error
      const: subscription_import_error
    SubscriptionImportError:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionImportErrorType'
        meta:
          $ref: '#/components/schemas/SubscriptionImportErrorMeta'
      required:
        - id
        - type
        - meta
    SubscriptionImportErrorMeta:
      type: object
      properties:
        owner:
          type: string
          examples:
            - store
        timestamps:
          $ref: '#/components/schemas/SubscriptionsTimestamps'
        error:
          type: string
          examples:
            - product name cannot be empty
        field:
          type: string
          examples:
            - name
        line_number:
          description: >-
            The line in the imported JSONL file at which the validation error
            occurred. Starts from 1.
          type: integer
          examples:
            - 123
        external_ref:
          $ref: '#/components/schemas/ExternalRef'
      required:
        - owner
        - timestamps
        - error
        - field
        - line_number
    SubscriptionInvoiceType:
      description: >-
        This represents the type of resource object being returned. Always
        `subscription_invoice`.
      type: string
      examples:
        - subscription_invoice
      const: subscription_invoice
    SubscriptionInvoicePaymentType:
      description: >-
        This represents the type of resource object being returned. Always
        `subscription_invoice_payment`.
      type: string
      examples:
        - subscription_invoice_payment
      const: subscription_invoice_payment
    Links:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Link'
    Link:
      anyOf:
        - $ref: '#/components/schemas/LinkURI'
        - $ref: '#/components/schemas/LinkObject'
    LinkURI:
      type:
        - string
        - 'null'
      format: uri
      examples:
        - http://example.com/articles/1/comments
    LinkObject:
      type: object
      properties:
        href:
          type: string
          format: uri
          examples:
            - http://example.com/articles/1/comments
        title:
          type: string
          examples:
            - Comments
        describedby:
          type: string
          format: uri
          examples:
            - http://example.com/schemas/article-comments
    Status:
      description: The status of a subscription, either `active` or `inactive`.
      type: string
      examples:
        - active
      enum:
        - active
        - inactive
      x-go-type: model.SubscriptionStatus
      x-go-type-import:
        name: model
        path: >-
          gitlab.elasticpath.com/commerce-cloud/subscriptions.svc/internal/domain/model
    Relationships:
      description: >-
        Relationships are established between different subscription entities.
        For example, a product and a plan are related to an offering, as both
        are attached to it.
      example:
        plans:
          links:
            related: /offerings/:offering-id/plans
            self: /offerings/:offering-id
          data:
            type: offering-plan
            id: 625fe958-7b4b-40a0-a2c0-dbb8f31eec0d
      additionalProperties:
        $ref: '#/components/schemas/Relationship'
    Relationship:
      anyOf:
        - $ref: '#/components/schemas/SingleRelationship'
        - $ref: '#/components/schemas/ManyRelationship'
    ManyRelationship:
      description: The list of resources that are related.
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/RelationshipData'
        links:
          $ref: '#/components/schemas/RelationshipLinks'
    SingleRelationship:
      description: The subscription resource that is related.
      properties:
        data:
          $ref: '#/components/schemas/RelationshipData'
        links:
          $ref: '#/components/schemas/RelationshipLinks'
    RelationshipData:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          description: This represents the type of resource being returned.
          type: string
          examples:
            - 11111111-2222-3333-4444-555555555555
      required:
        - id
        - type
    RelationshipLinks:
      description: >
        Links are used to allow you, as an API consumer, to move between
        requests. Single entities use a self parameter with a link to that
        specific resource. Sometimes, there aren’t enough entities for a project
        to fill multiple pages. In this situation, we return some defaults,
        instead of expecting you to check for these special cases. 

         - current - Always the current page.
         - first - Always the first page.
         - last - always `null`.
         - next - `null` if the user is on the first page.
         - previous - `null` if there is only one page.
      type: object
      properties:
        related:
          type: string
          examples:
            - foo.bar
    TimePeriod:
      description: A period of time between a start and end point.
      properties:
        start:
          description: The date and time a billing period started.
          type: string
          format: date-time
          examples:
            - '2017-07-21T17:32:28Z'
        end:
          description: The date and time a billing period ended.
          type: string
          format: date-time
          examples:
            - '2017-07-21T17:32:28Z'
      required:
        - start
        - end
    SingleCurrencyPrice:
      description: A price in a single currency.
      properties:
        currency:
          description: >-
            The three-letter [ISO currency
            code](https://www.iso.org/iso-4217-currency-codes.html) in
            uppercase, associated with a price.
          type: string
          examples:
            - USD
          maxLength: 1024
        amount:
          description: The value as a whole number of the currency's smallest subdivision.
          type: integer
          format: int64
          examples:
            - 100
        includes_tax:
          description: Whether the amount includes any taxes.
          type: boolean
          examples:
            - true
      example:
        currency: USD
        amount: 100
        includes_tax: false
      required:
        - amount
        - currency
    PriceUnits:
      description: >-
        The timeframe during which the product price is applicable. For example,
        for a streaming service, the price is $12.99 and the `unit` is `months`
        and the `amount` is `1`. In other words, the streaming service is
        available for $12.99 a month. You may want to specify a unit price if
        you have many products that all have different prices. Rather than
        having to create separate plans for each product, you can specify the
        timeframe during which the product price is applicable and then create
        one plan that determines the billing frequency for those products.
      type: object
      properties:
        unit:
          description: A unit of time.
          type: string
          examples:
            - day
          enum:
            - day
            - month
          x-go-type: model.PriceUnitsUnit
          x-go-type-import:
            name: model
            path: >-
              gitlab.elasticpath.com/commerce-cloud/subscriptions.svc/internal/domain/model
        amount:
          description: The number of days or months the period covers.
          type: integer
          examples:
            - 7
          minimum: 1
      required:
        - unit
        - amount
    NullablePriceUnits:
      description: >-
        The timeframe during which the product price is applicable. For example,
        for a streaming service, the price is $12.99 and the `unit` is `months`
        and the `amount` is `1`. In other words, the streaming service is
        available for $12.99 a month. You may want to specify a unit price if
        you have many products that all have different prices. Rather than
        having to create separate plans for each product, you can specify the
        timeframe during which the product price is applicable and then create
        one plan that determines the billing frequency for those products.
      type:
        - object
        - 'null'
      properties:
        unit:
          description: A unit of time, either days or months.
          type: string
          examples:
            - day
          enum:
            - day
            - month
          x-go-type: model.PriceUnitsUnit
          x-go-type-import:
            name: model
            path: >-
              gitlab.elasticpath.com/commerce-cloud/subscriptions.svc/internal/domain/model
        amount:
          description: The number of days or months the period covers.
          type: integer
          examples:
            - 7
          minimum: 1
      required:
        - unit
        - amount
    Price:
      example:
        USD:
          amount: 100
          includes_tax: false
        GBP:
          amount: 90
          includes_tax: true
      additionalProperties:
        type: object
        description: The base price.
        required:
          - amount
        properties:
          amount:
            description: >-
              The value as a whole number of the currency's smallest
              subdivision.
            type: integer
            format: int64
            examples:
              - 100
          includes_tax:
            description: Indicates whether the amount includes any taxes.
            type: boolean
            examples:
              - true
    NullablePrice:
      type:
        - object
        - 'null'
      examples:
        - USD:
            amount: 100
            includes_tax: false
          GBP:
            amount: 90
            includes_tax: true
      additionalProperties:
        type:
          - object
          - 'null'
        required:
          - amount
        properties:
          amount:
            description: >-
              The value as a whole number of the currency's smallest
              subdivision.
            type: integer
            format: int64
            examples:
              - 100
          includes_tax:
            description: Whether the amount includes any taxes.
            type: boolean
            examples:
              - true
    DisplayPrice:
      properties:
        without_tax:
          $ref: '#/components/schemas/PriceFormatting'
        with_tax:
          $ref: '#/components/schemas/PriceFormatting'
      example:
        without_tax:
          amount: 100
          currency: USD
          formatted: $1.00
        with_tax:
          amount: 110
          currency: USD
          formatted: $1.10
    PriceFormatting:
      properties:
        amount:
          description: The unformatted amount for the objects.
          type: integer
          format: int64
          examples:
            - 100
        currency:
          description: >-
            The three-letter [ISO currency
            code](https://www.iso.org/iso-4217-currency-codes.html) in
            uppercase, associated with a price.
          type: string
          format: string
          examples:
            - USD
        formatted:
          description: The formatted amount for the objects.
          type: string
          format: string
          examples:
            - $1.00
      required:
        - amount
        - currency
        - formatted
    Feature:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionFeatureType'
        attributes:
          $ref: '#/components/schemas/FeatureResponseAttributes'
        meta:
          $ref: '#/components/schemas/FeatureMeta'
      required:
        - type
        - attributes
        - meta
    FeatureMeta:
      properties:
        owner:
          $ref: '#/components/schemas/OwnerMeta'
        timestamps:
          $ref: '#/components/schemas/SubscriptionsTimestamps'
      readOnly: true
      required:
        - owner
        - timestamps
    FeatureCreate:
      properties:
        type:
          $ref: '#/components/schemas/SubscriptionFeatureType'
        attributes:
          $ref: '#/components/schemas/FeatureAttributes'
      required:
        - type
        - attributes
    FeatureUpdate:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionFeatureType'
        attributes:
          $ref: '#/components/schemas/FeatureUpdateAttributes'
      required:
        - id
        - type
        - attributes
    FeatureResponseAttributes:
      allOf:
        - $ref: '#/components/schemas/FeatureAttributes'
    FeatureTag:
      description: A tag to add to the customer's account when entitled to the feature.
      type: string
      examples:
        - digital_library_access
      maxLength: 64
      minLength: 1
      pattern: ^[0-9A-Za-z_-]+$
    FeatureAccessAttributes:
      properties:
        type:
          type: string
          examples:
            - access
          const: access
        tag:
          $ref: '#/components/schemas/FeatureTag'
      required:
        - type
        - tag
    FeaturePromotion:
      properties:
        name:
          description: The name of the feature.
          type: string
          examples:
            - Digital library access
          maxLength: 1024
          minLength: 3
        tag:
          $ref: '#/components/schemas/FeatureTag'
        promotion_id:
          $ref: '#/components/schemas/SubscriptionsUUID'
      required:
        - name
        - tag
    FeaturePromotionAttributes:
      properties:
        type:
          type: string
          examples:
            - promotion
          const: promotion
        promotions:
          type: array
          items:
            $ref: '#/components/schemas/FeaturePromotion'
      required:
        - type
        - promotions
    FeatureUsageAttributes:
      properties:
        type:
          type: string
          examples:
            - usage
          const: usage
        tag:
          $ref: '#/components/schemas/FeatureTag'
        label:
          description: The property that has a usage limit.
          type: string
          examples:
            - Digital downloads
          maxLength: 1024
          minLength: 3
        default_value:
          description: The default initial value
          type: integer
          examples:
            - 10
      required:
        - type
        - tag
        - label
        - default_value
    FeatureConfiguration:
      type: object
      properties:
        type:
          description: The type of feature, one of access, promotion or usage.
          example: access
          enum:
            - access
            - promotion
            - usage
          x-go-type: string
      discriminator:
        propertyName: type
        mapping:
          access: '#/components/schemas/FeatureAccessAttributes'
          promotion: '#/components/schemas/FeaturePromotionAttributes'
          usage: '#/components/schemas/FeatureUsageAttributes'
      oneOf:
        - $ref: '#/components/schemas/FeatureAccessAttributes'
        - $ref: '#/components/schemas/FeaturePromotionAttributes'
        - $ref: '#/components/schemas/FeatureUsageAttributes'
      required:
        - type
    FeatureAttributes:
      properties:
        external_ref:
          $ref: '#/components/schemas/ExternalRef'
        name:
          description: The name of the feature.
          type: string
          examples:
            - Digital library access
          maxLength: 1024
          minLength: 3
        description:
          description: The feature description to display to customers.
          type: string
          examples:
            - Access to over 100 ebooks via the digital library.
          maxLength: 1024
        configuration:
          $ref: '#/components/schemas/FeatureConfiguration'
      required:
        - name
        - configuration
    FeatureUpdateAttributes:
      properties:
        external_ref:
          $ref: '#/components/schemas/ExternalRefUpdate'
        name:
          description: The name of the feature.
          type: string
          examples:
            - Digital library access
          maxLength: 1024
          minLength: 3
        description:
          description: The feature description to display to customers.
          type:
            - string
            - 'null'
          examples:
            - Access to over 100 ebooks via the digital library.
          maxLength: 1024
        configuration:
          $ref: '#/components/schemas/FeatureConfiguration'
    Product:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionProductType'
        attributes:
          $ref: '#/components/schemas/ProductResponseAttributes'
        meta:
          $ref: '#/components/schemas/ProductMeta'
      required:
        - type
        - attributes
        - meta
    ProductMeta:
      properties:
        display_price:
          $ref: '#/components/schemas/DisplayPrice'
        owner:
          $ref: '#/components/schemas/OwnerMeta'
        timestamps:
          $ref: '#/components/schemas/SubscriptionsTimestamps'
      readOnly: true
      required:
        - owner
        - timestamps
    ProductCreate:
      properties:
        type:
          $ref: '#/components/schemas/SubscriptionProductType'
        attributes:
          $ref: '#/components/schemas/ProductAttributes'
      required:
        - type
        - attributes
    ProductUpdate:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionProductType'
        attributes:
          $ref: '#/components/schemas/ProductUpdateAttributes'
      required:
        - id
        - type
        - attributes
    OfferingProductResponseAttributes:
      allOf:
        - $ref: '#/components/schemas/ProductResponseAttributes'
        - $ref: '#/components/schemas/OfferingProductResponseExtraAttributes'
    OfferingProductResponseExtraAttributes:
      properties:
        feature_configurations:
          description: >-
            A map of configurations indicating which features are available for
            the product
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FeatureProductConfiguration'
      required:
        - feature_configurations
    ProductResponseAttributes:
      allOf:
        - $ref: '#/components/schemas/ProductAttributes'
        - $ref: '#/components/schemas/SubscriptionsTimestamps'
    ProductAttributes:
      properties:
        external_ref:
          $ref: '#/components/schemas/ExternalRef'
        name:
          description: The name of the product.
          type: string
          examples:
            - Magazine
          maxLength: 1024
          minLength: 3
        description:
          description: The product or service description to display to customers.
          type: string
          examples:
            - A lovely magazine that is published every month.
          maxLength: 1024
        sku:
          description: A stock keeping unit for the product, if appropriate.
          type: string
          examples:
            - MAGAZINE1
          maxLength: 1024
        main_image:
          description: >-
            A URL from which an image or file for the product can be fetched.
            You can either upload your images and files to Commerce using the
            Commerce Files API or you can use your own content delivery network.
            If you are using the Commerce Files API, use [**Create a
            File**](/docs/api/pxm/files/create-a-file) to upload your file and
            return an HREF link in the response. An extensive range of [**media
            and file extensions**](/docs/api/pxm/files/files-service-api) are
            supported.
          type: string
          format: uri
          examples:
            - https://magazine.com/cover.jpg
          maxLength: 1024
        price:
          $ref: '#/components/schemas/Price'
        price_units:
          $ref: '#/components/schemas/PriceUnits'
      required:
        - name
    OfferingProductUpdateAttributes:
      allOf:
        - $ref: '#/components/schemas/ProductUpdateAttributes'
        - $ref: '#/components/schemas/OfferingProductUpdateExtraAttributes'
    OfferingProductUpdateExtraAttributes:
      properties:
        feature_configurations:
          description: >-
            A map of configurations indicating which features are available for
            the product
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FeatureProductConfigurationUpdate'
    ProductUpdateAttributes:
      properties:
        external_ref:
          $ref: '#/components/schemas/ExternalRefUpdate'
        name:
          description: The name of the product.
          type: string
          examples:
            - Magazine
          maxLength: 1024
          minLength: 3
        description:
          description: The product or service description to display to customers.
          type:
            - string
            - 'null'
          examples:
            - A lovely magazine that is published every month.
          maxLength: 1024
        sku:
          description: A stock keeping unit for the product, if appropriate.
          type:
            - string
            - 'null'
          examples:
            - MAGAZINE1
          maxLength: 1024
        main_image:
          description: >-
            A URL from which an image or file for the product can be fetched.
            You can either upload your images and files to Commerce using the
            Commerce Files API or you can use your own content delivery network.
            If you are using the Commerce Files API, use [**Create a
            File**](/docs/api/pxm/files/create-a-file) to upload your file and
            return an HREF link in the response. An extensive range of [**media
            and file extensions**](/docs/api/pxm/files/files-service-api) are
            supported.
          type:
            - string
            - 'null'
          format: uri
          examples:
            - https://magazine.com/cover.jpg
          maxLength: 1024
        price:
          $ref: '#/components/schemas/NullablePrice'
        price_units:
          $ref: '#/components/schemas/NullablePriceUnits'
    DunningRule:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionDunningRuleType'
        attributes:
          $ref: '#/components/schemas/DunningRuleAttributes'
        meta:
          $ref: '#/components/schemas/DunningRuleMeta'
      required:
        - type
        - attributes
        - meta
    DunningRuleMeta:
      properties:
        owner:
          $ref: '#/components/schemas/OwnerMeta'
        timestamps:
          $ref: '#/components/schemas/SubscriptionsTimestamps'
      readOnly: true
      required:
        - owner
        - timestamps
    DunningRuleCreate:
      properties:
        type:
          $ref: '#/components/schemas/SubscriptionDunningRuleType'
        attributes:
          $ref: '#/components/schemas/DunningRuleAttributes'
      required:
        - type
        - attributes
    DunningRuleUpdate:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionDunningRuleType'
        attributes:
          $ref: '#/components/schemas/DunningRuleUpdateAttributes'
      required:
        - id
        - type
        - attributes
    DunningRuleAttributes:
      description: >
        The dunning rule attributes you can use to configure your payment retry
        strategy.
      properties:
        payment_retry_type:
          description: >
            The strategy used to make payments. Always `fixed`. This means
            payments are retried on a fixed schedule as defined by the
            `payment_retry_unit` and `payment_retry_interval`, for example,
            every two days.
          type: string
          examples:
            - fixed
          enum:
            - fixed
            - backoff
            - tiered
          x-go-type: model.PaymentRetryType
          x-go-type-import:
            name: model
            path: >-
              gitlab.elasticpath.com/commerce-cloud/subscriptions.svc/internal/domain/model
        payment_retry_interval:
          description: >-
            The number of `payment_interval_unit`s to wait between each payment
            retry attempt.
          type: integer
          format: int64
          examples:
            - 1
          maximum: 1024
          minimum: 1
        payment_retry_unit:
          description: >-
            The unit of time used to measure the intervals between payment
            attempts or retries.
          type: string
          examples:
            - day
          enum:
            - day
            - week
          x-go-type: model.PaymentRetryUnit
          x-go-type-import:
            name: model
            path: >-
              gitlab.elasticpath.com/commerce-cloud/subscriptions.svc/internal/domain/model
        payment_retry_multiplier:
          description: >-
            The multiplier that increases the interval between consecutive each
            payment attempts or retries. This is typically used to gradually
            extend the time between retries. Allowing more time between attempts
            as failures persist, helps reduce the risk of triggering multiple
            failures in a short period and gives the subscriber more time to
            resolve the issue. Must only be set for backup types.
          type: number
          format: double
          examples:
            - 1
          maximum: 1024
          minimum: 1
        payment_retries_limit:
          description: >-
            The number of times Subscriptions attempts payment retries before
            `action` is taken.
          type: integer
          format: int64
          examples:
            - 5
          minimum: 0
        action:
          description: >
            The action to take after all payment attempts for an invoice have
            failed.


            - None - the subscription remains active and Subscriptions does not
            attempt to retry the payment. However, the subscription is still
            available for a subscriber to use.

            - Suspend the subscription. Subscriptions does not attempt to retry
            the payment. A subscriber can choose to pay the outstanding invoice.
            However, a subscriber cannot renew their subscription; a
            merchandizer must renew the subscription on behalf of the
            subscriber.

            - close a subscription. The subscription ends and it's status
            becomes `inactive`. However, a merchandizer can choose to resume the
            subscription if a subscriber pays the outstanding payment.
          type: string
          examples:
            - none
          enum:
            - none
            - pause
            - close
            - suspend
          x-go-type: model.DunningAction
          x-go-type-import:
            name: model
            path: >-
              gitlab.elasticpath.com/commerce-cloud/subscriptions.svc/internal/domain/model
        default:
          description: Set to `true` if you want this rule to be the default for the store.
          type: boolean
          examples:
            - false
      example:
        payment_retry_type: fixed
        payment_retry_unit: day
        payment_retry_interval: 1
        payment_retries_limit: 10
        action: none
      required:
        - payment_retry_type
        - payment_retries_limit
        - action
    DunningRuleUpdateAttributes:
      properties:
        payment_retry_type:
          description: >
            The strategy used to make payments. Always `fixed`. This means
            payments are retried on a fixed schedule as defined by the
            `payment_retry_unit` and `payment_retry_interval`, for example,
            every two days.
          type: string
          examples:
            - fixed
          enum:
            - fixed
            - backoff
            - tiered
          x-go-type: model.PaymentRetryType
          x-go-type-import:
            name: model
            path: >-
              gitlab.elasticpath.com/commerce-cloud/subscriptions.svc/internal/domain/model
        payment_retry_interval:
          description: >-
            The number of `payment_interval_unit`s to wait between each payment
            retry attempt.
          type:
            - integer
            - 'null'
          format: int64
          examples:
            - 1
          maximum: 1024
          minimum: 1
        payment_retry_unit:
          description: >-
            The unit of time used to measure the intervals between payment
            attempts or retries.
          type:
            - string
            - 'null'
          examples:
            - day
          enum:
            - day
            - week
          x-go-type: model.PaymentRetryUnit
          x-go-type-import:
            name: model
            path: >-
              gitlab.elasticpath.com/commerce-cloud/subscriptions.svc/internal/domain/model
        payment_retry_multiplier:
          description: >-
            The multiplier that increases the interval between consecutive each
            payment attempts or retries. This is typically used to gradually
            extend the time between retries. Allowing more time between attempts
            as failures persist, helps reduce the risk of triggering multiple
            failures in a short period and gives the subscriber more time to
            resolve the issue. Must only be set for backup types.
          type:
            - number
            - 'null'
          format: double
          examples:
            - 1
          maximum: 1024
          minimum: 1
        payment_retries_limit:
          description: >-
            The number of times Subscriptions attempts payment retries before
            `action` is taken.
          type: integer
          format: int64
          examples:
            - 5
          minimum: 0
        action:
          description: >-
            The action to take after all payment attempts for an invoice have
            failed.
          type: string
          examples:
            - none
          enum:
            - none
            - pause
            - close
            - suspend
          x-go-type: model.DunningAction
          x-go-type-import:
            name: model
            path: >-
              gitlab.elasticpath.com/commerce-cloud/subscriptions.svc/internal/domain/model
        default:
          description: Set to `true` if you want this rule to be the default for the store.
          type: boolean
          examples:
            - false
    ProrationPolicy:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/ProrationPolicyType'
        attributes:
          $ref: '#/components/schemas/ProrationPolicyResponseAttributes'
        meta:
          $ref: '#/components/schemas/ProrationPolicyMeta'
      required:
        - type
        - attributes
        - meta
    ProrationPolicyUpdate:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/ProrationPolicyType'
        attributes:
          $ref: '#/components/schemas/ProrationPolicyUpdateAttributes'
      required:
        - id
        - type
        - attributes
    ProrationPolicyRelationshipAttributes:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ProrationPolicyType'
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
      required:
        - type
        - id
    ProrationPolicyUpdateRelationshipAttributes:
      type:
        - object
        - 'null'
      properties:
        type:
          $ref: '#/components/schemas/ProrationPolicyType'
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
      required:
        - type
        - id
    ProrationPolicyResponseAttributes:
      allOf:
        - $ref: '#/components/schemas/ProrationPolicyAttributes'
    ProrationPolicyCreate:
      properties:
        type:
          $ref: '#/components/schemas/ProrationPolicyType'
        attributes:
          $ref: '#/components/schemas/ProrationPolicyAttributes'
      required:
        - type
        - attributes
    ProrationPolicyAttributes:
      properties:
        name:
          description: A name for the proration policy.
          type: string
          examples:
            - Main Policy
          maxLength: 1024
          minLength: 3
        rounding:
          description: >
            When rounding in proration, you must decide how to round the units
            of time used to calculate the charges.


            - round up to the next unit, ensuring subscribers are charged
            slightly more to cover any partial use.

            - round down to the previous whole unit, providing subscribers with
            a slight benefit by not charging for partial use.

            - round to the nearest whole unit, whether up or down, based on
            standard rounding rules. For example, rounding 0.5 up and rounding
            0.5 down.
          type: string
          examples:
            - up
          enum:
            - up
            - down
            - nearest
          x-go-type: model.ProrationPolicyRounding
          x-go-type-import:
            name: model
            path: >-
              gitlab.elasticpath.com/commerce-cloud/subscriptions.svc/internal/domain/model
        external_ref:
          $ref: '#/components/schemas/ExternalRef'
      required:
        - name
        - rounding
    ProrationPolicyUpdateAttributes:
      properties:
        external_ref:
          $ref: '#/components/schemas/ExternalRefUpdate'
        name:
          description: The name of the proration policy.
          type: string
          examples:
            - Main Policy
          maxLength: 1024
          minLength: 3
        rounding:
          description: Whether to round up or down
          type: string
          examples:
            - up
          enum:
            - up
            - down
            - nearest
          x-go-type: model.ProrationPolicyRounding
          x-go-type-import:
            name: model
            path: >-
              gitlab.elasticpath.com/commerce-cloud/subscriptions.svc/internal/domain/model
    ProrationPolicyMeta:
      properties:
        owner:
          $ref: '#/components/schemas/OwnerMeta'
        timestamps:
          $ref: '#/components/schemas/SubscriptionsTimestamps'
      readOnly: true
      required:
        - owner
        - timestamps
    Plan:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionPlanType'
        attributes:
          $ref: '#/components/schemas/PlanResponseAttributes'
        meta:
          $ref: '#/components/schemas/PlanMeta'
      required:
        - type
        - attributes
        - meta
    PlanMeta:
      properties:
        owner:
          $ref: '#/components/schemas/OwnerMeta'
        timestamps:
          $ref: '#/components/schemas/SubscriptionsTimestamps'
      readOnly: true
      required:
        - owner
        - timestamps
    PlanCreate:
      properties:
        type:
          $ref: '#/components/schemas/SubscriptionPlanType'
        attributes:
          $ref: '#/components/schemas/PlanAttributes'
      required:
        - type
        - attributes
    PlanUpdate:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionPlanType'
        attributes:
          $ref: '#/components/schemas/PlanUpdateAttributes'
      required:
        - id
        - type
        - attributes
    PlanResponseAttributes:
      allOf:
        - $ref: '#/components/schemas/PlanAttributes'
        - $ref: '#/components/schemas/SubscriptionsTimestamps'
    PlanAttributes:
      properties:
        external_ref:
          $ref: '#/components/schemas/ExternalRef'
        name:
          description: A name for the plan.
          type: string
          examples:
            - Monthly
          maxLength: 1024
          minLength: 3
        description:
          description: The plan description to display to customers.
          type: string
          examples:
            - A monthly subscription.
          maxLength: 1024
        billing_interval_type:
          description: The unit of time that billing intervals are measured.
          type: string
          examples:
            - month
          enum:
            - day
            - week
            - month
            - year
          x-go-type: model.BillingIntervalType
          x-go-type-import:
            name: model
            path: >-
              gitlab.elasticpath.com/commerce-cloud/subscriptions.svc/internal/domain/model
        billing_frequency:
          description: The number of intervals between issuing bills.
          type: integer
          examples:
            - 1
          minimum: 1
        trial_period:
          description: >-
            The number of intervals from the start of the subscription before
            billing starts. Used with `billing_interval_type`. For example, if
            `billing_interval_type` is `months`, and `trial_period` is `1`, the
            trial period is 1 month.
          type: integer
          examples:
            - 7
          minimum: 0
        plan_length:
          description: The number of intervals that the subscription runs for.
          type: integer
          examples:
            - 12
          minimum: 1
        end_behavior:
          description: >-
            Enables you to specify recurring payments. If `end_behavior` is
            `roll`, customers pay regularly and repeatedly. If `end_behavior` is
            `close`, customers pay a total amount in a limited number of partial
            payments.
          type: string
          examples:
            - close
          enum:
            - close
            - roll
          x-go-type: model.EndBehavior
          x-go-type-import:
            name: model
            path: >-
              gitlab.elasticpath.com/commerce-cloud/subscriptions.svc/internal/domain/model
        can_pause:
          description: The subscriber can pause a subscription.
          type: boolean
          examples:
            - false
        can_resume:
          description: The subscriber can resume a paused subscription.
          type: boolean
          examples:
            - false
        can_cancel:
          description: The subscriber can cancel a subscription.
          type: boolean
          examples:
            - false
        base_price_percentage:
          description: >-
            A percentage discount on the total cost of any products within an
            offering. For example, you can configure a percentage that equates
            the cost of a plan to the total value of all products within the
            offering, reduced by a percentage. For example, if you specify `10`,
            a 10% discount is applied to the total value of all repeat products
            in an offering.
          type: number
          format: double
          examples:
            - 90
          maximum: 100
          minimum: 0
        fixed_price:
          $ref: '#/components/schemas/Price'
      required:
        - name
        - billing_interval_type
        - billing_frequency
        - plan_length
        - end_behavior
        - can_pause
        - can_resume
        - can_cancel
    PlanUpdateAttributes:
      properties:
        external_ref:
          $ref: '#/components/schemas/ExternalRefUpdate'
        name:
          type: string
          examples:
            - Monthly
          maxLength: 1024
          minLength: 3
        description:
          description: The plan description to display to customers.
          type:
            - string
            - 'null'
          examples:
            - A monthly subscription.
          maxLength: 1024
        billing_interval_type:
          description: The unit of time in which billing intervals are measured.
          type: string
          examples:
            - month
          enum:
            - day
            - week
            - month
            - year
          x-go-type: model.BillingIntervalType
          x-go-type-import:
            name: model
            path: >-
              gitlab.elasticpath.com/commerce-cloud/subscriptions.svc/internal/domain/model
        billing_frequency:
          description: The number of intervals between issuing bills.
          type: integer
          examples:
            - 1
          minimum: 1
        trial_period:
          description: >-
            The number of intervals from the start of the subscription before
            billing starts. Used with `billing_interval_type`. For example, if
            `billing_interval_type` is `months`, and `trial_period` is `1`, the
            trial period is 1 month.
          type:
            - integer
            - 'null'
          examples:
            - 7
          minimum: 0
        plan_length:
          description: >-
            The length of time for which a subscription plan is valid. For
            example, six months after which the plan is renewed.
          type: integer
          examples:
            - 12
          minimum: 1
        end_behavior:
          description: >-
            Enables you to specify recurring payments. If `end_behavior` is
            `roll`, customers pay regularly and repeatedly. If `end_behavior` is
            `close`, customers pay a total amount in a limited number of partial
            payments.
          type: string
          examples:
            - close
          enum:
            - close
            - roll
          x-go-type: model.EndBehavior
          x-go-type-import:
            name: model
            path: >-
              gitlab.elasticpath.com/commerce-cloud/subscriptions.svc/internal/domain/model
        can_pause:
          description: The subscriber can pause a subscription.
          type: boolean
          examples:
            - false
        can_resume:
          description: The subscriber can resume a paused subscription.
          type: boolean
          examples:
            - false
        can_cancel:
          description: The subscriber can cancel a subscription.
          type: boolean
          examples:
            - false
        base_price_percentage:
          description: >-
            A percentage discount on the total cost of any products within an
            offering. For example, you can configure a percentage that equates
            the cost of a plan to the total value of all products within the
            offering, reduced by a percentage. For example, if you specify `10`,
            a 10% discount is applied to the total value of all repeat products
            in an offering.
          type:
            - number
            - 'null'
          format: double
          examples:
            - 90
          maximum: 100
          minimum: 0
        fixed_price:
          $ref: '#/components/schemas/NullablePrice'
    BuildOffering:
      properties:
        external_ref:
          $ref: '#/components/schemas/ExternalRef'
        name:
          description: The name of the offering.
          type: string
          examples:
            - Magazine
          maxLength: 1024
          minLength: 3
        description:
          description: The offering description to display to customers.
          type: string
          examples:
            - A lovely magazine that is published every month.
          maxLength: 1024
        proration_policy_id:
          description: The unique ID or external ref of the proration policy
          type: string
          examples:
            - 11111111-2222-3333-4444-555555555555
        features:
          description: >-
            Either references of existing features (id or external_ref) to be
            attached to the offering or feature information to be created
            directly within the offering
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/ExternalRef'
              - $ref: '#/components/schemas/FeatureAttributes'
              - $ref: '#/components/schemas/SubscriptionsUUID'
          minItems: 1
        products:
          description: >-
            Either references of existing products (id or external_ref) to be
            attached to the offering or product information to be created
            directly within the offering
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/ExternalRef'
              - $ref: '#/components/schemas/ProductAttributes'
              - $ref: '#/components/schemas/SubscriptionsUUID'
          minItems: 1
        plans:
          description: >-
            Either references of existing plans (id or external_ref) to be
            attached to the offering or plan information to be created directly
            within the offering
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/ExternalRef'
              - $ref: '#/components/schemas/PlanAttributes'
              - $ref: '#/components/schemas/SubscriptionsUUID'
          minItems: 1
      required:
        - name
        - products
        - plans
    Offering:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionOfferingType'
        attributes:
          $ref: '#/components/schemas/OfferingResponseAttributes'
        relationships:
          $ref: '#/components/schemas/Relationships'
        meta:
          $ref: '#/components/schemas/OfferingMeta'
      required:
        - type
        - attributes
        - meta
    OfferingIncludes:
      properties:
        features:
          type: array
          items:
            $ref: '#/components/schemas/OfferingFeature'
        products:
          type: array
          items:
            $ref: '#/components/schemas/OfferingProduct'
        plans:
          type: array
          items:
            $ref: '#/components/schemas/OfferingPlan'
      readOnly: true
    OfferingMeta:
      properties:
        external_product_refs:
          type: array
          items:
            $ref: '#/components/schemas/OfferingProductExternalRefMeta'
        owner:
          $ref: '#/components/schemas/OwnerMeta'
        timestamps:
          $ref: '#/components/schemas/SubscriptionsTimestamps'
      readOnly: true
      required:
        - owner
        - timestamps
        - external_product_refs
    OfferingCreate:
      properties:
        type:
          $ref: '#/components/schemas/SubscriptionOfferingType'
        attributes:
          $ref: '#/components/schemas/OfferingAttributes'
        relationships:
          $ref: '#/components/schemas/OfferingRelationships'
      required:
        - type
        - attributes
    OfferingProductUpdate:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionOfferingProductType'
        attributes:
          $ref: '#/components/schemas/OfferingProductUpdateAttributes'
      required:
        - id
        - type
        - attributes
    FeatureConfigAccessAttributes:
      description: >-
        Configures an access feature against a product in an offering,
        indicating that the referenced feature is a benefit of that product.
      properties:
        type:
          type: string
          examples:
            - access
          const: access
      required:
        - type
    FeatureConfigPromotionAttributes:
      description: >-
        Configures a promotion feature against a product in an offering,
        indicating that the referenced feature is a benefit of that product. The
        tag of the specific promotion that it to be made available must be
        supplied.
      properties:
        type:
          type: string
          examples:
            - promotion
          const: promotion
        tag:
          $ref: '#/components/schemas/FeatureTag'
      required:
        - type
        - tag
    FeatureConfigUsageAttributes:
      description: >-
        Configures a usgae feature against a product in an offering, indicating
        that the referenced feature is a benefit of that product. The default
        value that the usage metrics adopts must be supplied.
      properties:
        type:
          type: string
          examples:
            - usage
          const: usage
        default_value:
          description: The default initial value
          type: integer
          examples:
            - 10
      required:
        - type
        - default_value
    FeatureProductConfiguration:
      type: object
      properties:
        type:
          description: The type of feature, one of access, promotion or usage.
          example: access
          enum:
            - access
            - promotion
            - usage
          x-go-type: string
      discriminator:
        propertyName: type
        mapping:
          access: '#/components/schemas/FeatureConfigAccessAttributes'
          promotion: '#/components/schemas/FeatureConfigPromotionAttributes'
          usage: '#/components/schemas/FeatureConfigUsageAttributes'
      oneOf:
        - $ref: '#/components/schemas/FeatureConfigAccessAttributes'
        - $ref: '#/components/schemas/FeatureConfigPromotionAttributes'
        - $ref: '#/components/schemas/FeatureConfigUsageAttributes'
      required:
        - type
    FeatureProductConfigurationUpdate:
      type:
        - object
        - 'null'
      properties:
        type:
          description: The type of feature, one of access, promotion or usage.
          example: access
          enum:
            - access
            - promotion
            - usage
          x-go-type: string
      discriminator:
        propertyName: type
        mapping:
          access: '#/components/schemas/FeatureConfigAccessAttributes'
          promotion: '#/components/schemas/FeatureConfigPromotionAttributes'
          usage: '#/components/schemas/FeatureConfigUsageAttributes'
      oneOf:
        - $ref: '#/components/schemas/FeatureConfigAccessAttributes'
        - $ref: '#/components/schemas/FeatureConfigPromotionAttributes'
        - $ref: '#/components/schemas/FeatureConfigUsageAttributes'
      required:
        - type
    OfferingFeatureUpdate:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionOfferingFeatureType'
        attributes:
          $ref: '#/components/schemas/FeatureUpdateAttributes'
      required:
        - id
        - type
        - attributes
    OfferingFeature:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionOfferingFeatureType'
        attributes:
          $ref: '#/components/schemas/FeatureResponseAttributes'
        relationships:
          $ref: '#/components/schemas/Relationships'
        meta:
          $ref: '#/components/schemas/FeatureMeta'
      required:
        - type
        - attributes
        - meta
    OfferingProduct:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionOfferingProductType'
        attributes:
          $ref: '#/components/schemas/OfferingProductResponseAttributes'
        relationships:
          $ref: '#/components/schemas/Relationships'
        meta:
          $ref: '#/components/schemas/ProductMeta'
      required:
        - type
        - attributes
        - meta
    OfferingPlanUpdate:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionOfferingPlanType'
        attributes:
          $ref: '#/components/schemas/PlanUpdateAttributes'
      required:
        - id
        - type
        - attributes
    OfferingPlan:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionOfferingPlanType'
        attributes:
          $ref: '#/components/schemas/PlanResponseAttributes'
        relationships:
          $ref: '#/components/schemas/Relationships'
        meta:
          $ref: '#/components/schemas/OfferingPlanMeta'
      required:
        - type
        - attributes
        - meta
    OfferingPlanMeta:
      properties:
        price:
          $ref: '#/components/schemas/Price'
        display_price:
          $ref: '#/components/schemas/DisplayPrice'
        active_plan:
          $ref: '#/components/schemas/ActivePlan'
        owner:
          $ref: '#/components/schemas/OwnerMeta'
        timestamps:
          $ref: '#/components/schemas/SubscriptionsTimestamps'
      readOnly: true
      required:
        - owner
        - timestamps
    OfferingFeatureAttach:
      description: >-
        A list of feature IDs to attach to the offering. See [**List
        Features**](/docs/api/subscriptions/list-features).
      properties:
        features:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionsUUID'
          minItems: 1
      required:
        - features
    OfferingPlanAttach:
      description: >-
        A list of plan IDs to attach to the offering. See [**List
        Plans**](/docs/api/subscriptions/list-plans).
      properties:
        plans:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionsUUID'
          minItems: 1
      required:
        - plans
    OfferingProductAttach:
      description: >-
        A list of product IDs to attach to the offering. See [**List
        Products**](/docs/api/subscriptions/list-products).
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionsUUID'
          minItems: 1
      required:
        - products
    OfferingProductReplace:
      description: >-
        A list of product IDs to replace on the offering. See [**List
        Products**](/docs/api/subscriptions/list-products).
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionsUUID'
          minItems: 1
      required:
        - products
    OfferingUpdate:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionOfferingType'
        attributes:
          $ref: '#/components/schemas/OfferingUpdateAttributes'
        relationships:
          $ref: '#/components/schemas/OfferingUpdateRelationships'
      anyOf:
        - required:
            - attributes
        - required:
            - relationships
      required:
        - id
        - type
    OfferingResponseAttributes:
      allOf:
        - $ref: '#/components/schemas/OfferingAttributes'
        - $ref: '#/components/schemas/SubscriptionsTimestamps'
    OfferingAttributes:
      properties:
        external_ref:
          $ref: '#/components/schemas/ExternalRef'
        name:
          description: The name of the offering.
          type: string
          examples:
            - Magazine
          maxLength: 1024
          minLength: 3
        description:
          description: The offering description to display to customers.
          type: string
          examples:
            - A lovely magazine that is published every month.
          maxLength: 1024
      required:
        - name
    OfferingUpdateAttributes:
      properties:
        external_ref:
          $ref: '#/components/schemas/ExternalRefUpdate'
        name:
          description: The name of the offering.
          type: string
          examples:
            - Magazine
          maxLength: 1024
          minLength: 3
        description:
          description: The offering description to display to customers.
          type:
            - string
            - 'null'
          examples:
            - A lovely magazine that is published every month.
          maxLength: 1024
    OfferingRelationships:
      properties:
        proration_policy:
          $ref: '#/components/schemas/ProrationPolicyRelationshipAttributes'
    OfferingUpdateRelationships:
      properties:
        proration_policy:
          $ref: '#/components/schemas/ProrationPolicyUpdateRelationshipAttributes'
    BuildSubscription:
      properties:
        external_ref:
          $ref: '#/components/schemas/ExternalRef'
        account_id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        address_id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        offering_external_ref:
          $ref: '#/components/schemas/ExternalRef'
        offering_id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        plan_id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        currency:
          $ref: '#/components/schemas/CurrencyIdentifier'
        payment_authority:
          $ref: '#/components/schemas/PaymentAuthority'
        manual_payments:
          $ref: '#/components/schemas/ManualPayments'
        name:
          type: string
          examples:
            - Albert Einstein
          maxLength: 1024
          minLength: 3
        email:
          type: string
          format: email
          examples:
            - albert@elasticpath.com
          maxLength: 1024
          minLength: 3
        pending:
          description: >-
            Whether a subscription is pending activation or not. See [Creating a
            pending
            subscription](/docs/api/subscriptions/subscriptions#creating-a-pending-subscription).
          type: boolean
          examples:
            - false
        first_invoice_paid:
          description: >-
            Indicates that payment for the first billing period of the
            subscription has already been taken. As well as creating the
            subscription a settled invoice is created to cover the first period.
          type: boolean
          examples:
            - false
        started_at:
          description: >-
            When importing an active subscription from an existing system you
            can specify the date and time of the start of the most recent
            period. This may only be supplied when `first_invoice_paid` is true.
            As well as creating the subscription a settled invoice is created to
            cover the correct billing period.
          type: string
          examples:
            - '2017-01-10T11:41:19.244842Z'
        offering:
          $ref: '#/components/schemas/OfferingAttributes'
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductAttributes'
          minItems: 1
        plans:
          type: array
          items:
            $ref: '#/components/schemas/PlanAttributesAndSelectedMeta'
          minItems: 1
        selected_plan:
          $ref: '#/components/schemas/ExternalRef'
        meta:
          $ref: '#/components/schemas/SubscriptionMeta'
      required:
        - account_id
        - currency
        - name
        - email
        - manual_payments
    PlanAttributesAndSelectedMeta:
      allOf:
        - $ref: '#/components/schemas/PlanAttributes'
        - $ref: '#/components/schemas/SelectedPlanMeta'
    SelectedPlanMeta:
      properties:
        meta:
          $ref: '#/components/schemas/SelectedPlanMetaAttributes'
    SelectedPlanMetaAttributes:
      properties:
        selected:
          description: One plan must be selected for use in the subscription
          type: boolean
          examples:
            - true
    Subscription:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionType'
        attributes:
          $ref: '#/components/schemas/SubscriptionAttributes'
        relationships:
          $ref: '#/components/schemas/Relationships'
        meta:
          $ref: '#/components/schemas/SubscriptionMeta'
      required:
        - type
        - attributes
        - meta
    ManageSubscriptionProducts:
      type: object
      properties:
        type:
          type: string
          examples:
            - detach
          enum:
            - attach
            - detach
            - replace
          x-go-type: model.ManageProductsAction
          x-go-type-import:
            name: model
            path: >-
              gitlab.elasticpath.com/commerce-cloud/subscriptions.svc/internal/domain/model
        products:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionsUUID'
          minItems: 1
      required:
        - type
        - products
    SubscriptionUpdate:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionType'
        attributes:
          $ref: '#/components/schemas/SubscriptionUpdateAttributes'
      required:
        - id
        - type
        - attributes
    SubscriptionUpdateAttributes:
      properties:
        plan_id:
          example: 00000000-0000-0000-0000-000000000001
          x-go-type: uuid.UUID
          x-go-type-import:
            name: uuid
            path: github.com/google/uuid
        address_id:
          type:
            - string
            - 'null'
          format: UUID
          examples:
            - 00000000-0000-0000-0000-000000000001
          x-go-type: uuid.UUID
          x-go-type-import:
            name: uuid
            path: github.com/google/uuid
        payment_authority:
          $ref: '#/components/schemas/PaymentAuthority'
        go_live_after:
          description: >-
            The date and time a `pending` subscription goes live and becomes
            active. See [Creating a pending
            subscription](/docs/api/subscriptions/subscriptions#creating-a-pending-subscription).
          type:
            - string
            - 'null'
          examples:
            - '2017-01-10T11:41:19.244842Z'
    SubscriptionIncludes:
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/OfferingProduct'
        plans:
          type: array
          items:
            $ref: '#/components/schemas/OfferingPlan'
      readOnly: true
    SubscriptionMeta:
      properties:
        owner:
          $ref: '#/components/schemas/OwnerMeta'
        timestamps:
          $ref: '#/components/schemas/SubscriptionTimestamps'
        status:
          $ref: '#/components/schemas/Status'
        state:
          $ref: '#/components/schemas/SubscriptionState'
        manual_payments:
          $ref: '#/components/schemas/ManualPayments'
        first_invoice_prepaid:
          description: >-
            Indicates that the first billing period of this subscription was
            paid for outside of the subscriptions service.
          type: boolean
          examples:
            - false
        canceled:
          description: Whether a subscription is canceled or not.
          type: boolean
          examples:
            - true
        paused:
          description: Whether a subscription is paused or not.
          type: boolean
          examples:
            - true
        closed:
          description: Whether a subscription is closed or not.
          type: boolean
          examples:
            - true
        suspended:
          description: Whether a subscription is suspended or not.
          type: boolean
          examples:
            - false
        pending:
          description: Whether a subscription is pending activation or not.
          type: boolean
          examples:
            - false
        invoice_after:
          description: >-
            The time when the subscription becomes eligible for a new invoice.
            The next invoice will be generated at the next billing run after
            this point.
          type: string
          examples:
            - '2017-01-10T11:41:19.244842Z'
      readOnly: true
      required:
        - owner
        - timestamps
        - status
        - canceled
        - paused
        - closed
        - pending
        - suspended
        - invoice_after
        - manual_payments
        - first_invoice_prepaid
    SubscriptionTimestamps:
      allOf:
        - $ref: '#/components/schemas/SubscriptionsTimestamps'
        - properties:
            canceled_at:
              description: The date and time a subscription was cancelled.
              type: string
              examples:
                - '2017-01-10T11:41:19.244842Z'
            paused_at:
              description: The date and time a subscription was paused.
              type: string
              examples:
                - '2017-01-10T11:41:19.244842Z'
            resumed_at:
              description: The date and time a subscription was resumed.
              type: string
              examples:
                - '2017-01-10T11:41:19.244842Z'
            end_date:
              description: The date and time a subscription will end.
              type: string
              examples:
                - '2017-01-10T11:41:19.244842Z'
            go_live_after:
              description: The date and time a subscription will go live and become active.
              type: string
              examples:
                - '2017-01-10T11:41:19.244842Z'
            go_live:
              description: >-
                The date and time a subscription was released from the pending
                state and made active.
              type: string
              examples:
                - '2017-01-10T11:41:19.244842Z'
    SubscriptionAttributes:
      properties:
        external_ref:
          $ref: '#/components/schemas/ExternalRef'
        account_id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        address_id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        offering:
          $ref: '#/components/schemas/Offering'
        plan_id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        currency:
          $ref: '#/components/schemas/CurrencyIdentifier'
        payment_authority:
          $ref: '#/components/schemas/PaymentAuthority'
      required:
        - account_id
        - plan_id
        - offering
        - currency
        - name
        - email
    ChangeState:
      properties:
        type:
          $ref: '#/components/schemas/SubscriptionStateType'
        attributes:
          $ref: '#/components/schemas/SubscriptionStateAttributes'
      required:
        - type
        - attributes
    SubscriptionStateAttributes:
      properties:
        action:
          $ref: '#/components/schemas/SubscriptionStateAction'
      required:
        - action
    SubscriptionStateType:
      description: >-
        This represents the type of resource object being returned. Always
        `subscription_state`.
      type: string
      examples:
        - subscription_state
      const: subscription_state
    SubscriptionStateAction:
      description: >
        The subscription lifecycle is the states that a subscription can go
        through when a customer subscribes to a service or a product.


        A subscription can have the following states; `canceled`, `paused`, or
        `resumed`.


        See [**Managing the subscription
        lifecycle**](/docs/api/subscriptions/subscriptions#managing-the-subscription-lifecycle).
      type: string
      examples:
        - cancel
      enum:
        - cancel
        - pause
        - resume
        - pending
      x-go-type: model.SubscriptionAction
      x-go-type-import:
        name: model
        path: >-
          gitlab.elasticpath.com/commerce-cloud/subscriptions.svc/internal/domain/model
    StateMeta:
      properties:
        created_at:
          description: The date and time a resource was created.
          type: string
          examples:
            - '2017-01-10T11:41:19.244842Z'
      readOnly: true
      required:
        - created_at
    SubscriptionState:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionStateType'
        attributes:
          $ref: '#/components/schemas/SubscriptionStateAttributes'
        meta:
          $ref: '#/components/schemas/StateMeta'
      required:
        - type
        - attributes
        - meta
    ManualPayments:
      description: >-
        When configured to true, no payment gateway is used and a pending
        payment is created. See [External
        Payments](/docs/api/subscriptions/invoices#external-payments).
      type: boolean
      examples:
        - false
      default: false
    PaymentAuthority:
      type: object
      properties:
        type:
          description: >-
            The name of the payment gateway facilitating the secure transmission
            of payment data.
          type: string
          examples:
            - elastic_path_payments_stripe
          enum:
            - authorize_net
            - elastic_path_payments_stripe
          x-go-type: paymentgateways.GatewayName
          x-go-type-import:
            name: paymentgateways
            path: >-
              gitlab.elasticpath.com/commerce-cloud/subscriptions.svc/internal/paymentgateways
      discriminator:
        propertyName: type
        mapping:
          elastic_path_payments_stripe: '#/components/schemas/PaymentAuthorityStripe'
          authorize_net: '#/components/schemas/PaymentAuthorityAuthorizeNet'
      oneOf:
        - $ref: '#/components/schemas/PaymentAuthorityStripe'
        - $ref: '#/components/schemas/PaymentAuthorityAuthorizeNet'
      required:
        - type
    NullablePaymentAuthority:
      type:
        - object
        - 'null'
      properties:
        type:
          description: >-
            The name of the payment gateway facilitating the secure transmission
            of payment data.
          type: string
          examples:
            - elastic_path_payments_stripe
          enum:
            - authorize_net
            - elastic_path_payments_stripe
          x-go-type: paymentgateways.GatewayName
          x-go-type-import:
            name: paymentgateways
            path: >-
              gitlab.elasticpath.com/commerce-cloud/subscriptions.svc/internal/paymentgateways
      discriminator:
        propertyName: type
        mapping:
          elastic_path_payments_stripe: '#/components/schemas/PaymentAuthorityStripe'
          authorize_net: '#/components/schemas/PaymentAuthorityAuthorizeNet'
      oneOf:
        - $ref: '#/components/schemas/PaymentAuthorityStripe'
        - $ref: '#/components/schemas/PaymentAuthorityAuthorizeNet'
      required:
        - type
    PaymentAuthorityAuthorizeNet:
      type: object
      properties:
        type:
          description: >-
            The name of the payment gateway facilitating the secure transmission
            of payment data.
          type: string
          examples:
            - authorize_net
          const: authorize_net
          x-go-type: paymentgateways.GatewayName
          x-go-type-import:
            name: paymentgateways
            path: >-
              gitlab.elasticpath.com/commerce-cloud/subscriptions.svc/internal/paymentgateways
        payment_profile_id:
          description: >-
            The customer's payment profile id, unique to Authorize.net, used to
            facilitate payment of the subscription.
          type: string
          examples:
            - '1511660856'
          maxLength: 1024
          minLength: 3
        customer_profile_id:
          description: >-
            The customer's profile id, unique to Authorize.net, used to
            facilitate payment of the subscription.
          type: string
          examples:
            - '1511736979'
          maxLength: 1024
          minLength: 3
      required:
        - type
    PaymentAuthorityStripe:
      type: object
      properties:
        type:
          description: >-
            The name of the payment gateway facilitating the secure transmission
            of payment data.
          type: string
          examples:
            - elastic_path_payments_stripe
          const: elastic_path_payments_stripe
          x-go-type: paymentgateways.GatewayName
          x-go-type-import:
            name: paymentgateways
            path: >-
              gitlab.elasticpath.com/commerce-cloud/subscriptions.svc/internal/paymentgateways
        customer_id:
          description: The unique identifier for a customer.
          type: string
          examples:
            - cus_OPfKlxWV3hp9h6
          maxLength: 1024
          minLength: 3
        card_id:
          description: >-
            The unique identifier of the card used to facilitate payment of the
            subscription. If a card payment fails, you can use the `card_id` and
            `customer_id` attributes to program your front-end implementation to
            allow your preferred payment service provider to update a
            subscription with new card details. See [Card
            declines](/docs/api/subscriptions/invoices#card-declines).
          type: string
          examples:
            - card_8Diw3FQPhxK27WADPVMeXieP
          maxLength: 1024
          minLength: 3
      required:
        - type
      writeOnly: true
    Import:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionImportType'
        attributes:
          $ref: '#/components/schemas/ImportAttributes'
        meta:
          $ref: '#/components/schemas/ImportMeta'
      required:
        - type
        - meta
        - attributes
    ImportAttributes:
      properties:
        external_ref:
          $ref: '#/components/schemas/ExternalRef'
        status:
          description: >
            The status of job.

            - **pending** - Commerce has received the request but is currently
            busy processing other requests.

            - **started** - Commerce has started processing the job.

            - **success** - The job has successfully completed.

            - **failed** - The job has failed.
          type: string
          examples:
            - pending
          enum:
            - pending
            - started
            - success
            - failed
          x-go-type: model.JobStatus
          x-go-type-import:
            name: model
            path: >-
              gitlab.elasticpath.com/commerce-cloud/subscriptions.svc/internal/domain/model
      required:
        - status
    ImportMeta:
      properties:
        owner:
          $ref: '#/components/schemas/OwnerMeta'
        timestamps:
          $ref: '#/components/schemas/JobTimestamps'
        records:
          $ref: '#/components/schemas/ImportRecords'
      readOnly: true
      required:
        - owner
        - timestamps
        - records
    ImportRecords:
      description: >-
        You can track the number of records imported to ensure the completeness,
        accuracy and integrity of the import. Uploaded shows the number of
        records ready to be imported into Subscriptions. However, this does not
        mean they are valid subscription objects, only that they have the
        correct type and their JSON format is properly formatted. Imported shows
        the number of records that have been both validated and successfully
        added to Subscriptions.
      type: object
      properties:
        uploaded:
          type: object
          properties:
            subscription_product:
              description: The total number of products uploaded.
              type: integer
              examples:
                - 50000
            subscription_plan:
              description: The total number of plans uploaded.
              type: integer
              examples:
                - 50000
            subscription_subscriber:
              description: The total number of subscribers uploaded.
              type: integer
              examples:
                - 50000
            subscription_offering:
              description: The total number of offerings uploaded.
              type: integer
              examples:
                - 50000
            subscription:
              description: The total number of subscriptions uploaded.
              type: integer
              examples:
                - 50000
          required:
            - subscription_product
            - subscription_plan
            - subscription_subscriber
            - subscription_offering
            - subscription
        imported:
          properties:
            subscription_product:
              description: The total number of products imported.
              type: integer
              examples:
                - 45090
            subscription_plan:
              description: The total number of plans imported.
              type: integer
              examples:
                - 45090
            subscription_subscriber:
              description: The total number of subscribers imported.
              type: integer
              examples:
                - 45090
            subscription_offering:
              description: The total number of offerings imported.
              type: integer
              examples:
                - 45090
            subscription:
              description: The total number of subscriptions imported.
              type: integer
              examples:
                - 45090
          required:
            - subscription_product
            - subscription_plan
            - subscription_subscriber
            - subscription_offering
            - subscription
      required:
        - uploaded
        - imported
    Job:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionJobType'
        attributes:
          $ref: '#/components/schemas/JobResponseAttributes'
        relationships:
          $ref: '#/components/schemas/Relationships'
        meta:
          $ref: '#/components/schemas/JobMeta'
      required:
        - type
        - attributes
        - meta
    JobMeta:
      properties:
        owner:
          $ref: '#/components/schemas/OwnerMeta'
        timestamps:
          $ref: '#/components/schemas/JobTimestamps'
        report:
          $ref: '#/components/schemas/JobReport'
      readOnly: true
      required:
        - owner
        - timestamps
    JobReport:
      description: >-
        You can track your Subscriptions billing, tax, and payment operations
        using reports.
      oneOf:
        - $ref: '#/components/schemas/BillingRunReport'
        - $ref: '#/components/schemas/TaxRunReport'
        - $ref: '#/components/schemas/PaymentRunReport'
    BillingRunReport:
      properties:
        invoices_ready_for_payment:
          description: The total number of invoices created that are ready for payment.
          type: integer
          examples:
            - 100
        invoices_tax_required:
          description: >-
            The total number of invoices created that need taxes to be applied
            before payment can be made.
          type: integer
          examples:
            - 100
        invoice_failures:
          description: >-
            The total number of invoices that were scheduled but creation
            failed.
          type: integer
          examples:
            - 0
        total_ready_for_payment:
          allOf:
            - description: >-
                The total amount ready for payment invoiced in the billing run,
                segmented by currency.
            - $ref: '#/components/schemas/Price'
        total_tax_required:
          allOf:
            - description: >-
                The total amount (excluding tax) invoiced in the billing run but
                still requiring taxes, segmented by currency.
            - $ref: '#/components/schemas/Price'
      required:
        - invoices_ready_for_payment
        - invoices_tax_required
        - invoice_failures
        - total_ready_for_payment
        - total_tax_required
    TaxRunReport:
      properties:
        invoices_updated:
          description: The total number of invoices to which tax was successfully added.
          type: integer
          examples:
            - 100
        invoice_failures:
          description: The total number of invoices to which tax could not be added.
          type: integer
          examples:
            - 0
      required:
        - invoices_updated
        - invoice_failures
    PaymentRunReport:
      properties:
        total_payment_attempts:
          description: The total number of invoices for which payment was attempted.
          type: integer
          examples:
            - 100
        failed_payments:
          description: The number of failed payment attempts.
          type: integer
          examples:
            - 0
        total_collected:
          allOf:
            - description: >-
                The total amount collected by the payment run, segmented by
                currency.
            - $ref: '#/components/schemas/Price'
      required:
        - total_payment_attempts
        - failed_payments
        - total_collected
    JobTimestamps:
      allOf:
        - $ref: '#/components/schemas/SubscriptionsTimestamps'
        - properties:
            started_at:
              description: The date and time a job is started.
              type: string
              examples:
                - '2017-01-10T11:41:19.244842Z'
            finished_at:
              description: The date and time a job finished.
              type: string
              examples:
                - '2017-01-10T11:41:19.244842Z'
    JobCreate:
      properties:
        type:
          $ref: '#/components/schemas/SubscriptionJobType'
        attributes:
          $ref: '#/components/schemas/JobCreateAttributes'
      required:
        - type
        - attributes
    JobResponseAttributes:
      allOf:
        - $ref: '#/components/schemas/JobCreateAttributes'
        - $ref: '#/components/schemas/JobAttributes'
        - $ref: '#/components/schemas/SubscriptionsTimestamps'
    JobType:
      description: |
        The type of job. One of the following:
         - `billing_run` - a billing run job.
         - `payment_run` - a payment run job.
         - `tax_run` - a tax run job.
      type: string
      examples:
        - billing-run
      enum:
        - billing-run
        - tax-run
        - payment-run
        - import
      x-go-type: model.JobType
      x-go-type-import:
        name: model
        path: >-
          gitlab.elasticpath.com/commerce-cloud/subscriptions.svc/internal/domain/model
    JobCreateAttributes:
      properties:
        external_ref:
          $ref: '#/components/schemas/ExternalRef'
        job_type:
          $ref: '#/components/schemas/JobType'
        taxes:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceTaxItems'
          minItems: 1
      required:
        - job_type
    JobAttributes:
      properties:
        external_ref:
          $ref: '#/components/schemas/ExternalRef'
        status:
          description: The status of job.
          type: string
          examples:
            - pending
          enum:
            - pending
            - started
            - success
            - failed
          x-go-type: model.JobStatus
          x-go-type-import:
            name: model
            path: >-
              gitlab.elasticpath.com/commerce-cloud/subscriptions.svc/internal/domain/model
      required:
        - status
    InvoiceTaxItems:
      properties:
        invoice_id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        tax_items:
          type: array
          items:
            $ref: '#/components/schemas/TaxItem'
      required:
        - invoice_id
        - tax_items
    TaxItem:
      properties:
        type:
          description: >-
            This represents the type of resource object being returned. Always
            `tax_item`.
          type: string
          examples:
            - tax_item
          const: tax_item
        name:
          description: >-
            The name that appears on your customer's invoice and usually
            describes the specific type of tax, for example, `Sales`, `VAT` or
            `GST`.
          type: string
          examples:
            - GST
          maxLength: 1024
        code:
          description: >-
            The unique identifier assigned to goods and services for taxation
            purposes.
          type: string
          examples:
            - 20.0 % S
          maxLength: 1024
        rate:
          description: >-
            The tax rate is the percentage of the subscription amount that is
            required to be paid as tax.
          type: number
          format: double
          examples:
            - 0.2
        jurisdiction:
          description: >-
            The geographic area or political entity that has authority to levy
            and collect taxes.
          type: string
          examples:
            - USA
          maxLength: 1024
      required:
        - type
        - rate
    SubscriptionInvoice:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionInvoiceType'
        attributes:
          $ref: '#/components/schemas/SubscriptionInvoiceAttributes'
        meta:
          $ref: '#/components/schemas/SubscriptionInvoiceMeta'
      required:
        - type
        - attributes
        - meta
    UpdateInvoicePayment:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionInvoicePaymentType'
        attributes:
          $ref: '#/components/schemas/UpdateInvoicePaymentAttributes'
      required:
        - id
        - type
        - attributes
    UpdateInvoicePaymentAttributes:
      properties:
        success:
          description: Whether the payment was successful.
          type: boolean
          examples:
            - true
        external_payment_id:
          description: An optional external ID that is specific to the gateway used.
          type: string
          examples:
            - 33e7ec6b-8b34-4c92-a95b-2e2647922e47
          maxLength: 1024
        failure_detail:
          description: >-
            A message generated by an external payment method that describes why
            a payment fails.
          type: string
          examples:
            - Card Failure
        payment_taken_at:
          description: The date and time the invoice payment was taken at.
          type: string
          examples:
            - '2017-01-10T11:41:19.244842Z'
      required:
        - success
    SubscriptionInvoicePayment:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionInvoicePaymentType'
        attributes:
          $ref: '#/components/schemas/SubscriptionInvoicePaymentAttributes'
        meta:
          $ref: '#/components/schemas/SubscriptionInvoicePaymentMeta'
      required:
        - id
        - type
        - attributes
        - meta
    SubscriptionInvoiceMeta:
      properties:
        owner:
          $ref: '#/components/schemas/OwnerMeta'
        subscription_id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        subscriber_id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        price:
          $ref: '#/components/schemas/SingleCurrencyPrice'
        timestamps:
          $ref: '#/components/schemas/InvoiceTimestamps'
        proration_events:
          type: array
          items:
            $ref: '#/components/schemas/ProrationEvent'
      readOnly: true
      required:
        - owner
        - timestamps
        - proration_events
    ProrationEvent:
      properties:
        proration_policy_id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        billing_cost_before_proration:
          description: The value as a whole number of the currency's smallest subdivision
          type: integer
          format: int64
          examples:
            - 100
        refunded_amount_for_unused_plan:
          description: The value as a whole number of the currency's smallest subdivision.
          type: integer
          format: int64
          examples:
            - 100
        new_plan_cost:
          description: The value as a whole number of the currency's smallest subdivision.
          type: integer
          format: int64
          examples:
            - 100
        prorated_at:
          description: The date and time the subscription was prorated.
          type: string
          examples:
            - '2017-01-10T11:41:19.244842Z'
      required:
        - proration_policy_id
        - billing_cost_before_proration
        - refunded_amount_for_unused_plan
        - new_plan_cost
        - prorated_at
    InvoiceTimestamps:
      allOf:
        - $ref: '#/components/schemas/SubscriptionsTimestamps'
        - properties:
            taxes_added_at:
              description: The date and time taxes were added to an invoice.
              type: string
              examples:
                - '2017-01-10T11:41:19.244842Z'
    SubscriptionInvoicePaymentMeta:
      properties:
        owner:
          $ref: '#/components/schemas/OwnerMeta'
        subscription_id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        invoice_id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        job_id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        timestamps:
          $ref: '#/components/schemas/InvoicePaymentTimestamps'
        manual_payment:
          description: >-
            Whether manual payments are enabled or the payment will be handled
            by the configured gateway.
          type: boolean
          examples:
            - false
      readOnly: true
      required:
        - owner
        - timestamps
        - invoice_id
        - subscription_id
        - job_id
        - manual_payment
    InvoicePaymentTimestamps:
      allOf:
        - $ref: '#/components/schemas/SubscriptionsTimestamps'
        - properties:
            payment_taken_at:
              description: The date and time a payment was taken.
              type: string
              examples:
                - '2017-01-10T11:41:19.244842Z'
    SubscriptionInvoiceAttributes:
      properties:
        billing_period:
          $ref: '#/components/schemas/TimePeriod'
        invoice_items:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionInvoiceItem'
        tax_items:
          type: array
          items:
            $ref: '#/components/schemas/TaxItem'
        outstanding:
          description: The invoice still requires payment if `true`.
          type: boolean
          examples:
            - true
        number:
          description: A sequential number assigned by the billing run.
          type: integer
          examples:
            - 1
        tax_required:
          description: Whether tax is required for this invoice.
          type: boolean
          examples:
            - true
        payment_retries_limit_reached:
          description: Whether the limit of payment retries has been reached.
          type: boolean
          examples:
            - false
        updated_at:
          description: The date and time an invoice was updated.
          type: string
          examples:
            - '2017-01-10T11:41:19.244842Z'
        created_at:
          description: The date and time an invoice was created.
          type: string
          examples:
            - '2017-01-10T11:41:19.244842Z'
        manual_payment_pending:
          description: Whether there is a manual pending payment pending on the invoice.
          type: boolean
          examples:
            - true
      required:
        - billing_period
        - invoice_items
        - outstanding
        - tax_required
        - payment_retries_limit_reached
        - manual_payment_pending
    SubscriptionInvoicePaymentAttributes:
      properties:
        success:
          description: Whether the payment was successful.
          type: boolean
          examples:
            - true
        pending:
          description: Whether the payment is pending (only for manual payments).
          type: boolean
          examples:
            - true
        gateway:
          description: Specifies the payment gateway.
          type: string
          examples:
            - elastic_path_payments_stripe
          maxLength: 1024
        external_payment_id:
          description: An optional external ID that is specific to the gateway used.
          type: string
          examples:
            - 33e7ec6b-8b34-4c92-a95b-2e2647922e47
          maxLength: 1024
        failure_detail:
          $ref: '#/components/schemas/PaymentFailureDetail'
        amount:
          $ref: '#/components/schemas/SingleCurrencyPrice'
      required:
        - success
        - amount
        - gateway
    PaymentFailureDetail:
      description: The reason the payment failed.
      type: object
      properties:
        reason:
          type: string
          examples:
            - Card Failure
    SubscriptionInvoiceItem:
      properties:
        description:
          description: A description of the subscribed item.
          type: string
          examples:
            - Magazine issue
        price:
          $ref: '#/components/schemas/SingleCurrencyPrice'
        product_id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        from_time_period:
          description: The start date and time of the billing period in this price
          type: string
          examples:
            - '2017-01-10T11:41:19.244842Z'
        until_time_period:
          description: The end date and time of the billing period in this price
          type: string
          examples:
            - '2017-01-10T11:41:19.244842Z'
      required:
        - description
        - price
    CurrencyIdentifier:
      description: >-
        The three-letter [**ISO currency
        code**](https://www.iso.org/iso-4217-currency-codes.html) in uppercase.
      type: string
      examples:
        - USD
      maxLength: 1024
    OwnerMeta:
      description: The owner of a resource, either `store` or `organization`.
      type: string
      format: string
      examples:
        - store
      readOnly: true
    OfferingProductExternalRefMeta:
      description: The offerings product external_ref value
      type: string
      format: string
      examples:
        - 97dddc65-eabd-45d8-b45b-2ece5cfc8c50
      readOnly: true
    Subscriber:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionSubscriberType'
        attributes:
          $ref: '#/components/schemas/SubscriberResponseAttributes'
        meta:
          $ref: '#/components/schemas/SubscriberMeta'
      required:
        - type
        - attributes
        - meta
    SubscriberMeta:
      properties:
        owner:
          $ref: '#/components/schemas/OwnerMeta'
        timestamps:
          $ref: '#/components/schemas/SubscriptionsTimestamps'
      readOnly: true
      required:
        - owner
        - timestamps
    SubscriptionSubscriberType:
      type: string
      examples:
        - subscription_subscriber
      const: subscription_subscriber
    SubscriberResponseAttributes:
      allOf:
        - $ref: '#/components/schemas/SubscriberAttributes'
        - $ref: '#/components/schemas/SubscriptionsTimestamps'
    SubscriberAttributes:
      properties:
        account_id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        name:
          description: The name of the subscriber.
          type: string
          examples:
            - John Doe
          maxLength: 1024
          minLength: 3
        email:
          description: The email of the subscriber.
          type: string
          format: email
          examples:
            - john.doe@example.com
          maxLength: 1024
          minLength: 3
          x-go-type: types.Email
          x-go-type-import:
            name: email
            path: github.com/oapi-codegen/runtime/types
        payment_authority:
          $ref: '#/components/schemas/PaymentAuthority'
      required:
        - name
        - email
        - account_id
    SubscriberUpdateAttributes:
      properties:
        name:
          description: The name of the subscriber.
          type: string
          examples:
            - John Doe
          maxLength: 1024
          minLength: 3
        email:
          description: The email of the subscriber.
          type: string
          format: email
          examples:
            - john.doe@example.com
          maxLength: 1024
          minLength: 3
          x-go-type: types.Email
          x-go-type-import:
            name: email
            path: github.com/oapi-codegen/runtime/types
        payment_authority:
          $ref: '#/components/schemas/NullablePaymentAuthority'
    SubscriberCreate:
      properties:
        type:
          $ref: '#/components/schemas/SubscriptionSubscriberType'
        attributes:
          $ref: '#/components/schemas/SubscriberAttributes'
      required:
        - type
        - attributes
    SubscriberUpdate:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionSubscriberType'
        attributes:
          $ref: '#/components/schemas/SubscriberUpdateAttributes'
      required:
        - id
        - type
        - attributes
    ScheduleCreate:
      properties:
        type:
          $ref: '#/components/schemas/SubscriptionScheduleType'
        attributes:
          $ref: '#/components/schemas/ScheduleAttributes'
      required:
        - type
        - attributes
    Schedule:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionScheduleType'
        attributes:
          $ref: '#/components/schemas/ScheduleResponseAttributes'
        meta:
          $ref: '#/components/schemas/ScheduleMeta'
      required:
        - type
        - attributes
        - meta
    ScheduleMeta:
      properties:
        scheduled_for:
          type: string
          format: date-time
          examples:
            - '2017-07-21T17:32:28Z'
        owner:
          $ref: '#/components/schemas/OwnerMeta'
        timestamps:
          $ref: '#/components/schemas/SubscriptionsTimestamps'
      readOnly: true
      required:
        - owner
        - timestamps
    SubscriptionScheduleType:
      type: string
      examples:
        - subscription_schedule
      const: subscription_schedule
    ScheduleResponseAttributes:
      allOf:
        - $ref: '#/components/schemas/ScheduleAttributes'
        - $ref: '#/components/schemas/SubscriptionsTimestamps'
    ScheduleAttributes:
      properties:
        external_ref:
          $ref: '#/components/schemas/ExternalRef'
        name:
          description: The name of the schedule.
          type: string
          examples:
            - Daily billing run.
          maxLength: 1024
          minLength: 3
        specification:
          description: >-
            A cron-style specification of when the jobs should be created. See
            [**Schedules**](/docs/api/subscriptions/schedules).
          type: string
          examples:
            - 30 0 * * *
          maxLength: 1024
        location:
          description: >-
            The location of the time zone that the schedule operates in.
            Subscriptions runs on Coordinated Universal Time (UTC) time and
            conforms to [**RFC 3339**](https://www.rfc-editor.org/rfc/rfc3339).
          type: string
          examples:
            - Europe/London
          maxLength: 1024
        job:
          $ref: '#/components/schemas/ScheduleJob'
      required:
        - specification
        - location
        - job
    ScheduleUpdateAttributes:
      properties:
        external_ref:
          $ref: '#/components/schemas/ExternalRefUpdate'
        name:
          description: The name of the schedule.
          type:
            - string
            - 'null'
          examples:
            - Daily billing run.
          maxLength: 1024
          minLength: 3
        specification:
          description: A cron-style specification of when the jobs should be created.
          type: string
          examples:
            - 30 0 * * *
          maxLength: 1024
        location:
          description: The location of the time zone that the schedule operates in.
          type: string
          examples:
            - Europe/London
          maxLength: 1024
        job:
          $ref: '#/components/schemas/ScheduleJob'
    ScheduleJob:
      properties:
        job_type:
          $ref: '#/components/schemas/JobType'
      required:
        - job_type
    ScheduleUpdate:
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionsUUID'
        type:
          $ref: '#/components/schemas/SubscriptionScheduleType'
        attributes:
          $ref: '#/components/schemas/ScheduleUpdateAttributes'
      required:
        - id
        - type
        - attributes
    SubscriptionsTimestamps:
      properties:
        updated_at:
          description: The date and time a resource was updated.
          type: string
          examples:
            - '2017-01-10T11:41:19.244842Z'
        created_at:
          description: The date and time a resource was created.
          type: string
          examples:
            - '2017-01-10T11:41:19.244842Z'
      required:
        - created_at
        - updated_at
    SubscriptionsErrorResponse:
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionsError'
      required:
        - errors
    SubscriptionsError:
      properties:
        status:
          description: The HTTP response code of the error.
          type: string
          examples:
            - '500'
        title:
          description: A brief summary of the error.
          type: string
          examples:
            - Internal server error
        detail:
          description: Optional additional detail about the error.
          type: string
          examples:
            - An internal error has occurred.
        meta:
          description: Additional supporting meta data for the error.
          type: object
          examples:
            - missing_ids:
                - e7d50bd5-1833-43c0-9848-f9d325b08be8
      required:
        - status
        - title
    SubscriptionsUUID:
      description: The unique identifier.
      type: string
      examples:
        - 11111111-2222-3333-4444-555555555555
      x-go-type: uuid.UUID
      x-go-type-import:
        name: uuid
        path: github.com/google/uuid
    StockType:
      type: string
      examples:
        - stock
      default: stock
      const: stock
    StockTransactionType:
      type: string
      examples:
        - stock-transaction
      default: stock-transaction
      const: stock-transaction
    MultipleProducts:
      type: object
      properties:
        type:
          type: string
          examples:
            - stock
          default: stock
          const: stock
        id:
          description: The unique identifier of the product.
          type: string
          format: uuid
          examples:
            - 3c78777a-cf09-4b2d-be91-a73acbf9166f
      required:
        - id
    TransactionResponseAttributes:
      type: object
      properties:
        action:
          description: >
            The type of action performed by this transaction.


            - **increment** - use this when you want to make products available
            for purchase, for example, when you have received stock from a
            supplier.


            - **decrement** - Use this when you want to remove stock from
            product inventory.


            - **allocate** - Use this when you want to allocate stock, normally
            to a reseller who sells on the stock.


            - **deallocate** - Use this when you want to deallocate any
            previously allocated stock.
          type: string
          examples:
            - allocate
          enum:
            - increment
            - decrement
            - allocate
            - deallocate
          x-go-type: model.TransactionAction
          x-go-type-import:
            name: model
            path: >-
              gitlab.elasticpath.com/commerce-cloud/inventories.svc/internal/domain/model
        product_id:
          $ref: '#/components/schemas/InventoriesUUID'
        quantity:
          description: The amount of stock affected by the stock transaction.
          type: integer
          format: int64
          examples:
            - 5
        location:
          description: The slug of the location that the transaction should act on.
          type: string
          examples:
            - milton-keynes-warehouse
          maxLength: 128
          minLength: 1
      required:
        - action
        - product_id
        - quantity
    StockCreate:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/InventoriesUUID'
        type:
          $ref: '#/components/schemas/StockType'
        attributes:
          $ref: '#/components/schemas/StockCreateAttributes'
      required:
        - type
        - attributes
    StockUpdateRequest:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/InventoriesUUID'
        type:
          $ref: '#/components/schemas/StockType'
        attributes:
          $ref: '#/components/schemas/StockUpdateAttributes'
      required:
        - id
        - type
        - attributes
    StockUpdateAttributes:
      properties:
        locations:
          $ref: '#/components/schemas/NullableLocations'
    NullableLocation:
      type:
        - object
        - 'null'
      properties:
        available:
          type: integer
          format: int64
          examples:
            - 20
      required:
        - available
    NullableLocations:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/NullableLocation'
    StockCreateAttributes:
      type: object
      properties:
        available:
          type: integer
          format: int64
          examples:
            - 20
        locations:
          type: object
          examples:
            - york_warehouse:
                available: 10
              stevenage_warehouse:
                available: 20
          additionalProperties:
            type: object
            required:
              - available
            properties:
              available:
                type: integer
                format: int64
                examples:
                  - 20
    StockResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/InventoriesUUID'
        type:
          $ref: '#/components/schemas/StockType'
        attributes:
          $ref: '#/components/schemas/StockResponseAttributes'
        meta:
          $ref: '#/components/schemas/StockMeta'
      required:
        - id
        - type
        - attributes
        - meta
    StockResponseAttributes:
      type: object
      properties:
        available:
          type: integer
          format: int64
          examples:
            - 20
        allocated:
          type: integer
          format: int64
          examples:
            - 10
        total:
          type: integer
          format: int64
          examples:
            - 30
        locations:
          $ref: '#/components/schemas/StockLocations'
      required:
        - available
        - total
        - allocated
    StockLocations:
      type: object
      additionalProperties:
        type: object
        required:
          - available
          - total
          - allocated
        properties:
          available:
            type: integer
            format: int64
            examples:
              - 20
          allocated:
            type: integer
            format: int64
            examples:
              - 10
          total:
            type: integer
            format: int64
            examples:
              - 30
    TransactionCreate:
      properties:
        type:
          $ref: '#/components/schemas/StockTransactionType'
        attributes:
          $ref: '#/components/schemas/TransactionCreateAttributes'
      required:
        - type
        - attributes
    TransactionCreateAttributes:
      properties:
        product_id:
          $ref: '#/components/schemas/InventoriesUUID'
        action:
          description: |
            The type of action being performed by this transaction.

             - **increment** - use this when you want to make products available for purchase, for example, when you have received stock from a supplier.

             - **decrement** - Use this when you want to remove stock from product inventory.

             - **allocate** - Use this when you want to allocate stock, normally to a reseller who sells on the stock.

             - **deallocate** - Use this when you want to deallocate any previously allocated stock.

             - **set** - Use this when you want to set total stock to a specific value.
          type: string
          examples:
            - allocate
          enum:
            - increment
            - decrement
            - allocate
            - deallocate
            - set
          x-go-type: model.TransactionAction
          x-go-type-import:
            name: model
            path: >-
              gitlab.elasticpath.com/commerce-cloud/inventories.svc/internal/domain/model
        quantity:
          description: The amount of stock affected by the stock transaction.
          type: integer
          format: int64
          examples:
            - 5
          minimum: 0
        location:
          description: The slug of the location that the transaction should act on.
          type: string
          examples:
            - milton-keynes-warehouse
          maxLength: 128
          minLength: 1
      required:
        - action
        - quantity
    Location:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/InventoriesUUID'
        type:
          $ref: '#/components/schemas/InventoryLocationType'
        attributes:
          $ref: '#/components/schemas/LocationAttributes'
        meta:
          $ref: '#/components/schemas/Meta'
      required:
        - id
        - type
        - attributes
    LocationAttributes:
      properties:
        name:
          type: string
          examples:
            - Milton Keynes Warehouse
          maxLength: 1024
          minLength: 3
        external_ref:
          type: string
          examples:
            - mk-stock-warehouse-walnut-tree
          maxLength: 1024
          minLength: 3
        slug:
          type: string
          examples:
            - milton-keynes-warehouse
          maxLength: 128
          minLength: 1
        description:
          type: string
          examples:
            - Southern dispatch location for all inventory
          maxLength: 1024
          minLength: 3
        address:
          type: array
          items:
            type: string
            maxLength: 1024
          maxItems: 8
          minItems: 1
        geolocation:
          $ref: '#/components/schemas/GeolocationDetails'
      required:
        - name
        - slug
    LocationUpdateAttributes:
      properties:
        name:
          type: string
          examples:
            - Milton Keynes Warehouse
          maxLength: 1024
          minLength: 3
        external_ref:
          type:
            - string
            - 'null'
          examples:
            - mk-stock-warehouse-walnut-tree
          maxLength: 1024
          minLength: 3
        slug:
          type: string
          examples:
            - milton-keynes-warehouse
          maxLength: 128
          minLength: 1
        description:
          type:
            - string
            - 'null'
          examples:
            - Southern dispatch location for all inventory
          maxLength: 1024
          minLength: 3
        address:
          type:
            - array
            - 'null'
          items:
            type:
              - string
              - 'null'
            maxLength: 1024
          maxItems: 8
          minItems: 1
        geolocation:
          $ref: '#/components/schemas/GeolocationDetails'
    GeolocationDetails:
      description: The longitude and latitude of a location.
      type:
        - object
        - 'null'
      properties:
        lat:
          type:
            - number
          format: double
          examples:
            - 51.477928
        lon:
          type:
            - number
          format: double
          examples:
            - -0.001545
      examples:
        - lat: 51.477928
          lon: -0.001545
      required:
        - lat
        - lon
    LocationRequest:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/InventoryLocationType'
        attributes:
          $ref: '#/components/schemas/LocationAttributes'
      required:
        - attributes
    LocationUpdateRequest:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/InventoriesUUID'
        type:
          $ref: '#/components/schemas/InventoryLocationType'
        attributes:
          $ref: '#/components/schemas/LocationUpdateAttributes'
      required:
        - id
        - type
        - attributes
    InventoryLocationType:
      type: string
      examples:
        - inventory_location
      const: inventory_location
    StockMeta:
      type: object
      properties:
        stock_id:
          $ref: '#/components/schemas/InventoriesUUID'
        timestamps:
          $ref: '#/components/schemas/InventoriesTimestamps'
      required:
        - stock_id
        - timestamps
    Meta:
      type: object
      properties:
        timestamps:
          $ref: '#/components/schemas/InventoriesTimestamps'
      required:
        - timestamps
    InventoriesTransactionResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/InventoriesUUID'
        type:
          $ref: '#/components/schemas/StockTransactionType'
        attributes:
          $ref: '#/components/schemas/TransactionResponseAttributes'
        meta:
          $ref: '#/components/schemas/Meta'
      required:
        - id
        - type
        - attributes
    InventoriesUUID:
      description: The unique identifier.
      type: string
      examples:
        - 00000000-0000-0000-0000-000000000000
      x-go-type: uuid.UUID
      x-go-type-import:
        name: uuid
        path: github.com/google/uuid
    InventoriesTimestamps:
      properties:
        updated_at:
          description: The date and time a resource was updated.
          type: string
          examples:
            - '2017-01-10T11:41:19.244842Z'
        created_at:
          description: The date and time a resource was created.
          type: string
          examples:
            - '2017-01-10T11:41:19.244842Z'
      required:
        - created_at
    InventoriesErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/InventoriesError'
      required:
        - errors
    InventoriesError:
      type: object
      properties:
        status:
          description: The HTTP response code of the error.
          type: string
          examples:
            - 500
        title:
          description: A brief summary of the error.
          type: string
          examples:
            - Internal server error
        detail:
          description: Optional additional detail about the error.
          type: string
          examples:
            - An internal error has occurred.
        meta:
          description: Additional supporting meta data for the error.
          type: object
          examples:
            - missing_ids:
                - e7d50bd5-1833-43c0-9848-f9d325b08be8
      required:
        - status
        - title
  requestBodies:
    bundle-configuration-data:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/bundle-configuration-data'
      description: The bundle configuration.
      required: true
    products-for-cart-configuration:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/products-for-cart-configuration'
      description: A list of product id or sku and bundle configuration for cart.
      required: true
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      name: Authorization
      in: header
    BearerToken:
      scheme: bearer
      type: http
  responses:
    ForbiddenError:
      description: Forbidden. The operation is forbidden on this entity.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubscriptionsErrorResponse'
          examples:
            not-found:
              value:
                errors:
                  - title: Permission denied
                    status: '404'
                    detail: 'Permission denied: plan tenancy mismatch'
    WriteConflictError:
      description: Write conflict. Unable to perform the operation at this time.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubscriptionsErrorResponse'
          example:
            errors:
              - title: Write Conflict
                status: '409'
    SubscriptionsInternalServerError:
      description: Internal server error. There was a system failure in the platform.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubscriptionsErrorResponse'
          examples:
            internal-server-error:
              value:
                errors:
                  - title: Internal Server Error
                    status: '500'
    SubscriptionsNotFoundError:
      description: Not found. The requested entity does not exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubscriptionsErrorResponse'
          examples:
            not-found:
              value:
                errors:
                  - title: Not Found
                    status: '404'
                    detail: No plan found
    SubscriptionsValidationError:
      description: Bad request. The request failed validation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SubscriptionsErrorResponse'
          examples:
            missing-name:
              value:
                errors:
                  - title: Validation Error
                    status: '400'
                    detail: 'data.attributes.name: "name" is required'
    UnprocessableEntityError:
      description: The request was understood, but could not be processed by the server
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InventoriesErrorResponse'
          examples:
            missing-name:
              value:
                errors:
                  - title: Cannot complete request
                    status: '422'
                    detail: >-
                      Your request could not be completed due to insufficient
                      stock levels
    InternalServerError:
      description: Internal server error. There was a system failure in the platform.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InventoriesErrorResponse'
          examples:
            internal-server-error:
              value:
                errors:
                  - title: Internal Server Error
                    status: '500'
    InventoriesValidationError:
      description: Bad request. The request failed validation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InventoriesErrorResponse'
          examples:
            missing-name:
              value:
                errors:
                  - title: Validation Error
                    status: '400'
                    detail: Your request was invalid
    InventoriesNotFoundError:
      description: Not found. The requested entity does not exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InventoriesErrorResponse'
          examples:
            not-found:
              value:
                errors:
                  - title: Not Found
                    status: '404'
                    detail: No location found
x-tagGroups:
  - name: Catalogs Introduction
    tags:
      - Catalogs
      - Releases
      - Rules
      - Administrator Latest Releases Catalog API
      - Shopper Catalog API
  - name: Carts, Checkout, Orders Introduction
    tags:
      - Cart Management
      - Account Cart Associations
      - Customer Cart Associations
      - Cart Items
      - Checkout
      - Orders
      - Payments
      - Transactions
      - Custom Discounts
      - Tax Items
  - name: Subscriptions Introduction
    tags:
      - Products
      - Plans
      - Features
      - Offerings
      - Subscriptions
      - Jobs
      - Imports
      - Schedules
      - Subscribers
      - Invoices
      - Dunning Rules
      - Proration Policies
      - Observable Events
  - name: Inventories Introduction
    tags:
      - Inventory
      - InventoriesTransactions
      - Locations
