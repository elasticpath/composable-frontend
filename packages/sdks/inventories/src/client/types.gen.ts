// This file is auto-generated by @hey-api/openapi-ts

export type StockType = "stock"

export type StockTransactionType = "stock-transaction"

export type Type = "stock"

export type MultipleProducts = {
  type?: "stock"
  /**
   * The unique identifier of the product.
   */
  id: string
}

export type TransactionResponse = {
  id: Uuid
  type: StockTransactionType
  attributes: TransactionResponseAttributes
  meta?: Meta
}

/**
 * The type of action performed by this transaction.
 *
 * - **increment** - use this when you want to make products available for purchase, for example, when you have received stock from a supplier.
 *
 * - **decrement** - Use this when you want to remove stock from product inventory.
 *
 * - **allocate** - Use this when you want to allocate stock, normally to a reseller who sells on the stock.
 *
 * - **deallocate** - Use this when you want to deallocate any previously allocated stock.
 *
 */
export type Action = "increment" | "decrement" | "allocate" | "deallocate"

export type TransactionResponseAttributes = {
  /**
   * The type of action performed by this transaction.
   *
   * - **increment** - use this when you want to make products available for purchase, for example, when you have received stock from a supplier.
   *
   * - **decrement** - Use this when you want to remove stock from product inventory.
   *
   * - **allocate** - Use this when you want to allocate stock, normally to a reseller who sells on the stock.
   *
   * - **deallocate** - Use this when you want to deallocate any previously allocated stock.
   *
   */
  action: "increment" | "decrement" | "allocate" | "deallocate"
  product_id: Uuid
  /**
   * The amount of stock affected by the stock transaction.
   */
  quantity: BigInt
  /**
   * The slug of the location that the transaction should act on.
   */
  location?: string
}

export type StockCreate = {
  id?: Uuid
  type: StockType
  attributes: StockCreateAttributes
}

export type StockUpdateRequest = {
  id: Uuid
  type: StockType
  attributes: StockUpdateAttributes
}

export type StockUpdateAttributes = {
  locations?: NullableLocations
}

export type NullableLocation = {
  available: BigInt
} | null

export type NullableLocations = {
  [key: string]: NullableLocation
}

export type StockCreateAttributes = {
  available?: BigInt
  locations?: {
    [key: string]: {
      available: BigInt
    }
  }
}

export type StockResponse = {
  id: Uuid
  type: StockType
  attributes: StockResponseAttributes
  meta: StockMeta
}

export type StockResponseAttributes = {
  available: BigInt
  allocated: BigInt
  total: BigInt
  locations?: StockLocations
}

export type StockLocations = {
  [key: string]: {
    available: BigInt
    allocated: BigInt
    total: BigInt
  }
}

export type TransactionCreate = {
  type: StockTransactionType
  attributes: TransactionCreateAttributes
}

export type TransactionCreateAttributes = {
  product_id?: Uuid
  /**
   * The type of action being performed by this transaction.
   *
   * - **increment** - use this when you want to make products available for purchase, for example, when you have received stock from a supplier.
   *
   * - **decrement** - Use this when you want to remove stock from product inventory.
   *
   * - **allocate** - Use this when you want to allocate stock, normally to a reseller who sells on the stock.
   *
   * - **deallocate** - Use this when you want to deallocate any previously allocated stock.
   *
   * - **set** - Use this when you want to set total stock to a specific value.
   *
   */
  action: "increment" | "decrement" | "allocate" | "deallocate" | "set"
  /**
   * The amount of stock affected by the stock transaction.
   */
  quantity: BigInt
  /**
   * The slug of the location that the transaction should act on.
   */
  location?: string
}

export type Location = {
  id: Uuid
  type: InventoryLocationType
  attributes: LocationAttributes
  meta?: Meta
}

export type LocationAttributes = {
  name: string
  external_ref?: string
  slug: string
  description?: string
  address?: Array<string>
  geolocation?: GeolocationDetails
}

export type LocationUpdateAttributes = {
  name?: string
  external_ref?: string | null
  slug?: string
  description?: string | null
  address?: Array<string | null> | null
  geolocation?: GeolocationDetails
}

/**
 * The longitude and latitude of a location.
 */
export type GeolocationDetails = {
  lat: number
  lon: number
} | null

export type LocationRequest = {
  type?: InventoryLocationType
  attributes: LocationAttributes
}

export type LocationUpdateRequest = {
  id: Uuid
  type: InventoryLocationType
  attributes: LocationUpdateAttributes
}

export type InventoryLocationType = "inventory_location"

/**
 * The unique identifier.
 */
export type Uuid = string

export type Timestamps = {
  /**
   * The date and time a resource was updated.
   */
  updated_at?: string
  /**
   * The date and time a resource was created.
   */
  created_at: string
}

export type StockMeta = {
  stock_id: Uuid
  timestamps: Timestamps
}

export type Meta = {
  timestamps: Timestamps
}

export type ErrorResponse = {
  errors: Array<_Error>
}

export type _Error = {
  /**
   * The HTTP response code of the error.
   */
  status: string
  /**
   * A brief summary of the error.
   */
  title: string
  /**
   * Optional additional detail about the error.
   */
  detail?: string
  /**
   * Additional supporting meta data for the error.
   */
  meta?: {
    [key: string]: unknown
  }
}

export type Links = {
  [key: string]: Link
}

export type Link = LinkUri | LinkObject

export type LinkUri = string | null

export type LinkObject = {
  href?: string
  title?: string
  describedby?: string
}

/**
 * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [**page length**](https://elasticpath.dev/docs/commerce-cloud/global-project-settings/settings-overview#page-length) store setting is used.
 */
export type PageOffset = number

/**
 * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the the [**page length**](https://elasticpath.dev/docs/commerce-cloud/global-project-settings/settings-overview#page-length) store setting is used.
 */
export type PageLimit = number

/**
 * Some Inventories API endpoints support filtering. For the general syntax, see [**Filtering**](/guides/Getting-Started/filtering), but you must go to a specific endpoint to understand the attributes and operators an endpoint supports.
 *
 */
export type Filter = string

export type ListStockData = {
  body?: never
  path?: never
  query?: {
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [**page length**](https://elasticpath.dev/docs/commerce-cloud/global-project-settings/settings-overview#page-length) store setting is used.
     */
    "page[offset]"?: number
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the the [**page length**](https://elasticpath.dev/docs/commerce-cloud/global-project-settings/settings-overview#page-length) store setting is used.
     */
    "page[limit]"?: number
    /**
     * Some Inventories API endpoints support filtering. For the general syntax, see [**Filtering**](/guides/Getting-Started/filtering), but you must go to a specific endpoint to understand the attributes and operators an endpoint supports.
     *
     */
    filter?: string
  }
  url: "/inventories"
}

export type ListStockErrors = {
  /**
   * Not found. The requested entity does not exist.
   */
  404: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type ListStockError = ListStockErrors[keyof ListStockErrors]

export type ListStockResponses = {
  /**
   * Success. All products and their stock values are returned
   */
  200: {
    data: Array<StockResponse>
    links: Links
  }
}

export type ListStockResponse = ListStockResponses[keyof ListStockResponses]

export type CreateStockData = {
  body?: {
    data: StockCreate
  }
  path?: never
  query?: never
  url: "/inventories"
}

export type CreateStockErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type CreateStockError = CreateStockErrors[keyof CreateStockErrors]

export type CreateStockResponses = {
  /**
   * Success. Stock was successfully created for product
   */
  201: {
    data: StockResponse
  }
}

export type CreateStockResponse =
  CreateStockResponses[keyof CreateStockResponses]

export type GetStockForProductsData = {
  body?: {
    data: Array<MultipleProducts>
  }
  path?: never
  query?: never
  url: "/inventories/multiple"
}

export type GetStockForProductsErrors = {
  /**
   * Not found. The requested entity does not exist.
   */
  404: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type GetStockForProductsError =
  GetStockForProductsErrors[keyof GetStockForProductsErrors]

export type GetStockForProductsResponses = {
  /**
   * Success. Multiple products and their stock values are returned.
   */
  200: {
    data?: Array<StockResponse>
  }
}

export type GetStockForProductsResponse =
  GetStockForProductsResponses[keyof GetStockForProductsResponses]

export type DeleteStockData = {
  body?: never
  path: {
    /**
     * The unique identifier of the product.
     */
    product_uuid: Uuid
  }
  query?: never
  url: "/inventories/{product_uuid}"
}

export type DeleteStockErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: ErrorResponse
  /**
   * Not found. The requested entity does not exist.
   */
  404: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type DeleteStockError = DeleteStockErrors[keyof DeleteStockErrors]

export type DeleteStockResponses = {
  /**
   * Success. Removes the stock information about the product
   */
  204: void
}

export type DeleteStockResponse =
  DeleteStockResponses[keyof DeleteStockResponses]

export type GetStockData = {
  body?: never
  path: {
    /**
     * The unique identifier of the product.
     */
    product_uuid: Uuid
  }
  query?: never
  url: "/inventories/{product_uuid}"
}

export type GetStockErrors = {
  /**
   * Not found. The requested entity does not exist.
   */
  404: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type GetStockError = GetStockErrors[keyof GetStockErrors]

export type GetStockResponses = {
  /**
   * Success. Returns the stock for the given product UUID
   */
  200: {
    data: StockResponse
  }
}

export type GetStockResponse = GetStockResponses[keyof GetStockResponses]

export type UpdateStockData = {
  body?: {
    data: StockUpdateRequest
  }
  path: {
    /**
     * The unique identifier of the product.
     */
    product_uuid: Uuid
  }
  query?: never
  url: "/inventories/{product_uuid}"
}

export type UpdateStockErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: ErrorResponse
  /**
   * Not found. The requested entity does not exist.
   */
  404: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type UpdateStockError = UpdateStockErrors[keyof UpdateStockErrors]

export type UpdateStockResponses = {
  /**
   * Success. The stock item was updated successfully.
   */
  200: {
    data: StockResponse
  }
}

export type UpdateStockResponse =
  UpdateStockResponses[keyof UpdateStockResponses]

export type ListTransactionsData = {
  body?: never
  path: {
    /**
     * The unique identifier of the product.
     */
    product_uuid: Uuid
  }
  query?: {
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [**page length**](https://elasticpath.dev/docs/commerce-cloud/global-project-settings/settings-overview#page-length) store setting is used.
     */
    "page[offset]"?: number
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the the [**page length**](https://elasticpath.dev/docs/commerce-cloud/global-project-settings/settings-overview#page-length) store setting is used.
     */
    "page[limit]"?: number
    /**
     * Some Inventories API endpoints support filtering. For the general syntax, see [**Filtering**](/guides/Getting-Started/filtering), but you must go to a specific endpoint to understand the attributes and operators an endpoint supports.
     *
     */
    filter?: string
  }
  url: "/inventories/{product_uuid}/transactions"
}

export type ListTransactionsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: ErrorResponse
  /**
   * Not found. The requested entity does not exist.
   */
  404: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type ListTransactionsError =
  ListTransactionsErrors[keyof ListTransactionsErrors]

export type ListTransactionsResponses = {
  /**
   * Success. Returns the stock for the given product
   */
  200: {
    data?: Array<TransactionResponse>
    links?: Links
  }
}

export type ListTransactionsResponse =
  ListTransactionsResponses[keyof ListTransactionsResponses]

export type CreateTransactionData = {
  body?: {
    data: TransactionCreate
  }
  path: {
    /**
     * The unique identifier of the product.
     */
    product_uuid: Uuid
  }
  query?: never
  url: "/inventories/{product_uuid}/transactions"
}

export type CreateTransactionErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: ErrorResponse
  /**
   * Not found. The requested entity does not exist.
   */
  404: ErrorResponse
  /**
   * The request was understood, but could not be processed by the server
   */
  422: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type CreateTransactionError =
  CreateTransactionErrors[keyof CreateTransactionErrors]

export type CreateTransactionResponses = {
  /**
   * Success. Stock was successfully created for product
   */
  201: {
    data?: TransactionResponse
  }
}

export type CreateTransactionResponse =
  CreateTransactionResponses[keyof CreateTransactionResponses]

export type GetTransactionData = {
  body?: never
  path: {
    /**
     * The unique identifier of the product.
     */
    product_uuid: Uuid
    /**
     * The unique identifier of the transaction.
     */
    transaction_uuid: Uuid
  }
  query?: never
  url: "/inventories/{product_uuid}/transactions/{transaction_uuid}"
}

export type GetTransactionErrors = {
  /**
   * Not found. The requested entity does not exist.
   */
  404: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type GetTransactionError =
  GetTransactionErrors[keyof GetTransactionErrors]

export type GetTransactionResponses = {
  /**
   * Success. Returns the stock transaction for the given product
   */
  200: {
    data?: TransactionResponse
  }
}

export type GetTransactionResponse =
  GetTransactionResponses[keyof GetTransactionResponses]

export type ListLocationsData = {
  body?: never
  path?: never
  query?: {
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [**page length**](https://elasticpath.dev/docs/commerce-cloud/global-project-settings/settings-overview#page-length) store setting is used.
     */
    "page[offset]"?: number
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the the [**page length**](https://elasticpath.dev/docs/commerce-cloud/global-project-settings/settings-overview#page-length) store setting is used.
     */
    "page[limit]"?: number
    /**
     * Some Inventories API endpoints support filtering. For the general syntax, see [**Filtering**](/guides/Getting-Started/filtering), but you must go to a specific endpoint to understand the attributes and operators an endpoint supports.
     *
     */
    filter?: string
  }
  url: "/inventories/locations"
}

export type ListLocationsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: ErrorResponse
}

export type ListLocationsError = ListLocationsErrors[keyof ListLocationsErrors]

export type ListLocationsResponses = {
  /**
   * Success. A list of locations is returned
   */
  200: {
    data?: Array<Location>
    links?: Links
  }
}

export type ListLocationsResponse =
  ListLocationsResponses[keyof ListLocationsResponses]

export type CreateLocationData = {
  body?: {
    data: LocationRequest
  }
  path?: never
  query?: never
  url: "/inventories/locations"
}

export type CreateLocationErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: ErrorResponse
}

export type CreateLocationError =
  CreateLocationErrors[keyof CreateLocationErrors]

export type CreateLocationResponses = {
  /**
   * Success. The location was created successfully
   */
  201: {
    data?: Location
  }
}

export type CreateLocationResponse =
  CreateLocationResponses[keyof CreateLocationResponses]

export type DeleteLocationData = {
  body?: never
  path: {
    /**
     * The unique identifier of the location.
     */
    location_uuid: Uuid
  }
  query?: never
  url: "/inventories/locations/{location_uuid}"
}

export type DeleteLocationResponses = {
  /**
   * Success. The location is deleted
   */
  204: void
}

export type DeleteLocationResponse =
  DeleteLocationResponses[keyof DeleteLocationResponses]

export type GetLocationData = {
  body?: never
  path: {
    /**
     * The unique identifier of the location.
     */
    location_uuid: Uuid
  }
  query?: never
  url: "/inventories/locations/{location_uuid}"
}

export type GetLocationErrors = {
  /**
   * Not found. The requested entity does not exist.
   */
  404: ErrorResponse
}

export type GetLocationError = GetLocationErrors[keyof GetLocationErrors]

export type GetLocationResponses = {
  /**
   * Success. The location is returned
   */
  200: {
    data?: Location
  }
}

export type GetLocationResponse =
  GetLocationResponses[keyof GetLocationResponses]

export type UpdateLocationData = {
  body?: {
    data: LocationUpdateRequest
  }
  path: {
    /**
     * The unique identifier of the location.
     */
    location_uuid: Uuid
  }
  query?: never
  url: "/inventories/locations/{location_uuid}"
}

export type UpdateLocationErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: ErrorResponse
  /**
   * Not found. The requested entity does not exist.
   */
  404: ErrorResponse
}

export type UpdateLocationError =
  UpdateLocationErrors[keyof UpdateLocationErrors]

export type UpdateLocationResponses = {
  /**
   * Success. The location was updated successfully
   */
  200: {
    data?: Location
  }
}

export type UpdateLocationResponse =
  UpdateLocationResponses[keyof UpdateLocationResponses]
