// This file is auto-generated by @hey-api/openapi-ts

export type CartContact = {
  /**
   * The email address attached to a cart.
   */
  email?: string
}

export type DiscountSettings = {
  /**
   * This parameter enables custom discounts for a cart. When set to true, Elastic Path promotions will not be applied to the new carts. Default is set from cart discount settings for the store. See [Cart Settings](/docs/api/settings/put-v-2-settings-cart).
   */
  custom_discounts_enabled?: boolean
  /**
   * When set to true, this parameter allows the cart to use rule promotions.
   */
  use_rule_promotions?: boolean
}

export type InventorySettings = {
  /**
   * This parameter enables deferring inventory checks on the cart. This allows items to be added to or updating in the cart without checking stock levels. Inventory checks are still performed as normal on checkout
   */
  defer_inventory_check?: boolean
}

/**
 * Specifies custom attributes for cart or order objects. Each attribute includes a top-level key, as well as corresponding type and value entries. Attribute values must correspond to the assigned types.
 *
 * Example:
 * ```
 * "custom_attributes": {
 * "is_member": {
 * "type": "boolean",
 * "value": true
 * },
 * "membership_level": {
 * "type": "string",
 * "value": "premium"
 * }
 * }
 * ```
 *
 */
export type CustomAttributes = {
  [key: string]: unknown
}

export type FormattedPriceData = {
  /**
   * The raw total.
   */
  amount?: number
  /**
   * The currency set for this amount.
   */
  currency?: string
  /**
   * The formatted total based on the amount and currency.
   */
  formatted?: string
}

export type Timestamps = {
  /**
   * The date this was created.
   */
  created_at?: string
  /**
   * The date this was last updated.
   */
  updated_at?: unknown
}

/**
 * Relationship data entry
 */
export type RelationshipItem = {
  /**
   * The type of related resource.
   */
  type?: string
  /**
   * The ID of the related resource.
   */
  id?: string
}

/**
 * Array of relationships
 */
export type RelationshipArray = {
  /**
   * Individual relationships
   */
  data?: Array<RelationshipItem>
}

export type CartResponse = {
  /**
   * The unique identifier for the cart. Use SDK or create it yourself.
   */
  id?: string
  /**
   * The type of object being returned.
   */
  type?: string
  /**
   * The name of this cart.
   */
  name?: string
  /**
   * A description of the cart.
   */
  description?: string
  contact?: CartContact
  discount_settings?: DiscountSettings
  inventory_settings?: InventorySettings
  /**
   * Stripe-assigned unique identifier for the linked Payment Intent
   */
  payment_intent_id?: string
  custom_attributes?: CustomAttributes
  links?: {
    /**
     * A link to that specific resource.
     */
    self?: string
  }
  meta?: {
    display_price?: {
      with_tax?: FormattedPriceData
      without_tax?: FormattedPriceData
      tax?: FormattedPriceData
      discount?: FormattedPriceData
      without_discount?: FormattedPriceData
      shipping?: FormattedPriceData
    }
    timestamps?: Timestamps
  }
  relationships?: {
    customers?: RelationshipArray
    items?:
      | RelationshipArray
      | {
          data?: null
        }
    accounts?: RelationshipArray
    custom_discounts?: RelationshipArray
    promotions?: RelationshipArray
  }
}

export type ResponsePageLinks = {
  /**
   * Always the current page.
   */
  current?: string
  /**
   * Always the first page.
   */
  first?: string
  /**
   * If there is only one page, it is `null`.
   */
  last?: string
  /**
   * If there is only one page, it is `null`.
   */
  next?: string
  /**
   * if the user is on the first page, it is `null`.
   */
  prev?: string
}

export type ResponsePaginationPage = {
  /**
   * The current page.
   */
  current?: number
  /**
   * The maximum number of records per page for this response. You can set this value up to 100.
   */
  limit?: number
  /**
   * The current offset by number of records, not pages. Offset is zero-based.
   */
  offset?: number
  /**
   * The total page count.
   */
  total?: number
}

export type ResponsePaginationResults = {
  /**
   * The total page count.
   */
  total?: number
}

export type ResponseMetaCarts = {
  page?: ResponsePaginationPage
  results?: ResponsePaginationResults
}

export type CartCollectionResponse = {
  data: Array<CartResponse>
  links?: ResponsePageLinks
  meta?: ResponseMetaCarts
}

export type ResponseErrorItem = {
  /**
   * A brief summary of the error.
   */
  title: string
  /**
   * The HTTP response code of the error.
   */
  status: number
  /**
   * Optional additional detail about the error.
   */
  detail?: string
  meta?: {
    /**
     * The resource id associated with the error
     */
    id?: string
    ids?: Array<string>
    item_ids?: Array<string>
    /**
     * The shipping group id associated with the error
     */
    shipping_group_id?: string
    shipping_group_ids?: Array<string>
    /**
     * The cart id associated with the error
     */
    cart_id?: string
    /**
     * The code associated with the error.
     */
    code?: string
    /**
     * The order id associated with the error.
     */
    order_id?: string
    /**
     * The value associated with the error.
     */
    value?:
      | Array<unknown>
      | Array<unknown>
      | Array<unknown>
      | Array<unknown>
      | Array<unknown>
  }
}

export type ResponseErrorResponse = {
  errors: Array<ResponseErrorItem>
}

export type CartsRequest = {
  data?: {
    /**
     * The cart description.
     */
    description?: string
    discount_settings?: DiscountSettings
    inventory_settings?: InventorySettings
    /**
     * The cart name provided by the shopper. A cart name must contain 1 to 255 characters. You cannot use whitespace characters, but special characters are permitted. For more information, see the [Safe Characters](/guides/Getting-Started/safe-characters) section.
     */
    name?: string
    contact?: CartContact
    /**
     * This optional parameter sets a reference date for the cart. If this parameter is set, it allows the cart to act as one that might occur on that specified date. For example, such future carts might acquire future-enabled discounts, allowing users to test and validate future interactions with carts. The snapshot_date must be in the format 2026-02-21T15:07:25Z. By default, this parameter is left empty.
     */
    snapshot_date?: string
    /**
     * Specifies custom attributes for cart objects. Each attribute includes a top-level key, as well as corresponding type and value entries. Attribute values must correspond to the assigned types.
     *
     * Attribute types include:
     * - string
     * - boolean
     * - integer
     * - float
     *
     * Multiple custom attributes may be submitted together.  A cart can have a maximum of 20 custom attributes.
     *
     * Example:
     * ```
     * "custom_attributes": {
     * "is_member": {
     * "type": "boolean",
     * "value": true
     * },
     * "membership_level": {
     * "type": "string",
     * "value": "premium"
     * }
     * }
     * ```
     *
     * Updating an existing cart with new custom attributes clears previously-saved attributes.  In order to maintain existing custom attributes on a cart, please include them in the update request along with any new attributes.
     *
     */
    custom_attributes?: CustomAttributes
    /**
     * To remove the Stripe payment intent from a cart, pass the empty value in the `payment_intent_id` field.  You must use an empty value for this field. You cannot use this endpoint to directly update the cart to use an existing Payment Intent.
     */
    payment_intent_id?: string
  }
}

export type CartEntityResponse = {
  data: CartResponse
}

/**
 * The type of object being returned.
 */
export type Type = "cart_item"

export type CartItemObjectData = {
  /**
   * The type of object being returned.
   */
  type: "cart_item"
  /**
   * The number of items added to the cart.
   */
  quantity: number
  /**
   * Specifies the ID of the product you want to add to cart. (use this OR sku)
   */
  id?: string
  /**
   * Specifies the item SKU that you want to add to cart. (use this OR id)
   */
  sku?: string
  /**
   * The custom text to be added to a product.
   */
  custom_inputs?: {
    [key: string]: unknown
  }
  /**
   * Object used to describe the bundle options selected.
   */
  bundle_configuration?: {
    /**
     * Specifies selected options.
     */
    selected_options?: {
      [key: string]: unknown
    }
    /**
     * Array of component products for the selected options.
     */
    component_products?: Array<unknown>
  }
  /**
   * Identifier for a created Cart Shipping Group
   */
  shipping_group_id?: string
  /**
   * The slug of a stock location.
   */
  location?: string
}

export type ItemPriceData = {
  /**
   * The amount for this item as an integer.
   */
  readonly amount?: number
  /**
   * The currency this item was added to the cart as.
   */
  readonly currency?: string
  /**
   * Whether or not this price is tax inclusive.
   */
  readonly includes_tax?: boolean
}

export type CartItemFormattedPriceData = {
  /**
   * The amount per each single unit.
   */
  unit?: FormattedPriceData
  /**
   * The total amount of the item (i.e., unit * quantity).
   */
  value?: FormattedPriceData
}

export type CartItemResponse = {
  /**
   * The unique ID of the product.
   */
  readonly product_id?: string
  /**
   * The unique ID of the subscription offering for subscription items.
   */
  readonly subscription_offering_id?: string
  /**
   * The name of this item
   */
  readonly name?: string
  /**
   * A description of the cart item.
   */
  readonly description?: string
  /**
   * The unique identifier of the catalog associated with the product is shown if catalog_source=pim is set.
   */
  readonly catalog_id?: string
  /**
   * The catalog source. Always `pim` or `legacy`.
   */
  readonly catalog_source?: string
  readonly image?: {
    /**
     * The MIME type for the uploaded file.
     */
    readonly mime_type?: string
    /**
     * The name of the image file that was uploaded.
     */
    readonly file_name?: string
    /**
     * The link to the image.
     */
    readonly href?: string
  }
  /**
   * Whether or not the quantity of the item will be checked against inventory.
   */
  readonly manage_stock?: boolean
  /**
   * The unit price of the item.
   */
  unit_price?: ItemPriceData
  /**
   * The total price of the item (i.e., unit * quantity).
   */
  value?: ItemPriceData
  readonly links?: {
    /**
     * A URL related to the resource.
     */
    product?: string
  }
  readonly meta?: {
    display_price?: {
      /**
       * The amount of this item after discounts and taxes are applied.
       */
      with_tax?: CartItemFormattedPriceData
      /**
       * The amount of this item after discounts are applied and before taxes.
       */
      without_tax?: CartItemFormattedPriceData
      /**
       * The amount of taxes applied to this item.
       */
      tax?: CartItemFormattedPriceData
      /**
       * The amount of the discount applied to this item.
       */
      discount?: CartItemFormattedPriceData
      without_discount?: CartItemFormattedPriceData
    }
    timestamps?: Timestamps
  }
}

export type CartItemObject = CartItemObjectData & CartItemResponse

export type CustomItemObjectData = {
  /**
   * The type of object being returned. Must be `custom_item`.
   */
  type: "custom_item"
  /**
   * The number of custom items to add to cart.
   */
  quantity: number
  price: {
    /**
     * The unit price of the custom item.
     */
    amount: number
    /**
     * Set to`true` if relevant taxes have been included in the price, `false` if not. Defaults to `true`.
     */
    includes_tax?: boolean
  }
  /**
   * A description of the custom item.
   */
  description?: string
  /**
   * The `SKU` code to use for the custom item. See [best practices](https://elasticpath.dev/docs/commerce-cloud/carts/cart-items/add-custom-item-to-cart#best-practices) to use the `SKU` code.
   */
  sku?: string
  /**
   * The name of the custom item.
   */
  name: string
  /**
   * The custom text to be added to a product.
   */
  custom_inputs?: {
    [key: string]: unknown
  }
  /**
   * Identifier for a created Cart Shipping Group
   */
  shipping_group_id?: string
}

export type CustomItemObject = {
  data?: CustomItemObjectData
}

export type SubscriptionItemObjectData = {
  /**
   * The type of object being returned.
   */
  type: "subscription_item"
  /**
   * The number of items added to the cart.
   */
  quantity: number
  /**
   * Specifies the ID of the subscription offering you want to add to cart.
   */
  id: string
  /**
   * Specifies how the subscription offering should be configured.
   */
  subscription_configuration: {
    /**
     * The ID of the pricing option within the offering to use for the subscription.
     */
    pricing_option: string
    /**
     * The ID of the plan within the offering to use for the subscription.
     */
    plan: string
  }
}

export type SubscriptionItemObject = {
  data?: SubscriptionItemObjectData & CartItemResponse
}

export type PromotionItemObjectData = {
  /**
   * Specifies the type of resource, which is `promotion_item`.
   */
  type: "promotion_item"
  /**
   * Specifies the promotion code. For more information about codes[].user[], see the [Create Promotion codes](/docs/api/promotions/create-promotion-codes) section.
   */
  code: string
}

export type PromotionItemObject = {
  data?: PromotionItemObjectData
}

export type CartItemsResponse = {
  data?: Array<
    | CartItemObject
    | CustomItemObject
    | SubscriptionItemObject
    | PromotionItemObject
  >
}

export type UpdateAllOrNothingOptionsObject = {
  /**
   * When set to`true`, if an error occurs for any item, no items are updated in the cart. When set to `false`, valid items are updated in the cart and the items with errors are reported in the response. Default is `true`.
   */
  update_all_or_nothing?: boolean
}

export type BulkUpdateCartsItems = {
  data?: Array<{
    /**
     * Specifies the ID of the cart item that you want to update in cart.
     */
    id?: string
    /**
     * Specifies the amount of items to update in the cart.
     */
    quantity?: number
    /**
     * Specifies the custom text to be added to a product. See [custom inputs](https://elasticpath.dev/docs/pxm/products/ep-pxm-products-api/update-a-product#using-custom-inputs-attribute).
     */
    custom_inputs?: {
      [key: string]: unknown
    }
  }>
  options?: UpdateAllOrNothingOptionsObject
}

export type CartItemObjectRequest = {
  data?: CartItemObject
}

export type CartMergeObject = {
  /**
   * The type of object being returned. Must be `cart_items`.
   */
  type: "cart_items"
  /**
   * The original cart to be merged from.
   */
  cart_id: string
}

export type AddAllOrNothingOptionsObject = {
  /**
   * When `true`, if an error occurs for any item, no items are added to the cart. When `false`, valid items are added to the cart and the items with errors are reported in the response. Default is `false`.
   */
  add_all_or_nothing?: boolean
}

export type CartMergeObjectRequest = {
  data?: CartMergeObject
  options?: AddAllOrNothingOptionsObject
}

export type ReOrderObject = {
  /**
   * The type of resource being returned. Use `order_items`.
   */
  type: "order_items"
  /**
   * The unique identifier of the order.
   */
  order_id: string
}

export type ReOrderObjectRequest = {
  data?: ReOrderObject
  options?: AddAllOrNothingOptionsObject
}

export type BulkAddItemsRequest = {
  data?: Array<
    | CartItemObjectData
    | CartMergeObject
    | CustomItemObjectData
    | ReOrderObject
    | PromotionItemObjectData
  >
  options?: AddAllOrNothingOptionsObject
}

export type CartTimestamps = {
  created_at?: string
  updated_at?: unknown
  expires_at?: unknown
}

export type CartsResponse = {
  data?: Array<
    | CartItemObject
    | CustomItemObject
    | SubscriptionItemObject
    | PromotionItemObject
  >
  meta?: {
    display_price?: {
      with_tax?: FormattedPriceData
      without_tax?: FormattedPriceData
      tax?: FormattedPriceData
      discount?: FormattedPriceData
      without_discount?: FormattedPriceData
      discounts?: {
        [key: string]: {
          amount?: number
          currency?: string
          formatted?: string
        }
      }
    }
    timestamps?: CartTimestamps
  }
}

export type UpdateCartsItems = {
  data?: {
    /**
     * The type of the cart item.
     */
    type?: "cart_item"
    /**
     * The unique identifier of the cart item.
     */
    id?: string
    /**
     * The amount of products to add to cart.
     */
    quantity?: number
    /**
     * The custom text to be added to a product.
     */
    custom_inputs?: {
      [key: string]: unknown
    }
    /**
     * The unique identifier of the shipping group to be added to the cart.
     */
    shipping_group_id?: string
  }
}

export type CartsRelationshipsAccountsData = {
  data?: Array<{
    /**
     * The ID of the account.
     */
    id?: string
    /**
     * The type of related object. Ensure that it is account.
     */
    type?: string
  }>
}

export type CartsRelationshipsCustomersData = {
  data?: Array<{
    /**
     * The ID of the customer.
     */
    id?: string
    /**
     * The type of related object. Ensure that it is customer.
     */
    type?: string
  }>
}

export type CartsItemsTaxesObject = {
  /**
   * A unique tax code in this jurisdiction.
   */
  code?: string
  /**
   * The relevant tax jurisdiction.
   */
  jurisdiction?: string
  /**
   * The name of the tax item.
   */
  name?: string
  /**
   * The tax rate represented as a decimal (12.5% -> 0.125). You can specify either `rate` or `amount`, but not both. Supplying both fields will result in an error.
   */
  rate?: number
  /**
   * The tax rate represented as a number ($10 -> 1000). You can specify either `rate` or `amount`, but not both. Supplying both fields will result in an error.
   */
  amount?: number
  /**
   * The type of object being returned. Use `tax_item`.
   */
  type: string
  /**
   * The unique identifier for this tax item.
   */
  readonly id?: string
}

export type CartItemTaxesEntityResponse = {
  data: CartsItemsTaxesObject
}

export type CartItemRelationship = {
  relationships?: {
    order?: {
      data?: {
        /**
         * This specifies the type of item.
         */
        type?: string
        /**
         * This specifies the ID of the cart_item or custom_item in the cart.
         */
        id?: string
      }
    }
  }
}

export type CartsBulkTaxes = {
  data?: Array<CartsItemsTaxesObject & CartItemRelationship>
  options?: AddAllOrNothingOptionsObject
}

export type CartsCustomDiscountsObject = {
  amount:
    | number
    | {
        amount?: number
        currency?: string
        formatted?: string
      }
  /**
   * Specifies a description for the custom discount.
   */
  description: string
  /**
   * Specifies the discount code used for the custom discount.
   */
  discount_code: string
  /**
   * Specifies from where the custom discount is applied. For example, Talon.one.
   */
  discount_engine: string
  /**
   * Specifies an external id for the custom discount.
   */
  external_id: string
  /**
   * Specifies the type of the resource. Always `custom_discount`.
   */
  type: string
}

export type CustomDiscountRelationshipsCartItemRequest = {
  relationships?: {
    item?: {
      data?: {
        /**
         * Specifies the type of item. For example, `custom_item` or `cart_item`.
         */
        type?: string
        /**
         * Specifies the unique identifier of the `cart_item` or `custom_item` in the cart.
         */
        id?: string
      }
    }
  }
}

export type CartItemBulkCustomDiscountObject = CartsCustomDiscountsObject &
  CustomDiscountRelationshipsCartItemRequest

export type CartsBulkCustomDiscounts = {
  data?: Array<CartsCustomDiscountsObject & CartItemBulkCustomDiscountObject>
  options?: AddAllOrNothingOptionsObject
}

export type CartsBulkCustomDiscountsResponse = {
  data?: CartsCustomDiscountsObject
  options?: AddAllOrNothingOptionsObject
}

export type CartsBulkCustomDiscountsCollectionResponse = {
  data?: Array<CartsCustomDiscountsObject>
  options?: AddAllOrNothingOptionsObject
}

export type CartsCustomDiscountsResponseObject = {
  amount?: {
    /**
     * Specifies an amount to be applied for the custom discount. It must be less than zero.
     */
    amount?: number
    /**
     * The currency set for the custom discount.
     */
    currency?: string
    /**
     * The formatted value for the custom discount.
     */
    formatted?: string
  }
  /**
   * Specifies a description for the custom discount.
   */
  description?: string
  /**
   * Specifies the discount code used for the custom discount.
   */
  discount_code?: string
  /**
   * Specifies from where the custom discount is applied. For example, Talon.one.
   */
  discount_engine?: string
  /**
   * Specifies an external id for the custom discount.
   */
  external_id?: string
  /**
   * Specifies the type of the resource. Always `custom_discount`.
   */
  type?: string
  /**
   * Specifies the UUID of the custom discount.
   */
  readonly id?: string
}

export type CartsCustomDiscountsEntityRequest = {
  data?: CartsCustomDiscountsResponseObject
}

export type CartsCustomDiscountsEntityResponse = {
  data?: CartsCustomDiscountsObject
}

export type CartsCustomDiscountsCollectionResponse = {
  data?: Array<CartsCustomDiscountsObject>
}

export type ShippingAddress = {
  /**
   * First name of the shipping recipient.
   */
  first_name: string
  /**
   * Last name of the shipping recipient.
   */
  last_name: string
  /**
   * Phone number of the shipping recipient.
   */
  phone_number: string
  /**
   * Company of the shipping recipient.
   */
  company_name: string
  /**
   * First line of the shipping address.
   */
  line_1: string
  /**
   * Second line of the shipping address.
   */
  line_2: string
  /**
   * City of the shipping address.
   */
  city: string
  /**
   * Post code of the shipping address.
   */
  postcode: string
  /**
   * County of the shipping address.
   */
  county: string
  /**
   * Country of the shipping address.
   */
  country: string
  /**
   * State, province, or region of the shipping address.
   */
  region?: string
  /**
   * Delivery instructions.
   */
  instructions: string
}

export type DeliveryEstimate = {
  start?: Date
  end?: Date
}

export type Money = {
  /**
   * Amount in minor currency units (e.g., cents).
   */
  amount: number
  /**
   * ISO 4217 currency code (e.g., "USD").
   */
  currency: string
  /**
   * Whether the amount includes tax.
   */
  includes_tax: boolean
}

export type Discount = {
  amount: Money
  /**
   * The discount code used, if applicable.
   */
  code?: string
  /**
   * Unique identifier for the discount.
   */
  id: string
  /**
   * The source or origin of the promotion, if applicable.
   */
  promotion_source?: string
  /**
   * Indicates whether the discount applies to the entire cart.
   */
  is_cart_discount?: boolean
  /**
   * Order in which the discount was applied.
   */
  ordinal?: number
}

export type Discounts = Array<Discount>

export type ShippingPriceResponse = {
  total: FormattedPriceData
  base: FormattedPriceData
  tax?: FormattedPriceData
  fees?: FormattedPriceData
  discount?: FormattedPriceData
}

export type OrderPriceWrapperMeta = {
  with_tax: FormattedPriceData
  without_tax: FormattedPriceData
  tax: FormattedPriceData
  discount: FormattedPriceData
  balance_owing: FormattedPriceData
  paid: FormattedPriceData
  authorized: FormattedPriceData
  without_discount: FormattedPriceData
  shipping: FormattedPriceData
  shipping_discount: FormattedPriceData
}

export type ShippingGroupMeta = {
  shipping_display_price?: ShippingPriceResponse
  total_display_price?: OrderPriceWrapperMeta
}

export type ShippingGroupResponse = {
  type?: "shipping_group"
  id?: string
  relation?: string
  cart_id?: string
  order_id?: string
  shipping_type?: string
  tracking_reference?: string
  address?: ShippingAddress
  delivery_estimate?: DeliveryEstimate
  createdAt?: Date
  updatedAt?: Date
  relationships?: {
    cart?: RelationshipItem
    order?: RelationshipItem
  }
  discounts?: Discounts
  meta?: ShippingGroupMeta
}

export type ShippingPriceRequest = {
  total?: number
  base?: number
  tax?: number
  fees?: number
  discount?: number
}

export type CreateShippingGroupRequest = {
  data?: {
    type?: "shipping_group"
    shipping_type?: string
    tracking_reference?: string
    shipping_price?: ShippingPriceRequest
    address?: ShippingAddress
    includes_tax?: boolean
    delivery_estimate?: DeliveryEstimate
  }
}

export type UpdateCartShippingGroupRequest = {
  data?: {
    type?: "shipping_group"
    shipping_type?: string
    tracking_reference?: string
    shipping_price?: ShippingPriceRequest
    address?: ShippingAddress
    includes_tax?: boolean
    delivery_estimate?: DeliveryEstimate
  }
}

export type Gateway =
  | "adyen"
  | "authorize_net"
  | "braintree"
  | "card_connect"
  | "cyber_source"
  | "elastic_path_payments_stripe"
  | "manual"
  | "paypal_express_checkout"
  | "stripe"
  | "stripe_connect"
  | "stripe_payment_intents"

/**
 * Specifies the transaction method, such as `purchase` or `authorize`.
 */
export type Method =
  | "authorize"
  | "purchase"
  | "purchase_setup"
  | "authorize_setup"

export type DataBasePayments = {
  gateway:
    | "adyen"
    | "authorize_net"
    | "braintree"
    | "card_connect"
    | "cyber_source"
    | "elastic_path_payments_stripe"
    | "manual"
    | "paypal_express_checkout"
    | "stripe"
    | "stripe_connect"
    | "stripe_payment_intents"
  /**
   * Specifies the transaction method, such as `purchase` or `authorize`.
   */
  method: "authorize" | "purchase" | "purchase_setup" | "authorize_setup"
  /**
   * The amount to be paid for the transaction.
   */
  amount?: number
}

export type ElasticPathPaymentsPoweredByStripePayment = {
  data?: DataBasePayments & {
    /**
     * Specifies the gateway. You must use `elastic_path_payments_stripe`.
     */
    gateway?: "elastic_path_payments_stripe"
    options?: {
      /**
       * Provides the email address to which you want to send the Stripe receipts for the transactions within the store. This feature is available only in the live mode.
       */
      receipt_email?: string
      /**
       * Parent object determining whether to use Stripe's `automatic_payment_methods` setting.
       */
      automatic_payment_methods?: {
        /**
         * When set to true, it displays all enabled payment methods from the Stripe dashboard. When set to false, the Stripe default, which is card, is used.
         */
        enabled?: boolean
      }
    }
    /**
     * Specifies the Stripe payment method types configured for the store. See [Stripe Documentation](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types).
     */
    payment_method_types?: Array<string>
    /**
     * Specifies the Stripe token or source.
     */
    payment?: string
  }
}

export type CartPaymentUpdate = {
  data: {
    gateway: string
    method: string
    payment_method_types: Array<string>
    amount: number
    options?: {
      [key: string]: unknown
    }
  }
}

export type BillingAddress = {
  /**
   * First name of the billing recipient.
   */
  first_name: string
  /**
   * Last name of the billing recipient.
   */
  last_name: string
  /**
   * Company name of the billing recipient.
   */
  company_name: string
  /**
   * First line of the billing address.
   */
  line_1: string
  /**
   * Second line of the billing address.
   */
  line_2: string
  /**
   * City of the billing address.
   */
  city: string
  /**
   * Postcode of the billing address.
   */
  postcode: string
  /**
   * County of the billing address.
   */
  county: string
  /**
   * Country of the billing address.
   */
  country: string
  /**
   * State, province, or region of the billing address.
   */
  region?: string
}

export type CustomerCheckout = {
  data?: {
    /**
     * A user-managed, optional field used as an alternative to the existing `order_id`. If provided, the order-number will be sent to Authorize.net instead of the `order_id`, and will appear as the invoice number in Authorize.net transactions.
     */
    order_number?: string
    /**
     * An optional external ID reference for an order. It can contain alphanumeric characters, special characters, and spaces, and is not required to be unique. The maximum allowed length is 64 characters. It can be used to include an external reference from a separate company system.
     */
    external_ref?: string
    customer?: {
      /**
       * The ID of the customer.
       */
      id?: string
      /**
       * The email of the customer.
       */
      email?: string
      /**
       * The name of the customer.
       */
      name?: string
    }
    billing_address?: BillingAddress
    shipping_address?: ShippingAddress
  }
}

export type AccountCheckout = {
  data?: {
    /**
     * A user-managed, optional field used as an alternative to the existing `order_id`. If provided, the order-number will be sent to Authorize.net instead of the `order_id`, and will appear as the invoice number in Authorize.net transactions.
     */
    order_number?: string
    /**
     * An optional external ID reference for an order. It can contain alphanumeric characters, special characters, and spaces, and is not required to be unique. The maximum allowed length is 64 characters. It can be used to include an external reference from a separate company system.
     */
    external_ref?: string
    account?: {
      /**
       * The account ID.
       */
      id?: string
      /**
       * The account member ID.
       */
      member_id?: string
    }
    contact?: {
      /**
       * The name of the account member.
       */
      name?: string
      /**
       * The email address of the account member.
       */
      email?: string
    }
    billing_address?: BillingAddress
    shipping_address?: ShippingAddress
  }
}

export type OrderMeta = {
  timestamps?: Timestamps
  display_price?: {
    with_tax?: FormattedPriceData
    without_tax?: FormattedPriceData
    tax?: FormattedPriceData
    discount?: FormattedPriceData
    balance_owing?: FormattedPriceData
    paid?: FormattedPriceData
    authorized?: FormattedPriceData
    without_discount?: FormattedPriceData
    shipping?: FormattedPriceData
    shipping_discount?: FormattedPriceData
  }
}

export type Contact = {
  /**
   * The email address of the contact.
   */
  email?: string
  /**
   * The name of the contact.
   */
  name?: string
}

/**
 * Single relationship
 */
export type SingleRelationship = {
  data?: RelationshipItem
}

/**
 * Specifies the status of the order, such as `incomplete`, `complete`, `processing`, or `cancelled`.
 */
export type Status = "complete" | "incomplete" | "cancelled" | "processing"

/**
 * Specifies the status of the payment, such as `unpaid`, `authorized`, `paid`, or `refunded`.
 */
export type Payment =
  | "authorized"
  | "paid"
  | "unpaid"
  | "refunded"
  | "partially_paid"
  | "partially_authorized"

/**
 * Specifies the status of the shipment, such as `fulfilled` or `unfulfilled`.
 */
export type Shipping = "unfulfilled" | "fulfilled"

export type OrderResponse = {
  /**
   * Specifies the type of object being returned. You must use `order`.
   */
  type?: "order"
  /**
   * Specifies a user-managed, optional field used as an alternative to the existing `order_id`. If provided, the order-number will be sent to Authorize.net instead of the `order_id`, and will appear as the invoice number in Authorize.net transactions.
   */
  order_number?: string
  /**
   * An optional external ID reference for an order. It can contain alphanumeric characters, special characters, and spaces, and is not required to be unique. The maximum allowed length is 64 characters. It can be used to include an external reference from a separate company system.
   */
  external_ref?: string
  /**
   * Specifies the unique identifier of the order.
   */
  readonly id?: string
  /**
   * Specifies the status of the order, such as `incomplete`, `complete`, `processing`, or `cancelled`.
   */
  status?: "complete" | "incomplete" | "cancelled" | "processing"
  /**
   * Specifies the status of the payment, such as `unpaid`, `authorized`, `paid`, or `refunded`.
   */
  payment?:
    | "authorized"
    | "paid"
    | "unpaid"
    | "refunded"
    | "partially_paid"
    | "partially_authorized"
  /**
   * Specifies the status of the shipment, such as `fulfilled` or `unfulfilled`.
   */
  shipping?: "unfulfilled" | "fulfilled"
  /**
   * Specifies if the order is anonymized.
   */
  anonymized?: boolean
  /**
   * Stripe Payment Intent ID.  Please see Stripe's Payment Intent [documentation](https://docs.stripe.com/api/payment_intents) for more information on Payment Intents.
   */
  payment_intent_id?: string
  custom_attributes?: CustomAttributes
  meta?: OrderMeta
  billing_address?: BillingAddress
  contact?: Contact
  customer?: Contact
  shipping_address?: ShippingAddress
  relationships?: {
    items?: RelationshipArray
    custom_discounts?: RelationshipArray
    promotions?: RelationshipArray
    customer?: SingleRelationship
    account?: SingleRelationship
    account_member?: SingleRelationship
  }
}

export type OrderEntityResponse = {
  data?: OrderResponse
}

export type ResponseMetaOrders = {
  page?: ResponsePaginationPage
  results?: ResponsePaginationResults
}

export type OrderCollectionResponse = {
  data?: Array<OrderResponse>
  links?: ResponsePageLinks
  meta?: ResponseMetaOrders
}

export type OrdersAddressData = {
  /**
   * Specifies a user-managed, optional field used as an alternative to the existing order_id. If provided, the order-number will be sent to Authorize.net instead of the order_id, and will appear as the invoice number in Authorize.net transactions.
   */
  order_number?: string
  /**
   * Represents an optional external ID reference for an order. It can contain alphanumeric characters, special characters, and spaces, and is not required to be unique. The maximum allowed length is 64 characters. It can be used to include an external reference from a separate company system.
   */
  external_ref?: string
  shipping_address: {
    /**
     * Specifies the first name of the address holder.
     */
    first_name?: string
    /**
     * Specifies the last name of the address holder.
     */
    last_name?: string
    /**
     * Specifies the phone number of the address holder.
     */
    phone_number?: string
    /**
     * Specifies the company name.
     */
    company_name?: string
    /**
     * Specifies the first line of the address.
     */
    line_1?: string
    /**
     * Specifies the second line of the address.
     */
    line_2?: string
    /**
     * Specifies the name of the city in the shipping address.
     */
    city?: string
    /**
     * Specifies the county of the shipping address.
     */
    county?: string
    /**
     * Specifies the state, province, or region of the shipping address.
     */
    region?: string
    /**
     * Specifies the postcode or ZIP code of the address.
     */
    postcode?: string
    /**
     * Specifies the country in the shipping address.
     */
    country?: string
    /**
     * Specifies any instructions provided with the shipping address.
     */
    instructions?: string
  }
}

export type OrdersCancelData = {
  /**
   * The status of the order. You can only update the status to `cancelled`.
   */
  status: string
  /**
   * The type of the resource. You must use order.
   */
  type: string
  /**
   * Represents an optional external ID reference for an order. It can contain alphanumeric characters, special characters, and spaces, and is not required to be unique. The maximum allowed length is 64 characters. It can be used to include an external reference from a separate company system.
   */
  external_ref?: string
}

export type OrdersFulfilledData = {
  /**
   * The shipping status of the order. You can only update the shipping status to `fulfilled`.
   */
  shipping: string
  /**
   * The type of the resource. You must use order.
   */
  type: string
  /**
   * Represents an optional external ID reference for an order. It can contain alphanumeric characters, special characters, and spaces, and is not required to be unique. The maximum allowed length is 64 characters. It can be used to include an external reference from a separate company system.
   */
  external_ref?: string
}

export type OrdersUpdateRequest = {
  data?: OrdersAddressData | OrdersCancelData | OrdersFulfilledData
}

export type OrderPriceData = {
  /**
   * The amount for this item.
   */
  amount?: number
  /**
   * The currency this item.
   */
  currency?: string
  /**
   * Whether this price is tax inclusive.
   */
  includes_tax?: boolean
}

export type DiscountData = {
  amount?: OrderPriceData
  code?: string
  readonly id?: string
}

export type OrderItemFormattedUnitPriceData = {
  unit?: FormattedPriceData
  value?: FormattedPriceData
}

export type OrderItemResponse = {
  /**
   * The type represents the object being returned.
   */
  type?: string
  /**
   * The unique identifier for this order item.
   */
  readonly id?: string
  /**
   * The quantity of this item were ordered.
   */
  quantity?: number
  /**
   * The unique identifier for this order item.
   */
  readonly product_id?: string
  /**
   * The unique identifier for the subscription offering for this order item.
   */
  readonly subscription_offering_id?: string
  /**
   * The name of this order item.
   */
  name?: string
  /**
   * The SKU code for the order item.
   */
  sku?: string
  unit_price?: OrderPriceData
  value?: OrderPriceData
  discounts?: Array<DiscountData>
  links?: {
    [key: string]: unknown
  }
  meta?: {
    display_price?: {
      with_tax?: OrderItemFormattedUnitPriceData
      without_tax?: OrderItemFormattedUnitPriceData
      tax?: OrderItemFormattedUnitPriceData
      discount?: OrderItemFormattedUnitPriceData
      without_discount?: OrderItemFormattedUnitPriceData
      discounts?: {
        [key: string]: {
          amount?: number
          currency?: string
          formatted?: string
        }
      }
    }
    timestamps?: Timestamps
  }
  relationships?: {
    cart_item?: {
      data?: {
        /**
         * The type represents the object being returned.
         */
        type?: string
        /**
         * The unique identifier for this item.
         */
        readonly id?: string
      }
    }
  }
  /**
   * The unique identifier of the catalog associated with the product is shown if `catalog_source=pim` is set.
   */
  catalog_id?: string
  /**
   * The catalog source. Always `pim` or `legacy`.
   */
  catalog_source?: string
}

export type OrderItemCollectionResponse = {
  data?: Array<OrderItemResponse>
}

export type OrdersAnonymizeData = {
  /**
   * The unique identifiers of the orders to be anonymized. You can anonymize multiple orders at the same time.
   */
  order_ids?: Array<string>
}

export type OrdersAnonymizeRequest = {
  data?: OrdersAnonymizeData
}

export type OrdersListResponse = {
  data: Array<OrderResponse>
}

export type DataAdyenPayment = DataBasePayments & {
  /**
   * Specifies the gateway. You must use `adyen`.
   */
  gateway: "adyen"
  options?: {
    /**
     * The shopper reference token associated with the saved payment method.
     */
    shopper_reference?: string
    /**
     * Enter CardOnFile for a one-time purchase.
     */
    recurring_processing_model?: string
  }
  /**
   * The Adyen recurringDetailReference payment method identifier.
   */
  payment: string
}

export type DataAuthorizeNetPayment = DataBasePayments & {
  /**
   * Specifies the gateway. You must use `authorize_net`.
   */
  gateway: "authorize_net"
  options?: {
    /**
     * The Authorize.net customer payment profile ID.
     */
    customer_payment_profile_id?: string
  }
  /**
   * The Authorize.net customer profile ID.
   */
  payment: string
}

export type DataBraintreePayment = DataBasePayments & {
  /**
   * Specifies the gateway. You must use `braintree`.
   */
  gateway: "braintree"
  /**
   * The Braintree Customer ID that you want to bill.
   */
  payment: string
}

export type DataCardConnectPayment = DataBasePayments & {
  /**
   * Specifies the gateway. You must use `card_connect`.
   */
  gateway: "card_connect"
  /**
   * Enter account_id, profile_id from CardPointe API. For example, 1|16178397535388255208.
   */
  payment: string
}

export type DataCyberSourcePayment = DataBasePayments & {
  /**
   * Specifies the gateway. You must use `cyber_source`.
   */
  gateway: "cyber_source"
  /**
   * The CyberSource token.
   */
  payment: string
}

export type DataManualPayment = DataBasePayments & {
  /**
   * Specifies the type of payment gateway. You must use `manual`.
   */
  gateway: "manual"
  paymentmethod_meta?: {
    /**
     * A reference associated with the payment method. This might include loyalty points or gift card identifiers. We recommend not to include personal information in this field.
     */
    custom_reference?: string
    /**
     * A custom name associated with the payment method.
     */
    name?: string
  }
}

export type DataPayPalExpressCheckoutPayment = DataBasePayments & {
  /**
   * Specifies the type of payment gateway. You must use `paypal_express_checkout`.
   */
  gateway: "paypal_express_checkout"
  options?: {
    /**
     * The description for the payment.
     */
    description?: string
    /**
     * The descriptor appended to PayPal generated descriptor that is visible on the card statement of the payer.
     */
    soft_descriptor?: string
    application_context?: {
      /**
       * The label that overrides the business name in the PayPal account on the PayPal site.
       */
      brand_name?: string
      /**
       * The locale pages that appear based on language and country code. PayPal supports a five-character code. For example, ja-JP.
       */
      locale?: string
      /**
       * The type of landing page to show on the PayPal site for customer checkout. Use values LOGIN, BILLING, or NO_PREFERENCE.
       */
      landing_page?: string
      /**
       * The shipping preference. Use SET_PROVIDED_ADDRESS value. This parameter does allow the user to change their address on PayPal site.
       */
      shipping_preference?: string
      /**
       * If you set `useraction=commit` in the query string, the flow redirects the buyer to the PayPal payment page and displays a Pay Now button. When the shopper clicks **Pay Now**, call `DoExpressCheckoutPayment` to complete the payment without additional interaction from the shopper. Choose this flow when you know the final payment amount when you initiate the checkout flow.
       */
      user_action?: string
      /**
       * The callback URL for PayPal to redirect the user in the case of approved payment.
       */
      return_url?: string
      /**
       * The callback URL for PayPal to redirect user in the case a cancelled payment.
       */
      cancel_url?: string
    }
  }
}

export type DataStripePayment = DataBasePayments & {
  /**
   * Specifies the type of payment gateway. You must use `stripe`.
   */
  gateway: "stripe"
  options?: {
    /**
     * The option to provide an email for Stripe receipts. Specify live mode to access this feature.
     */
    receipt_email?: string
  }
  /**
   * The Stripe token or source.
   */
  payment?: string
}

export type DataStripeConnectPayment = DataBasePayments & {
  /**
   * Specifies the type of payment gateway. You must use `stripe_connect`.
   */
  gateway: "stripe_connect"
  options?: {
    /**
     * Provides the email address to which you want to send the Stripe receipts for the transactions within the store. This feature is available only in the live mode.
     */
    receipt_email?: string
  }
  /**
   * Specifies the Stripe token or source.
   */
  payment?: string
}

export type DataStripePaymentIntentsPayment = DataBasePayments & {
  /**
   * Specifies the type of payment gateway. You must use `stripe_payment_intents`.
   */
  gateway: "stripe_payment_intents"
  options?: {
    /**
     * Provides the email address to which you want to send the Stripe receipts for the transactions within the store. This feature is available only in the live mode.
     */
    receipt_email?: string
  }
  /**
   * Specifies the Stripe token or source.
   */
  payment?: string
}

export type DataPaymentObject =
  | DataAdyenPayment
  | DataAuthorizeNetPayment
  | DataBraintreePayment
  | DataCardConnectPayment
  | DataCyberSourcePayment
  | ElasticPathPaymentsPoweredByStripePayment
  | DataManualPayment
  | DataPayPalExpressCheckoutPayment
  | DataStripePayment
  | DataStripeConnectPayment
  | DataStripePaymentIntentsPayment

export type PaymentsRequest = {
  data?: DataPaymentObject
}

export type TransactionResponse = {
  /**
   * The ID of the transaction.
   */
  readonly id?: string
  /**
   * The payment gateway reference.
   */
  reference?: string
  /**
   * A custom name associated with the payment method.
   */
  name?: string
  /**
   * A reference associated with the payment method. This might include loyalty points or gift card identifiers. We recommend you not to include personal information in this field.
   */
  custom_reference?: string
  /**
   * The name of the payment gateway used.
   */
  gateway?:
    | "adyen"
    | "authorize_net"
    | "braintree"
    | "card_connect"
    | "cyber_source"
    | "elastic_path_payments_stripe"
    | "manual"
    | "paypal_express_checkout"
    | "stripe"
    | "stripe_connect"
    | "stripe_payment_intents"
    | "stripe_platform_account"
  /**
   * The amount for this transaction.
   */
  amount?: number
  /**
   * The refunded amount.
   */
  refunded_amount?: number
  /**
   * The transaction currency.
   */
  currency?: string
  /**
   * The type of transaction, such as `purchase`, `capture`, `authorize` or `refund`.
   */
  "transaction-type"?: string
  /**
   * The status provided by the gateway for this transaction, such as `complete` or `failed`.
   */
  status?: string
  relationships?: {
    order?: {
      data?: {
        /**
         * Represents the type of the object being returned. It is always `order`.
         */
        type?: string
        /**
         * The ID of the order.
         */
        id?: string
      }
    }
  }
  meta?: {
    display_price?: FormattedPriceData
    display_refunded_amount?: FormattedPriceData
    timestamps?: Timestamps
  }
}

export type TransactionEntityResponse = {
  data: TransactionResponse
}

export type OrdersTransactionsConfirmRequest = {
  data?: {
    [key: string]: unknown
  }
}

export type OrdersTransactionsCaptureRequest = {
  data?: {
    options?: {
      soft_descriptor?: string
      note_to_payer?: string
    }
  }
}

export type OrdersTransactionsRefundRequest = {
  data?: {
    /**
     * The amount value to be refunded. If this field is not provided, it will be considered as manual refund (Mark as Refunded) and the refund process must be manually handled via payment provider. If the amount value is same as payment value, then it will be treated as a full refund and sent to the payment provider to process refund automatically.
     */
    amount?: number
    options?: {
      /**
       * Provides comments about the refund. It is used by PayPal Express.
       */
      note?: string
    }
  }
}

export type TransactionListResponse = {
  data: Array<TransactionResponse>
}

export type ResponseData = {
  data?: unknown
}

export type OrdersTransactionsCancelRequest = {
  data?: {
    options?: {
      [key: string]: unknown
    }
    /**
     * Specifies the reason for canceling the transaction. The reason may include `duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`.
     */
    reason?: string
  }
}

export type UpdateOrderShippingGroupRequest = {
  data?: {
    type?: "shipping_group"
    shipping_type?: string
    tracking_reference?: string
    address?: ShippingAddress
    delivery_estimate?: DeliveryEstimate
  }
}

export type GetCartsData = {
  body?: never
  headers?: {
    /**
     * An Account Management Authentication token to access a specific account's carts.
     */
    "EP-Account-Management-Authentication-Token"?: string
    /**
     * A customer token to access a specific customer's carts.
     */
    "x-moltin-customer-token"?: string
  }
  path?: never
  query?: never
  url: "/v2/carts"
}

export type GetCartsErrors = {
  /**
   * Bad Request
   */
  400: {
    errors?: Array<{
      detail?: string
      title?: string
    }>
  }
  /**
   * Unauthorized call
   */
  403: ResponseErrorResponse
}

export type GetCartsError = GetCartsErrors[keyof GetCartsErrors]

export type GetCartsResponses = {
  200: CartCollectionResponse
}

export type GetCartsResponse = GetCartsResponses[keyof GetCartsResponses]

export type CreateACartData = {
  body?: CartsRequest
  headers?: {
    /**
     * A customer token to be associated with the cart.
     */
    "x-moltin-customer-token"?: string
  }
  path?: never
  query?: never
  url: "/v2/carts"
}

export type CreateACartErrors = {
  /**
   * Bad Request
   */
  400: {
    errors?: Array<{
      detail?: string
      status?: number
      title?: string
    }>
  }
  /**
   * Unauthorized call
   */
  403: ResponseErrorResponse
}

export type CreateACartError = CreateACartErrors[keyof CreateACartErrors]

export type CreateACartResponses = {
  201: CartEntityResponse
}

export type CreateACartResponse =
  CreateACartResponses[keyof CreateACartResponses]

export type DeleteACartData = {
  body?: never
  path: {
    /**
     * The unique identifier of the cart that you want to delete.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}"
}

export type DeleteACartErrors = {
  /**
   * Bad Request
   */
  400: ResponseErrorResponse
}

export type DeleteACartError = DeleteACartErrors[keyof DeleteACartErrors]

export type DeleteACartResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteACartResponse =
  DeleteACartResponses[keyof DeleteACartResponses]

export type GetACartData = {
  body?: never
  path: {
    /**
     * The unique identifier for this cart that you created.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}"
}

export type GetACartErrors = {
  /**
   * Bad Request
   */
  400: {
    errors?: Array<{
      detail?: string
      status?: number
      title?: string
    }>
  }
}

export type GetACartError = GetACartErrors[keyof GetACartErrors]

export type GetACartResponses = {
  /**
   * OK
   */
  200: CartEntityResponse
}

export type GetACartResponse = GetACartResponses[keyof GetACartResponses]

export type UpdateACartData = {
  body?: CartsRequest
  path: {
    /**
     * The unique identifier of a cart created by you.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}"
}

export type UpdateACartErrors = {
  /**
   * Unauthorized call
   */
  403: ResponseErrorResponse
  /**
   * Unprocessable Content
   */
  422: {
    errors?: Array<{
      detail?: string
      status?: number
      title?: string
    }>
  }
}

export type UpdateACartError = UpdateACartErrors[keyof UpdateACartErrors]

export type UpdateACartResponses = {
  200: CartEntityResponse
}

export type UpdateACartResponse =
  UpdateACartResponses[keyof UpdateACartResponses]

export type DeleteAllCartItemsData = {
  body?: never
  path: {
    /**
     * The unique identifier of the cart created by you.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items"
}

export type DeleteAllCartItemsErrors = {
  /**
   * Unprocessable Entity
   */
  422: ResponseErrorResponse
}

export type DeleteAllCartItemsError =
  DeleteAllCartItemsErrors[keyof DeleteAllCartItemsErrors]

export type DeleteAllCartItemsResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteAllCartItemsResponse =
  DeleteAllCartItemsResponses[keyof DeleteAllCartItemsResponses]

export type GetCartItemsData = {
  body?: never
  path: {
    /**
     * The unique identifier of the cart that you created.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items"
}

export type GetCartItemsResponses = {
  200: CartItemsResponse
}

export type GetCartItemsResponse =
  GetCartItemsResponses[keyof GetCartItemsResponses]

export type ManageCartsData = {
  body?:
    | CartItemObjectRequest
    | SubscriptionItemObject
    | CartMergeObjectRequest
    | CustomItemObject
    | ReOrderObjectRequest
    | PromotionItemObject
    | BulkAddItemsRequest
  path: {
    /**
     * The unique identifier of the cart that you created.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items"
}

export type ManageCartsErrors = {
  /**
   * Bad Request
   */
  400: ResponseErrorResponse
  /**
   * Not Found
   */
  404: ResponseErrorResponse
  /**
   * Unprocessable Entity
   */
  422: ResponseErrorResponse
  /**
   * Internal Server Error
   */
  500: ResponseErrorResponse
}

export type ManageCartsError = ManageCartsErrors[keyof ManageCartsErrors]

export type ManageCartsResponses = {
  201: CartsResponse
}

export type ManageCartsResponse =
  ManageCartsResponses[keyof ManageCartsResponses]

export type BulkUpdateItemsInCartData = {
  body?: BulkUpdateCartsItems
  path: {
    /**
     * The unique identifier of the cart that you created.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items"
}

export type BulkUpdateItemsInCartErrors = {
  /**
   * Insufficient Stock
   */
  400: ResponseErrorResponse
  /**
   * Not Found
   */
  404: ResponseErrorResponse
  /**
   * Unprocessable Entity
   */
  422: ResponseErrorResponse
}

export type BulkUpdateItemsInCartError =
  BulkUpdateItemsInCartErrors[keyof BulkUpdateItemsInCartErrors]

export type BulkUpdateItemsInCartResponses = {
  200: unknown
}

export type DeleteACartItemData = {
  body?: never
  path: {
    /**
     * The unique identifier of the cart created by you.
     */
    cartID: string
    /**
     * The unique identifier of the cart that you want to delete.
     */
    cartitemID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items/{cartitemID}"
}

export type DeleteACartItemResponses = {
  200: CartsResponse
}

export type DeleteACartItemResponse =
  DeleteACartItemResponses[keyof DeleteACartItemResponses]

export type UpdateACartItemData = {
  body?: UpdateCartsItems
  path: {
    /**
     * A unique identifier of the cart that you created.
     */
    cartID: string
    /**
     * A unique identifier of the cart item.
     */
    cartitemID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items/{cartitemID}"
}

export type UpdateACartItemErrors = {
  /**
   * Bad Request
   */
  400: ResponseErrorResponse
  /**
   * Not Found
   */
  404: ResponseErrorResponse
}

export type UpdateACartItemError =
  UpdateACartItemErrors[keyof UpdateACartItemErrors]

export type UpdateACartItemResponses = {
  200: CartsResponse
}

export type UpdateACartItemResponse =
  UpdateACartItemResponses[keyof UpdateACartItemResponses]

export type DeleteAccountCartAssociationData = {
  body?: CartsRelationshipsAccountsData
  headers?: {
    /**
     * An Account Management Authentication token to access a specific account's carts.
     */
    "EP-Account-Management-Authentication-Token"?: string
  }
  path: {
    /**
     * The ID for the cart created by the account.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/relationships/accounts"
}

export type DeleteAccountCartAssociationErrors = {
  /**
   * Bad Request
   */
  400: ResponseErrorResponse
  /**
   * Forbidden
   */
  403: ResponseErrorResponse
}

export type DeleteAccountCartAssociationError =
  DeleteAccountCartAssociationErrors[keyof DeleteAccountCartAssociationErrors]

export type DeleteAccountCartAssociationResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteAccountCartAssociationResponse =
  DeleteAccountCartAssociationResponses[keyof DeleteAccountCartAssociationResponses]

export type CreateAccountCartAssociationData = {
  body?: CartsRelationshipsAccountsData
  headers?: {
    /**
     * An Account Management Authentication token to access a specific account's carts.
     */
    "EP-Account-Management-Authentication-Token"?: string
  }
  path: {
    /**
     * The ID for the cart created by the account. Ensure that you follow the guidelines for [Safe Characters](/guides/Getting-Started/safe-characters).
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/relationships/accounts"
}

export type CreateAccountCartAssociationErrors = {
  /**
   * Bad Request
   */
  400: ResponseErrorResponse
  /**
   * Forbidden
   */
  403: ResponseErrorResponse
  /**
   * Unprocessable Entity
   */
  422: ResponseErrorResponse
}

export type CreateAccountCartAssociationError =
  CreateAccountCartAssociationErrors[keyof CreateAccountCartAssociationErrors]

export type CreateAccountCartAssociationResponses = {
  /**
   * OK
   */
  200: CartsRelationshipsAccountsData
  /**
   * No Content is sent back in case the account has already been associated to the cart.
   */
  204: void
}

export type CreateAccountCartAssociationResponse =
  CreateAccountCartAssociationResponses[keyof CreateAccountCartAssociationResponses]

export type DeleteCustomerCartAssociationData = {
  body?: CartsRelationshipsCustomersData
  headers?: {
    /**
     * A customer token to access a specific customer's carts.
     */
    "x-moltin-customer-token"?: string
  }
  path: {
    /**
     * The ID for the cart created by the customer.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/relationships/customers"
}

export type DeleteCustomerCartAssociationErrors = {
  /**
   * Bad Request
   */
  400: ResponseErrorResponse
  /**
   * Forbidden
   */
  403: ResponseErrorResponse
}

export type DeleteCustomerCartAssociationError =
  DeleteCustomerCartAssociationErrors[keyof DeleteCustomerCartAssociationErrors]

export type DeleteCustomerCartAssociationResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteCustomerCartAssociationResponse =
  DeleteCustomerCartAssociationResponses[keyof DeleteCustomerCartAssociationResponses]

export type CreateCustomerCartAssociationData = {
  body?: CartsRelationshipsCustomersData
  headers?: {
    /**
     * A customer token to access a specific customer's carts.
     */
    "x-moltin-customer-token"?: string
  }
  path: {
    /**
     * The ID for the cart created by the customer. Ensure that you follow the guidelines for [Safe Characters](/guides/Getting-Started/safe-characters).
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/relationships/customers"
}

export type CreateCustomerCartAssociationErrors = {
  /**
   * Bad Request
   */
  400: ResponseErrorResponse
  /**
   * Forbidden
   */
  403: ResponseErrorResponse
  /**
   * Unauthorized
   */
  422: ResponseErrorResponse
}

export type CreateCustomerCartAssociationError =
  CreateCustomerCartAssociationErrors[keyof CreateCustomerCartAssociationErrors]

export type CreateCustomerCartAssociationResponses = {
  /**
   * OK
   */
  200: CartsRelationshipsCustomersData
  /**
   * No Content
   */
  204: void
}

export type CreateCustomerCartAssociationResponse =
  CreateCustomerCartAssociationResponses[keyof CreateCustomerCartAssociationResponses]

export type DeleteAPromotionViaPromotionCodeData = {
  body?: never
  path: {
    /**
     * Specifies the unique identifier of a cart created by you.
     */
    cartID: string
    /**
     * Specifies the promotion code to be deleted.
     */
    promoCode: string
  }
  query?: never
  url: "/v2/carts/{cartID}/discounts/{promoCode}"
}

export type DeleteAPromotionViaPromotionCodeResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteAPromotionViaPromotionCodeResponse =
  DeleteAPromotionViaPromotionCodeResponses[keyof DeleteAPromotionViaPromotionCodeResponses]

export type AddTaxItemToCartData = {
  body?: CartItemTaxesEntityResponse
  path: {
    /**
     * The unique identifier of the cart.
     */
    cartID: string
    /**
     * The unique identifier of the cart item.
     */
    cartitemID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items/{cartitemID}/taxes"
}

export type AddTaxItemToCartErrors = {
  /**
   * Unauthorized
   */
  422: ResponseErrorResponse
}

export type AddTaxItemToCartError =
  AddTaxItemToCartErrors[keyof AddTaxItemToCartErrors]

export type AddTaxItemToCartResponses = {
  200: CartItemTaxesEntityResponse
  /**
   * Created
   */
  201: CartItemTaxesEntityResponse
}

export type AddTaxItemToCartResponse =
  AddTaxItemToCartResponses[keyof AddTaxItemToCartResponses]

export type BulkDeleteTaxItemsFromCartData = {
  body?: never
  path: {
    /**
     * The unique identifier of the cart.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/taxes"
}

export type BulkDeleteTaxItemsFromCartResponses = {
  /**
   * No Content
   */
  204: void
}

export type BulkDeleteTaxItemsFromCartResponse =
  BulkDeleteTaxItemsFromCartResponses[keyof BulkDeleteTaxItemsFromCartResponses]

export type BulkAddTaxItemsToCartData = {
  body?: CartsBulkTaxes
  path: {
    /**
     * The unique identifier of the cart.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/taxes"
}

export type BulkAddTaxItemsToCartErrors = {
  /**
   * Unprocessable Entity
   */
  422: ResponseErrorResponse
}

export type BulkAddTaxItemsToCartError =
  BulkAddTaxItemsToCartErrors[keyof BulkAddTaxItemsToCartErrors]

export type BulkAddTaxItemsToCartResponses = {
  200: CartsBulkTaxes
  /**
   * Created
   */
  201: CartsBulkTaxes
}

export type BulkAddTaxItemsToCartResponse =
  BulkAddTaxItemsToCartResponses[keyof BulkAddTaxItemsToCartResponses]

export type DeleteATaxItemData = {
  body?: never
  path: {
    /**
     * The unique identifier of the cart.
     */
    cartID: string
    /**
     * The unique identifier of the cart item.
     */
    cartitemID: string
    /**
     * The unique identifier of the tax item.
     */
    taxitemID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items/{cartitemID}/taxes/{taxitemID}"
}

export type DeleteATaxItemResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteATaxItemResponse =
  DeleteATaxItemResponses[keyof DeleteATaxItemResponses]

export type UpdateATaxItemData = {
  body?: CartItemTaxesEntityResponse
  path: {
    /**
     * The unique identifier of the cart.
     */
    cartID: string
    /**
     * The unique identifier of the cart item.
     */
    cartitemID: string
    /**
     * The unique identifier of the tax item.
     */
    taxitemID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items/{cartitemID}/taxes/{taxitemID}"
}

export type UpdateATaxItemResponses = {
  200: CartItemTaxesEntityResponse
}

export type UpdateATaxItemResponse =
  UpdateATaxItemResponses[keyof UpdateATaxItemResponses]

export type BulkDeleteCustomDiscountsFromCartData = {
  body?: never
  path: {
    /**
     * Specifies the unique ID for the cart.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/custom-discounts"
}

export type BulkDeleteCustomDiscountsFromCartResponses = {
  /**
   * No Content
   */
  204: void
}

export type BulkDeleteCustomDiscountsFromCartResponse =
  BulkDeleteCustomDiscountsFromCartResponses[keyof BulkDeleteCustomDiscountsFromCartResponses]

export type BulkAddCustomDiscountsToCartData = {
  body?: CartsBulkCustomDiscounts
  path: {
    /**
     * Specifies the system generated ID for the cart that the shopper created.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/custom-discounts"
}

export type BulkAddCustomDiscountsToCartErrors = {
  /**
   * Could not apply custom discount
   */
  400: ResponseErrorResponse
  /**
   * Could not apply custom discount
   */
  422: ResponseErrorResponse
}

export type BulkAddCustomDiscountsToCartError =
  BulkAddCustomDiscountsToCartErrors[keyof BulkAddCustomDiscountsToCartErrors]

export type BulkAddCustomDiscountsToCartResponses = {
  201:
    | CartsBulkCustomDiscountsResponse
    | CartsBulkCustomDiscountsCollectionResponse
}

export type BulkAddCustomDiscountsToCartResponse =
  BulkAddCustomDiscountsToCartResponses[keyof BulkAddCustomDiscountsToCartResponses]

export type DeleteCustomDiscountFromCartData = {
  body?: never
  path: {
    /**
     * Specifies the unique ID for the cart.
     */
    cartID: string
    /**
     * Specifies the ID for the custom discount to be deleted.
     */
    customdiscountID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/custom-discounts/{customdiscountID}"
}

export type DeleteCustomDiscountFromCartResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteCustomDiscountFromCartResponse =
  DeleteCustomDiscountFromCartResponses[keyof DeleteCustomDiscountFromCartResponses]

export type UpdateCustomDiscountForCartData = {
  body?: CartsCustomDiscountsEntityRequest
  path: {
    /**
     * Specifies the unique ID for the cart.
     */
    cartID: string
    /**
     * Specifies the ID for the custom discount to be updated.
     */
    customdiscountID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/custom-discounts/{customdiscountID}"
}

export type UpdateCustomDiscountForCartResponses = {
  200: CartsCustomDiscountsEntityResponse
}

export type UpdateCustomDiscountForCartResponse =
  UpdateCustomDiscountForCartResponses[keyof UpdateCustomDiscountForCartResponses]

export type AddCustomDiscountToCartItemData = {
  body?: CartsCustomDiscountsObject
  path: {
    /**
     * Specifies the ID for the cart.
     */
    cartID: string
    /**
     * Specifies the unique identifier for the cart item.
     */
    cartitemID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items/{cartitemID}/custom-discounts"
}

export type AddCustomDiscountToCartItemErrors = {
  /**
   * Bad Request
   */
  400: ResponseErrorResponse
  /**
   * Bad Request
   */
  422: ResponseErrorResponse
}

export type AddCustomDiscountToCartItemError =
  AddCustomDiscountToCartItemErrors[keyof AddCustomDiscountToCartItemErrors]

export type AddCustomDiscountToCartItemResponses = {
  /**
   * Successful request
   */
  201:
    | CartsCustomDiscountsCollectionResponse
    | CartsCustomDiscountsEntityResponse
}

export type AddCustomDiscountToCartItemResponse =
  AddCustomDiscountToCartItemResponses[keyof AddCustomDiscountToCartItemResponses]

export type DeleteCustomDiscountFromCartItemData = {
  body?: never
  path: {
    /**
     * Specifies the ID for the cart.
     */
    cartID: string
    /**
     * Specifies the ID for the cart item.
     */
    cartitemID: string
    /**
     * Specifies the ID for the custom discount to be deleted.
     */
    customdiscountID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items/{cartitemID}/custom-discounts/{customdiscountID}"
}

export type DeleteCustomDiscountFromCartItemResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteCustomDiscountFromCartItemResponse =
  DeleteCustomDiscountFromCartItemResponses[keyof DeleteCustomDiscountFromCartItemResponses]

export type UpdateCustomDiscountForCartItemData = {
  body?: CartsCustomDiscountsEntityRequest
  path: {
    /**
     * Specifies the ID for the cart.
     */
    cartID: string
    /**
     * Specifies the ID for the cart item.
     */
    cartitemID: string
    /**
     * Specifies the ID for the custom discount to be updated.
     */
    customdiscountID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items/{cartitemID}/custom-discounts/{customdiscountID}"
}

export type UpdateCustomDiscountForCartItemResponses = {
  200: CartsCustomDiscountsEntityResponse
}

export type UpdateCustomDiscountForCartItemResponse =
  UpdateCustomDiscountForCartItemResponses[keyof UpdateCustomDiscountForCartItemResponses]

export type GetShippingGroupsData = {
  body?: never
  path: {
    /**
     * The ID of the cart
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/shipping-groups"
}

export type GetShippingGroupsErrors = {
  /**
   * Cart not found
   */
  404: ResponseErrorResponse
}

export type GetShippingGroupsError =
  GetShippingGroupsErrors[keyof GetShippingGroupsErrors]

export type GetShippingGroupsResponses = {
  /**
   * A list of shipping groups
   */
  200: {
    data?: Array<ShippingGroupResponse>
  }
}

export type GetShippingGroupsResponse =
  GetShippingGroupsResponses[keyof GetShippingGroupsResponses]

export type CreateShippingGroupData = {
  body: CreateShippingGroupRequest
  path: {
    /**
     * The ID of the cart
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/shipping-groups"
}

export type CreateShippingGroupErrors = {
  /**
   * Invalid request
   */
  400: ResponseErrorResponse
  /**
   * Cart not found
   */
  404: ResponseErrorResponse
}

export type CreateShippingGroupError =
  CreateShippingGroupErrors[keyof CreateShippingGroupErrors]

export type CreateShippingGroupResponses = {
  /**
   * Shipping group created successfully
   */
  201: ShippingGroupResponse
}

export type CreateShippingGroupResponse =
  CreateShippingGroupResponses[keyof CreateShippingGroupResponses]

export type DeleteCartShippingGroupData = {
  body?: never
  path: {
    /**
     * The ID of the cart
     */
    cartId: string
    /**
     * The ID of the shipping group to delete
     */
    shippingGroupId: string
  }
  query?: never
  url: "/v2/carts/{cartId}/shipping-groups/{shippingGroupId}"
}

export type DeleteCartShippingGroupErrors = {
  /**
   * Cannot delete shipping group that is attached to cart items
   */
  400: ResponseErrorResponse
  /**
   * Cart or shipping group not found
   */
  404: ResponseErrorResponse
}

export type DeleteCartShippingGroupError =
  DeleteCartShippingGroupErrors[keyof DeleteCartShippingGroupErrors]

export type DeleteCartShippingGroupResponses = {
  /**
   * Successfully deleted the shipping group
   */
  204: void
}

export type DeleteCartShippingGroupResponse =
  DeleteCartShippingGroupResponses[keyof DeleteCartShippingGroupResponses]

export type GetShippingGroupByIdData = {
  body?: never
  path: {
    /**
     * The ID of the cart
     */
    cartId: string
    /**
     * The ID of the shipping group
     */
    shippingGroupId: string
  }
  query?: never
  url: "/v2/carts/{cartId}/shipping-groups/{shippingGroupId}"
}

export type GetShippingGroupByIdErrors = {
  /**
   * Shipping group or cart not found
   */
  404: ResponseErrorResponse
}

export type GetShippingGroupByIdError =
  GetShippingGroupByIdErrors[keyof GetShippingGroupByIdErrors]

export type GetShippingGroupByIdResponses = {
  /**
   * Shipping group details
   */
  200: {
    data?: ShippingGroupResponse
  }
}

export type GetShippingGroupByIdResponse =
  GetShippingGroupByIdResponses[keyof GetShippingGroupByIdResponses]

export type UpdateShippingGroupData = {
  body: UpdateCartShippingGroupRequest
  path: {
    /**
     * The ID of the cart
     */
    cartId: string
    /**
     * The ID of the shipping group
     */
    shippingGroupId: string
  }
  query?: never
  url: "/v2/carts/{cartId}/shipping-groups/{shippingGroupId}"
}

export type UpdateShippingGroupErrors = {
  /**
   * Invalid request
   */
  400: ResponseErrorResponse
  /**
   * Shipping group or cart not found
   */
  404: ResponseErrorResponse
}

export type UpdateShippingGroupError =
  UpdateShippingGroupErrors[keyof UpdateShippingGroupErrors]

export type UpdateShippingGroupResponses = {
  /**
   * Shipping group updated successfully
   */
  200: ShippingGroupResponse
}

export type UpdateShippingGroupResponse =
  UpdateShippingGroupResponses[keyof UpdateShippingGroupResponses]

export type CreateCartPaymentIntentData = {
  body?: ElasticPathPaymentsPoweredByStripePayment
  path: {
    /**
     * The universally unique identifier of the cart for which you want to create a payment intent.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/payments"
}

export type CreateCartPaymentIntentResponses = {
  /**
   * Payment Intent created successfully.
   */
  201: CartResponse
}

export type CreateCartPaymentIntentResponse =
  CreateCartPaymentIntentResponses[keyof CreateCartPaymentIntentResponses]

export type UpdateCartPaymentIntentData = {
  body: CartPaymentUpdate
  path: {
    /**
     * The unique identifier of the cart.
     */
    cartID: string
    /**
     * The unique identifier of the payment intent.
     */
    paymentIntentID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/payments/{paymentIntentID}"
}

export type UpdateCartPaymentIntentResponses = {
  /**
   * Payment updated successfully
   */
  200: CartResponse
}

export type UpdateCartPaymentIntentResponse =
  UpdateCartPaymentIntentResponses[keyof UpdateCartPaymentIntentResponses]

export type CheckoutApiData = {
  body?: CustomerCheckout | AccountCheckout
  headers?: {
    /**
     * An account management authentication token that identifies the authenticated account member.
     */
    "EP-Account-Management-Authentication-Token"?: string
  }
  path: {
    /**
     * The ID of the cart that you want to checkout.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/checkout"
}

export type CheckoutApiErrors = {
  /**
   * Bad Request
   */
  400: ResponseErrorResponse
  /**
   * Internal Server Error
   */
  500: ResponseErrorResponse
}

export type CheckoutApiError = CheckoutApiErrors[keyof CheckoutApiErrors]

export type CheckoutApiResponses = {
  /**
   * OK
   */
  201: OrderEntityResponse
}

export type CheckoutApiResponse =
  CheckoutApiResponses[keyof CheckoutApiResponses]

export type GetCustomerOrdersData = {
  body?: never
  headers?: {
    /**
     * A customer token to access a specific customer's orders.
     */
    "x-moltin-customer-token"?: string
  }
  path?: never
  query?: never
  url: "/v2/orders"
}

export type GetCustomerOrdersResponses = {
  200: OrderCollectionResponse
}

export type GetCustomerOrdersResponse =
  GetCustomerOrdersResponses[keyof GetCustomerOrdersResponses]

export type GetAnOrderData = {
  body?: never
  path: {
    /**
     * The ID of the order.
     */
    orderID: string
  }
  query?: never
  url: "/v2/orders/{orderID}"
}

export type GetAnOrderErrors = {
  /**
   * Not Found
   */
  404: ResponseErrorResponse
}

export type GetAnOrderError = GetAnOrderErrors[keyof GetAnOrderErrors]

export type GetAnOrderResponses = {
  /**
   * OK
   */
  200: OrderEntityResponse
}

export type GetAnOrderResponse = GetAnOrderResponses[keyof GetAnOrderResponses]

export type UpdateAnOrderData = {
  body?: OrdersUpdateRequest
  path: {
    /**
     * The unique identifier of the order.
     */
    orderID: string
  }
  query?: never
  url: "/v2/orders/{orderID}"
}

export type UpdateAnOrderErrors = {
  /**
   * Bad Request
   */
  400: ResponseErrorResponse
  /**
   * Unprocessable Entity
   */
  422: ResponseErrorResponse
}

export type UpdateAnOrderError = UpdateAnOrderErrors[keyof UpdateAnOrderErrors]

export type UpdateAnOrderResponses = {
  /**
   * OK
   */
  200: OrderEntityResponse
}

export type UpdateAnOrderResponse =
  UpdateAnOrderResponses[keyof UpdateAnOrderResponses]

export type GetOrderItemsData = {
  body?: never
  path: {
    /**
     * The ID of the order.
     */
    orderID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/items"
}

export type GetOrderItemsResponses = {
  200: OrderItemCollectionResponse
}

export type GetOrderItemsResponse =
  GetOrderItemsResponses[keyof GetOrderItemsResponses]

export type AnonymizeOrdersData = {
  body?: OrdersAnonymizeRequest & unknown
  path?: never
  query?: never
  url: "/v2/orders/anonymize"
}

export type AnonymizeOrdersErrors = {
  /**
   * Unprocessable Entity
   */
  422: ResponseErrorResponse
}

export type AnonymizeOrdersError =
  AnonymizeOrdersErrors[keyof AnonymizeOrdersErrors]

export type AnonymizeOrdersResponses = {
  /**
   * OK
   */
  200: OrdersListResponse
}

export type AnonymizeOrdersResponse =
  AnonymizeOrdersResponses[keyof AnonymizeOrdersResponses]

export type ConfirmOrderData = {
  body?: never
  path: {
    /**
     * The unique identifier of the order to confirm.
     */
    orderID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/confirm"
}

export type ConfirmOrderErrors = {
  /**
   * Bad Request
   */
  400: ResponseErrorResponse
  /**
   * Not Found
   */
  404: ResponseErrorResponse
  /**
   * Unprocessable Entity
   */
  422: ResponseErrorResponse
}

export type ConfirmOrderError = ConfirmOrderErrors[keyof ConfirmOrderErrors]

export type ConfirmOrderResponses = {
  /**
   * Order confirmed successfully
   */
  200: OrderResponse
}

export type ConfirmOrderResponse =
  ConfirmOrderResponses[keyof ConfirmOrderResponses]

export type PaymentSetupData = {
  body?: PaymentsRequest
  path: {
    /**
     * The Universally Unique Identifier (UUID) of the order you want to pay for.
     */
    orderID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/payments"
}

export type PaymentSetupErrors = {
  /**
   * Bad Request
   */
  400: ResponseErrorResponse
  /**
   * Conflict
   */
  409: ResponseErrorResponse
  /**
   * Unprocessable Entity
   */
  422: ResponseErrorResponse
}

export type PaymentSetupError = PaymentSetupErrors[keyof PaymentSetupErrors]

export type PaymentSetupResponses = {
  /**
   * OK
   */
  200: TransactionEntityResponse
}

export type PaymentSetupResponse =
  PaymentSetupResponses[keyof PaymentSetupResponses]

export type ConfirmPaymentData = {
  body?: OrdersTransactionsConfirmRequest
  path: {
    /**
     * The unique identifier of the order.
     */
    orderID: string
    /**
     * The unique identifier of the transaction.
     */
    transactionID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/transactions/{transactionID}/confirm"
}

export type ConfirmPaymentErrors = {
  /**
   * Bad Request
   */
  400: ResponseErrorResponse
}

export type ConfirmPaymentError =
  ConfirmPaymentErrors[keyof ConfirmPaymentErrors]

export type ConfirmPaymentResponses = {
  200: TransactionEntityResponse
}

export type ConfirmPaymentResponse =
  ConfirmPaymentResponses[keyof ConfirmPaymentResponses]

export type CaptureATransactionData = {
  body?: OrdersTransactionsCaptureRequest
  path: {
    /**
     * The UUID of the order.
     */
    orderID: string
    /**
     * The UUID of the transaction to capture.
     */
    transactionID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/transactions/{transactionID}/capture"
}

export type CaptureATransactionErrors = {
  /**
   * Bad Request
   */
  400: ResponseErrorResponse
}

export type CaptureATransactionError =
  CaptureATransactionErrors[keyof CaptureATransactionErrors]

export type CaptureATransactionResponses = {
  200: TransactionEntityResponse
}

export type CaptureATransactionResponse =
  CaptureATransactionResponses[keyof CaptureATransactionResponses]

export type RefundATransactionData = {
  body?: OrdersTransactionsRefundRequest
  path: {
    /**
     * The UUID of the order.
     */
    orderID: string
    /**
     * The UUID of the transaction you want to refund.
     */
    transactionID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/transactions/{transactionID}/refund"
}

export type RefundATransactionErrors = {
  /**
   * Bad Request
   */
  400: ResponseErrorResponse
  /**
   * Unprocessable Entity
   */
  422: ResponseErrorResponse
}

export type RefundATransactionError =
  RefundATransactionErrors[keyof RefundATransactionErrors]

export type RefundATransactionResponses = {
  200: TransactionEntityResponse
}

export type RefundATransactionResponse =
  RefundATransactionResponses[keyof RefundATransactionResponses]

export type GetOrderTransactionsData = {
  body?: never
  path: {
    /**
     * The unique identifier of the order.
     */
    orderID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/transactions"
}

export type GetOrderTransactionsErrors = {
  /**
   * Bad Request
   */
  400: ResponseErrorResponse
}

export type GetOrderTransactionsError =
  GetOrderTransactionsErrors[keyof GetOrderTransactionsErrors]

export type GetOrderTransactionsResponses = {
  200: TransactionListResponse
}

export type GetOrderTransactionsResponse =
  GetOrderTransactionsResponses[keyof GetOrderTransactionsResponses]

export type GetATransactionData = {
  body?: never
  path: {
    /**
     * The unique identifier of the order that you require transactions for.
     */
    orderID: string
    /**
     * The unique identifier of the transaction.
     */
    transactionID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/transactions/{transactionID}"
}

export type GetATransactionResponses = {
  200: ResponseData & {
    data?: TransactionResponse
  }
}

export type GetATransactionResponse =
  GetATransactionResponses[keyof GetATransactionResponses]

export type CancelATransactionData = {
  body?: OrdersTransactionsCancelRequest
  path: {
    /**
     * The unique identifier of the order.
     */
    orderID: string
    /**
     * The unique identifier of the transaction to be canceled or voided.
     */
    transactionID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/transactions/{transactionID}/cancel"
}

export type CancelATransactionErrors = {
  /**
   * Bad Request
   */
  400: ResponseErrorResponse
}

export type CancelATransactionError =
  CancelATransactionErrors[keyof CancelATransactionErrors]

export type CancelATransactionResponses = {
  200: TransactionEntityResponse
}

export type CancelATransactionResponse =
  CancelATransactionResponses[keyof CancelATransactionResponses]

export type GetOrderShippingGroupsData = {
  body?: never
  path: {
    /**
     * The ID of the order
     */
    orderID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/shipping-groups"
}

export type GetOrderShippingGroupsErrors = {
  /**
   * Order not found
   */
  404: ResponseErrorResponse
}

export type GetOrderShippingGroupsError =
  GetOrderShippingGroupsErrors[keyof GetOrderShippingGroupsErrors]

export type GetOrderShippingGroupsResponses = {
  /**
   * A list of shipping groups
   */
  200: {
    data?: Array<ShippingGroupResponse>
  }
}

export type GetOrderShippingGroupsResponse =
  GetOrderShippingGroupsResponses[keyof GetOrderShippingGroupsResponses]

export type CreateOrderShippingGroupData = {
  /**
   * Shipping group details
   */
  body?: {
    data?: {
      type: "shipping_group"
      /**
       * The shipping type for this group
       */
      shipping_type?: string
      /**
       * Tracking reference for the shipment
       */
      tracking_reference?: string
      address?: {
        first_name?: string
        last_name?: string
        phone_number?: string
        company_name?: string
        line_1?: string
        line_2?: string
        city?: string
        postcode?: string
        county?: string
        country?: string
        region?: string
        instructions?: string
      }
      delivery_estimate?: {
        start?: Date
        end?: Date
      }
    }
  }
  path: {
    /**
     * The ID of the order
     */
    orderID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/shipping-groups"
}

export type CreateOrderShippingGroupErrors = {
  /**
   * Bad Request
   */
  400: ResponseErrorResponse
  /**
   * Order not found
   */
  404: ResponseErrorResponse
  /**
   * Unprocessable Entity
   */
  422: ResponseErrorResponse
}

export type CreateOrderShippingGroupError =
  CreateOrderShippingGroupErrors[keyof CreateOrderShippingGroupErrors]

export type CreateOrderShippingGroupResponses = {
  /**
   * Shipping group created
   */
  201: {
    data?: ShippingGroupResponse
  }
}

export type CreateOrderShippingGroupResponse =
  CreateOrderShippingGroupResponses[keyof CreateOrderShippingGroupResponses]

export type GetShippingGroupsByIdData = {
  body?: never
  path: {
    /**
     * The ID of the order
     */
    orderID: string
    /**
     * The ID of the shipping group
     */
    shippingGroupID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/shipping-groups/{shippingGroupID}"
}

export type GetShippingGroupsByIdErrors = {
  /**
   * Shipping group or order not found
   */
  404: ResponseErrorResponse
}

export type GetShippingGroupsByIdError =
  GetShippingGroupsByIdErrors[keyof GetShippingGroupsByIdErrors]

export type GetShippingGroupsByIdResponses = {
  /**
   * Shipping group details
   */
  200: {
    data?: ShippingGroupResponse
  }
}

export type GetShippingGroupsByIdResponse =
  GetShippingGroupsByIdResponses[keyof GetShippingGroupsByIdResponses]

export type PutShippingGroupByIdData = {
  body: UpdateOrderShippingGroupRequest
  path: {
    /**
     * The ID of the order
     */
    orderID: string
    /**
     * The ID of the shipping group
     */
    shippingGroupID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/shipping-groups/{shippingGroupID}"
}

export type PutShippingGroupByIdErrors = {
  /**
   * Invalid request
   */
  400: ResponseErrorResponse
  /**
   * Shipping group or order not found
   */
  404: ResponseErrorResponse
}

export type PutShippingGroupByIdError =
  PutShippingGroupByIdErrors[keyof PutShippingGroupByIdErrors]

export type PutShippingGroupByIdResponses = {
  /**
   * Shipping group updated successfully
   */
  200: ShippingGroupResponse
}

export type PutShippingGroupByIdResponse =
  PutShippingGroupByIdResponses[keyof PutShippingGroupByIdResponses]
