// This file is auto-generated by @hey-api/openapi-ts

export type CartsRequest = {
  /**
   * The cart description.
   */
  description?: string
  discount_settings?: DiscountSettings
  /**
   * The cart name provided by the shopper. A cart name must contain 1 to 255 characters. You cannot use whitespace characters, but special characters are permitted. For more information, see the [Safe Characters](/guides/Getting-Started/safe-characters) section.
   */
  name?: string
  contact?: CartContact
  /**
   * This optional parameter sets a reference date for the cart. If this parameter is set, it allows the cart to act as one that might occur on that specified date. For example, such future carts might acquire future-enabled discounts, allowing users to test and validate future interactions with carts. The snapshot_date must be in the format 2026-02-21T15:07:25Z. By default, this parameter is left empty.
   */
  snapshot_date?: string
  custom_attributes?: CustomAttributes
  /**
   * To remove the Stripe payment intent from a cart, pass the empty value in the `payment_intent_id` field.  You must use an empty value for this field. You cannot use this endpoint to directly update the cart to use an existing Payment Intent.
   */
  payment_intent_id?: string
}

export type CartContact = {
  /**
   * The email address attached to a cart.
   */
  email?: string
}

export type DiscountSettings = {
  /**
   * This parameter enables custom discounts for a cart. When set to true, Elastic Path promotions will not be applied to the new carts. Default is set from cart discount settings for the store. See [Cart Settings](/docs/api/settings/put-v-2-settings-cart).
   */
  custom_discounts_enabled?: boolean
  /**
   * When set to true, this parameter allows the cart to use rule promotions.
   */
  use_rule_promotions?: boolean
}

export type CustomAttributes = {
  /**
   * Specifies the custom attributes for the cart object. The attribute can be any string, numerical, and underscore. A cart can have maximum of 20 custom attributes.
   */
  custom_attributes?: {
    /**
     * Specifies the attribute `type` and `value`.
     */
    attribute?: {
      /**
       * Specifies the type of the attribute such as string, integer, boolean, and float.
       */
      type?: string
      /**
       * Specifies the value of the attribute.
       */
      value?: string | number | boolean
    }
  }
}

export type CartResponse = {
  /**
   * The unique identifier for the cart. Use SDK or create it yourself.
   */
  id?: string
  /**
   * The type of object being returned.
   */
  type?: string
  /**
   * The name of this cart.
   */
  name?: string
  /**
   * A description of the cart.
   */
  description?: string
  contact?: CartContact
  discount_settings?: DiscountSettings
  /**
   * Stripe-assigned unique identifier for the linked Payment Intent
   */
  payment_intent_id?: string
  links?: {
    /**
     * A link to that specific resource.
     */
    self?: string
  }
  meta?: {
    display_price?: {
      with_tax?: FormattedPriceData
      without_tax?: FormattedPriceData
      tax?: FormattedPriceData
      discount?: FormattedPriceData
      without_discount?: FormattedPriceData
      shipping?: FormattedPriceData
    }
    timestamps?: Timestamps
  }
  relationships?: {
    customers?: RelationshipArray
    items?: RelationshipArray
    accounts?: RelationshipArray
    custom_discounts?: RelationshipArray
    promotions?: RelationshipArray
  }
}

export type CartItemsObjectRequest =
  | CartItemObject
  | SubscriptionItemObject
  | CartMergeObjectRequest
  | CustomItemObject
  | ReOrderObjectRequest
  | PromotionItemObject

export type CartItemsObjectResponse =
  | CartItemResponseObject
  | SubscriptionItemResponseObject
  | CustomItemResponseObject
  | PromotionItemResponseObject

export type CartItemResponseObject = CartItemObjectData & CartItemResponse

export type SubscriptionItemResponseObject = SubscriptionItemObjectData &
  CartItemResponse

export type CustomItemResponseObject = CustomItemObjectData & {
  /**
   * Specifies the ID of the custom cart item
   */
  id: string
  description?: unknown
}

export type PromotionItemResponseObject = PromotionItemObjectData & {
  /**
   * Specifies the ID of the promotion cart item
   */
  id: string
  /**
   * The name of the promotion item.
   */
  name?: string
}

export type CartItemObject = {
  data?: CartItemObjectData & CartItemResponse
}

/**
 * The type of object being returned.
 */
export type Type = "cart_item"

export type CartItemObjectData = {
  /**
   * The type of object being returned.
   */
  type: "cart_item"
  /**
   * The number of items added to the cart.
   */
  quantity: number
  /**
   * Specifies the ID of the product you want to add to cart. (use this OR sku)
   */
  id?: string
  /**
   * Specifies the item SKU that you want to add to cart. (use this OR id)
   */
  sku?: string
  /**
   * The custom text to be added to a product.
   */
  custom_inputs?: {
    [key: string]: unknown
  }
  /**
   * Object used to describe the bundle options selected.
   */
  bundle_configuration?: {
    /**
     * Specifies selected options.
     */
    selected_options?: {
      [key: string]: unknown
    }
    /**
     * Array of component products for the selected options.
     */
    component_products?: Array<unknown>
  }
  /**
   * Identifier for a created Cart Shipping Group
   */
  shipping_group_id?: string
  /**
   * The slug of a stock location.
   */
  location?: string
}

export type SubscriptionItemObject = {
  data?: SubscriptionItemObjectData & CartItemResponse
}

export type SubscriptionItemObjectData = {
  /**
   * The type of object being returned.
   */
  type: "subscription_item"
  /**
   * The number of items added to the cart.
   */
  quantity: number
  /**
   * Specifies the ID of the subscription offering you want to add to cart.
   */
  id: string
  /**
   * Specifies how the subscription offering should be configured.
   */
  subscription_configuration: {
    /**
     * The ID of the plan within the offering to use for the subscription.
     */
    plan: string
  }
}

export type CartMergeObjectRequest = {
  data?: Array<CartMergeObject>
  options?: AddAllOrNothingOptionsObject
}

export type CartMergeObject = {
  /**
   * The type of object being returned. Must be `cart_items`.
   */
  type: "cart_items"
  /**
   * The original cart to be merged from.
   */
  cart_id: string
}

export type CustomItemObject = {
  data?: CustomItemObjectData
}

export type CustomItemObjectData = {
  /**
   * The type of object being returned. Must be `custom_item`.
   */
  type: "custom_item"
  /**
   * The number of custom items to add to cart.
   */
  quantity: number
  price: {
    /**
     * The unit price of the custom item.
     */
    amount: number
    /**
     * Set to`true` if relevant taxes have been included in the price, `false` if not. Defaults to `true`.
     */
    includes_tax?: boolean
  }
  /**
   * A description of the custom item.
   */
  description?: string
  /**
   * The `SKU` code to use for the custom item. See [best practices](https://elasticpath.dev/docs/commerce-cloud/carts/cart-items/add-custom-item-to-cart#best-practices) to use the `SKU` code.
   */
  sku?: string
  /**
   * The name of the custom item.
   */
  name: string
  /**
   * The custom text to be added to a product.
   */
  custom_inputs?: {
    [key: string]: unknown
  }
  /**
   * Identifier for a created Cart Shipping Group
   */
  shipping_group_id?: string
}

export type ReOrderObjectRequest = {
  data?: ReOrderObject
  options?: AddAllOrNothingOptionsObject
}

export type ReOrderObject = {
  /**
   * The type of resource being returned. Use `order_items`.
   */
  type: "order_items"
  /**
   * The unique identifier of the order.
   */
  order_id: string
}

export type BulkAddItemsRequest = {
  data?:
    | CartItemsObjectRequest
    | CartMergeObjectRequest
    | CustomItemObject
    | ReOrderObjectRequest
    | PromotionItemObject
}

export type PromotionItemObject = {
  data?: PromotionItemObjectData
}

export type PromotionItemObjectData = {
  /**
   * Specifies the type of resource, which is `promotion_item`.
   */
  type: "promotion_item"
  /**
   * Specifies the promotion code. For more information about codes[].user[], see the [Create Promotion codes](/docs/api/promotions/create-promotion-codes) section.
   */
  code: string
}

export type BulkUpdateCartsItems = {
  data?: Array<{
    /**
     * Specifies the ID of the cart item that you want to update in cart.
     */
    id?: string
    /**
     * Specifies the amount of items to update in the cart.
     */
    quantity?: number
    /**
     * Specifies the custom text to be added to a product. See [custom inputs](https://elasticpath.dev/docs/pxm/products/ep-pxm-products-api/update-a-product#using-custom-inputs-attribute).
     */
    custom_inputs?: {
      [key: string]: unknown
    }
  }>
  options?: UpdateAllOrNothingOptionsObject
}

export type UpdateCartsItems = {
  data?: {
    /**
     * The unique identifier of the cart item.
     */
    id?: string
    /**
     * The amount of products to add to cart.
     */
    quantity?: number
    /**
     * The custom text to be added to a product.
     */
    custom_inputs?: {
      [key: string]: unknown
    }
    /**
     * The unique identifier of the shipping group to be added to the cart.
     */
    shipping_group_id?: string
  }
}

export type AddAllOrNothingOptionsObject = {
  /**
   * When `true`, if an error occurs for any item, no items are added to the cart. When `false`, valid items are added to the cart and the items with errors are reported in the response. Default is `false`.
   */
  add_all_or_nothing?: boolean
}

export type UpdateAllOrNothingOptionsObject = {
  /**
   * When set to`true`, if an error occurs for any item, no items are updated in the cart. When set to `false`, valid items are updated in the cart and the items with errors are reported in the response. Default is `true`.
   */
  update_all_or_nothing?: boolean
}

export type CartItemResponse = {
  /**
   * The unique ID of the product.
   */
  readonly product_id?: string
  /**
   * The unique ID of the subscription offering for subscription items.
   */
  readonly subscription_offering_id?: string
  /**
   * The name of this item
   */
  readonly name?: string
  /**
   * A description of the cart item.
   */
  readonly description?: string
  /**
   * The unique identifier of the catalog associated with the product is shown if catalog_source=pim is set.
   */
  readonly catalog_id?: string
  /**
   * The catalog source. Always `pim` or `legacy`.
   */
  readonly catalog_source?: string
  readonly image?: {
    /**
     * The MIME type for the uploaded file.
     */
    readonly mime_type?: string
    /**
     * The name of the image file that was uploaded.
     */
    readonly file_name?: string
    /**
     * The link to the image.
     */
    readonly href?: string
  }
  readonly manage_stock?: boolean
  unit_price?: ItemPriceData
  value?: ItemPriceData
  readonly links?: {
    /**
     * A URL related to the resource.
     */
    product?: string
  }
  readonly meta?: {
    display_price?: {
      with_tax?: FormattedPriceData
      without_tax?: FormattedPriceData
      tax?: FormattedPriceData
      discount?: FormattedPriceData
      without_discount?: FormattedPriceData
    }
    timestamps?: Timestamps
  }
}

export type CartsResponse = {
  data?: Array<CartItemObject>
  meta?: {
    display_price?: {
      with_tax?: FormattedPriceData
      without_tax?: FormattedPriceData
      tax?: FormattedPriceData
      discount?: FormattedPriceData
      without_discount?: FormattedPriceData
      discounts?: {
        [key: string]: {
          amount?: number
          currency?: string
          formatted?: string
        }
      }
    }
    timestamps?: CartTimestamps
  }
}

export type ItemPriceData = {
  /**
   * The amount for this item as an integer.
   */
  readonly amount?: number
  /**
   * The currency this item was added to the cart as.
   */
  readonly currency?: string
  /**
   * Whether or not this price is tax inclusive.
   */
  readonly includes_tax?: boolean
}

export type CartsRelationshipsAccountsData = {
  data?: Array<{
    /**
     * The ID of the account.
     */
    id?: string
    /**
     * The type of related object. Ensure that it is account.
     */
    type?: string
  }>
}

export type CartsRelationshipsCustomersData = {
  data?: Array<{
    /**
     * The ID of the customer.
     */
    id?: string
    /**
     * The type of related object. Ensure that it is customer.
     */
    type?: string
  }>
}

export type CartsItemsTaxesObject = {
  /**
   * A unique tax code in this jurisdiction.
   */
  code?: string
  /**
   * The relevant tax jurisdiction.
   */
  jurisdiction?: string
  /**
   * The name of the tax item.
   */
  name?: string
  /**
   * The tax rate represented as a decimal (12.5% -> 0.125).
   */
  rate: number
  /**
   * The type of object being returned. Use `tax_item`.
   */
  type: string
  /**
   * The unique identifier for this tax item.
   */
  readonly id?: string
}

export type CartsBulkCustomDiscounts = {
  data?: Array<CartsCustomDiscountsObject & CartItemBulkCustomDiscountObject>
  options?: AddAllOrNothingOptionsObject
}

export type CartsBulkCustomDiscountsResponse = {
  data?: Array<
    CartsCustomDiscountsResponse & CartItemBulkCustomDiscountResponse
  >
  options?: AddAllOrNothingOptionsObject
}

export type CartItemBulkCustomDiscountObject = CartsCustomDiscountsObject &
  CustomDiscountRelationshipsCartItemRequest

export type CartItemBulkCustomDiscountResponse = CartsCustomDiscountsResponse &
  CustomDiscountRelationshipsCartItemRequest

export type CartsCustomDiscountsObject = {
  /**
   * Specifies an amount to be applied for the custom discount. It must be less than zero.
   */
  amount: number
  /**
   * Specifies a description for the custom discount.
   */
  description: string
  /**
   * Specifies the discount code used for the custom discount.
   */
  discount_code: string
  /**
   * Specifies from where the custom discount is applied. For example, Talon.one.
   */
  discount_engine: string
  /**
   * Specifies an external id for the custom discount.
   */
  external_id: string
  /**
   * Specifies the type of the resource. Always `custom_discount`.
   */
  type: string
}

export type CartsCustomDiscountsResponse = {
  amount?: {
    /**
     * Specifies an amount to be applied for the custom discount. It must be less than zero.
     */
    amount?: number
    /**
     * The currency set for the custom discount.
     */
    currency?: string
    /**
     * The formatted value for the custom discount.
     */
    formatted?: string
  }
  /**
   * Specifies a description for the custom discount.
   */
  description?: string
  /**
   * Specifies the discount code used for the custom discount.
   */
  discount_code?: string
  /**
   * Specifies from where the custom discount is applied. For example, Talon.one.
   */
  discount_engine?: string
  /**
   * Specifies an external id for the custom discount.
   */
  external_id?: string
  /**
   * Specifies the type of the resource. Always `custom_discount`.
   */
  type?: string
  /**
   * Specifies the UUID of the custom discount.
   */
  readonly id?: string
}

export type CustomDiscountRelationshipsCartItemRequest = {
  relationships?: {
    item?: {
      data?: {
        /**
         * Specifies the type of item. For example, `custom_item` or `cart_item`.
         */
        type?: string
        /**
         * Specifies the unique identifier of the `cart_item` or `custom_item` in the cart.
         */
        id?: string
      }
    }
  }
}

export type CartItemRelationship = {
  relationships?: {
    order?: {
      data?: {
        /**
         * This specifies the type of item.
         */
        type?: string
        /**
         * This specifies the ID of the cart_item or custom_item in the cart.
         */
        id?: string
      }
    }
  }
}

export type CartsBulkTaxes = {
  data?: Array<CartsItemsTaxesObject & CartItemRelationship>
  options?: AddAllOrNothingOptionsObject
}

export type OrdersAnonymizeRequest = {
  data?: OrdersAnonymizeData
}

export type OrdersAnonymizeData = {
  /**
   * The unique identifiers of the orders to be anonymized. You can anonymize multiple orders at the same time.
   */
  order_ids?: Array<string>
}

export type OrdersUpdateRequest = {
  data?: OrdersAddressData | OrdersCancelData | OrdersFulfilledData
}

export type OrdersAddressData = {
  /**
   * Specifies a user-managed, optional field used as an alternative to the existing order_id. If provided, the order-number will be sent to Authorize.net instead of the order_id, and will appear as the invoice number in Authorize.net transactions.
   */
  order_number?: string
  /**
   * Represents an optional external ID reference for an order. It can contain alphanumeric characters, special characters, and spaces, and is not required to be unique. The maximum allowed length is 64 characters. It can be used to include an external reference from a separate company system.
   */
  external_ref?: string
  shipping_address: {
    /**
     * Specifies the first name of the address holder.
     */
    first_name?: string
    /**
     * Specifies the last name of the address holder.
     */
    last_name?: string
    /**
     * Specifies the phone number of the address holder.
     */
    phone_number?: string
    /**
     * Specifies the company name.
     */
    company_name?: string
    /**
     * Specifies the first line of the address.
     */
    line_1?: string
    /**
     * Specifies the second line of the address.
     */
    line_2?: string
    /**
     * Specifies the name of the city in the shipping address.
     */
    city?: string
    /**
     * Specifies the county of the shipping address.
     */
    county?: string
    /**
     * Specifies the state, province, or region of the shipping address.
     */
    region?: string
    /**
     * Specifies the postcode or ZIP code of the address.
     */
    postcode?: string
    /**
     * Specifies the country in the shipping address.
     */
    country?: string
    /**
     * Specifies any instructions provided with the shipping address.
     */
    instructions?: string
  }
}

export type OrdersCancelData = {
  /**
   * The status of the order. You can only update the status to `cancelled`.
   */
  status: string
  /**
   * The type of the resource. You must use order.
   */
  type: string
  /**
   * Represents an optional external ID reference for an order. It can contain alphanumeric characters, special characters, and spaces, and is not required to be unique. The maximum allowed length is 64 characters. It can be used to include an external reference from a separate company system.
   */
  external_ref?: string
}

export type OrdersFulfilledData = {
  /**
   * The shipping status of the order. You can only update the shipping status to `fulfilled`.
   */
  shipping: string
  /**
   * The type of the resource. You must use order.
   */
  type: string
  /**
   * Represents an optional external ID reference for an order. It can contain alphanumeric characters, special characters, and spaces, and is not required to be unique. The maximum allowed length is 64 characters. It can be used to include an external reference from a separate company system.
   */
  external_ref?: string
}

export type PaymentsRequest = {
  data?: DataPaymentObject
}

export type Gateway =
  | "adyen"
  | "authorize_net"
  | "braintree"
  | "card_connect"
  | "cyber_source"
  | "elastic_path_payments_stripe"
  | "manual"
  | "paypal_express_checkout"
  | "stripe"
  | "stripe_connect"
  | "stripe_payment_intents"

/**
 * Specifies the transaction method, such as `purchase` or `authorize`.
 */
export type Method =
  | "authorize"
  | "purchase"
  | "purchase_setup"
  | "authorize_setup"

export type DataBasePayments = {
  gateway:
    | "adyen"
    | "authorize_net"
    | "braintree"
    | "card_connect"
    | "cyber_source"
    | "elastic_path_payments_stripe"
    | "manual"
    | "paypal_express_checkout"
    | "stripe"
    | "stripe_connect"
    | "stripe_payment_intents"
  /**
   * Specifies the transaction method, such as `purchase` or `authorize`.
   */
  method: "authorize" | "purchase" | "purchase_setup" | "authorize_setup"
  /**
   * The amount to be paid for the transaction.
   */
  amount?: number
}

export type DataAdyenPayment = DataBasePayments & {
  /**
   * Specifies the gateway. You must use `adyen`.
   */
  gateway: "adyen"
  options?: {
    /**
     * The shopper reference token associated with the saved payment method.
     */
    shopper_reference?: string
    /**
     * Enter CardOnFile for a one-time purchase.
     */
    recurring_processing_model?: string
  }
  /**
   * The Adyen recurringDetailReference payment method identifier.
   */
  payment: string
}

export type DataAuthorizeNetPayment = DataBasePayments & {
  /**
   * Specifies the gateway. You must use `authorize_net`.
   */
  gateway: "authorize_net"
  options?: {
    /**
     * The Authorize.net customer payment profile ID.
     */
    customer_payment_profile_id?: string
  }
  /**
   * The Authorize.net customer profile ID.
   */
  payment: string
}

export type DataBraintreePayment = DataBasePayments & {
  /**
   * Specifies the gateway. You must use `braintree`.
   */
  gateway: "braintree"
  /**
   * The Braintree Customer ID that you want to bill.
   */
  payment: string
}

export type DataCardConnectPayment = DataBasePayments & {
  /**
   * Specifies the gateway. You must use `card_connect`.
   */
  gateway: "card_connect"
  /**
   * Enter account_id, profile_id from CardPointe API. For example, 1|16178397535388255208.
   */
  payment: string
}

export type DataCyberSourcePayment = DataBasePayments & {
  /**
   * Specifies the gateway. You must use `cyber_source`.
   */
  gateway: "cyber_source"
  /**
   * The CyberSource token.
   */
  payment: string
}

export type ElasticPathPaymentsPoweredByStripePayment = DataBasePayments & {
  /**
   * Specifies the gateway. You must use `elastic_path_payments_stripe`.
   */
  gateway: "elastic_path_payments_stripe"
  options?: {
    /**
     * Provides the email address to which you want to send the Stripe receipts for the transactions within the store. This feature is available only in the live mode.
     */
    receipt_email?: string
    /**
     * Parent object determining whether to use Stripe's `automatic_payment_methods` setting.
     */
    automatic_payment_methods?: {
      /**
       * When set to true, it displays all enabled payment methods from the Stripe dashboard. When set to false, the Stripe default, which is card, is used.
       */
      enabled?: boolean
    }
  }
  /**
   * Specifies the Stripe payment method types configured for the store. See [Stripe Documentation](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types).
   */
  payment_method_types?: Array<string>
  /**
   * Specifies the Stripe token or source.
   */
  payment?: string
}

export type DataManualPayment = DataBasePayments & {
  /**
   * Specifies the type of payment gateway. You must use `manual`.
   */
  gateway: "manual"
  paymentmethod_meta?: {
    /**
     * A reference associated with the payment method. This might include loyalty points or gift card identifiers. We recommend not to include personal information in this field.
     */
    custom_reference?: string
    /**
     * A custom name associated with the payment method.
     */
    name?: string
  }
}

export type DataPayPalExpressCheckoutPayment = DataBasePayments & {
  /**
   * Specifies the type of payment gateway. You must use `paypal_express_checkout`.
   */
  gateway: "paypal_express_checkout"
  options?: {
    /**
     * The description for the payment.
     */
    description?: string
    /**
     * The descriptor appended to PayPal generated descriptor that is visible on the card statement of the payer.
     */
    soft_descriptor?: string
    application_context?: {
      /**
       * The label that overrides the business name in the PayPal account on the PayPal site.
       */
      brand_name?: string
      /**
       * The locale pages that appear based on language and country code. PayPal supports a five-character code. For example, ja-JP.
       */
      locale?: string
      /**
       * The type of landing page to show on the PayPal site for customer checkout. Use values LOGIN, BILLING, or NO_PREFERENCE.
       */
      landing_page?: string
      /**
       * The shipping preference. Use SET_PROVIDED_ADDRESS value. This parameter does allow the user to change their address on PayPal site.
       */
      shipping_preference?: string
      /**
       * If you set `useraction=commit` in the query string, the flow redirects the buyer to the PayPal payment page and displays a Pay Now button. When the shopper clicks **Pay Now**, call `DoExpressCheckoutPayment` to complete the payment without additional interaction from the shopper. Choose this flow when you know the final payment amount when you initiate the checkout flow.
       */
      user_action?: string
      /**
       * The callback URL for PayPal to redirect the user in the case of approved payment.
       */
      return_url?: string
      /**
       * The callback URL for PayPal to redirect user in the case a cancelled payment.
       */
      cancel_url?: string
    }
  }
}

export type DataStripePayment = DataBasePayments & {
  /**
   * Specifies the type of payment gateway. You must use `stripe`.
   */
  gateway: "stripe"
  options?: {
    /**
     * The option to provide an email for Stripe receipts. Specify live mode to access this feature.
     */
    receipt_email?: string
  }
  /**
   * The Stripe token or source.
   */
  payment?: string
}

export type DataStripeConnectPayment = DataBasePayments & {
  /**
   * Specifies the type of payment gateway. You must use `stripe_connect`.
   */
  gateway: "stripe_connect"
  options?: {
    /**
     * Provides the email address to which you want to send the Stripe receipts for the transactions within the store. This feature is available only in the live mode.
     */
    receipt_email?: string
  }
  /**
   * Specifies the Stripe token or source.
   */
  payment?: string
}

export type DataStripePaymentIntentsPayment = DataBasePayments & {
  /**
   * Specifies the type of payment gateway. You must use `stripe_payment_intents`.
   */
  gateway: "stripe_payment_intents"
  options?: {
    /**
     * Provides the email address to which you want to send the Stripe receipts for the transactions within the store. This feature is available only in the live mode.
     */
    receipt_email?: string
  }
  /**
   * Specifies the Stripe token or source.
   */
  payment?: string
}

export type DataPaymentObject =
  | DataAdyenPayment
  | DataAuthorizeNetPayment
  | DataBraintreePayment
  | DataCardConnectPayment
  | DataCyberSourcePayment
  | ElasticPathPaymentsPoweredByStripePayment
  | DataManualPayment
  | DataPayPalExpressCheckoutPayment
  | DataStripePayment
  | DataStripeConnectPayment
  | DataStripePaymentIntentsPayment

export type TransactionResponse = {
  /**
   * The ID of the transaction.
   */
  readonly id?: string
  /**
   * The payment gateway reference.
   */
  reference?: string
  /**
   * A custom name associated with the payment method.
   */
  name?: string
  /**
   * A reference associated with the payment method. This might include loyalty points or gift card identifiers. We recommend you not to include personal information in this field.
   */
  custom_reference?: string
  /**
   * The name of the payment gateway used.
   */
  gateway?:
    | "adyen"
    | "authorize_net"
    | "braintree"
    | "card_connect"
    | "cyber_source"
    | "elastic_path_payments_stripe"
    | "manual"
    | "paypal_express_checkout"
    | "stripe"
    | "stripe_connect"
    | "stripe_payment_intents"
  /**
   * The amount for this transaction.
   */
  amount?: number
  /**
   * The refunded amount.
   */
  refunded_amount?: number
  /**
   * The transaction currency.
   */
  currency?: string
  /**
   * The type of transaction, such as `purchase`, `capture`, `authorize` or `refund`.
   */
  "transaction-type"?: string
  /**
   * The status provided by the gateway for this transaction, such as `complete` or `failed`.
   */
  status?: string
  relationships?: {
    order?: {
      data?: {
        /**
         * Represents the type of the object being returned. It is always `order`.
         */
        type?: string
        /**
         * The ID of the order.
         */
        id?: string
      }
    }
  }
  meta?: {
    display_price?: FormattedPriceData
    display_refunded_amount?: FormattedPriceData
    timestamps?: Timestamps
  }
}

export type OrdersTransactionsConfirmRequest = {
  data?: {
    [key: string]: unknown
  }
}

export type OrdersTransactionsCaptureRequest = {
  data?: {
    options?: {
      soft_descriptor?: string
      note_to_payer?: string
    }
  }
}

export type OrdersTransactionsRefundRequest = {
  data?: {
    /**
     * The amount value to be refunded. If this field is not provided, it will be considered as manual refund (Mark as Refunded) and the refund process must be manually handled via payment provider. If the amount value is same as payment value, then it will be treated as a full refund and sent to the payment provider to process refund automatically.
     */
    amount?: number
    options?: {
      /**
       * Provides comments about the refund. It is used by PayPal Express.
       */
      note?: string
    }
  }
}

export type OrdersTransactionsCancelRequest = {
  data?: {
    options?: {
      [key: string]: unknown
    }
    /**
     * Specifies the reason for canceling the transaction. The reason may include `duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`.
     */
    reason?: string
  }
}

export type OrderPriceData = {
  /**
   * The amount for this item.
   */
  amount?: number
  /**
   * The currency this item.
   */
  currency?: string
  /**
   * Whether this price is tax inclusive.
   */
  includes_tax?: boolean
}

/**
 * Relationship data entry
 */
export type RelationshipItem = {
  /**
   * The type of related resource.
   */
  type?: string
  /**
   * The ID of the related resource.
   */
  id?: string
}

/**
 * Array of relationships
 */
export type RelationshipArray = {
  /**
   * Individual relationships
   */
  data?: Array<RelationshipItem>
}

/**
 * Single relationship
 */
export type SingleRelationship = {
  data?: RelationshipItem
}

export type FormattedPriceData = {
  /**
   * The raw total of this cart.
   */
  amount?: number
  /**
   * The currency set for this cart.
   */
  currency?: string
  /**
   * The tax inclusive formatted total based on the currency.
   */
  formatted?: string
}

export type OrderItemFormattedUnitPriceData = {
  unit?: FormattedPriceData
  value?: FormattedPriceData
}

export type DiscountData = {
  amount?: OrderPriceData
  code?: string
  readonly id?: string
}

export type OrderItemResponse = {
  /**
   * The type represents the object being returned.
   */
  type?: string
  /**
   * The unique identifier for this order item.
   */
  readonly id?: string
  /**
   * The quantity of this item were ordered.
   */
  quantity?: number
  /**
   * The unique identifier for this order item.
   */
  readonly product_id?: string
  /**
   * The unique identifier for the subscription offering for this order item.
   */
  readonly subscription_offering_id?: string
  /**
   * The name of this order item.
   */
  name?: string
  /**
   * The SKU code for the order item.
   */
  sku?: string
  unit_price?: OrderPriceData
  value?: OrderPriceData
  discounts?: Array<DiscountData>
  links?: {
    [key: string]: unknown
  }
  meta?: {
    display_price?: {
      with_tax?: OrderItemFormattedUnitPriceData
      without_tax?: OrderItemFormattedUnitPriceData
      tax?: OrderItemFormattedUnitPriceData
      discount?: OrderItemFormattedUnitPriceData
      without_discount?: OrderItemFormattedUnitPriceData
      discounts?: {
        [key: string]: {
          amount?: number
          currency?: string
          formatted?: string
        }
      }
    }
    timestamps?: Timestamps
  }
  relationships?: {
    cart_item?: {
      data?: {
        /**
         * The type represents the object being returned.
         */
        type?: string
        /**
         * The unique identifier for this item.
         */
        readonly id?: string
      }
    }
  }
  /**
   * The unique identifier of the catalog associated with the product is shown if `catalog_source=pim` is set.
   */
  catalog_id?: string
  /**
   * The catalog source. Always `pim` or `legacy`.
   */
  catalog_source?: string
}

export type OrderResponse = {
  /**
   * Specifies the type of object being returned. You must use `order`.
   */
  type?: string
  /**
   * Specifies a user-managed, optional field used as an alternative to the existing `order_id`. If provided, the order-number will be sent to Authorize.net instead of the `order_id`, and will appear as the invoice number in Authorize.net transactions.
   */
  order_number?: string
  /**
   * An optional external ID reference for an order. It can contain alphanumeric characters, special characters, and spaces, and is not required to be unique. The maximum allowed length is 64 characters. It can be used to include an external reference from a separate company system.
   */
  external_ref?: string
  /**
   * Specifies the unique identifier of the order.
   */
  readonly id?: string
  /**
   * Specifies the status of the order, such as `incomplete`, `complete`, `processing`, or `cancelled`.
   */
  status?: string
  /**
   * Specifies the status of the payment, such as `unpaid`, `authorized`, `paid`, or `refunded`.
   */
  payment?: string
  /**
   * Specifies the status of the shipment, such as `fulfilled` or `unfulfilled`.
   */
  shipping?: string
  /**
   * Specifies if the order is anonymized.
   */
  anonymized?: boolean
  meta?: OrderMeta
  billing_address?: BillingAddress
  contact?: Contact
  customer?: {
    /**
     * The name of the customer.
     */
    name?: string
    /**
     * The email address of the customer.
     */
    email?: string
  }
  shipping_address?: ShippingAddress
  relationships?: {
    items?: RelationshipArray
    custom_discounts?: RelationshipArray
    promotions?: RelationshipArray
    customer?: SingleRelationship
    account?: SingleRelationship
    account_member?: SingleRelationship
  }
}

export type OrderMeta = {
  timestamps?: Timestamps
  display_price?: {
    with_tax?: FormattedPriceData
    without_tax?: FormattedPriceData
    tax?: FormattedPriceData
    discount?: FormattedPriceData
    balance_owing?: FormattedPriceData
    paid?: FormattedPriceData
    authorized?: FormattedPriceData
    without_discount?: FormattedPriceData
    shipping?: FormattedPriceData
    shipping_discount?: FormattedPriceData
  }
}

export type CustomerCheckout = {
  data?: {
    /**
     * A user-managed, optional field used as an alternative to the existing `order_id`. If provided, the order-number will be sent to Authorize.net instead of the `order_id`, and will appear as the invoice number in Authorize.net transactions.
     */
    order_number?: string
    /**
     * An optional external ID reference for an order. It can contain alphanumeric characters, special characters, and spaces, and is not required to be unique. The maximum allowed length is 64 characters. It can be used to include an external reference from a separate company system.
     */
    external_ref?: string
    customer?: {
      /**
       * The ID of the customer.
       */
      id?: string
    }
    billing_address?: BillingAddress
    shipping_address?: ShippingAddress
  }
}

export type AccountCheckout = {
  data?: {
    /**
     * A user-managed, optional field used as an alternative to the existing `order_id`. If provided, the order-number will be sent to Authorize.net instead of the `order_id`, and will appear as the invoice number in Authorize.net transactions.
     */
    order_number?: string
    /**
     * An optional external ID reference for an order. It can contain alphanumeric characters, special characters, and spaces, and is not required to be unique. The maximum allowed length is 64 characters. It can be used to include an external reference from a separate company system.
     */
    external_ref?: string
    account?: {
      /**
       * The account ID.
       */
      id?: string
      /**
       * The account member ID.
       */
      member_id?: string
    }
    contact?: {
      /**
       * The name of the account member.
       */
      name?: string
      /**
       * The email address of the account member.
       */
      email?: string
    }
    billing_address?: BillingAddress
    shipping_address?: ShippingAddress
  }
}

export type BillingAddress = {
  /**
   * First name of the billing recipient.
   */
  first_name: string
  /**
   * Last name of the billing recipient.
   */
  last_name: string
  /**
   * Company name of the billing recipient.
   */
  company_name: string
  /**
   * First line of the billing address.
   */
  line_1: string
  /**
   * Second line of the billing address.
   */
  line_2: string
  /**
   * City of the billing address.
   */
  city: string
  /**
   * Postcode of the billing address.
   */
  postcode: string
  /**
   * County of the billing address.
   */
  county: string
  /**
   * Country of the billing address.
   */
  country: string
  /**
   * State, province, or region of the billing address.
   */
  region: string
}

export type Contact = {
  /**
   * The email address of the contact.
   */
  email?: string
  /**
   * The name of the contact.
   */
  name?: string
}

export type ShippingAddress = {
  /**
   * First name of the shipping recipient.
   */
  first_name: string
  /**
   * Last name of the shipping recipient.
   */
  last_name: string
  /**
   * Phone number of the shipping recipient.
   */
  phone_number: string
  /**
   * Company of the shipping recipient.
   */
  company_name: string
  /**
   * First line of the shipping address.
   */
  line_1: string
  /**
   * Second line of the shipping address.
   */
  line_2: string
  /**
   * City of the shipping address.
   */
  city: string
  /**
   * Post code of the shipping address.
   */
  postcode: string
  /**
   * County of the shipping address.
   */
  county: string
  /**
   * Country of the shipping address.
   */
  country: string
  /**
   * State, province, or region of the shipping address.
   */
  region: string
  /**
   * Delivery instructions.
   */
  instructions: string
}

export type ResponseMetaCarts = {
  page?: ResponsePaginationPage
  results?: ResponsePaginationResults
}

export type ResponseMetaOrders = {
  page?: ResponsePaginationPage
  results?: ResponsePaginationResults
}

export type ResponsePaginationPage = {
  /**
   * The current page.
   */
  current?: number
  /**
   * The maximum number of records per page for this response. You can set this value up to 100.
   */
  limit?: number
  /**
   * The current offset by number of records, not pages. Offset is zero-based.
   */
  offset?: number
  /**
   * The total page count.
   */
  total?: number
}

export type ResponsePaginationResults = {
  /**
   * The total page count.
   */
  total?: number
}

export type ResponsePageLinks = {
  /**
   * Always the current page.
   */
  current?: string
  /**
   * Always the first page.
   */
  first?: string
  /**
   * If there is only one page, it is `null`.
   */
  last?: string
  /**
   * If there is only one page, it is `null`.
   */
  next?: string
  /**
   * if the user is on the first page, it is `null`.
   */
  prev?: string
}

export type ResponseData = {
  data?: unknown
}

export type ResponseError = Array<unknown>

export type Timestamps = {
  /**
   * The date this was created.
   */
  created_at?: string
  /**
   * The date this was last updated.
   */
  updated_at?: unknown
}

export type CartTimestamps = {
  created_at?: string
  updated_at?: unknown
  expires_at?: unknown
}

export type GetCartsData = {
  body?: never
  headers?: {
    /**
     * An Account Management Authentication token to access a specific account's carts.
     */
    "EP-Account-Management-Authentication-Token"?: string
    /**
     * A customer token to access a specific customer's carts.
     */
    "x-moltin-customer-token"?: string
  }
  path?: never
  query?: never
  url: "/v2/carts"
}

export type GetCartsErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type GetCartsError = GetCartsErrors[keyof GetCartsErrors]

export type GetCartsResponses = {
  200: ResponseData & {
    data?: Array<CartResponse>
    links?: ResponsePageLinks
    meta?: ResponseMetaCarts
  }
}

export type GetCartsResponse = GetCartsResponses[keyof GetCartsResponses]

export type CreateACartData = {
  body?: ResponseData & {
    data?: CartsRequest
  }
  headers?: {
    /**
     * A customer token to be associated with the cart.
     */
    "x-moltin-customer-token"?: string
  }
  path?: never
  query?: never
  url: "/v2/carts"
}

export type CreateACartErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type CreateACartError = CreateACartErrors[keyof CreateACartErrors]

export type CreateACartResponses = {
  200: ResponseData & {
    data?: CartResponse
  }
}

export type CreateACartResponse =
  CreateACartResponses[keyof CreateACartResponses]

export type DeleteACartData = {
  body?: never
  path: {
    /**
     * The unique identifier of the cart that you want to delete.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}"
}

export type DeleteACartErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type DeleteACartError = DeleteACartErrors[keyof DeleteACartErrors]

export type DeleteACartResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteACartResponse =
  DeleteACartResponses[keyof DeleteACartResponses]

export type GetACartData = {
  body?: never
  path: {
    /**
     * The unique identifier for this cart that you created.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}"
}

export type GetACartErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type GetACartError = GetACartErrors[keyof GetACartErrors]

export type GetACartResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: CartResponse
  }
}

export type GetACartResponse = GetACartResponses[keyof GetACartResponses]

export type UpdateACartData = {
  body?: CartsRequest
  path: {
    /**
     * The unique identifier of a cart created by you.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}"
}

export type UpdateACartErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type UpdateACartError = UpdateACartErrors[keyof UpdateACartErrors]

export type UpdateACartResponses = {
  200: ResponseData & {
    data?: CartResponse
  }
}

export type UpdateACartResponse =
  UpdateACartResponses[keyof UpdateACartResponses]

export type DeleteAllCartItemsData = {
  body?: never
  path: {
    /**
     * The unique identifier of the cart created by you.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items"
}

export type DeleteAllCartItemsErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type DeleteAllCartItemsError =
  DeleteAllCartItemsErrors[keyof DeleteAllCartItemsErrors]

export type DeleteAllCartItemsResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteAllCartItemsResponse =
  DeleteAllCartItemsResponses[keyof DeleteAllCartItemsResponses]

export type GetCartItemsData = {
  body?: never
  path: {
    /**
     * The unique identifier of the cart that you created.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items"
}

export type GetCartItemsErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type GetCartItemsError = GetCartItemsErrors[keyof GetCartItemsErrors]

export type GetCartItemsResponses = {
  200: CartsResponse
}

export type GetCartItemsResponse =
  GetCartItemsResponses[keyof GetCartItemsResponses]

export type ManageCartsData = {
  body?:
    | CartItemsObjectRequest
    | CartMergeObjectRequest
    | CustomItemObject
    | ReOrderObjectRequest
    | PromotionItemObject
    | BulkAddItemsRequest
  path: {
    /**
     * The unique identifier of the cart that you created.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items"
}

export type ManageCartsErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type ManageCartsError = ManageCartsErrors[keyof ManageCartsErrors]

export type ManageCartsResponses = {
  200: CartsResponse
}

export type ManageCartsResponse =
  ManageCartsResponses[keyof ManageCartsResponses]

export type BulkUpdateItemsInCartData = {
  body?: BulkUpdateCartsItems
  path: {
    /**
     * The unique identifier of the cart that you created.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items"
}

export type BulkUpdateItemsInCartErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type BulkUpdateItemsInCartError =
  BulkUpdateItemsInCartErrors[keyof BulkUpdateItemsInCartErrors]

export type BulkUpdateItemsInCartResponses = {
  200: unknown
}

export type DeleteACartItemData = {
  body?: never
  path: {
    /**
     * The unique identifier of the cart created by you.
     */
    cartID: string
    /**
     * The unique identifier of the cart that you want to delete.
     */
    cartitemID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items/{cartitemID}"
}

export type DeleteACartItemErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type DeleteACartItemError =
  DeleteACartItemErrors[keyof DeleteACartItemErrors]

export type DeleteACartItemResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteACartItemResponse =
  DeleteACartItemResponses[keyof DeleteACartItemResponses]

export type UpdateACartItemData = {
  body?: UpdateCartsItems
  path: {
    /**
     * A unique identifier of the cart that you created.
     */
    cartID: string
    /**
     * A unique identifier of the cart item.
     */
    cartitemID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items/{cartitemID}"
}

export type UpdateACartItemErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type UpdateACartItemError =
  UpdateACartItemErrors[keyof UpdateACartItemErrors]

export type UpdateACartItemResponses = {
  200: CartsResponse
}

export type UpdateACartItemResponse =
  UpdateACartItemResponses[keyof UpdateACartItemResponses]

export type DeleteAccountCartAssociationData = {
  body?: CartsRelationshipsAccountsData
  headers?: {
    /**
     * An Account Management Authentication token to access a specific account's carts.
     */
    "EP-Account-Management-Authentication-Token"?: string
  }
  path: {
    /**
     * The ID for the cart created by the account.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/relationships/accounts"
}

export type DeleteAccountCartAssociationErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type DeleteAccountCartAssociationError =
  DeleteAccountCartAssociationErrors[keyof DeleteAccountCartAssociationErrors]

export type DeleteAccountCartAssociationResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteAccountCartAssociationResponse =
  DeleteAccountCartAssociationResponses[keyof DeleteAccountCartAssociationResponses]

export type CreateAccountCartAssociationData = {
  body?: CartsRelationshipsAccountsData
  headers?: {
    /**
     * An Account Management Authentication token to access a specific account's carts.
     */
    "EP-Account-Management-Authentication-Token"?: string
  }
  path: {
    /**
     * The ID for the cart created by the account. Ensure that you follow the guidelines for [Safe Characters](/guides/Getting-Started/safe-characters).
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/relationships/accounts"
}

export type CreateAccountCartAssociationErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type CreateAccountCartAssociationError =
  CreateAccountCartAssociationErrors[keyof CreateAccountCartAssociationErrors]

export type CreateAccountCartAssociationResponses = {
  /**
   * OK
   */
  200: CartsRelationshipsAccountsData
  /**
   * No Content is sent back in case the account has already been associated to the cart.
   */
  204: void
}

export type CreateAccountCartAssociationResponse =
  CreateAccountCartAssociationResponses[keyof CreateAccountCartAssociationResponses]

export type DeleteCustomerCartAssociationData = {
  body?: CartsRelationshipsCustomersData
  headers?: {
    /**
     * A customer token to access a specific customer's carts.
     */
    "x-moltin-customer-token"?: string
  }
  path: {
    /**
     * The ID for the cart created by the customer.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/relationships/customers"
}

export type DeleteCustomerCartAssociationErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type DeleteCustomerCartAssociationError =
  DeleteCustomerCartAssociationErrors[keyof DeleteCustomerCartAssociationErrors]

export type DeleteCustomerCartAssociationResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteCustomerCartAssociationResponse =
  DeleteCustomerCartAssociationResponses[keyof DeleteCustomerCartAssociationResponses]

export type CreateCustomerCartAssociationData = {
  body?: CartsRelationshipsCustomersData
  headers?: {
    /**
     * A customer token to access a specific customer's carts.
     */
    "x-moltin-customer-token"?: string
  }
  path: {
    /**
     * The ID for the cart created by the customer. Ensure that you follow the guidelines for [Safe Characters](/guides/Getting-Started/safe-characters).
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/relationships/customers"
}

export type CreateCustomerCartAssociationErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type CreateCustomerCartAssociationError =
  CreateCustomerCartAssociationErrors[keyof CreateCustomerCartAssociationErrors]

export type CreateCustomerCartAssociationResponses = {
  /**
   * OK
   */
  200: CartsRelationshipsCustomersData
}

export type CreateCustomerCartAssociationResponse =
  CreateCustomerCartAssociationResponses[keyof CreateCustomerCartAssociationResponses]

export type DeleteAPromotionViaPromotionCodeData = {
  body?: never
  path: {
    /**
     * Specifies the unique identifier of a cart created by you.
     */
    cartID: string
    /**
     * Specifies the promotion code to be deleted.
     */
    promoCode: string
  }
  query?: never
  url: "/v2/carts/{cartID}/discounts/{promoCode}"
}

export type DeleteAPromotionViaPromotionCodeErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type DeleteAPromotionViaPromotionCodeError =
  DeleteAPromotionViaPromotionCodeErrors[keyof DeleteAPromotionViaPromotionCodeErrors]

export type DeleteAPromotionViaPromotionCodeResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteAPromotionViaPromotionCodeResponse =
  DeleteAPromotionViaPromotionCodeResponses[keyof DeleteAPromotionViaPromotionCodeResponses]

export type AddTaxItemToCartData = {
  body?: ResponseData & {
    data?: CartsItemsTaxesObject
  }
  path: {
    /**
     * The unique identifier of the cart.
     */
    cartID: string
    /**
     * The unique identifier of the cart item.
     */
    cartitemID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items/{cartitemID}/taxes"
}

export type AddTaxItemToCartErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
  /**
   * Unauthorized
   */
  422: ResponseError
}

export type AddTaxItemToCartError =
  AddTaxItemToCartErrors[keyof AddTaxItemToCartErrors]

export type AddTaxItemToCartResponses = {
  200: ResponseData & {
    data?: CartsItemsTaxesObject
  }
}

export type AddTaxItemToCartResponse =
  AddTaxItemToCartResponses[keyof AddTaxItemToCartResponses]

export type BulkDeleteTaxItemsFromCartData = {
  body?: never
  path: {
    /**
     * The unique identifier of the cart.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/taxes"
}

export type BulkDeleteTaxItemsFromCartErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type BulkDeleteTaxItemsFromCartError =
  BulkDeleteTaxItemsFromCartErrors[keyof BulkDeleteTaxItemsFromCartErrors]

export type BulkDeleteTaxItemsFromCartResponses = {
  /**
   * No Content
   */
  204: void
}

export type BulkDeleteTaxItemsFromCartResponse =
  BulkDeleteTaxItemsFromCartResponses[keyof BulkDeleteTaxItemsFromCartResponses]

export type BulkAddTaxItemsToCartData = {
  body?: CartsBulkTaxes
  path: {
    /**
     * The unique identifier of the cart.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/taxes"
}

export type BulkAddTaxItemsToCartErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type BulkAddTaxItemsToCartError =
  BulkAddTaxItemsToCartErrors[keyof BulkAddTaxItemsToCartErrors]

export type BulkAddTaxItemsToCartResponses = {
  200: CartsBulkTaxes
}

export type BulkAddTaxItemsToCartResponse =
  BulkAddTaxItemsToCartResponses[keyof BulkAddTaxItemsToCartResponses]

export type DeleteATaxItemData = {
  body?: never
  path: {
    /**
     * The unique identifier of the cart.
     */
    cartID: string
    /**
     * The unique identifier of the cart item.
     */
    cartitemID: string
    /**
     * The unique identifier of the tax item.
     */
    taxitemID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items/{cartitemID}/taxes/{taxitemID}"
}

export type DeleteATaxItemErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type DeleteATaxItemError =
  DeleteATaxItemErrors[keyof DeleteATaxItemErrors]

export type DeleteATaxItemResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteATaxItemResponse =
  DeleteATaxItemResponses[keyof DeleteATaxItemResponses]

export type UpdateATaxItemData = {
  body?: ResponseData & {
    data?: CartsItemsTaxesObject
  }
  path: {
    /**
     * The unique identifier of the cart.
     */
    cartID: string
    /**
     * The unique identifier of the cart item.
     */
    cartitemID: string
    /**
     * The unique identifier of the tax item.
     */
    taxitemID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items/{cartitemID}/taxes/{taxitemID}"
}

export type UpdateATaxItemErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type UpdateATaxItemError =
  UpdateATaxItemErrors[keyof UpdateATaxItemErrors]

export type UpdateATaxItemResponses = {
  200: ResponseData & {
    data?: CartsItemsTaxesObject
  }
}

export type UpdateATaxItemResponse =
  UpdateATaxItemResponses[keyof UpdateATaxItemResponses]

export type BulkDeleteCustomDiscountsFromCartData = {
  body?: never
  path: {
    /**
     * Specifies the unique ID for the cart.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/custom-discounts"
}

export type BulkDeleteCustomDiscountsFromCartErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type BulkDeleteCustomDiscountsFromCartError =
  BulkDeleteCustomDiscountsFromCartErrors[keyof BulkDeleteCustomDiscountsFromCartErrors]

export type BulkDeleteCustomDiscountsFromCartResponses = {
  /**
   * No Content
   */
  204: void
}

export type BulkDeleteCustomDiscountsFromCartResponse =
  BulkDeleteCustomDiscountsFromCartResponses[keyof BulkDeleteCustomDiscountsFromCartResponses]

export type BulkAddCustomDiscountsToCartData = {
  body?: CartsBulkCustomDiscounts
  path: {
    /**
     * Specifies the system generated ID for the cart that the shopper created.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/custom-discounts"
}

export type BulkAddCustomDiscountsToCartErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type BulkAddCustomDiscountsToCartError =
  BulkAddCustomDiscountsToCartErrors[keyof BulkAddCustomDiscountsToCartErrors]

export type BulkAddCustomDiscountsToCartResponses = {
  200: CartsBulkCustomDiscountsResponse
}

export type BulkAddCustomDiscountsToCartResponse =
  BulkAddCustomDiscountsToCartResponses[keyof BulkAddCustomDiscountsToCartResponses]

export type DeleteCustomDiscountFromCartData = {
  body?: never
  path: {
    /**
     * Specifies the unique ID for the cart.
     */
    cartID: string
    /**
     * Specifies the ID for the custom discount to be deleted.
     */
    customdiscountID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/custom-discounts/{customdiscountID}"
}

export type DeleteCustomDiscountFromCartErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type DeleteCustomDiscountFromCartError =
  DeleteCustomDiscountFromCartErrors[keyof DeleteCustomDiscountFromCartErrors]

export type DeleteCustomDiscountFromCartResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteCustomDiscountFromCartResponse =
  DeleteCustomDiscountFromCartResponses[keyof DeleteCustomDiscountFromCartResponses]

export type UpdateCustomDiscountForCartData = {
  body?: ResponseData & {
    data?: CartsCustomDiscountsObject
  }
  path: {
    /**
     * Specifies the unique ID for the cart.
     */
    cartID: string
    /**
     * Specifies the ID for the custom discount to be updated.
     */
    customdiscountID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/custom-discounts/{customdiscountID}"
}

export type UpdateCustomDiscountForCartErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type UpdateCustomDiscountForCartError =
  UpdateCustomDiscountForCartErrors[keyof UpdateCustomDiscountForCartErrors]

export type UpdateCustomDiscountForCartResponses = {
  200: ResponseData & {
    data?: CartsCustomDiscountsResponse
  }
}

export type UpdateCustomDiscountForCartResponse =
  UpdateCustomDiscountForCartResponses[keyof UpdateCustomDiscountForCartResponses]

export type AddCustomDiscountToCartItemData = {
  body?: CartsCustomDiscountsObject
  path: {
    /**
     * Specifies the ID for the cart.
     */
    cartID: string
    /**
     * Specifies the unique identifier for the cart item.
     */
    cartitemID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items/{cartitemID}/custom-discounts"
}

export type AddCustomDiscountToCartItemErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type AddCustomDiscountToCartItemError =
  AddCustomDiscountToCartItemErrors[keyof AddCustomDiscountToCartItemErrors]

export type AddCustomDiscountToCartItemResponses = {
  200: ResponseData & {
    data?: CartsCustomDiscountsResponse
  }
}

export type AddCustomDiscountToCartItemResponse =
  AddCustomDiscountToCartItemResponses[keyof AddCustomDiscountToCartItemResponses]

export type DeleteCustomDiscountFromCartItemData = {
  body?: never
  path: {
    /**
     * Specifies the ID for the cart.
     */
    cartID: string
    /**
     * Specifies the ID for the cart item.
     */
    cartitemID: string
    /**
     * Specifies the ID for the custom discount to be deleted.
     */
    customdiscountID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items/{cartitemID}/custom-discounts/{customdiscountID}"
}

export type DeleteCustomDiscountFromCartItemErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type DeleteCustomDiscountFromCartItemError =
  DeleteCustomDiscountFromCartItemErrors[keyof DeleteCustomDiscountFromCartItemErrors]

export type DeleteCustomDiscountFromCartItemResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteCustomDiscountFromCartItemResponse =
  DeleteCustomDiscountFromCartItemResponses[keyof DeleteCustomDiscountFromCartItemResponses]

export type UpdateCustomDiscountForCartItemData = {
  body?: ResponseData & {
    data?: CartsCustomDiscountsObject
  }
  path: {
    /**
     * Specifies the ID for the cart.
     */
    cartID: string
    /**
     * Specifies the ID for the cart item.
     */
    cartitemID: string
    /**
     * Specifies the ID for the custom discount to be updated.
     */
    customdiscountID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items/{cartitemID}/custom-discounts/{customdiscountID}"
}

export type UpdateCustomDiscountForCartItemErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type UpdateCustomDiscountForCartItemError =
  UpdateCustomDiscountForCartItemErrors[keyof UpdateCustomDiscountForCartItemErrors]

export type UpdateCustomDiscountForCartItemResponses = {
  200: ResponseData & {
    data?: CartsCustomDiscountsResponse
  }
}

export type UpdateCustomDiscountForCartItemResponse =
  UpdateCustomDiscountForCartItemResponses[keyof UpdateCustomDiscountForCartItemResponses]

export type CreateCartPaymentIntentData = {
  body?: ElasticPathPaymentsPoweredByStripePayment
  path: {
    /**
     * The universally unique identifier of the cart for which you want to create a payment intent.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/payments"
}

export type CreateCartPaymentIntentErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type CreateCartPaymentIntentError =
  CreateCartPaymentIntentErrors[keyof CreateCartPaymentIntentErrors]

export type CreateCartPaymentIntentResponses = {
  /**
   * Payment Intent created successfully.
   */
  201: CartResponse
}

export type CreateCartPaymentIntentResponse =
  CreateCartPaymentIntentResponses[keyof CreateCartPaymentIntentResponses]

export type CheckoutApiData = {
  body?: CustomerCheckout | AccountCheckout
  headers?: {
    /**
     * An account management authentication token that identifies the authenticated account member.
     */
    "EP-Account-Management-Authentication-Token"?: string
  }
  path: {
    /**
     * The ID of the cart that you want to checkout.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/checkout"
}

export type CheckoutApiErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type CheckoutApiError = CheckoutApiErrors[keyof CheckoutApiErrors]

export type CheckoutApiResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: OrderResponse
  }
}

export type CheckoutApiResponse =
  CheckoutApiResponses[keyof CheckoutApiResponses]

export type GetCustomerOrdersData = {
  body?: never
  headers?: {
    /**
     * A customer token to access a specific customer's orders.
     */
    "x-moltin-customer-token"?: string
  }
  path?: never
  query?: {
    /**
     * The number of records to offset the results by.
     */
    "page[offset]"?: BigInt
    /**
     * The number of records per page. The maximum limit is 100.
     */
    "page[limit]"?: BigInt
    /**
     * A comma-separated list of resources to include. See [Characteristics of Include Parameter](/guides/Getting-Started/includes#characteristics-of-include-parameter).
     */
    include?: string
  }
  url: "/v2/orders"
}

export type GetCustomerOrdersErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type GetCustomerOrdersError =
  GetCustomerOrdersErrors[keyof GetCustomerOrdersErrors]

export type GetCustomerOrdersResponses = {
  200: ResponseData & {
    data?: Array<OrderResponse>
    links?: ResponsePageLinks
    meta?: ResponseMetaOrders
    included?: {
      items?: Array<OrderItemResponse>
    }
  }
}

export type GetCustomerOrdersResponse =
  GetCustomerOrdersResponses[keyof GetCustomerOrdersResponses]

export type GetAnOrderData = {
  body?: never
  path: {
    /**
     * The ID of the order.
     */
    orderID: string
  }
  query?: {
    /**
     * The number of records to offset the results by.
     */
    "page[offset]"?: BigInt
    /**
     * The number of records per page. The maximum limit is 100.
     */
    "page[limit]"?: BigInt
    /**
     * A comma-separated list of resources to include. See [Characteristics of Include Parameter](/guides/Getting-Started/includes#characteristics-of-include-parameter).
     */
    include?: string
  }
  url: "/v2/orders/{orderID}"
}

export type GetAnOrderErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type GetAnOrderError = GetAnOrderErrors[keyof GetAnOrderErrors]

export type GetAnOrderResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: OrderResponse
    included?: {
      items?: Array<OrderItemResponse>
    }
  }
}

export type GetAnOrderResponse = GetAnOrderResponses[keyof GetAnOrderResponses]

export type UpdateAnOrderData = {
  body?: OrdersUpdateRequest
  path: {
    /**
     * The unique identifier of the order.
     */
    orderID: string
  }
  query?: never
  url: "/v2/orders/{orderID}"
}

export type UpdateAnOrderErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type UpdateAnOrderError = UpdateAnOrderErrors[keyof UpdateAnOrderErrors]

export type UpdateAnOrderResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: OrderResponse
  }
}

export type UpdateAnOrderResponse =
  UpdateAnOrderResponses[keyof UpdateAnOrderResponses]

export type GetOrderItemsData = {
  body?: never
  path: {
    /**
     * The ID of the order.
     */
    orderID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/items"
}

export type GetOrderItemsErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type GetOrderItemsError = GetOrderItemsErrors[keyof GetOrderItemsErrors]

export type GetOrderItemsResponses = {
  200: ResponseData & {
    data?: Array<OrderItemResponse>
  }
}

export type GetOrderItemsResponse =
  GetOrderItemsResponses[keyof GetOrderItemsResponses]

export type AnonymizeOrdersData = {
  body?: OrdersAnonymizeRequest & unknown
  path?: never
  query?: never
  url: "/v2/orders/anonymize"
}

export type AnonymizeOrdersErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
  /**
   * Not Found
   */
  422: ResponseError
}

export type AnonymizeOrdersError =
  AnonymizeOrdersErrors[keyof AnonymizeOrdersErrors]

export type AnonymizeOrdersResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: OrderResponse
  }
}

export type AnonymizeOrdersResponse =
  AnonymizeOrdersResponses[keyof AnonymizeOrdersResponses]

export type PaymentSetupData = {
  body?: PaymentsRequest
  path: {
    /**
     * The Universally Unique Identifier (UUID) of the order you want to pay for.
     */
    orderID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/payments"
}

export type PaymentSetupErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type PaymentSetupError = PaymentSetupErrors[keyof PaymentSetupErrors]

export type PaymentSetupResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: TransactionResponse
  }
}

export type PaymentSetupResponse =
  PaymentSetupResponses[keyof PaymentSetupResponses]

export type ConfirmPaymentData = {
  body?: OrdersTransactionsConfirmRequest
  path: {
    /**
     * The unique identifier of the order.
     */
    orderID: string
    /**
     * The unique identifier of the transaction.
     */
    transactionID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/transactions/{transactionID}/confirm"
}

export type ConfirmPaymentErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type ConfirmPaymentError =
  ConfirmPaymentErrors[keyof ConfirmPaymentErrors]

export type ConfirmPaymentResponses = {
  200: ResponseData & {
    data?: TransactionResponse
  }
}

export type ConfirmPaymentResponse =
  ConfirmPaymentResponses[keyof ConfirmPaymentResponses]

export type CaptureATransactionData = {
  body?: OrdersTransactionsCaptureRequest
  path: {
    /**
     * The UUID of the order.
     */
    orderID: string
    /**
     * The UUID of the transaction to capture.
     */
    transactionID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/transactions/{transactionID}/capture"
}

export type CaptureATransactionErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type CaptureATransactionError =
  CaptureATransactionErrors[keyof CaptureATransactionErrors]

export type CaptureATransactionResponses = {
  200: ResponseData & {
    data?: TransactionResponse
  }
}

export type CaptureATransactionResponse =
  CaptureATransactionResponses[keyof CaptureATransactionResponses]

export type RefundATransactionData = {
  body?: OrdersTransactionsRefundRequest
  path: {
    /**
     * The UUID of the order.
     */
    orderID: string
    /**
     * The UUID of the transaction you want to refund.
     */
    transactionID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/transactions/{transactionID}/refund"
}

export type RefundATransactionErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type RefundATransactionError =
  RefundATransactionErrors[keyof RefundATransactionErrors]

export type RefundATransactionResponses = {
  200: ResponseData & {
    data?: TransactionResponse
  }
}

export type RefundATransactionResponse =
  RefundATransactionResponses[keyof RefundATransactionResponses]

export type GetOrderTransactionsData = {
  body?: never
  path: {
    /**
     * The unique identifier of the order.
     */
    orderID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/transactions"
}

export type GetOrderTransactionsErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type GetOrderTransactionsError =
  GetOrderTransactionsErrors[keyof GetOrderTransactionsErrors]

export type GetOrderTransactionsResponses = {
  200: ResponseData & {
    data?: Array<TransactionResponse>
  }
}

export type GetOrderTransactionsResponse =
  GetOrderTransactionsResponses[keyof GetOrderTransactionsResponses]

export type GetATransactionData = {
  body?: never
  path: {
    /**
     * The unique identifier of the order that you require transactions for.
     */
    orderID: string
    /**
     * The unique identifier of the transaction.
     */
    transactionID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/transactions/{transactionID}"
}

export type GetATransactionErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type GetATransactionError =
  GetATransactionErrors[keyof GetATransactionErrors]

export type GetATransactionResponses = {
  200: ResponseData & {
    data?: TransactionResponse
  }
}

export type GetATransactionResponse =
  GetATransactionResponses[keyof GetATransactionResponses]

export type CancelATransactionData = {
  body?: OrdersTransactionsCancelRequest
  path: {
    /**
     * The unique identifier of the order.
     */
    orderID: string
    /**
     * The unique identifier of the transaction to be canceled or voided.
     */
    transactionID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/transactions/{transactionID}/cancel"
}

export type CancelATransactionErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type CancelATransactionError =
  CancelATransactionErrors[keyof CancelATransactionErrors]

export type CancelATransactionResponses = {
  200: ResponseData & {
    data?: TransactionResponse
  }
}

export type CancelATransactionResponse =
  CancelATransactionResponses[keyof CancelATransactionResponses]
