// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from "@hey-api/client-fetch"
import type {
  GetCartsData,
  GetCartsResponse,
  GetCartsError,
  CreateACartData,
  CreateACartResponse,
  CreateACartError,
  DeleteACartData,
  DeleteACartResponse,
  DeleteACartError,
  GetACartData,
  GetACartResponse,
  GetACartError,
  UpdateACartData,
  UpdateACartResponse,
  UpdateACartError,
  DeleteAllCartItemsData,
  DeleteAllCartItemsResponse,
  DeleteAllCartItemsError,
  GetCartItemsData,
  GetCartItemsResponse,
  ManageCartsData,
  ManageCartsResponse,
  ManageCartsError,
  BulkUpdateItemsInCartData,
  BulkUpdateItemsInCartError,
  DeleteACartItemData,
  DeleteACartItemResponse,
  UpdateACartItemData,
  UpdateACartItemResponse,
  UpdateACartItemError,
  DeleteAccountCartAssociationData,
  DeleteAccountCartAssociationResponse,
  DeleteAccountCartAssociationError,
  CreateAccountCartAssociationData,
  CreateAccountCartAssociationResponse,
  CreateAccountCartAssociationError,
  DeleteCustomerCartAssociationData,
  DeleteCustomerCartAssociationResponse,
  DeleteCustomerCartAssociationError,
  CreateCustomerCartAssociationData,
  CreateCustomerCartAssociationResponse,
  CreateCustomerCartAssociationError,
  DeleteAPromotionViaPromotionCodeData,
  DeleteAPromotionViaPromotionCodeResponse,
  AddTaxItemToCartData,
  AddTaxItemToCartResponse,
  AddTaxItemToCartError,
  BulkDeleteTaxItemsFromCartData,
  BulkDeleteTaxItemsFromCartResponse,
  BulkAddTaxItemsToCartData,
  BulkAddTaxItemsToCartResponse,
  BulkAddTaxItemsToCartError,
  DeleteATaxItemData,
  DeleteATaxItemResponse,
  UpdateATaxItemData,
  UpdateATaxItemResponse,
  BulkDeleteCustomDiscountsFromCartData,
  BulkDeleteCustomDiscountsFromCartResponse,
  BulkAddCustomDiscountsToCartData,
  BulkAddCustomDiscountsToCartResponse,
  BulkAddCustomDiscountsToCartError,
  DeleteCustomDiscountFromCartData,
  DeleteCustomDiscountFromCartResponse,
  UpdateCustomDiscountForCartData,
  UpdateCustomDiscountForCartResponse,
  AddCustomDiscountToCartItemData,
  AddCustomDiscountToCartItemResponse,
  AddCustomDiscountToCartItemError,
  DeleteCustomDiscountFromCartItemData,
  DeleteCustomDiscountFromCartItemResponse,
  UpdateCustomDiscountForCartItemData,
  UpdateCustomDiscountForCartItemResponse,
  GetShippingGroupsData,
  GetShippingGroupsResponse,
  GetShippingGroupsError,
  CreateShippingGroupData,
  CreateShippingGroupResponse,
  CreateShippingGroupError,
  DeleteCartShippingGroupData,
  DeleteCartShippingGroupResponse,
  DeleteCartShippingGroupError,
  GetShippingGroupByIdData,
  GetShippingGroupByIdResponse,
  GetShippingGroupByIdError,
  UpdateShippingGroupData,
  UpdateShippingGroupResponse,
  UpdateShippingGroupError,
  CreateCartPaymentIntentData,
  CreateCartPaymentIntentResponse,
  UpdateCartPaymentIntentData,
  UpdateCartPaymentIntentResponse,
  CheckoutApiData,
  CheckoutApiResponse,
  CheckoutApiError,
  GetCustomerOrdersData,
  GetCustomerOrdersResponse,
  GetAnOrderData,
  GetAnOrderResponse,
  GetAnOrderError,
  UpdateAnOrderData,
  UpdateAnOrderResponse,
  UpdateAnOrderError,
  GetOrderItemsData,
  GetOrderItemsResponse,
  AnonymizeOrdersData,
  AnonymizeOrdersResponse,
  AnonymizeOrdersError,
  ConfirmOrderData,
  ConfirmOrderResponse,
  ConfirmOrderError,
  PaymentSetupData,
  PaymentSetupResponse,
  PaymentSetupError,
  ConfirmPaymentData,
  ConfirmPaymentResponse,
  ConfirmPaymentError,
  CaptureATransactionData,
  CaptureATransactionResponse,
  CaptureATransactionError,
  RefundATransactionData,
  RefundATransactionResponse,
  RefundATransactionError,
  GetOrderTransactionsData,
  GetOrderTransactionsResponse,
  GetOrderTransactionsError,
  GetATransactionData,
  GetATransactionResponse,
  CancelATransactionData,
  CancelATransactionResponse,
  CancelATransactionError,
  GetOrderShippingGroupsData,
  GetOrderShippingGroupsResponse,
  GetOrderShippingGroupsError,
  CreateOrderShippingGroupData,
  CreateOrderShippingGroupResponse,
  CreateOrderShippingGroupError,
  GetShippingGroupsByIdData,
  GetShippingGroupsByIdResponse,
  GetShippingGroupsByIdError,
  PutShippingGroupByIdData,
  PutShippingGroupByIdResponse,
  PutShippingGroupByIdError,
} from "./types.gen"

export const client = createClient(createConfig())

/**
 * Get Shopper Carts
 * You can retrieve the carts that are associated with an [account](/docs/api/carts/account-cart-associations) or a [customer](/docs/api/carts/customer-cart-associations).
 *
 * When a shopper retrieves their latest carts, the carts are sorted in descending order by the updated_date. For more information, see [Pagination](/guides/Getting-Started/pagination).
 *
 * :::note
 *
 * Requires an `implicit` token with only one of [Account Management Authentication Token](/docs/api/accounts/post-v-2-account-members-tokens) or [customer token](/docs/customer-management/customer-management-api/customer-tokens).
 *
 * :::
 *
 */
export const getCarts = <ThrowOnError extends boolean = false>(
  options?: Options<GetCartsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetCartsResponse,
    GetCartsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts",
  })
}

/**
 * Create a Cart
 *
 * Creates a cart. Call this endpoint each time a customer creates a cart.
 *
 * Each shopper can have multiple carts. Use the carts API to create a cart. The carts are distinct from one another. Shoppers can add different items to their carts. They can check out one of the carts without affecting the content or status of their other carts.
 *
 * After the shopper checks out the cart, the cart remains available to the shopper. The cart is persistent and stays with the shopper after it is used.
 *
 * You can create a cart to specify custom discounts. You can enable custom discounts when the `discount_settings.custom_discounts_enabled` field is set to `true`. Default is set from cart discount settings for the store. See [Update Cart Settings](/docs/api/settings/put-v-2-settings-cart).
 *
 * You can also create a cart when inventory checks are not performed until checkout by setting the `inventory_settings.defer_inventory_checks` field to `true`. Again the default is set from cart discount settings for the store. See [Update Cart Settings](/docs/api/settings/put-v-2-settings-cart).
 *
 * ### Preview Cart
 *
 * You can set a future date for your shopping cart and view the promotions that will be available during that time period. This feature enables you to validate your promotion settings and observe how they will be applied in the cart.
 *
 * :::caution
 * - Once the cart is in preview mode, you cannot revert it to a regular cart.
 * - Carts with `snapshot_date` are same as preview carts.
 * - You cannot checkout a cart that includes a `snapshot_date`.
 * - To delete a promotion preview cart, use [Delete a cart](/docs/api/carts/delete-a-cart) endpoint.
 * - The promotion preview cart has the same expiration time as a regular cart based on the store's [cart settings](/docs/api/settings/put-v-2-settings-cart).
 * - Preview cart interactions skip inventory checks and events, allowing users to preview future carts without impacting related external systems.
 * :::
 *
 * ### Custom Attributes
 * You can create custom attributes for the cart object to include additional information, enabling promotions that target specific cart attributes.
 * For example:
 * ```
 * "custom_attributes":{
 * "membership": {
 * "type": "string",
 * "value": "VIP"
 * }
 * }
 * ```
 * See [adding cart custom attributes in promotions builder](/docs/commerce-manager/promotions-builder/creating-a-promotion-in-promotions-builder#adding-cart-custom-attributes)
 *
 * Cart custom attributes remain with the corresponding cart for the extent of its lifecycle.  These custom attributes carry over to the resulting order objects on checkout and those on carts are deleted with their carts upon cart deletions.
 * Custom attributes can be updated or removed using a PUT request. To delete specific custom attributes, simply exclude the unwanted attribute objects from the PUT request body.
 *
 * ### Contact Email
 * You can attach an email to carts via the `contact.email` field.  These values help identify guest shopper carts and, in the case of promotions with maximum usage settings for guest and registered shopper, track per-shopper promotion usages.
 * See [Create Max Uses Per Shopper Promotion Codes](/docs/promotions-builder/promotions-builder-codes/create-max-use-limit-promotion-codes)
 *
 * For example:
 * ```
 * "contact": {
 * "email": "tester@email.com"
 * }
 * ```
 *
 * Please note, this value is not supported for registered shopper carts (that is, carts with accounts or customers associated), as these carts already have email values associated via the shopper details.  Accordingly, requests to add contact email information to registered shopper carts (and vice versa) result in error messages.
 *
 * ### Errors
 *
 * - `400 Bad Request` : This is returned when the submitted request does not adhere to the expected API contract for the endpoint.
 *
 * - For example, in the case of string fields, this error might indicate issues in the length or format of submitted strings. For more information about valid string fields, refer to Safe Characters section.
 * - In the case of preview carts (those with `snapshot_date`), an error is returned for invalid actions, such as removing the preview date, setting a preview date in the past, or attempting to checkout a cart with a `snapshot_date`.
 *
 */
export const createACart = <ThrowOnError extends boolean = false>(
  options?: Options<CreateACartData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateACartResponse,
    CreateACartError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts",
  })
}

/**
 * Delete a Cart
 * You can delete a cart, including the items, name, description, and remove all associations.
 *
 * ### Errors
 *
 * The following error message is received when you attempt to delete a cart that is associated with a customer. Before deletion, ensure that the cart is disassociated.
 *
 * ```json
 * message: {
 * errors: [
 * {
 * status: 400,
 * title: 'Last cart',
 * detail: 'This is the last cart associated with a customer and it cannot be deleted, try disassociating instead'
 * }
 * ]
 * }
 * ````
 *
 */
export const deleteACart = <ThrowOnError extends boolean = false>(
  options: Options<DeleteACartData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteACartResponse,
    DeleteACartError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}",
  })
}

/**
 * Get a Cart
 * Use this endpoint to retrieve a specific cart. If a cart ID does not exist, a new cart will be automatically created. If the cart is associated with shipping groups, calling this endpoint displays the associated shipping group IDs in the `relationships` section.
 *
 * You can easily get a new or existing cart by providing the unique cart reference in the request. If the cart is associated with shipping groups, calling this endpoint displays the associated shipping group IDs in the relationships section.
 *
 * :::note
 *
 * - The default cart name is Cart. However, you can update the cart name as required. Ensure that the string length of the name is greater than or equal to one. Follow the safe character guidelines for name and description naming. For more information about cart ID naming requirements, see the [Safe Characters](/guides/Getting-Started/safe-characters) section.
 * - Outside of the JS-SDK, we don't handle creating cart references. You need to create your own.
 *
 * :::
 *
 * :::caution
 *
 * An empty cart is returned for any carts that don't currently exist. For more information about the cart items object, see [Get Cart Items](/docs/api/carts/get-cart-items).
 *
 * :::
 *
 * ### Query parameters
 *
 *
 * | Name      | Required | Type     | Description                                |
 * |:----------|:---------|:---------|:-------------------------------------------|
 * | `include` | Optional | `string` | Comma-delimited string of entities that can be included. The information included are `items`,`tax_items`, `custom_discounts`, or `promotions`. |
 *
 */
export const getACart = <ThrowOnError extends boolean = false>(
  options: Options<GetACartData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetACartResponse,
    GetACartError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}",
  })
}

/**
 * Update a Cart
 * Updates cart properties for the specified cartID.
 *
 * You can update a cart to specify custom discounts. You can enable custom discounts when the `discount_settings.custom_discounts_enabled` field is set to `true`. Default is set from cart discount settings for the store. See [Cart Settings](/docs/api/settings/put-v-2-settings-cart).
 *
 * You can also create a cart when inventory checks are not performed until checkout by setting the `inventory_settings.defer_inventory_checks` field to `true`. Again the default is set from cart discount settings for the store. See [Update Cart Settings](/docs/api/settings/put-v-2-settings-cart).
 *
 */
export const updateACart = <ThrowOnError extends boolean = false>(
  options: Options<UpdateACartData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateACartResponse,
    UpdateACartError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}",
  })
}

/**
 * Delete all Cart Items
 * A shopper can clean up their cart, deleting custom items, promotions, and so on, while the empty cart remains available. The cart id, name, description, and any account or customer associations persist. The shopper can continue to add items to the cart.
 *
 */
export const deleteAllCartItems = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAllCartItemsData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteAllCartItemsResponse,
    DeleteAllCartItemsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/items",
  })
}

/**
 * Get Cart Items
 *
 * Use this endpoint to retrieve cart items. If the cart is associated with shipping groups, calling this endpoint displays the associated shipping group IDs.
 *
 * You can use this endpoint to retrieve the breakdown of cart items by promotion ID. For example, if you have Promotions Standard item discount with code *sale2024*, Rule Promotions item discount with code *sale2024*, and Rule Promotions cart discount with code *sale2024*, the `discounts.constituents` field in the response example will show the breakdown of the same promotion code used in both Promotions Standard and Rule Promotions.
 *
 * ```json
 * "data": [
 * {
 * "id": "98de010d-dd10-4fa5-a070-0b9bcdc72974",
 * "type": "cart_item",
 * "product_id": "5a4662d2-9a2b-4f6e-a215-2970db914b0c",
 * "name": "sku1",
 * "description": "sku1",
 * "sku": "sku1",
 * "slug": "sku1",
 * "image": {
 * "mime_type": "",
 * "file_name": "",
 * "href": ""
 * },
 * "quantity": 1,
 * "manage_stock": false,
 * "unit_price": {
 * "amount": 10000,
 * "currency": "USD",
 * "includes_tax": false
 * },
 * "value": {
 * "amount": 10000,
 * "currency": "USD",
 * "includes_tax": false
 * },
 * "discounts": [
 * {
 * "amount": {
 * "amount": -2000,
 * "currency": "USD",
 * "includes_tax": false
 * },
 * "code": "sale2024",
 * "id": "e4d929d5-f471-4317-9a86-a84a6c572b44",
 * "promotion_source": "rule-promotion",
 * "is_cart_discount": true
 * },
 * {
 * "amount": {
 * "amount": -1000,
 * "currency": "USD",
 * "includes_tax": false
 * },
 * "code": "sale2024",
 * "id": "de19a043-a6da-4bde-b896-d17e16b77e25",
 * "promotion_source": "rule-promotion"
 * },
 * {
 * "amount": {
 * "amount": -1000,
 * "currency": "USD",
 * "includes_tax": false
 * },
 * "code": "sale2024",
 * "id": "509295ee-2971-45b6-801e-95df09756989"
 * },
 * {
 * "amount": {
 * "amount": -1000,
 * "currency": "USD",
 * "includes_tax": false
 * },
 * "code": "sale2024",
 * "id": "ca79e606-7ecd-41ac-9478-af4c8c28c546",
 * "promotion_source": "rule-promotion",
 * "is_cart_discount": true
 * }
 * ],
 * "links": {
 * "product": "https://useast.api.elasticpath.com/v2/products/5a4662d2-9a2b-4f6e-a215-2970db914b0c"
 * },
 * "meta": {
 * "display_price": {
 * "with_tax": {
 * "unit": {
 * "amount": 5000,
 * "currency": "USD",
 * "formatted": "$50.00"
 * },
 * "value": {
 * "amount": 5000,
 * "currency": "USD",
 * "formatted": "$50.00"
 * }
 * },
 * "without_tax": {
 * "unit": {
 * "amount": 5000,
 * "currency": "USD",
 * "formatted": "$50.00"
 * },
 * "value": {
 * "amount": 5000,
 * "currency": "USD",
 * "formatted": "$50.00"
 * }
 * },
 * "tax": {
 * "unit": {
 * "amount": 0,
 * "currency": "USD",
 * "formatted": "$0.00"
 * },
 * "value": {
 * "amount": 0,
 * "currency": "USD",
 * "formatted": "$0.00"
 * }
 * },
 * "discount": {
 * "unit": {
 * "amount": -5000,
 * "currency": "USD",
 * "formatted": "-$50.00"
 * },
 * "value": {
 * "amount": -5000,
 * "currency": "USD",
 * "formatted": "-$50.00"
 * }
 * },
 * "without_discount": {
 * "unit": {
 * "amount": 10000,
 * "currency": "USD",
 * "formatted": "$100.00"
 * },
 * "value": {
 * "amount": 10000,
 * "currency": "USD",
 * "formatted": "$100.00"
 * }
 * },
 * "discounts": {
 * "sale2024": {
 * "amount": -5000,
 * "currency": "USD",
 * "formatted": "-$50.00",
 * "constituents": {
 * "509295ee-2971-45b6-801e-95df09756989": {
 * "amount": -1000,
 * "currency": "USD",
 * "formatted": "-$10.00"
 * },
 * "ca79e606-7ecd-41ac-9478-af4c8c28c546": {
 * "amount": -1000,
 * "currency": "USD",
 * "formatted": "-$10.00"
 * },
 * "de19a043-a6da-4bde-b896-d17e16b77e25": {
 * "amount": -1000,
 * "currency": "USD",
 * "formatted": "-$10.00"
 * },
 * "e4d929d5-f471-4317-9a86-a84a6c572b44": {
 * "amount": -2000,
 * "currency": "USD",
 * "formatted": "-$20.00"
 * }
 * }
 * }
 * }
 * },
 * "timestamps": {
 * "created_at": "2024-05-24T18:00:58Z",
 * "updated_at": "2024-05-24T18:00:58Z"
 * }
 * },
 * "catalog_id": "09b9359f-897f-407f-89a2-702e167fe781",
 * "catalog_source": "pim"
 * }
 * ```
 *
 */
export const getCartItems = <ThrowOnError extends boolean = false>(
  options: Options<GetCartItemsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetCartItemsResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/items",
  })
}

/**
 * Add Items to Cart
 *
 * ### Add Product to Cart
 *
 * Adding a Product to Cart is the most common Cart action. If you want to add any custom products or promotions, you need to do that as a separate action.
 *
 * #### Dynamic Bundles
 *
 * A bundle is a purchasable product that is composed of a combination of two or more products that you want to sell together. You can create multiple components within a bundle. Each component can have one or more options. Each option is a product and a quantity. You can configure minimum and/or maximum values for the number of product options in a component that your shoppers can select. For example, you can enable a shopper to select 1 or more product options from a list of 10. These are called [dynamic bundles](/docs/api/pxm/products/products#dynamic-bundles).
 *
 * Your dynamic bundles are displayed in your published catalogs.
 *
 * 1. Use the configure a shopper endpoint to allow shoppers to make their selections from a bundle.
 * 2. In the response of the configure a shopper, the `bundle_configuration` object contains the bundle selections a shopper has made.
 * 3. In the add a product to cart request, use the `bundle_configuration` object to add the customers selections to a cart.
 *
 * ```json
 * "bundle_configuration": {
 * "selected_options": {
 * "games": {
 * "d7b79eb8-19d8-45ea-86ed-2324a604dd9c": 1
 * },
 * "toys": {
 * "0192ccdd-6d33-4898-87d7-c4d87f2bf8ea": 1,
 * "1aea6f97-f0d9-452c-b3c1-7fb5629ead82": 1
 * }
 * }
 * }
 * ```
 *
 * When a cart is checked out, the options a shopper selected are added to the order. See [order items](/docs/api/carts/get-order-items).
 *
 * #### Personalized Products
 *
 * You can allow shoppers to personalize their goods by adding custom text inputs to products directly. This feature is particularly useful for customizable items, such as personalized T-shirts or greeting cards. You can use this functionality by leveraging the `custom_inputs` attribute, and defining the details and validation rules for the custom text.
 *
 * First, you must configure a `custom_inputs` attribute when creating a new product or updating an existing product. Once you have defined your custom inputs on a product, you must configure the custom inputs in your orders.
 *
 * For example, you may sell T-shirts that can have personalized text on the front and back of the shirt.
 *
 * ```json
 * {
 * "data": {
 * "type": "product",
 * "attributes": {
 * "custom_inputs": {
 * "front": {
 * "name": "T-Shirt Front",
 * "validation_rules": [
 * {
 * "type": "string",
 * "options": {
 * "max_length": 50
 * }
 * }
 * ],
 * "required": false
 * },
 * "back": {
 * "name": "T-Shirt Back",
 * "validation_rules": [
 * {
 * "type": "string",
 * "options": {
 * "max_length": 50
 * }
 * }
 * ],
 * "required": false
 * }
 * }
 * }
 * }
 * }
 * ```
 *
 * If the same product has different `custom_inputs` attributes, then these are added as separate items in a cart.
 *
 * The `custom_inputs` attribute is stored in the cart item and the text for `custom_input` must not exceed 255 characters in length. When a cart is checked out, the `custom_inputs` attribute becomes part of the order.
 *
 * #### Limitations on Usage of `custom_inputs` with Specific Promotion Types
 *
 * When you add products to a cart with `custom_inputs`, there are certain limitations on usage of the `custom_inputs` with the following promotion types:
 *
 * - For [Free Gift Promotions](/docs/api/promotions/create-a-promotion), you can add `custom_inputs` to gift items.
 * - For [Fixed Bundle Discount Promotions](/docs/api/promotions/create-a-promotion), the promotion applies as long as the cart contains the bundle SKUs even when there are different `custom_inputs`.
 * - For [X for Y Discount Promotion and X for amount discount promotion](/docs/api/promotions/create-a-promotion), the promotion applies when there are two SKUs with the same `custom_inputs`. The promotion does not apply when there are different `custom_inputs` and the SKUs are in different line items.
 *
 * #### Stock locations
 *
 * When adding to a cart it is possible to specify which [stock location](/docs/api/pxm/inventory_mli/inventories-introduction?#multi-location-inventories) should be used for tracking inventory for that product by specifying its slug in `location`. This might represent the warehouse a product is shipped from or the store holding the stock in a Buy Online Pick Up In Store scenario.
 *
 * Each line item is restricted to a single stock location. If the same product is added with a different location then the most recently-specified location will be used for the total quantity of that line item.
 *
 * :::note
 *
 * - Any requests to add a product to cart returns the collection of cart items.
 * - [Tax items](/docs/api/carts/tax-items) may optionally be added with the product. Only administrators with [client_credentials access tokens](/docs/api/authentication/create-an-access-token) are able to do this. If included, they replace any existing taxes on the product.
 * - The cart currency is set when the first item is added to the cart.
 * - The product being added to the cart requires a price in the same currency as the other items in the cart. The API returns a 400 error if a price is not defined in the correct currency.
 * - A cart can contain a maximum of 100 unique items. Items include products, custom items, tax items, and promotions.
 * - There are a number of actions that happen to your inventory when checking out and paying for an order. For more information, see the [Inventory](/docs/api/pxm/inventory/inventories-introduction) documentation.
 *
 * :::
 *
 * ### Including Resources
 *
 * When you make an `Add Product to Cart` request to the catalog-view service, you can obtain details of the component products. If you include the optional parameter `include=component_products` in the request, the response will include details for each component product.
 *
 * When a bundle with selected component products is added to a cart, the cart displays both the bundle pricing and component product IDs.
 *
 * The response example is returned with a new field called `component_products` under `bundle_configuration`, which is a list of component products that the user has selected for dynamic bundles.
 *
 * | Parameter               | Required     | Description        |
 * |:------------------------|:-------------|:-------------------|
 * | `component_products`    | Optional     | The component product data and key attribute data, such as SKU or slug, to return for component products in a product bundle. |
 * | `main_image`            | Optional     | The main images associated with a product. |
 * | `files`                 | Optional     | Any files associated with a product. |
 *
 * ```json
 * "bundle_configuration": {
 * "selected_options": {
 * "mixed-shirts": {
 * "16a6cc14-6ebb-4156-9973-e6a0f92f5731": 3,
 * "55037cc5-f382-4039-95c6-1e04ac0351d3": 2,
 * "standard-shirts"
 * "70f1c9d2-c580-4839-bd6c-a0a9b91d5159": 5
 * }
 * },
 * "component_products": [
 * {
 * "id": "16a6cc14-6ebb-4156-9973-e6a0f92f5731",
 * "type": "product",
 * "attributes": {
 * "name": "Red T-shirt",
 * "description": "Standard red t-shirt.",
 * "slug": "red-t-shirt-slug",
 * "sku": "red-t-shirt-sku",
 * "status": "live",
 * "commodity_type": "physical"
 * },
 * "meta": {
 * "display_price": {
 * "without_tax": {
 * "amount": 500,
 * "currency": "USD",
 * "formatted": "$5.00"
 * }
 * }
 * }
 * },
 * {
 * "id": "55037cc5-f382-4039-95c6-1e04ac0351d3",
 * "type": "product",
 * "attributes": {
 * "name": "Blue T-shirt",
 * "description": "Standard blue t-shirt.",
 * "slug": "blue-t-shirt-slug",
 * "sku": "blue-t-shirt-sku",
 * "status": "live",
 * "commodity_type": "physical"
 * },
 * "meta": {
 * "display_price": {
 * "without_tax": {
 * "amount": 500,
 * "currency": "USD",
 * "formatted": "$5.00"
 * }
 * }
 * }
 * },
 * {
 * "id": "70f1c9d2-c580-4839-bd6c-a0a9b91d5159",
 * "type": "product",
 * "attributes": {
 * "name": "White T-shirt",
 * "description": "Standard white t-shirt.",
 * "slug": "white-t-shirt-slug",
 * "sku": "white-t-shirt-sku",
 * "status": "live",
 * "commodity_type": "physical"
 * },
 * "meta": {
 * "display_price": {
 * "without_tax": {
 * "amount": 500,
 * "currency": "USD",
 * "formatted": "$5.00"
 * }
 * }
 * }
 * }
 * ]
 * }
 * ```
 *
 * See [Including Resources](https://elasticpath.dev/guides/Getting-Started/includes).
 *
 * ### Add Subscription to Cart
 *
 * To add a subscription to your cart, you need to provide the ID of the subscription offering, and the ID of the pricing option and plan within that offering that you want to subscribe to.
 *
 * ```json
 * {
 * {
 * "data": {
 * "id": "5b9be99f-1c94-4ddd-9718-81adab0cc3e0",
 * "type": "subscription_item",
 * "quantity": 1,
 * "subscription_configuration": {
 * "plan": "dfa31307-748c-4369-8571-709f924a0807",
 * "pricing_option": "40010dde-2f38-489b-8b3f-14a13cbfb431"
 * }
 * }
 * }
 * ```
 *
 * The price of the subscription item in the cart reflects the cost of the subscription's initial billing period. Once the cart has been checked out and the order paid for, the subscription will be automatically created in the subscriptions service.
 *
 * ### Add Custom Item to Cart
 *
 * You can add a custom item to the cart when you don't manage things like shipping, taxes and inventory in Commerce.
 *
 * For [Shipping Groups](/docs/ship-groups/shipping-groups/index), once you have created a [cart shipping group](/docs/ship-groups/shipping-groups/shipping-groups-api/create-cart-shipping-group), you need to link it to the cart items. This is important, because it is necessary to associate items with shipping groups in order to include shipping groups in the corresponding cart, order, and totals.
 *
 * :::note
 *
 * - Custom Cart Items are available when using [implicit access tokens](/docs/api/authentication/create-an-access-token). Ensure that you always check each order has the correct details for each item, most importantly, price.
 *
 * :::
 *
 * ### Add Promotion to Cart
 *
 * You can use the Promotions API to apply discounts to your cart as a special cart item type. Any requests to add a product to cart will return a collection of cart items.
 *
 * There are certain limitations on usage of the `custom_inputs` attribute with some promotion types. See [Limitations on Usage of `custom_inputs` with Specific Promotion Types](/docs/api/carts/manage-carts#limitations-on-usage-of-custom_inputs-with-specific-promotion-types).
 *
 * To remove promotion from the cart via the promotion code, see [Delete Promotion Code from Cart](/docs/api/carts/delete-a-promotion-via-promotion-code).
 *
 * ### Re-order
 *
 * From a shopper's order history, they can add the items from a previous order into their carts. Shoppers can add items regardless of past order status, such as incomplete or not paid. For more information, see [Orders](/docs/api/carts/orders).
 *
 * :::note
 * - Any requests to add an item to cart return a collection of [cart items](/docs/api/carts/cart-items).
 * - A cart can contain a maximum of 100 unique items. Items include products, custom items, and promotions.
 * - When a shopper creates a cart and re-orders items from an order with properties such as custom attributes, custom discounts, and payment intent ID, these properties will remain unchanged in the original cart.
 * - Custom items do not exist in catalogs, and therefore cannot be reordered.
 * :::
 *
 * ### Merging Carts
 *
 * A shopper can have multiple carts, and the system may automatically merge items from an anonymous cart into the shopper's registered cart when they sign in. For example, if a shopper has an existing cart with items `A`, `B` and `C`, and later adds items `D` and `E` while not signed in, the system can merge these carts when the shopper signs in. After the carts merge, the cart contains items `A`, `B`, `C`, `D` and `E`.
 *
 * If any items are duplicated from the anonymous cart to the registered cart, their quantities are incremented accordingly. For example, if a shopper's existing cart with items `A`, `B` and `C`, and they later add two more `A` items and one `B` item while not signed in, the system will merge the carts when the shopper signs in. The existing cart will now contain three `A` items, two `B` items, and one `C` item.
 *
 * :::note
 *
 * When the system merges items from one cart into another cart, properties such as custom attributes, custom discounts, and payment intent ID will remain unchanged in the original cart.
 *
 * :::
 *
 * ### Best Practices
 *
 * We recommend to include a unique `sku` code within the request body while adding custom items to carts. If the same `sku` is used for multiple products, they are merged into a single line item.
 *
 * For example, if a cart consists of the following items:
 *
 * - `product-1` with quantity 1 and sku code as `sku-1`
 * - `product-2` with quantity 1 and sku code as `sku-1`
 * - `product-3` with quantity 1 and sku code as `sku-2`.
 *
 * The following response is returned where it combines all products with the same sku codes into a single line item, while products with a unique sku codes are represented as separate items:
 *
 * ```json
 * {
 * "data": [
 * {
 * "id": "c58760f4-8889-4719-b34d-be1f1d11ae59",
 * "type": "custom_item",
 * "name": "product-1",
 * "description": "My first custom item!",
 * "sku": "sku-1",
 * "slug": "",
 * "image": {
 * "mime_type": "",
 * "file_name": "",
 * "href": ""
 * },
 * "quantity": 2,
 * "manage_stock": false,
 * "unit_price": {
 * "amount": 20000,
 * "currency": "USD",
 * "includes_tax": true
 * },
 * "value": {
 * "amount": 40000,
 * "currency": "USD",
 * "includes_tax": true
 * },
 * "links": {},
 * "meta": {
 * "display_price": {
 * "with_tax": {
 * "unit": {
 * "amount": 20000,
 * "currency": "USD",
 * "formatted": "$200.00"
 * },
 * "value": {
 * "amount": 40000,
 * "currency": "USD",
 * "formatted": "$400.00"
 * }
 * },
 * "without_tax": {
 * "unit": {
 * "amount": 20000,
 * "currency": "USD",
 * "formatted": "$200.00"
 * },
 * "value": {
 * "amount": 40000,
 * "currency": "USD",
 * "formatted": "$400.00"
 * }
 * },
 * "tax": {
 * "unit": {
 * "amount": 0,
 * "currency": "USD",
 * "formatted": "$0.00"
 * },
 * "value": {
 * "amount": 0,
 * "currency": "USD",
 * "formatted": "$0.00"
 * }
 * },
 * "discount": {
 * "unit": {
 * "amount": 0,
 * "currency": "USD",
 * "formatted": "$0.00"
 * },
 * "value": {
 * "amount": 0,
 * "currency": "USD",
 * "formatted": "$0.00"
 * }
 * },
 * "without_discount": {
 * "unit": {
 * "amount": 20000,
 * "currency": "USD",
 * "formatted": "$200.00"
 * },
 * "value": {
 * "amount": 40000,
 * "currency": "USD",
 * "formatted": "$400.00"
 * }
 * }
 * },
 * "timestamps": {
 * "created_at": "2023-05-02T16:28:11Z",
 * "updated_at": "2023-05-02T16:28:18Z"
 * }
 * }
 * ]
 * ```
 *
 */
export const manageCarts = <ThrowOnError extends boolean = false>(
  options: Options<ManageCartsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ManageCartsResponse,
    ManageCartsError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/items",
  })
}

/**
 * Bulk Update Items in Cart
 * The bulk update feature allows shoppers to update an array of items to their cart in one action, rather than updating each item one at a time. Shoppers can update quantity and shipping group details in bulk requests. This minimizes the time for shoppers while updating items to their cart. Shoppers can even update multiple items with the same or different shipping groups to their cart.
 *
 * When you update multiple items that qualify for free gifts in the cart, the corresponding free gifts for all eligible products are also automatically updated in the cart.
 *
 */
export const bulkUpdateItemsInCart = <ThrowOnError extends boolean = false>(
  options: Options<BulkUpdateItemsInCartData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    unknown,
    BulkUpdateItemsInCartError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/items",
  })
}

/**
 * Delete a Cart Item
 * Use this endpoint to delete a cart item.
 */
export const deleteACartItem = <ThrowOnError extends boolean = false>(
  options: Options<DeleteACartItemData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteACartItemResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/items/{cartitemID}",
  })
}

/**
 * Update a Cart Item
 * You can easily update a cart item. A successful update returns the cart items.
 */
export const updateACartItem = <ThrowOnError extends boolean = false>(
  options: Options<UpdateACartItemData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateACartItemResponse,
    UpdateACartItemError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/items/{cartitemID}",
  })
}

/**
 * Delete Account Cart Association
 * You can delete an association between an account and a cart.
 */
export const deleteAccountCartAssociation = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteAccountCartAssociationData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteAccountCartAssociationResponse,
    DeleteAccountCartAssociationError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/relationships/accounts",
  })
}

/**
 * Create an Account Cart Association
 * You can create associations between an account and one or more carts. After cart associations exist for an account, the account can access those carts across any device.
 */
export const createAccountCartAssociation = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateAccountCartAssociationData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateAccountCartAssociationResponse,
    CreateAccountCartAssociationError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/relationships/accounts",
  })
}

/**
 * Delete Customer Cart Association
 * You can delete an association between a customer and a cart.
 */
export const deleteCustomerCartAssociation = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteCustomerCartAssociationData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteCustomerCartAssociationResponse,
    DeleteCustomerCartAssociationError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/relationships/customers",
  })
}

/**
 * Create a Customer Cart Association
 * You can create associations between a customer and one or more carts. After cart associations exist for a customer, the customer can access those carts across any device.
 */
export const createCustomerCartAssociation = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateCustomerCartAssociationData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateCustomerCartAssociationResponse,
    CreateCustomerCartAssociationError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/relationships/customers",
  })
}

/**
 * Delete a Promotion via Promotion Code
 * You can remove promotion code from a cart if it was applied manually. This endpoint does not work if the promotion is applied automatically.
 */
export const deleteAPromotionViaPromotionCode = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteAPromotionViaPromotionCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteAPromotionViaPromotionCodeResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/discounts/{promoCode}",
  })
}

/**
 * Add Tax Item to Cart
 *
 * Use this endpoint to add a tax item to a cart.
 *
 * :::note
 *
 * There is a soft limit of 5 unique tax items per cart item at any one time.
 *
 * :::
 *
 */
export const addTaxItemToCart = <ThrowOnError extends boolean = false>(
  options: Options<AddTaxItemToCartData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AddTaxItemToCartResponse,
    AddTaxItemToCartError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/items/{cartitemID}/taxes",
  })
}

/**
 * Bulk Delete Tax Items from Cart
 * Use this endpoint to bulk delete tax items from cart.
 */
export const bulkDeleteTaxItemsFromCart = <
  ThrowOnError extends boolean = false,
>(
  options: Options<BulkDeleteTaxItemsFromCartData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    BulkDeleteTaxItemsFromCartResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/taxes",
  })
}

/**
 * Bulk Add Tax Items to Cart
 * :::note
 *
 * A cart item can only have a maximum of five tax items.
 *
 * :::
 *
 * ### Errors
 *
 * `422 Unprocessable Entity`
 *
 * In this example, when `options.add_all_or_nothing` is set to `true` and if one of cart items is not found or has reached its maximum tax item limit, the following error response is returned:
 *
 * ```json
 * {
 * "status": 422,
 * "title": "Add all or nothing.",
 * "detail": "Add all or nothing set to (true). Could not bulk add tax items to cart."
 * }
 *
 * ```
 *
 * In this example, if you add more than five tax items to the same cart item, the following error response is returned:
 *
 * ```json
 * {
 * "status": 422,
 * "title": "Tax item not added to cart item.",
 * "detail": "Cannot exceed tax item limit of (5) on cart item.",
 * "meta": {
 * "id": "f88e6370-cb35-40b2-a998-c759f31dec0a"
 * }
 * }
 * ```
 *
 * `404`
 *
 * In this example, if there is a mismatch between `cart_item`/`custom_item` and the `relationships.item.data.type` specified in the bulk add tax item, the following error response is returned:
 *
 * ```json
 * {
 * "data": [],
 * "errors": [
 * {
 * "status": 404,
 * "title": "Tax item not added to cart item.",
 * "detail": "Mismatch between bulk tax item type(cart_item) and cart item type(custom_item).",
 * "meta": {
 * "id": "56aab5d1-1dd4-45ed-88ed-4d0cc396b62d"
 * }
 * },
 * {
 * "status": 404,
 * "title": "Tax item not added to cart item.",
 * "detail": "Mismatch between bulk tax item type(cart_item) and cart item type(custom_item).",
 * "meta": {
 * "id": "56aab5d1-1dd4-45ed-88ed-4d0cc396b62d"
 * }
 * }
 * ]
 * }
 * ```
 *
 */
export const bulkAddTaxItemsToCart = <ThrowOnError extends boolean = false>(
  options: Options<BulkAddTaxItemsToCartData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    BulkAddTaxItemsToCartResponse,
    BulkAddTaxItemsToCartError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/taxes",
  })
}

/**
 * Delete a Tax Item
 * Use this endpoint to delete a tax item.
 */
export const deleteATaxItem = <ThrowOnError extends boolean = false>(
  options: Options<DeleteATaxItemData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteATaxItemResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/items/{cartitemID}/taxes/{taxitemID}",
  })
}

/**
 * Update a Tax Item
 * Use this endpoint to update a tax item. To change tax value from `rate` to `amount`, set `rate` to `null`, then set `amount` value and vice versa.
 */
export const updateATaxItem = <ThrowOnError extends boolean = false>(
  options: Options<UpdateATaxItemData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateATaxItemResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/items/{cartitemID}/taxes/{taxitemID}",
  })
}

/**
 * Bulk Delete Custom Discounts From Cart
 * Use this endpoint to bulk delete custom discounts from cart.
 */
export const bulkDeleteCustomDiscountsFromCart = <
  ThrowOnError extends boolean = false,
>(
  options: Options<BulkDeleteCustomDiscountsFromCartData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    BulkDeleteCustomDiscountsFromCartResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/custom-discounts",
  })
}

/**
 * Bulk Add Custom Discounts to Cart
 * The default value for custom discounts on both the cart and cart items is set to 5 if this parameter is not configured in the store. To verify the custom discount limit value, call [Get all settings](/docs/api/settings/get-v-2-settings) endpoint.
 *
 * To increase the custom discount value, contact [Elastic Path Support team](https://support.elasticpath.com/hc/en-us).
 *
 */
export const bulkAddCustomDiscountsToCart = <
  ThrowOnError extends boolean = false,
>(
  options: Options<BulkAddCustomDiscountsToCartData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    BulkAddCustomDiscountsToCartResponse,
    BulkAddCustomDiscountsToCartError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/custom-discounts",
  })
}

/**
 * Delete Custom Discount From Cart
 * Use this endpoint to delete custom discount from cart.
 */
export const deleteCustomDiscountFromCart = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteCustomDiscountFromCartData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteCustomDiscountFromCartResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/custom-discounts/{customdiscountID}",
  })
}

/**
 * Update Custom Discount For Cart
 * Use this endpoint to update a custom discount in your cart.
 */
export const updateCustomDiscountForCart = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateCustomDiscountForCartData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateCustomDiscountForCartResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/custom-discounts/{customdiscountID}",
  })
}

/**
 * Add Custom Discount To Cart Item
 * Use this endpoint to add a custom discount to cart item.
 */
export const addCustomDiscountToCartItem = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AddCustomDiscountToCartItemData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AddCustomDiscountToCartItemResponse,
    AddCustomDiscountToCartItemError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/items/{cartitemID}/custom-discounts",
  })
}

/**
 * Delete Custom Discount From Cart Item
 * Use this endpoint to delete custom discount from cart item.
 */
export const deleteCustomDiscountFromCartItem = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteCustomDiscountFromCartItemData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteCustomDiscountFromCartItemResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/items/{cartitemID}/custom-discounts/{customdiscountID}",
  })
}

/**
 * Update Custom Discount For Cart Item
 * Use this endpoint to update a custom discount in your cart item.
 */
export const updateCustomDiscountForCartItem = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateCustomDiscountForCartItemData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateCustomDiscountForCartItemResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/items/{cartitemID}/custom-discounts/{customdiscountID}",
  })
}

/**
 * Retrieve all shipping groups for a cart
 * Retrieve all shipping groups for a cart
 */
export const getShippingGroups = <ThrowOnError extends boolean = false>(
  options: Options<GetShippingGroupsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetShippingGroupsResponse,
    GetShippingGroupsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/shipping-groups",
  })
}

/**
 * Create a new shipping group for a cart
 * Create a new shipping group for a cart
 */
export const createShippingGroup = <ThrowOnError extends boolean = false>(
  options: Options<CreateShippingGroupData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateShippingGroupResponse,
    CreateShippingGroupError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/shipping-groups",
  })
}

/**
 * Delete Cart Shipping Group
 * Deletes a shipping group from a cart. You cannot delete a shipping group that is attached to cart items.
 * You must first remove the shipping group from all cart items before deleting the shipping group.
 *
 */
export const deleteCartShippingGroup = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCartShippingGroupData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteCartShippingGroupResponse,
    DeleteCartShippingGroupError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartId}/shipping-groups/{shippingGroupId}",
  })
}

/**
 * Retrieve a specific shipping group for a cart
 * Retrieve a specific shipping group for a cart
 */
export const getShippingGroupById = <ThrowOnError extends boolean = false>(
  options: Options<GetShippingGroupByIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetShippingGroupByIdResponse,
    GetShippingGroupByIdError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartId}/shipping-groups/{shippingGroupId}",
  })
}

/**
 * Update a shipping group for a cart
 * Update a specific shipping group for a cart
 */
export const updateShippingGroup = <ThrowOnError extends boolean = false>(
  options: Options<UpdateShippingGroupData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateShippingGroupResponse,
    UpdateShippingGroupError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartId}/shipping-groups/{shippingGroupId}",
  })
}

/**
 * Create Stripe Payment Intent for a Cart
 * The Cart Payment Intent feature enables the creation of a Stripe Payment Intent specifically tied to a shopping cart and its subsequent order. This allows Payment Intent users to track payment details from the cart stage and seamlessly maintain consistency in payment information throughout the order stage. Using these features, you can create Payment Intents for their carts, update Payment Intents with final cart details, and synchronize Payment Intents from Stripe to Commerce.
 *
 * :::note
 *
 * - Typically, in Commerce, inventory is allocated at the time of payment initiation after an order is created. However, in the case of Cart Payment Intent, information about the payment is received only upon synchronizing the order from Stripe to Commerce. This may happen after the payment is completed. Therefore, there might be a delay between the payment made and allocation, increasing the chance of paying for items that are not in stock.
 * - There are certain fields you can choose to set up when [creating a payment intent](https://stripe.com/docs/api/payment_intents/create). However, if you decide to update a payment intent, the available options may not be the same as those allowed while creating a payment intent. See [updating a payment intent](https://stripe.com/docs/api/payment_intents/update).
 *
 * :::
 *
 * The following steps outline the workflow associated with the Payment Intent:
 *
 * 1. [Add items to cart](/docs/api/carts/manage-carts#add-custom-item-to-cart).
 * 1. [Create a Payment Intent for the cart](/docs/api/carts/create-cart-payment-intent). The Payment Intent is created in Stripe, reflecting the cart and transaction details, including currency, amounts, payment type, and any optional Stripe details. The Payment Intent ID is generated and linked to the cart.
 * 1. [Update a Payment Intent](/docs/carts-orders/update-cart-payment-intent). This step is optional but becomes necessary when there are changes in the cart details at the time of payment. It ensures the Payment Intent accurately reflects the current cart details when processing the payments on the front end.
 * 1. [Checkout the cart](/docs/api/carts/checkout). An unpaid order is created, and the Payment Intent ID is linked to the order.
 * 1. [Confirm the order](/docs/carts-orders/confirm-an-order). This is important because after checkout, it is essential to confirm the Payment Intent and synchronize it with Commerce. This results in a corresponding transaction and change in order statuses in Commerce. Additionally, the Payment Intent ID is removed from the order once it is linked via the transaction.
 *
 * ### Best Practices
 *
 * We recommend you follow these practices to maintain consistency and accuracy when using Cart Payment Intent.
 *
 * - After checkout, we recommend clearing the shopping cart. You can achieve this using a [Delete a cart](/docs/api/carts/delete-a-cart) endpoint or [Update a cart](/docs/api/carts/update-a-cart) to remove the Payment Intent ID. This helps to avoid potential issues where subsequent checkouts for the same cart might unintentionally use the previous Stripe Payment Intent ID.
 * - If it is not reasonable to clear the cart immediately after checkout due to several subsequent, duplicate checkouts to the same cart, ensure that you only synchronize the Payment Intent when finalizing the order. Each order confirmation is unaware of the others, and syncing Payment Intent IDs for each confirmation can lead to duplicate transactions in Commerce. In other words, if you synchronize Payment Intents for earlier versions of a repeated checkout, you'll end up with multiple orders from the same cart, each having transactions linked to the same Payment Intent.
 * - To pay the entire amount at once, use the [Update Cart Payment Intent](/docs/carts-orders/update-cart-payment-intent) endpoint to update the Stripe Payment Intent with the final cart details when preparing to take the payment. Doing so, ensures that the Payment Intent accurately reflects the current cart details when processing payments on the front end. We do not recommend calling the [Update Cart Payment Intent](/docs/carts-orders/update-cart-payment-intent) for each individual change in the cart, as this can lead to more requests and may slow down the front-end performance.
 *
 */
export const createCartPaymentIntent = <ThrowOnError extends boolean = false>(
  options: Options<CreateCartPaymentIntentData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateCartPaymentIntentResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/payments",
  })
}

/**
 * Update a Payment Intent on a Cart
 * Updates the payment information for a specific payment intent on a cart.
 */
export const updateCartPaymentIntent = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCartPaymentIntentData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateCartPaymentIntentResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/payments/{paymentIntentID}",
  })
}

/**
 * Checkout API
 * When a Cart is ready for checkout, you can convert the cart to an order. The cart remains and can be modified and checked out again if required.
 *
 * A cart can be checked out with a customer ID, customer object, or with an account by authenticating with the `Client Credentials Token`.
 *
 * After a successful checkout, a response that contains the order is returned. If the cart is linked to a shipping group, the shipping group is also associated with the order after checkout.
 *
 * You can checkout using one of the following methods:
 * - **Customer ID**: You can checkout a cart with an existing customer ID.
 * - **Guest Checkout** (Checkout with Customer Object): You can checkout a cart with an associated customer name and email.
 * - **Checkout with Account**: The shopper authenticates with the `Client Credentials` Token.
 * - **Checkout with Account Management Authentication Token**: The shopper authenticates with the `Implicit Token` and the `EP-Account-Management-Authentication-Token`.
 *
 * :::note
 *
 * - The cart currency is set when the first item is added to the cart.
 * - The product being added to the cart requires a price in the same currency as the other items in the cart. The API returns a 400 error if a price is not defined in the correct currency.
 * - To ensure that a free gift is automatically applied to an order, set the promotion to automatic. The checkout process will not be successful if free gift items are out of stock. See [Errors](#errors) section.
 *
 * :::
 *
 * :::caution
 *
 * - By default, carts are automatically deleted 7 days after the last update. You can change this setting by [updating cart settings](/docs/api/settings/put-v-2-settings-cart).
 * - Your inventory is modified during checkout and payment of an order. For more information about the changes in the inventory, see the [Inventory](/docs/api/pxm/inventory/inventories-introduction) section.
 *
 * :::
 *
 * You can pass `order_number` and `external_ref` in the checkout endpoint or when [updating an order](/docs/api/carts/update-an-order). The `order_number` is an optional, user-managed field that is used as an alternative to `order_id`. When processing transactions through Authorize.net, the `order_number` is sent instead of the `order_id`, and it will appear in the invoice number section. If no `order_number` is provided, the `order_id` is sent to Authorize.net on payment by default. There are no duplication restrictions on the `order_number` value.
 *
 * ### Next Steps
 *
 * After a cart has been converted to an Order using either of the previous methods, you most likely want to capture payment for order. See [Paying for an Order](/docs/api/carts/payments).
 *
 * ### Errors
 *
 * The following error response is returned during checkout when an eligible item is added to the cart, and the free gift is out of stock.
 *
 * ```json
 * {
 * "errors": [
 * {
 * "status": 400,
 * "title": "Insufficient stock",
 * "detail": "There is not enough stock to add gift2 to your cart",
 * "meta": {
 * "id": "f2b68648-9621-45a3-aed6-1b526b0f5beb",
 * "sku": "gift2"
 * }
 * }
 * ]
 * }
 * ```
 *
 */
export const checkoutApi = <ThrowOnError extends boolean = false>(
  options: Options<CheckoutApiData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CheckoutApiResponse,
    CheckoutApiError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/carts/{cartID}/checkout",
  })
}

/**
 * Get all Orders
 * This endpoint returns all orders with custom flow fields. The pagination offset is set to fetch a maximum of 10,000 orders. If the store has 10,000 orders and you fetch the orders without using filters, an error is returned. Use a filter to view orders when the order is beyond the 10,000 mark.
 *
 * :::note
 *
 * - Pass the `X-Moltin-Customer-Token` header to limit orders to a specific customer. See [Customer Tokens](/docs/customer-management/customer-management-api/customer-tokens).
 * - Pass the `EP-Account-Management-Authentication-Token` header to limit orders to a specific account. See [Account Management Token](/docs/api/accounts/post-v-2-account-members-tokens).
 * - You can use pagination with this resource. For more information, see [pagination](/guides/Getting-Started/pagination).
 *
 * :::
 *
 * ### Filtering
 *
 * The following operators and attributes are available for filtering orders.
 *
 * | Attribute | Type | Operator | Example |
 * | :--- | :--- | :--- | :--- |
 * | `status` | `string` | `eq` | `eq(status,complete)` |
 * | `payment` | `string` | `eq` | `eq(payment,paid)` |
 * | `shipping` | `string` | `eq` | `eq(shipping,unfulfilled)` |
 * | `name` (`customer.name`) | `string` | `eq` / `like` | `like(name,Brad*)` |
 * | `email` (`customer.email`) | `string` | `eq` / `like` | `like(email,*@elasticpath.com)` |
 * | `customer_id` | `string` | `eq` / `like` | `eq(customer_id, e5a0d684-a4af-4919-a348-f66b0b4955e0)` |
 * | `account_id` | `string` | `eq` / `like` | `eq(account_id,3d7200c9-a9bc-4085-9822-63e80fd94a09)` |
 * | `account_member_id` | `string` | `eq` / `like` | `eq(account_member_id,2a8a3a92-2ccd-4b2b-a7af-52d3896eaecb)` |
 * | `contact.name` | `string` | `eq` / `like` | `eq(name,John Doe)` |
 * | `contact.email` | `string` | `eq` / `like` | `eq(email,John Doe)` |
 * | `shipping_postcode` | `string` | `eq` / `like` | `like(shipping_postcode,117*)` |
 * | `billing_postcode` | `string` | `eq` / `like` | `like(billing_postcode,117*)` |
 * | `with_tax` | `integer` | `gt`/`ge`/`lt`/`le` | `ge(with_tax,10000)` |
 * | `without_tax` | `integer` | `gt`/`ge`/`lt`/`le` | `ge(without_tax,10000)` |
 * | `currency` | `string` | `eq` | `eq(currency,USD)` |
 * | `product_id` | `string` | `eq` | `eq(product_id,6837058c-ae42-46db-b3c6-7f01e0c34b40)` |
 * | `product_sku` | `string` | `eq` | `eq(product_sku,deck-shoe-001)` |
 * | `created_at` | `date` | `eq` / `gt` / `ge`/ `le` / `lt` | `gt(created_at,YYYY-MM-DD)` |
 * | `updated_at` | `date` | `eq` / `gt` / `ge`/ `le`/ `lt` | `lt(updated_at,YYYY-MM-DD)` |
 * | `external_ref` | `string` | `eq` / `like` | `like(external_ref, 16be*)` |
 * | `order_number` | `string` | `eq` / `like` | `like(order_number, 123*)` |
 *
 */
export const getCustomerOrders = <ThrowOnError extends boolean = false>(
  options?: Options<GetCustomerOrdersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetCustomerOrdersResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/orders",
  })
}

/**
 * Get an Order
 * Use this endpoint to retrieve a specific order.
 */
export const getAnOrder = <ThrowOnError extends boolean = false>(
  options: Options<GetAnOrderData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAnOrderResponse,
    GetAnOrderError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/orders/{orderID}",
  })
}

/**
 * Update an Order
 * You can only update custom data, `shipping`, `shipping_address`, and status of orders. All other settings in the order object are immutable.
 *
 * This endpoint allows you to:
 *
 * - **Update an order number and external reference**: You can update an existing order that does not have an `order_number` and `external_ref`, modify the `order_number` and `external_ref` values, or remove them by passing an empty value in the `order_number` and `external_ref` fields.
 * - **Cancel an order**: You can cancel an order only if it has not been fulfilled.
 * - **Fulfill an order**: You can fulfill a paid order only.
 *
 * :::caution
 *
 * You can update `shipping`, `shipping_address`, and status of an order only if the order is not fulfilled. You can use the refund API to refund an order only if the payment status is `paid`. Canceling an order does not automatically refund a payment. You must refund the orders manually.
 *
 * :::
 *
 * :::note
 *
 * - This request is only accessible to client credentials token users with Seller Admin role.
 * - Non client credentials token users cannot access this endpoint. See [Permissions](/docs/authentication/tokens/permissions).
 * - The `order_number` will appear as the invoice number in Authorize.net transactions.
 *
 * :::
 *
 */
export const updateAnOrder = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAnOrderData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateAnOrderResponse,
    UpdateAnOrderError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/orders/{orderID}",
  })
}

/**
 * Get Order Items
 * Use this endpoint to retrieve order items.
 */
export const getOrderItems = <ThrowOnError extends boolean = false>(
  options: Options<GetOrderItemsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetOrderItemsResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/orders/{orderID}/items",
  })
}

/**
 * Anonymize Orders
 * You can anonymize an order when it is fulfilled, canceled, or fully refunded.
 *
 * When anonymization is successful, Personal Identifiable Information such as customer details, `shipping_address`, and `billing_address` are replaced with *.
 *
 */
export const anonymizeOrders = <ThrowOnError extends boolean = false>(
  options?: Options<AnonymizeOrdersData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AnonymizeOrdersResponse,
    AnonymizeOrdersError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/orders/anonymize",
  })
}

/**
 * Confirm Order
 * Use this endpoint to confirm an order. Confirming an order finalizes it and makes it ready for processing.
 *
 */
export const confirmOrder = <ThrowOnError extends boolean = false>(
  options: Options<ConfirmOrderData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ConfirmOrderResponse,
    ConfirmOrderError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/orders/{orderID}/confirm",
  })
}

/**
 * Payments
 * Depending on the payment gateway, you may have access to different transaction types such as capturing funds immediately or authorizing them for later. For more information, see [Payments](/docs/api/carts/payments).
 *
 * The following types of payment methods are available depending on the payment gateway:
 *
 * - `purchase`: This is the simplest method. The gateway attempts to charge the customer immediately.
 * - `authorize`: This method authorizes a payment so that funds can be captured later, for example, when an item is dispatched or restocked.
 * - `purchase_setup`: This method prepares the system for a purchase by verifying payment details without actually charging the customer. For example, a customer adds items to their cart and proceeds to checkout. Before finalizing the purchase, the system runs `purchase_setup` to confirm all payment details, but no funds are transferred until the customer confirms the order.
 * - `authorize_setup`: This method prepares the system for an authorization-only transaction. This process holds the necessary funds but does not transfer them, ensuring that the customer has sufficient balance for the transaction. It sets up the conditions for a future capture of the authorized funds. For example, a customer places a pre-order for a product that will ship in two weeks. The merchant uses `authorize_setup` to prepare for the payment authorization. This holds the customer's funds to ensure they can cover the purchase but waits to capture the payment until the product ships. This ensures that payment is secured but not collected prematurely.
 *
 * :::note
 *
 * Split payments can be performed using any methods for any gateway.
 *
 * - You can partially pay funds using `purchase` method. The gateway attempts to charge the customer immediately, and the payment status for an order will show `partially_paid`
 * - You can partially pay for an order using `authorize` method where the order will be marked as `partially_authorized`. The transaction must be completed for the order status to be `partially_authorized`.
 * - A `purchase_setup` method allows verification of payment details for partial payments without transferring funds until the customer confirms the full order.
 * - An `authorize_setup` method can be used to hold a partial amount of the total funds, ensuring the customer has enough balance for a future capture.
 * Until a payment is made neither `purchase_setup` nor `authorize_setup` affects the payment statuses, and the order remains unpaid. For more information about order and payment statuses for split payments, see [Split payments](/docs/api/payments/payment-gateways-introduction#split-payments).
 *
 * :::
 *
 */
export const paymentSetup = <ThrowOnError extends boolean = false>(
  options: Options<PaymentSetupData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PaymentSetupResponse,
    PaymentSetupError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/orders/{orderID}/payments",
  })
}

/**
 * Confirm Payment
 * Confirm Payment serves as a mechanism to synchronize transaction information from the third-party payment provider back to our system. This ensures that Composable Commerce accurately reflects the values from the payment provider.
 *
 * ### Handling 3D Secure Validations for Stripe Payments
 *
 * For Stripe Payments requiring 3D Secure validation, the transaction response will include the `client_parameters` object, which provides credentials to support validation of these payment requests on the payment provider's side. We recommend using the Stripe's client libraries to manage these 3D Secure validations. Once the validation succeeds, proceed with a confirmation request to sync the validated transaction into Composable Commerce and continue with the payment process.
 *
 */
export const confirmPayment = <ThrowOnError extends boolean = false>(
  options: Options<ConfirmPaymentData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ConfirmPaymentResponse,
    ConfirmPaymentError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/orders/{orderID}/transactions/{transactionID}/confirm",
  })
}

/**
 * Capture a Transaction
 * Use this endpoint to capture a previously authorized payment. In this step, you can also pass in a custom reference, such as the payment reference from your chosen gateway.
 */
export const captureATransaction = <ThrowOnError extends boolean = false>(
  options: Options<CaptureATransactionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CaptureATransactionResponse,
    CaptureATransactionError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/orders/{orderID}/transactions/{transactionID}/capture",
  })
}

/**
 * Refund a Transaction
 * There are two ways to refund; through your payment gateway and mark it refunded in Commerce Manager, or directly through Commerce Manager or API.
 *
 * * Mark as Refunded: You can manually mark a transaction as refunded. Before you can mark the order as refunded, you need to handle the actual refund on your side with your payment provider. Mark as Refunded is a full refund made to the transaction.
 * * Refund through Composable Commerce: You can process a full or partial refund to a supported payment provider directly from Commerce Manager or API by providing the refund amount. When you start the refund process, the request is directly sent to the payment gateway.
 *
 * :::caution
 *
 * If you use manual gateway for partial or full refund, you need to handle the actual refund on your side with your payment provider.
 *
 * :::
 *
 */
export const refundATransaction = <ThrowOnError extends boolean = false>(
  options: Options<RefundATransactionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    RefundATransactionResponse,
    RefundATransactionError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/orders/{orderID}/transactions/{transactionID}/refund",
  })
}

/**
 * Get Order Transactions
 * Get order transactions
 */
export const getOrderTransactions = <ThrowOnError extends boolean = false>(
  options: Options<GetOrderTransactionsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetOrderTransactionsResponse,
    GetOrderTransactionsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/orders/{orderID}/transactions",
  })
}

/**
 * Get a Transaction
 * Retrieves a transaction
 */
export const getATransaction = <ThrowOnError extends boolean = false>(
  options: Options<GetATransactionData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetATransactionResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/orders/{orderID}/transactions/{transactionID}",
  })
}

/**
 * Cancel a Transaction
 * Use this endpoint to cancel or void a pending or authorized transaction. The transaction can be canceled or voided when it is in `pending` and `completed` statuses.
 *
 * :::caution
 *
 * This endpoint works only for Stripe and PayPal and does not work for manual gateway.
 *
 * :::
 *
 */
export const cancelATransaction = <ThrowOnError extends boolean = false>(
  options: Options<CancelATransactionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CancelATransactionResponse,
    CancelATransactionError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/orders/{orderID}/transactions/{transactionID}/cancel",
  })
}

/**
 * Retrieve all shipping groups for an order
 * Retrieve all shipping groups for an order
 */
export const getOrderShippingGroups = <ThrowOnError extends boolean = false>(
  options: Options<GetOrderShippingGroupsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetOrderShippingGroupsResponse,
    GetOrderShippingGroupsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/orders/{orderID}/shipping-groups",
  })
}

/**
 * Create a shipping group for an order
 * Create a new shipping group for an order
 */
export const createOrderShippingGroup = <ThrowOnError extends boolean = false>(
  options: Options<CreateOrderShippingGroupData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateOrderShippingGroupResponse,
    CreateOrderShippingGroupError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/orders/{orderID}/shipping-groups",
  })
}

/**
 * Retrieve a specific shipping group for an order
 * Retrieve a specific shipping group for an order
 */
export const getShippingGroupsById = <ThrowOnError extends boolean = false>(
  options: Options<GetShippingGroupsByIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetShippingGroupsByIdResponse,
    GetShippingGroupsByIdError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/orders/{orderID}/shipping-groups/{shippingGroupID}",
  })
}

/**
 * Update a shipping group for an order
 * Update a shipping group for an order
 */
export const putShippingGroupById = <ThrowOnError extends boolean = false>(
  options: Options<PutShippingGroupByIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    PutShippingGroupByIdResponse,
    PutShippingGroupByIdError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/orders/{orderID}/shipping-groups/{shippingGroupID}",
  })
}
