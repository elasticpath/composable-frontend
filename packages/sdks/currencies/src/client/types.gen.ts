// This file is auto-generated by @hey-api/openapi-ts

export type DataCreateCurrencies = {
  /**
   * Specifies the currency code. Example YEN.
   */
  code: string
  /**
   * Indicates how many decimal places the currency is formatted to.
   */
  decimal_places: number
  /**
   * Indicates the decimal point character.
   */
  decimal_point: string
  /**
   * Specifies whether this is the default currency or not. Either `true` or `false`.
   */
  default: boolean
  /**
   * Specifies if this currency is available for products. Either `true` or `false`.
   */
  enabled: boolean
  /**
   * Specifies the exchange rate from the default currency.
   */
  exchange_rate: number
  /**
   * Specifies how the price currency is displayed. For example, "¥{price}".
   */
  format: string
  /**
   * Indicates the thousand separator character.
   */
  thousand_separator: string
  /**
   * Represents the type represents the object being returned.
   */
  type: string
}

export type RequestCreateCurrencies = {
  data?: DataCreateCurrencies
}

export type DataUpdateCurrencies = {
  /**
   * Specifies whether this is the default currency or not. Either `true` or `false`.
   */
  default?: boolean
}

export type RequestUpdateCurrencies = {
  data?: DataUpdateCurrencies
}

export type ResponseCurrency = {
  /**
   * The unique identifier for this currency.
   */
  id?: string
  /**
   * Represents the type represents the object being returned.
   */
  type?: string
  /**
   * Specifies the currency code. For example, YEN.
   */
  code?: string
  /**
   * Specifies the exchange rate from the default currency.
   */
  exchange_rate?: number
  /**
   * Specifies how the price currency is displayed. For example, "£{price}".
   */
  format?: string
  /**
   * Indicates the decimal point character.
   */
  decimal_point?: string
  /**
   * Indicates the thousand separator character.
   */
  thousand_separator?: string
  /**
   * Indicates how many decimal places the currency is formatted to.
   */
  decimal_places?: number
  /**
   * Specifies whether this is the default currency or not. Either `true` or `false`.
   */
  default?: boolean
  /**
   * Specifies if this currency is available for products. Either `true` or `false`.
   */
  enabled?: boolean
  links?: SelfLink
  meta?: ResponseMetaCurrency
}

export type ResponseMetaCurrency = {
  timestamps?: Timestamps
  /**
   * Indicates whether the owner is store or org.
   */
  owner?: string
}

export type ResponseData = {
  data?: unknown
}

export type Timestamps = {
  /**
   * Indicates the creation date of this currency.
   */
  created_at?: string
  /**
   * Indicates the updated date of this currency.
   */
  updated_at?: unknown
}

export type SelfLink = {
  /**
   * Specifies the URL of this currency.
   */
  self?: string
}

export type ResponseError = Array<unknown>

export type GetAllCurrenciesData = {
  body?: never
  path?: never
  query?: {
    /**
     * The number of records to offset the results by.
     */
    "page[offset]"?: string
    /**
     * The number of records per page.
     */
    "page[limit]"?: string
  }
  url: "/v2/currencies"
}

export type GetAllCurrenciesErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type GetAllCurrenciesError =
  GetAllCurrenciesErrors[keyof GetAllCurrenciesErrors]

export type GetAllCurrenciesResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: Array<ResponseCurrency>
  }
}

export type GetAllCurrenciesResponse =
  GetAllCurrenciesResponses[keyof GetAllCurrenciesResponses]

export type CreateACurrencyData = {
  body?: RequestCreateCurrencies & unknown
  path?: never
  query?: never
  url: "/v2/currencies"
}

export type CreateACurrencyErrors = {
  /**
   * Bad Request
   */
  400: ResponseError
  /**
   * Bad Request
   */
  422: ResponseError
}

export type CreateACurrencyError =
  CreateACurrencyErrors[keyof CreateACurrencyErrors]

export type CreateACurrencyResponses = {
  /**
   * Created
   */
  201: ResponseData & {
    type?: unknown
    data?: ResponseCurrency
  }
}

export type CreateACurrencyResponse =
  CreateACurrencyResponses[keyof CreateACurrencyResponses]

export type DeleteACurrencyData = {
  body?: never
  path: {
    /**
     * The ID for the Currency to delete.
     */
    currencyID: string
  }
  query?: never
  url: "/v2/currencies/{currencyID}"
}

export type DeleteACurrencyErrors = {
  /**
   * Not Found
   */
  404: ResponseError
}

export type DeleteACurrencyError =
  DeleteACurrencyErrors[keyof DeleteACurrencyErrors]

export type DeleteACurrencyResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteACurrencyResponse =
  DeleteACurrencyResponses[keyof DeleteACurrencyResponses]

export type GetACurrencyData = {
  body?: never
  path: {
    /**
     * The ID for the requested currency.
     */
    currencyID: string
  }
  query?: never
  url: "/v2/currencies/{currencyID}"
}

export type GetACurrencyErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type GetACurrencyError = GetACurrencyErrors[keyof GetACurrencyErrors]

export type GetACurrencyResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: Array<ResponseCurrency>
  }
}

export type GetACurrencyResponse =
  GetACurrencyResponses[keyof GetACurrencyResponses]

export type UpdateACurrencyData = {
  body?: RequestUpdateCurrencies & unknown
  path: {
    /**
     * The ID for the requested currency.
     */
    currencyID: string
  }
  query?: never
  url: "/v2/currencies/{currencyID}"
}

export type UpdateACurrencyErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type UpdateACurrencyError =
  UpdateACurrencyErrors[keyof UpdateACurrencyErrors]

export type UpdateACurrencyResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: Array<ResponseCurrency>
  }
}

export type UpdateACurrencyResponse =
  UpdateACurrencyResponses[keyof UpdateACurrencyResponses]
