// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
  formDataBodySerializer,
} from "@hey-api/client-fetch"
import type {
  ListProductsData,
  ListProductsResponse,
  ListProductsError,
  CreateProductData,
  CreateProductResponse,
  CreateProductError,
  DeleteProductData,
  DeleteProductResponse,
  DeleteProductError,
  GetProductData,
  GetProductResponse,
  GetProductError,
  UpdateProductData,
  UpdateProductResponse,
  UpdateProductError,
  ListPlansData,
  ListPlansResponse,
  ListPlansError,
  CreatePlanData,
  CreatePlanResponse,
  CreatePlanError,
  DeletePlanData,
  DeletePlanResponse,
  GetPlanData,
  GetPlanResponse,
  GetPlanError,
  UpdatePlanData,
  UpdatePlanResponse,
  UpdatePlanError,
  ListOfferingsData,
  ListOfferingsResponse,
  ListOfferingsError,
  CreateOfferingData,
  CreateOfferingResponse,
  CreateOfferingError,
  BuildOfferingData,
  BuildOfferingResponse,
  BuildOfferingError,
  DeleteOfferingData,
  DeleteOfferingResponse,
  DeleteOfferingError,
  GetOfferingData,
  GetOfferingResponse,
  GetOfferingError,
  UpdateOfferingData,
  UpdateOfferingResponse,
  UpdateOfferingError,
  DeleteOfferingFeatureData,
  DeleteOfferingFeatureResponse,
  DeleteOfferingFeatureError,
  UpdateOfferingFeatureData,
  UpdateOfferingFeatureResponse,
  UpdateOfferingFeatureError,
  AttachOfferingFeatureData,
  AttachOfferingFeatureResponse,
  AttachOfferingFeatureError,
  ListOfferingPlansData,
  ListOfferingPlansResponse,
  ListOfferingPlansError,
  AttachOfferingPlanData,
  AttachOfferingPlanResponse,
  AttachOfferingPlanError,
  DeleteOfferingPlanData,
  DeleteOfferingPlanResponse,
  DeleteOfferingPlanError,
  UpdateOfferingPlanData,
  UpdateOfferingPlanResponse,
  UpdateOfferingPlanError,
  ListOfferingFeaturesData,
  ListOfferingFeaturesResponse,
  ListOfferingFeaturesError,
  ListOfferingProductsData,
  ListOfferingProductsResponse,
  ListOfferingProductsError,
  AttachOfferingProductData,
  AttachOfferingProductResponse,
  AttachOfferingProductError,
  ReplaceOfferingProductData,
  ReplaceOfferingProductResponse,
  ReplaceOfferingProductError,
  DeleteOfferingProductData,
  DeleteOfferingProductResponse,
  DeleteOfferingProductError,
  UpdateOfferingProductData,
  UpdateOfferingProductResponse,
  UpdateOfferingProductError,
  ListSubscriptionsData,
  ListSubscriptionsResponse,
  ListSubscriptionsError,
  CreateSubscriptionData,
  CreateSubscriptionResponse,
  CreateSubscriptionError,
  DeleteSubscriptionData,
  DeleteSubscriptionResponse,
  DeleteSubscriptionError,
  GetSubscriptionData,
  GetSubscriptionResponse,
  GetSubscriptionError,
  UpdateSubscriptionData,
  UpdateSubscriptionResponse,
  UpdateSubscriptionError,
  ListSubscriptionProductsData,
  ListSubscriptionProductsResponse,
  ListSubscriptionProductsError,
  ManageSubscriptionProductsData,
  ManageSubscriptionProductsResponse,
  ManageSubscriptionProductsError,
  ListSubscriptionPlansData,
  ListSubscriptionPlansResponse,
  ListSubscriptionPlansError,
  ListSubscriptionStatesData,
  ListSubscriptionStatesResponse,
  ListSubscriptionStatesError,
  CreateSubscriptionStateData,
  CreateSubscriptionStateResponse,
  CreateSubscriptionStateError,
  GetSubscriptionStateData,
  GetSubscriptionStateResponse,
  GetSubscriptionStateError,
  ListJobsData,
  ListJobsResponse,
  ListJobsError,
  CreateJobData,
  CreateJobResponse,
  CreateJobError,
  DeleteJobData,
  DeleteJobResponse,
  DeleteJobError,
  GetJobData,
  GetJobResponse,
  GetJobError,
  ListImportJobsData,
  ListImportJobsResponse,
  ListImportJobsError,
  CreateImportData,
  CreateImportResponse,
  CreateImportError,
  GetImportData,
  GetImportResponse,
  GetImportError,
  GetImportErrorsData,
  GetImportErrorsResponse,
  GetImportErrorsError,
  ListSubscriptionInvoicesData,
  ListSubscriptionInvoicesResponse,
  ListSubscriptionInvoicesError,
  ListSubscriptionInvoicePaymentsData,
  ListSubscriptionInvoicePaymentsResponse,
  GetSubscriptionInvoicePaymentData,
  GetSubscriptionInvoicePaymentResponse,
  GetSubscriptionInvoicePaymentError,
  GetSubscriptionInvoiceData,
  GetSubscriptionInvoiceResponse,
  GetSubscriptionInvoiceError,
  ListInvoicesData,
  ListInvoicesResponse,
  ListInvoicesError,
  GetInvoiceData,
  GetInvoiceResponse,
  GetInvoiceError,
  ListInvoicePaymentsData,
  ListInvoicePaymentsResponse,
  GetInvoicePaymentData,
  GetInvoicePaymentResponse,
  GetInvoicePaymentError,
  UpdateInvoicePaymentData,
  UpdateInvoicePaymentResponse,
  UpdateInvoicePaymentError,
  ListSchedulesData,
  ListSchedulesResponse,
  ListSchedulesError,
  CreateScheduleData,
  CreateScheduleResponse,
  CreateScheduleError,
  DeleteScheduleData,
  DeleteScheduleResponse,
  DeleteScheduleError,
  GetScheduleData,
  GetScheduleResponse,
  GetScheduleError,
  UpdateScheduleData,
  UpdateScheduleResponse,
  UpdateScheduleError,
  ListSubscribersData,
  ListSubscribersResponse,
  ListSubscribersError,
  CreateSubscriberData,
  CreateSubscriberResponse,
  CreateSubscriberError,
  DeleteSubscriberData,
  DeleteSubscriberResponse,
  DeleteSubscriberError,
  GetSubscriberData,
  GetSubscriberResponse,
  GetSubscriberError,
  UpdateSubscriberData,
  UpdateSubscriberResponse,
  UpdateSubscriberError,
  ListDunningRulesData,
  ListDunningRulesResponse,
  ListDunningRulesError,
  CreateDunningRuleData,
  CreateDunningRuleResponse,
  CreateDunningRuleError,
  DeleteDunningRuleData,
  DeleteDunningRuleResponse,
  DeleteDunningRuleError,
  GetDunningRuleData,
  GetDunningRuleResponse,
  GetDunningRuleError,
  UpdateDunningRuleData,
  UpdateDunningRuleResponse,
  UpdateDunningRuleError,
  ListProrationPoliciesData,
  ListProrationPoliciesResponse,
  ListProrationPoliciesError,
  CreateProrationPolicyData,
  CreateProrationPolicyResponse,
  CreateProrationPolicyError,
  DeleteProrationPolicyData,
  DeleteProrationPolicyResponse,
  DeleteProrationPolicyError,
  GetProrationPolicyData,
  GetProrationPolicyResponse,
  GetProrationPolicyError,
  UpdateProrationPolicyData,
  UpdateProrationPolicyResponse,
  UpdateProrationPolicyError,
  ListFeaturesData,
  ListFeaturesResponse,
  ListFeaturesError,
  CreateFeatureData,
  CreateFeatureResponse,
  CreateFeatureError,
  DeleteFeatureData,
  DeleteFeatureResponse,
  DeleteFeatureError,
  GetFeatureData,
  GetFeatureResponse,
  GetFeatureError,
  UpdateFeatureData,
  UpdateFeatureResponse,
  UpdateFeatureError,
} from "./types.gen"

export const client = createClient(createConfig())

/**
 * List products
 * Retrieves a list of all subscription products.
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For the general syntax, see [**Filtering**](/guides/Getting-Started/filtering).
 *
 * The following attributes and operators are supported.
 *
 * | Operator | Attribute | Description |
 * | --- | --- | --- |
 * | `eq` | `external_ref` | Equals. Checks if the values of two operands are equal. If they are, the condition is true. |
 *
 */
export const listProducts = <ThrowOnError extends boolean = false>(
  options?: Options<ListProductsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListProductsResponse,
    ListProductsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/products",
  })
}

/**
 * Create a product
 */
export const createProduct = <ThrowOnError extends boolean = false>(
  options?: Options<CreateProductData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateProductResponse,
    CreateProductError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/products",
  })
}

/**
 * Delete product
 * You cannot delete a product if it is part of an offering. You must detach the product from the offering first.
 */
export const deleteProduct = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProductData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteProductResponse,
    DeleteProductError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/products/{product_uuid}",
  })
}

/**
 * Get product
 */
export const getProduct = <ThrowOnError extends boolean = false>(
  options: Options<GetProductData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetProductResponse,
    GetProductError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/products/{product_uuid}",
  })
}

/**
 * Update a product
 * Specify whichever attributes you want to change. The values of the other attributes remain the same. If the attributes section is empty, the product is not updated. For fields that are optional, an existing value can be removed by specifying a value of null.
 */
export const updateProduct = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProductData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateProductResponse,
    UpdateProductError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/products/{product_uuid}",
  })
}

/**
 * List plans
 * Retrieves a list of all subscription plans.
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For the general syntax, see [**Filtering**](/guides/Getting-Started/filtering).
 *
 * The following attributes and operators are supported.
 *
 * | Operator | Attribute | Description |
 * | --- | --- | --- |
 * | `eq` | `external_ref` | Equals. Checks if the values of two operands are equal. If they are, the condition is true. |
 *
 */
export const listPlans = <ThrowOnError extends boolean = false>(
  options?: Options<ListPlansData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListPlansResponse,
    ListPlansError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/plans",
  })
}

/**
 * Create a plan
 */
export const createPlan = <ThrowOnError extends boolean = false>(
  options?: Options<CreatePlanData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreatePlanResponse,
    CreatePlanError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/plans",
  })
}

/**
 * Delete plan
 * You must not delete a plan if it is associated with an offering as this invalidates the offering. You must detach a plan from an offering before deleting it.
 */
export const deletePlan = <ThrowOnError extends boolean = false>(
  options: Options<DeletePlanData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeletePlanResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/plans/{plan_uuid}",
  })
}

/**
 * Get plan
 */
export const getPlan = <ThrowOnError extends boolean = false>(
  options: Options<GetPlanData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPlanResponse,
    GetPlanError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/plans/{plan_uuid}",
  })
}

/**
 * Update a plan
 * Specify whichever attributes you want to change. The values of the other attributes remain the same. If the attributes section is empty, the plan is not updated. For fields that are optional, an existing value can be removed by specifying a value of null.
 */
export const updatePlan = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePlanData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdatePlanResponse,
    UpdatePlanError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/plans/{plan_uuid}",
  })
}

/**
 * List offerings
 * Retrieves a list of all subscription offerings.
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For the general syntax, see [**Filtering**](/guides/Getting-Started/filtering).
 *
 * The following attributes and operators are supported.
 *
 * | Operator | Attribute | Description |
 * | --- | --- | --- |
 * | `eq` | `external_ref`, `products.external_ref`, `proration_policy_id` | Equals. Checks if the values of two operands are equal. If they are, the condition is true. |
 * | `in` | `products.external_ref` | In. Checks if the values are included in the specified string. If they are, the condition is true. |
 *
 */
export const listOfferings = <ThrowOnError extends boolean = false>(
  options?: Options<ListOfferingsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListOfferingsResponse,
    ListOfferingsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/offerings",
  })
}

/**
 * Create an offering
 */
export const createOffering = <ThrowOnError extends boolean = false>(
  options?: Options<CreateOfferingData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateOfferingResponse,
    CreateOfferingError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/offerings",
  })
}

/**
 * Build an offering
 * An offering includes products and plans; products are combined with one or more plans to form an offering. An offering can include either:
 *
 * - subscription products. See [**create a product**](/docs/api/subscriptions/create-product).
 * - Product Experience Manager products. See [**create a product**](/docs/api/pxm/products/create-product).
 *
 * Offerings represent a snapshot of their products and plans. If you make updates to products or plans within an offering, the original products and plans are not updated. Only the products and plans within the offering are updated. Alternatively, you can create new products or plans and attach them to an existing offering.
 *
 * When you are building an offering:
 *
 * - you can create new plans and products.
 * - you can modify an existing product and plans. For example, you can modify the product price or any attributes of a plan included in the offering.
 *
 * Here's how you build an offering:
 *
 * 1. Specify the product to build with the offering. A product can be:
 *
 * - subscription products. Specify the subscription product attributes.
 * - Product Experience Manager products. Specify the Product Experience Manager product ID in `external_ref` in `ProductAttributes`. For the remaining product attributes, you can specify their values to match the values of the existing Product Experience Manager product attributes. However, you can also specify different values, depending on your requirements.
 *
 * 2. Specify the plans to build with the offering. Plans are the rules that govern your subscription, for example, any discount. You can combine and reuse plans for as many products as you want, making it quick and easy to create your subscription offerings.
 * An offering must have at least one plan.
 *
 */
export const buildOffering = <ThrowOnError extends boolean = false>(
  options?: Options<BuildOfferingData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    BuildOfferingResponse,
    BuildOfferingError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/offerings/build",
  })
}

/**
 * Delete offering
 * When a subscription is created, it creates a snapshot of the offering. This means you can delete an offering without affecting any active subscriptions.
 */
export const deleteOffering = <ThrowOnError extends boolean = false>(
  options: Options<DeleteOfferingData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteOfferingResponse,
    DeleteOfferingError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/offerings/{offering_uuid}",
  })
}

/**
 * Get offering
 */
export const getOffering = <ThrowOnError extends boolean = false>(
  options: Options<GetOfferingData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetOfferingResponse,
    GetOfferingError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/offerings/{offering_uuid}",
  })
}

/**
 * Update an offering
 * After saving an offering, you can update an offering at any time. Updating an offering does not affect any active subscriptions. The changes take effect on all new subscriptions that are created. For fields that are optional, an existing value can be removed by specifying a value of null.
 *
 */
export const updateOffering = <ThrowOnError extends boolean = false>(
  options: Options<UpdateOfferingData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateOfferingResponse,
    UpdateOfferingError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/offerings/{offering_uuid}",
  })
}

/**
 * Remove a feature from an offering
 * After saving an offering, you can remove features from it at any time.
 *
 * Removing a feature from an offering does not affect any existing active subscriptions. The changes take effect on all new subscriptions that are created.
 *
 */
export const deleteOfferingFeature = <ThrowOnError extends boolean = false>(
  options: Options<DeleteOfferingFeatureData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteOfferingFeatureResponse,
    DeleteOfferingFeatureError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/offerings/{offering_uuid}/features/{feature_uuid}",
  })
}

/**
 * Updates a feature in an offering
 * Use the unique identifier of the feature in the offering that you want to update. Any modifications that you make to the features in an offering, does not affect any active subscriptions. The changes take effect on all new subscriptions that are created.
 */
export const updateOfferingFeature = <ThrowOnError extends boolean = false>(
  options: Options<UpdateOfferingFeatureData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateOfferingFeatureResponse,
    UpdateOfferingFeatureError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/offerings/{offering_uuid}/features/{feature_uuid}",
  })
}

/**
 * Attach a feature
 * After saving an offering, you can attach new features to it at any time.
 *
 * Adding new features does not affect any existing active subscriptions. The changes take effect on all new subscriptions that are created.
 *
 */
export const attachOfferingFeature = <ThrowOnError extends boolean = false>(
  options: Options<AttachOfferingFeatureData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AttachOfferingFeatureResponse,
    AttachOfferingFeatureError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/offerings/{offering_uuid}/features/attach",
  })
}

/**
 * List an offering's plans
 */
export const listOfferingPlans = <ThrowOnError extends boolean = false>(
  options: Options<ListOfferingPlansData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListOfferingPlansResponse,
    ListOfferingPlansError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/offerings/{offering_uuid}/plans",
  })
}

/**
 * Attach a plan
 * After saving an offering, you can attach new plans to it at any time.
 *
 * Attaching new plans to an offering does not affect any existing active subscriptions. The changes take effect on all new subscriptions that are created.
 *
 */
export const attachOfferingPlan = <ThrowOnError extends boolean = false>(
  options: Options<AttachOfferingPlanData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AttachOfferingPlanResponse,
    AttachOfferingPlanError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/offerings/{offering_uuid}/plans/attach",
  })
}

/**
 * Remove a plan from an offering
 * After saving an offering, you can remove plans from it at any time.
 *
 * Removing a plan from an offering does not affect any existing active subscriptions. The changes take effect on all new subscriptions that are created.
 *
 */
export const deleteOfferingPlan = <ThrowOnError extends boolean = false>(
  options: Options<DeleteOfferingPlanData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteOfferingPlanResponse,
    DeleteOfferingPlanError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/offerings/{offering_uuid}/plans/{plan_uuid}",
  })
}

/**
 * Updates a plan in an offering
 */
export const updateOfferingPlan = <ThrowOnError extends boolean = false>(
  options: Options<UpdateOfferingPlanData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateOfferingPlanResponse,
    UpdateOfferingPlanError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/offerings/{offering_uuid}/plans/{plan_uuid}",
  })
}

/**
 * List an offering's features
 */
export const listOfferingFeatures = <ThrowOnError extends boolean = false>(
  options: Options<ListOfferingFeaturesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListOfferingFeaturesResponse,
    ListOfferingFeaturesError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/offerings/{offering_uuid}/features",
  })
}

/**
 * List an offering's products
 */
export const listOfferingProducts = <ThrowOnError extends boolean = false>(
  options: Options<ListOfferingProductsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListOfferingProductsResponse,
    ListOfferingProductsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/offerings/{offering_uuid}/products",
  })
}

/**
 * Attach a product
 * After saving an offering, you can attach new products to it at any time.
 *
 * Adding new products does not affect any existing active subscriptions. The changes take effect on all new subscriptions that are created.
 *
 */
export const attachOfferingProduct = <ThrowOnError extends boolean = false>(
  options: Options<AttachOfferingProductData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AttachOfferingProductResponse,
    AttachOfferingProductError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/offerings/{offering_uuid}/products/attach",
  })
}

/**
 * Replace a product
 * After saving an offering, you can replace its products at any time.
 *
 * Replacing products on an offering does not affect any existing active subscriptions. The changes take effect on all new subscriptions that are created.
 *
 */
export const replaceOfferingProduct = <ThrowOnError extends boolean = false>(
  options: Options<ReplaceOfferingProductData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    ReplaceOfferingProductResponse,
    ReplaceOfferingProductError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/offerings/{offering_uuid}/products/replace",
  })
}

/**
 * Remove a product from an offering
 * After saving an offering, you can remove products from it at any time.
 *
 * Removing a product from an offering does not affect any existing active subscriptions. The changes take effect on all new subscriptions that are created.
 *
 */
export const deleteOfferingProduct = <ThrowOnError extends boolean = false>(
  options: Options<DeleteOfferingProductData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteOfferingProductResponse,
    DeleteOfferingProductError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/offerings/{offering_uuid}/products/{product_uuid}",
  })
}

/**
 * Updates a product in an offering
 * Use the unique identifier of the product in the offering that you want to update. Any modifications that you make to the products in an offering, does not affect any active subscriptions. The changes take effect on all new subscriptions that are created.
 */
export const updateOfferingProduct = <ThrowOnError extends boolean = false>(
  options: Options<UpdateOfferingProductData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateOfferingProductResponse,
    UpdateOfferingProductError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/offerings/{offering_uuid}/products/{product_uuid}",
  })
}

/**
 * List subscriptions
 * Retrieves a list of all subscriptions.
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For the general syntax, see [**Filtering**](/guides/Getting-Started/filtering).
 *
 * The following attributes and operators are supported.
 *
 * | Operator | Attribute | Description |
 * | --- | --- | --- |
 * | `eq` | `account_id`, `name`, `email`, `external_ref` | Equals. Checks if the values of two operands are equal. If they are, the condition is true. |
 *
 * ### Including Resources
 *
 * You can use the `include` parameter to include the following resources with this endpoint.
 *
 * | Resource | Required | Description |
 * | --- | --- | --- |
 * | `plans, products` | Optional | Retrieves all plans and products associated with a subscription. |
 * | `products` | Optional | Retrieves all products associated with a subscription. |
 * | `plans` | Optional | Retrieves all plans associated with a subscription. |
 *
 * See [Characteristics of Include Parameter](/guides/Getting-Started/includes#characteristics-of-include-parameter).
 *
 */
export const listSubscriptions = <ThrowOnError extends boolean = false>(
  options?: Options<ListSubscriptionsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListSubscriptionsResponse,
    ListSubscriptionsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/subscriptions",
  })
}

/**
 * Create a subscription
 */
export const createSubscription = <ThrowOnError extends boolean = false>(
  options?: Options<CreateSubscriptionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateSubscriptionResponse,
    CreateSubscriptionError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/subscriptions",
  })
}

/**
 * Delete a subscription
 * Deletes a subscription
 *
 */
export const deleteSubscription = <ThrowOnError extends boolean = false>(
  options: Options<DeleteSubscriptionData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteSubscriptionResponse,
    DeleteSubscriptionError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/subscriptions/{subscription_uuid}",
  })
}

/**
 * Get subscription
 */
export const getSubscription = <ThrowOnError extends boolean = false>(
  options: Options<GetSubscriptionData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSubscriptionResponse,
    GetSubscriptionError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/subscriptions/{subscription_uuid}",
  })
}

/**
 * Update a subscription
 * Updates a subscription. For example, a subscriber can switch from one plan to another in a subscription.
 *
 */
export const updateSubscription = <ThrowOnError extends boolean = false>(
  options: Options<UpdateSubscriptionData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateSubscriptionResponse,
    UpdateSubscriptionError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/subscriptions/{subscription_uuid}",
  })
}

/**
 * List subscription products
 * Retrieves a list of products associated with the specified subscription.
 */
export const listSubscriptionProducts = <ThrowOnError extends boolean = false>(
  options: Options<ListSubscriptionProductsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListSubscriptionProductsResponse,
    ListSubscriptionProductsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/subscriptions/{subscription_uuid}/products",
  })
}

/**
 * Manage subscription products
 * Manage subscription products by replacing, changing or detaching products on the subscription
 */
export const manageSubscriptionProducts = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ManageSubscriptionProductsData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    ManageSubscriptionProductsResponse,
    ManageSubscriptionProductsError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/subscriptions/{subscription_uuid}/products",
  })
}

/**
 * List subscription plans
 * Retrieves a list of plans associated with the specified subscription. Using this endpoint you can see the plans that are currently active in a subscription. If `active_plan` is `true`, a plan is active in a subscription. If `active_plan` is null, the plan is not active.
 */
export const listSubscriptionPlans = <ThrowOnError extends boolean = false>(
  options: Options<ListSubscriptionPlansData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListSubscriptionPlansResponse,
    ListSubscriptionPlansError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/subscriptions/{subscription_uuid}/plans",
  })
}

/**
 * List subscription states
 */
export const listSubscriptionStates = <ThrowOnError extends boolean = false>(
  options: Options<ListSubscriptionStatesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListSubscriptionStatesResponse,
    ListSubscriptionStatesError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/subscriptions/{subscription_uuid}/states",
  })
}

/**
 * Create a subscription state
 * The subscription lifecycle is the states that a subscription can go through when a customer subscribes to a service or a product.
 *
 * A subscription can have the following states:
 *
 * - `pending`
 * - `canceled`
 * - `paused`
 * - `resumed`
 * For more information, see [Managing the Subscription Lifecycle](/docs/api/subscriptions/subscriptions#managing-the-subscription-lifecycle).
 *
 */
export const createSubscriptionState = <ThrowOnError extends boolean = false>(
  options: Options<CreateSubscriptionStateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateSubscriptionStateResponse,
    CreateSubscriptionStateError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/subscriptions/{subscription_uuid}/states",
  })
}

/**
 * Get subscription state
 */
export const getSubscriptionState = <ThrowOnError extends boolean = false>(
  options: Options<GetSubscriptionStateData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSubscriptionStateResponse,
    GetSubscriptionStateError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/subscriptions/{subscription_uuid}/states/{state_uuid}",
  })
}

/**
 * List jobs
 * Retrieves a list of all jobs.
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For the general syntax, see [**Filtering**](/guides/Getting-Started/filtering).
 *
 * The following attributes and operators are supported.
 *
 * | Operator | Attribute | Description |
 * | --- | --- | --- |
 * | `eq` | `external_ref` | Equals. Checks if the values of two operands are equal. If they are, the condition is true. |
 *
 */
export const listJobs = <ThrowOnError extends boolean = false>(
  options?: Options<ListJobsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListJobsResponse,
    ListJobsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/jobs",
  })
}

/**
 * Create a job
 */
export const createJob = <ThrowOnError extends boolean = false>(
  options?: Options<CreateJobData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateJobResponse,
    CreateJobError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/jobs",
  })
}

/**
 * Delete job
 */
export const deleteJob = <ThrowOnError extends boolean = false>(
  options: Options<DeleteJobData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteJobResponse,
    DeleteJobError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/jobs/{job_uuid}",
  })
}

/**
 * Get job
 */
export const getJob = <ThrowOnError extends boolean = false>(
  options: Options<GetJobData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetJobResponse,
    GetJobError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/jobs/{job_uuid}",
  })
}

/**
 * List import jobs
 * Retrieves a list of all import jobs.
 *
 */
export const listImportJobs = <ThrowOnError extends boolean = false>(
  options?: Options<ListImportJobsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListImportJobsResponse,
    ListImportJobsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/imports",
  })
}

/**
 * Import a dataset
 */
export const createImport = <ThrowOnError extends boolean = false>(
  options?: Options<CreateImportData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateImportResponse,
    CreateImportError,
    ThrowOnError
  >({
    ...options,
    ...formDataBodySerializer,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/imports",
  })
}

/**
 * Get import
 * Retrieves the import job for the specified ID.
 */
export const getImport = <ThrowOnError extends boolean = false>(
  options: Options<GetImportData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetImportResponse,
    GetImportError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/imports/{import_uuid}",
  })
}

/**
 * Get import errors
 * Retrieves all errors encountered as part of the import. Each error is attributed to a line in the JSONL file
 * imported, so for example, if at line 1 in your JSONL you had a subscription_product without a name, there would
 * be a minimum string error for the `name` attribute with `"line_number": 1`.
 *
 * Errors are also ordered by line number ascending, and can be paginated.
 *
 */
export const getImportErrors = <ThrowOnError extends boolean = false>(
  options: Options<GetImportErrorsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetImportErrorsResponse,
    GetImportErrorsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/imports/{import_uuid}/errors",
  })
}

/**
 * List subscription invoices
 * Lists all invoices for a given subscription.
 */
export const listSubscriptionInvoices = <ThrowOnError extends boolean = false>(
  options: Options<ListSubscriptionInvoicesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListSubscriptionInvoicesResponse,
    ListSubscriptionInvoicesError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/subscriptions/{subscription_uuid}/invoices",
  })
}

/**
 * List subscription invoice payments
 * Lists all invoice payments for a given invoice.
 */
export const listSubscriptionInvoicePayments = <
  ThrowOnError extends boolean = false,
>(
  options: Options<ListSubscriptionInvoicePaymentsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListSubscriptionInvoicePaymentsResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/subscriptions/{subscription_uuid}/invoices/{invoice_uuid}/payments",
  })
}

/**
 * Get subscription invoice payment
 * Gets a specific payment for a given invoice.
 */
export const getSubscriptionInvoicePayment = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetSubscriptionInvoicePaymentData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSubscriptionInvoicePaymentResponse,
    GetSubscriptionInvoicePaymentError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/subscriptions/{subscription_uuid}/invoices/{invoice_uuid}/payments/{payment_uuid}",
  })
}

/**
 * Get subscription invoice
 * Gets a specific invoice for a given subscription.
 */
export const getSubscriptionInvoice = <ThrowOnError extends boolean = false>(
  options: Options<GetSubscriptionInvoiceData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSubscriptionInvoiceResponse,
    GetSubscriptionInvoiceError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/subscriptions/{subscription_uuid}/invoices/{invoice_uuid}",
  })
}

/**
 * List invoices
 * Retrieves a list of all invoices.
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For the general syntax, see [**Filtering**](/guides/Getting-Started/filtering).
 *
 * The following attributes and operators are supported.
 *
 * | Operator |Attribute | Description |
 * | --- | --- | --- |
 * | `eq` | `subscriber_id`, `subscription_id`, `outstanding`, `tax_required` | Equals. Checks if the values of two operands are equal. If they are, the condition is true. |
 *
 */
export const listInvoices = <ThrowOnError extends boolean = false>(
  options?: Options<ListInvoicesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListInvoicesResponse,
    ListInvoicesError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/invoices",
  })
}

/**
 * Get invoice
 */
export const getInvoice = <ThrowOnError extends boolean = false>(
  options: Options<GetInvoiceData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetInvoiceResponse,
    GetInvoiceError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/invoices/{invoice_uuid}",
  })
}

/**
 * List invoice payments
 */
export const listInvoicePayments = <ThrowOnError extends boolean = false>(
  options: Options<ListInvoicePaymentsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListInvoicePaymentsResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/invoices/{invoice_uuid}/payments",
  })
}

/**
 * Get invoice payment
 */
export const getInvoicePayment = <ThrowOnError extends boolean = false>(
  options: Options<GetInvoicePaymentData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetInvoicePaymentResponse,
    GetInvoicePaymentError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/invoices/{invoice_uuid}/payments/{payment_uuid}",
  })
}

/**
 * Update Invoice Payment
 * External payment methods are payment methods not offered by Elastic Path Subscriptions (such as Elastic Path Payments powered by Stripe or Authorize.net), but they can still be integrated with Subscriptions. You can use the `Update Invoice Payment` endpoint to manually update a payment against an invoice where an external payment method is handling the payment of your invoices. See [External Payments](/docs/api/subscriptions/invoices#external-payments).
 *
 */
export const updateInvoicePayment = <ThrowOnError extends boolean = false>(
  options: Options<UpdateInvoicePaymentData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateInvoicePaymentResponse,
    UpdateInvoicePaymentError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/invoices/{invoice_uuid}/payments/{payment_uuid}",
  })
}

/**
 * List schedules
 * Retrieves a list of all schedules.
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For the general syntax, see [**Filtering**](/guides/Getting-Started/filtering).
 *
 * The following attributes and operators are supported.
 *
 * | Operator | Attribute | Description |
 * | --- | --- | --- |
 * | `eq` | `external_ref` | Equals. Checks if the values of two operands are equal. If they are, the condition is true. |
 *
 */
export const listSchedules = <ThrowOnError extends boolean = false>(
  options?: Options<ListSchedulesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListSchedulesResponse,
    ListSchedulesError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/schedules",
  })
}

/**
 * Create a schedule
 */
export const createSchedule = <ThrowOnError extends boolean = false>(
  options?: Options<CreateScheduleData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateScheduleResponse,
    CreateScheduleError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/schedules",
  })
}

/**
 * Delete schedule
 */
export const deleteSchedule = <ThrowOnError extends boolean = false>(
  options: Options<DeleteScheduleData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteScheduleResponse,
    DeleteScheduleError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/schedules/{schedule_uuid}",
  })
}

/**
 * Get a schedule
 */
export const getSchedule = <ThrowOnError extends boolean = false>(
  options: Options<GetScheduleData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetScheduleResponse,
    GetScheduleError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/schedules/{schedule_uuid}",
  })
}

/**
 * Update a schedule
 */
export const updateSchedule = <ThrowOnError extends boolean = false>(
  options: Options<UpdateScheduleData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateScheduleResponse,
    UpdateScheduleError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/schedules/{schedule_uuid}",
  })
}

/**
 * List subscribers
 * Retrieves a list of all subscribers.
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For the general syntax, see [**Filtering**](/guides/Getting-Started/filtering).
 *
 * The following attributes and operators are supported.
 *
 * | Operator | Attribute | Description |
 * | --- | --- | --- |
 * | `eq` | `account_id`, `name`, `email`, `external_ref` | Equals. Checks if the values of two operands are equal. If they are, the condition is true. |
 *
 */
export const listSubscribers = <ThrowOnError extends boolean = false>(
  options?: Options<ListSubscribersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListSubscribersResponse,
    ListSubscribersError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/subscribers",
  })
}

/**
 * Create a subscriber
 */
export const createSubscriber = <ThrowOnError extends boolean = false>(
  options?: Options<CreateSubscriberData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateSubscriberResponse,
    CreateSubscriberError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/subscribers",
  })
}

/**
 * Delete subscriber
 */
export const deleteSubscriber = <ThrowOnError extends boolean = false>(
  options: Options<DeleteSubscriberData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteSubscriberResponse,
    DeleteSubscriberError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/subscribers/{subscriber_uuid}",
  })
}

/**
 * Get a subscriber
 */
export const getSubscriber = <ThrowOnError extends boolean = false>(
  options: Options<GetSubscriberData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSubscriberResponse,
    GetSubscriberError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/subscribers/{subscriber_uuid}",
  })
}

/**
 * Update a subscriber
 */
export const updateSubscriber = <ThrowOnError extends boolean = false>(
  options: Options<UpdateSubscriberData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateSubscriberResponse,
    UpdateSubscriberError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/subscribers/{subscriber_uuid}",
  })
}

/**
 * List dunning rules
 * Retrieves a list of all dunning rule sets.
 *
 */
export const listDunningRules = <ThrowOnError extends boolean = false>(
  options?: Options<ListDunningRulesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListDunningRulesResponse,
    ListDunningRulesError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/dunning-rules",
  })
}

/**
 * Create a dunning rule
 * Dunning rules must use a `fixed` strategy. This means payments are retried on a fixed schedule.
 *
 * When an invoice is created, it immediately becomes eligible for payment by the next payment run. If the first payment attempt fails then the invoice enters dunning. In subsequent payment runs, invoices are only  considered for payment if they meet the dunning rules you create.
 *
 * You can configure a dunning rule to be the default for your store. There can only be one default rule per store. All invoices in your store will then perform dunning according to the specified rules.
 *
 * :::note
 * If no dunning rule is configured, then payment is retried once a day for 10 days, in total 11 payments. You can decide what action to take after the Subscriptions has stopped retrying the payments.
 * :::
 *
 * The following attributes are used to define a `fixed` schedule:
 *
 * - `payment_retry_unit - the unit of time used to measure the intervals between payment attempts or retries.
 * - `payment_retry_interval` - the number of `payment_interval-units` to wait between each payment retry attempt.
 * - `payment_retries_limit` - the number of times subscriptions attempts payments retries before an `action` is taken.
 * - `action` - the action to take if payment is not successful.
 *
 * For example, if:
 *
 * - the `payment_retry_unit` is `days`
 * - the `payment_retry_interval` is `2`
 * - the `payment_rety_limit` is `10`
 * - the `action` is `close`.
 *
 * Subscriptions attempts to retry the payment every 2 days until 10 payment attempts have been tried. At that point, the subscription ends and it's status changes to `inacive`.
 *
 * Following on from this, you can specify that the dunning rule is no longer the default. You do not have to specify another rule to replace it. If you do remove the default dunning rule, the store defaults to the behavior that is followed when dunning is not enabled.
 *
 */
export const createDunningRule = <ThrowOnError extends boolean = false>(
  options?: Options<CreateDunningRuleData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateDunningRuleResponse,
    CreateDunningRuleError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/dunning-rules",
  })
}

/**
 * Delete dunning rules
 * You can delete a dunning rule at any time. If a dunning rule is deleted then Subscriptions reverts to the configuration used if no dunning rule is set; payment is retried once a day for 10 days, in total 11 payments. You can decide what action to take after the Subscriptions has stopped retrying the payments. See [Dunning Rules](/docs/api/subscriptions/dunning-rules).
 */
export const deleteDunningRule = <ThrowOnError extends boolean = false>(
  options: Options<DeleteDunningRuleData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteDunningRuleResponse,
    DeleteDunningRuleError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/dunning-rules/{dunning_rule_uuid}",
  })
}

/**
 * Get dunning rule policy
 */
export const getDunningRule = <ThrowOnError extends boolean = false>(
  options: Options<GetDunningRuleData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetDunningRuleResponse,
    GetDunningRuleError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/dunning-rules/{dunning_rule_uuid}",
  })
}

/**
 * Update dunning rule policy
 * Specify whichever attributes you want to change. The values of the other attributes remain the same. If the attributes section is empty, the rule is not updated. For fields that are optional, an existing value can be removed by specifying a value of null.
 */
export const updateDunningRule = <ThrowOnError extends boolean = false>(
  options: Options<UpdateDunningRuleData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateDunningRuleResponse,
    UpdateDunningRuleError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/dunning-rules/{dunning_rule_uuid}",
  })
}

/**
 * List proration policies
 * Retrieves a list of all proration policies.
 *
 */
export const listProrationPolicies = <ThrowOnError extends boolean = false>(
  options?: Options<ListProrationPoliciesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListProrationPoliciesResponse,
    ListProrationPoliciesError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/proration-policies",
  })
}

/**
 * Create a Proration Policy
 * In Subscriptions, you configure proration by creating a proration policy and attaching it to an offering. Once you have [attached](/docs/api/subscriptions/manage-prorations-on-offering) the policy, the proration policy applies to all subscriptions that use the offering.
 *
 */
export const createProrationPolicy = <ThrowOnError extends boolean = false>(
  options?: Options<CreateProrationPolicyData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateProrationPolicyResponse,
    CreateProrationPolicyError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/proration-policies",
  })
}

/**
 * Delete proration policy
 * A proration policy cannot be deleted if it is being used by any subscriptions. This means you must detach a proration policy that you want to delete from any offerings using that policy before deleting the policy. See [Remove a proration policy from an offering](/docs/api/subscriptions/manage-prorations-on-offering).
 */
export const deleteProrationPolicy = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProrationPolicyData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteProrationPolicyResponse,
    DeleteProrationPolicyError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/proration-policies/{proration_policy_uuid}",
  })
}

/**
 * Get proration policy
 */
export const getProrationPolicy = <ThrowOnError extends boolean = false>(
  options: Options<GetProrationPolicyData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetProrationPolicyResponse,
    GetProrationPolicyError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/proration-policies/{proration_policy_uuid}",
  })
}

/**
 * Update proration policy
 * You can update a proration policy at any time. For any subscriptions that are using the updated proration policy, the changes are also applied. Specify whichever attributes you want to change. The values of the other attributes remain the same. If the attributes section is empty, the proration policy is not updated.
 *
 * When updating proration policies:
 *
 * - You can change the name of an existing policy.
 * - You can update `rounding`.
 * - You can update `external_ref` as long as `external_ref` is still unique in  your store.
 * - You can remove `external_ref` as this attribute is optional.
 * - You cannot remove any required attributes, such as `name` or `rounding`.
 *
 */
export const updateProrationPolicy = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProrationPolicyData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateProrationPolicyResponse,
    UpdateProrationPolicyError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/proration-policies/{proration_policy_uuid}",
  })
}

/**
 * List features
 * Retrieves a list of all subscription features.
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For the general syntax, see [**Filtering**](/guides/Getting-Started/filtering).
 *
 * The following attributes and operators are supported.
 *
 * | Operator | Attribute | Description |
 * | --- | --- | --- |
 * | `eq` | `external_ref` | Equals. Checks if the values of two operands are equal. If they are, the condition is true. |
 * | `eq` | `tag` | Equals. Checks if the values of two operands are equal. If they are, the condition is true. |
 *
 */
export const listFeatures = <ThrowOnError extends boolean = false>(
  options?: Options<ListFeaturesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListFeaturesResponse,
    ListFeaturesError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/features",
  })
}

/**
 * Create a feature
 */
export const createFeature = <ThrowOnError extends boolean = false>(
  options?: Options<CreateFeatureData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateFeatureResponse,
    CreateFeatureError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/features",
  })
}

/**
 * Delete feature
 * Remove a feature.
 */
export const deleteFeature = <ThrowOnError extends boolean = false>(
  options: Options<DeleteFeatureData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteFeatureResponse,
    DeleteFeatureError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/features/{feature_uuid}",
  })
}

/**
 * Get feature
 */
export const getFeature = <ThrowOnError extends boolean = false>(
  options: Options<GetFeatureData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetFeatureResponse,
    GetFeatureError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/features/{feature_uuid}",
  })
}

/**
 * Update a feature
 * Specify whichever attributes you want to change. The values of the other attributes remain the same. If the attributes section is empty, the feature is not updated. For fields that are optional, an existing value can be removed by specifying a value of null.
 */
export const updateFeature = <ThrowOnError extends boolean = false>(
  options: Options<UpdateFeatureData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateFeatureResponse,
    UpdateFeatureError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/subscriptions/features/{feature_uuid}",
  })
}
