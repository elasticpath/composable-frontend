// This file is auto-generated by @hey-api/openapi-ts

import type {
  ListOfferingsResponse,
  GetOfferingResponse,
  ListOfferingPricingOptionsResponse,
  CreateOfferingPricingOptionResponse,
  UpdateOfferingPricingOptionResponse,
  ListOfferingPlansResponse,
  CreateOfferingPlanResponse,
  UpdateOfferingPlanResponse,
  ListSubscriptionsResponse,
  GetSubscriptionResponse,
  ListSubscriptionPlansResponse,
  ListSubscriptionPricingOptionsResponse,
  ListSubscriptionInvoicesResponse,
  ListSubscriptionInvoicePaymentsResponse,
  GetSubscriptionInvoicePaymentResponse,
  GetSubscriptionInvoiceResponse,
  ListInvoicesResponse,
  GetInvoiceResponse,
  ListInvoicePaymentsResponse,
  GetInvoicePaymentResponse,
  UpdateInvoicePaymentResponse,
  ListSchedulesResponse,
  CreateScheduleResponse,
  GetScheduleResponse,
  UpdateScheduleResponse,
  ListDunningRulesResponse,
  CreateDunningRuleResponse,
  GetDunningRuleResponse,
  UpdateDunningRuleResponse,
} from "./types.gen"

const priceFormattingSchemaResponseTransformer = (data: any) => {
  data.amount = BigInt(data.amount.toString())
  return data
}

const displayPriceSchemaResponseTransformer = (data: any) => {
  if (data.without_tax) {
    data.without_tax = priceFormattingSchemaResponseTransformer(
      data.without_tax,
    )
  }
  if (data.with_tax) {
    data.with_tax = priceFormattingSchemaResponseTransformer(data.with_tax)
  }
  return data
}

const planMetaSchemaResponseTransformer = (data: any) => {
  if (data.display_price) {
    data.display_price = displayPriceSchemaResponseTransformer(
      data.display_price,
    )
  }
  return data
}

const offeringPlanSchemaResponseTransformer = (data: any) => {
  data.meta = planMetaSchemaResponseTransformer(data.meta)
  return data
}

const offeringPricingOptionMetaSchemaResponseTransformer = (data: any) => {
  if (data.display_price) {
    data.display_price = displayPriceSchemaResponseTransformer(
      data.display_price,
    )
  }
  return data
}

const offeringPricingOptionSchemaResponseTransformer = (data: any) => {
  data.meta = offeringPricingOptionMetaSchemaResponseTransformer(data.meta)
  return data
}

const offeringIncludesSchemaResponseTransformer = (data: any) => {
  if (data.plans) {
    data.plans = data.plans.map((item: any) => {
      return offeringPlanSchemaResponseTransformer(item)
    })
  }
  if (data.pricing_options) {
    data.pricing_options = data.pricing_options.map((item: any) => {
      return offeringPricingOptionSchemaResponseTransformer(item)
    })
  }
  return data
}

export const listOfferingsResponseTransformer = async (
  data: any,
): Promise<ListOfferingsResponse> => {
  if (data.included) {
    data.included = offeringIncludesSchemaResponseTransformer(data.included)
  }
  return data
}

export const getOfferingResponseTransformer = async (
  data: any,
): Promise<GetOfferingResponse> => {
  if (data.included) {
    data.included = offeringIncludesSchemaResponseTransformer(data.included)
  }
  return data
}

export const listOfferingPricingOptionsResponseTransformer = async (
  data: any,
): Promise<ListOfferingPricingOptionsResponse> => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return offeringPricingOptionSchemaResponseTransformer(item)
    })
  }
  return data
}

export const createOfferingPricingOptionResponseTransformer = async (
  data: any,
): Promise<CreateOfferingPricingOptionResponse> => {
  if (data.data) {
    data.data = offeringPricingOptionSchemaResponseTransformer(data.data)
  }
  return data
}

export const updateOfferingPricingOptionResponseTransformer = async (
  data: any,
): Promise<UpdateOfferingPricingOptionResponse> => {
  if (data.data) {
    data.data = offeringPricingOptionSchemaResponseTransformer(data.data)
  }
  return data
}

export const listOfferingPlansResponseTransformer = async (
  data: any,
): Promise<ListOfferingPlansResponse> => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return offeringPlanSchemaResponseTransformer(item)
    })
  }
  return data
}

export const createOfferingPlanResponseTransformer = async (
  data: any,
): Promise<CreateOfferingPlanResponse> => {
  if (data.data) {
    data.data = offeringPlanSchemaResponseTransformer(data.data)
  }
  return data
}

export const updateOfferingPlanResponseTransformer = async (
  data: any,
): Promise<UpdateOfferingPlanResponse> => {
  if (data.data) {
    data.data = offeringPlanSchemaResponseTransformer(data.data)
  }
  return data
}

const subscriptionIncludesSchemaResponseTransformer = (data: any) => {
  if (data.plans) {
    data.plans = data.plans.map((item: any) => {
      return offeringPlanSchemaResponseTransformer(item)
    })
  }
  if (data.pricing_options) {
    data.pricing_options = data.pricing_options.map((item: any) => {
      return offeringPricingOptionSchemaResponseTransformer(item)
    })
  }
  return data
}

export const listSubscriptionsResponseTransformer = async (
  data: any,
): Promise<ListSubscriptionsResponse> => {
  if (data.included) {
    data.included = subscriptionIncludesSchemaResponseTransformer(data.included)
  }
  return data
}

export const getSubscriptionResponseTransformer = async (
  data: any,
): Promise<GetSubscriptionResponse> => {
  if (data.included) {
    data.included = subscriptionIncludesSchemaResponseTransformer(data.included)
  }
  return data
}

export const listSubscriptionPlansResponseTransformer = async (
  data: any,
): Promise<ListSubscriptionPlansResponse> => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return offeringPlanSchemaResponseTransformer(item)
    })
  }
  return data
}

export const listSubscriptionPricingOptionsResponseTransformer = async (
  data: any,
): Promise<ListSubscriptionPricingOptionsResponse> => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return offeringPricingOptionSchemaResponseTransformer(item)
    })
  }
  return data
}

const timePeriodSchemaResponseTransformer = (data: any) => {
  data.start = new Date(data.start)
  data.end = new Date(data.end)
  return data
}

const singleCurrencyPriceSchemaResponseTransformer = (data: any) => {
  data.amount = BigInt(data.amount.toString())
  return data
}

const subscriptionInvoiceItemSchemaResponseTransformer = (data: any) => {
  data.price = singleCurrencyPriceSchemaResponseTransformer(data.price)
  return data
}

const subscriptionInvoiceAttributesSchemaResponseTransformer = (data: any) => {
  data.billing_period = timePeriodSchemaResponseTransformer(data.billing_period)
  data.invoice_items = data.invoice_items.map((item: any) => {
    return subscriptionInvoiceItemSchemaResponseTransformer(item)
  })
  return data
}

const prorationEventSchemaResponseTransformer = (data: any) => {
  data.billing_cost_before_proration = BigInt(
    data.billing_cost_before_proration.toString(),
  )
  data.refunded_amount_for_unused_pricing_option = BigInt(
    data.refunded_amount_for_unused_pricing_option.toString(),
  )
  data.new_pricing_option_cost = BigInt(data.new_pricing_option_cost.toString())
  return data
}

const subscriptionInvoiceMetaSchemaResponseTransformer = (data: any) => {
  if (data.price) {
    data.price = singleCurrencyPriceSchemaResponseTransformer(data.price)
  }
  data.proration_events = data.proration_events.map((item: any) => {
    return prorationEventSchemaResponseTransformer(item)
  })
  return data
}

const subscriptionInvoiceSchemaResponseTransformer = (data: any) => {
  data.attributes = subscriptionInvoiceAttributesSchemaResponseTransformer(
    data.attributes,
  )
  data.meta = subscriptionInvoiceMetaSchemaResponseTransformer(data.meta)
  return data
}

export const listSubscriptionInvoicesResponseTransformer = async (
  data: any,
): Promise<ListSubscriptionInvoicesResponse> => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return subscriptionInvoiceSchemaResponseTransformer(item)
    })
  }
  return data
}

const subscriptionInvoicePaymentAttributesSchemaResponseTransformer = (
  data: any,
) => {
  data.amount = singleCurrencyPriceSchemaResponseTransformer(data.amount)
  return data
}

const subscriptionInvoicePaymentSchemaResponseTransformer = (data: any) => {
  data.attributes =
    subscriptionInvoicePaymentAttributesSchemaResponseTransformer(
      data.attributes,
    )
  return data
}

export const listSubscriptionInvoicePaymentsResponseTransformer = async (
  data: any,
): Promise<ListSubscriptionInvoicePaymentsResponse> => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return subscriptionInvoicePaymentSchemaResponseTransformer(item)
    })
  }
  return data
}

export const getSubscriptionInvoicePaymentResponseTransformer = async (
  data: any,
): Promise<GetSubscriptionInvoicePaymentResponse> => {
  if (data.data) {
    data.data = subscriptionInvoicePaymentSchemaResponseTransformer(data.data)
  }
  return data
}

export const getSubscriptionInvoiceResponseTransformer = async (
  data: any,
): Promise<GetSubscriptionInvoiceResponse> => {
  if (data.data) {
    data.data = subscriptionInvoiceSchemaResponseTransformer(data.data)
  }
  return data
}

export const listInvoicesResponseTransformer = async (
  data: any,
): Promise<ListInvoicesResponse> => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return subscriptionInvoiceSchemaResponseTransformer(item)
    })
  }
  return data
}

export const getInvoiceResponseTransformer = async (
  data: any,
): Promise<GetInvoiceResponse> => {
  if (data.data) {
    data.data = subscriptionInvoiceSchemaResponseTransformer(data.data)
  }
  return data
}

export const listInvoicePaymentsResponseTransformer = async (
  data: any,
): Promise<ListInvoicePaymentsResponse> => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return subscriptionInvoicePaymentSchemaResponseTransformer(item)
    })
  }
  return data
}

export const getInvoicePaymentResponseTransformer = async (
  data: any,
): Promise<GetInvoicePaymentResponse> => {
  if (data.data) {
    data.data = subscriptionInvoicePaymentSchemaResponseTransformer(data.data)
  }
  return data
}

export const updateInvoicePaymentResponseTransformer = async (
  data: any,
): Promise<UpdateInvoicePaymentResponse> => {
  data.data = subscriptionInvoicePaymentSchemaResponseTransformer(data.data)
  return data
}

const scheduleMetaSchemaResponseTransformer = (data: any) => {
  if (data.scheduled_for) {
    data.scheduled_for = new Date(data.scheduled_for)
  }
  return data
}

const scheduleSchemaResponseTransformer = (data: any) => {
  data.meta = scheduleMetaSchemaResponseTransformer(data.meta)
  return data
}

export const listSchedulesResponseTransformer = async (
  data: any,
): Promise<ListSchedulesResponse> => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return scheduleSchemaResponseTransformer(item)
    })
  }
  return data
}

export const createScheduleResponseTransformer = async (
  data: any,
): Promise<CreateScheduleResponse> => {
  if (data.data) {
    data.data = scheduleSchemaResponseTransformer(data.data)
  }
  return data
}

export const getScheduleResponseTransformer = async (
  data: any,
): Promise<GetScheduleResponse> => {
  if (data.data) {
    data.data = scheduleSchemaResponseTransformer(data.data)
  }
  return data
}

export const updateScheduleResponseTransformer = async (
  data: any,
): Promise<UpdateScheduleResponse> => {
  if (data.data) {
    data.data = scheduleSchemaResponseTransformer(data.data)
  }
  return data
}

const dunningRuleAttributesSchemaResponseTransformer = (data: any) => {
  if (data.payment_retry_interval) {
    data.payment_retry_interval = BigInt(data.payment_retry_interval.toString())
  }
  data.payment_retries_limit = BigInt(data.payment_retries_limit.toString())
  return data
}

const dunningRuleSchemaResponseTransformer = (data: any) => {
  data.attributes = dunningRuleAttributesSchemaResponseTransformer(
    data.attributes,
  )
  return data
}

export const listDunningRulesResponseTransformer = async (
  data: any,
): Promise<ListDunningRulesResponse> => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return dunningRuleSchemaResponseTransformer(item)
    })
  }
  return data
}

export const createDunningRuleResponseTransformer = async (
  data: any,
): Promise<CreateDunningRuleResponse> => {
  if (data.data) {
    data.data = dunningRuleSchemaResponseTransformer(data.data)
  }
  return data
}

export const getDunningRuleResponseTransformer = async (
  data: any,
): Promise<GetDunningRuleResponse> => {
  if (data.data) {
    data.data = dunningRuleSchemaResponseTransformer(data.data)
  }
  return data
}

export const updateDunningRuleResponseTransformer = async (
  data: any,
): Promise<UpdateDunningRuleResponse> => {
  if (data.data) {
    data.data = dunningRuleSchemaResponseTransformer(data.data)
  }
  return data
}
