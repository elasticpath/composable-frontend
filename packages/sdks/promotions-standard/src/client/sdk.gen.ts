// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from "@hey-api/client-fetch"
import type {
  GetAllPromotionsData,
  GetAllPromotionsResponse,
  GetAllPromotionsError,
  CreateAPromotionData,
  CreateAPromotionResponse,
  CreateAPromotionError,
  DeleteAPromotionData,
  DeleteAPromotionResponse,
  DeleteAPromotionError,
  GetAPromotionData,
  GetAPromotionResponse,
  GetAPromotionError,
  UpdateAPromotionData,
  UpdateAPromotionResponse,
  UpdateAPromotionError,
  GetAPromotionHistoryData,
  GetAPromotionHistoryResponse,
  GetAPromotionHistoryError,
  DeleteMultiplePromotionCodesData,
  DeleteMultiplePromotionCodesResponse,
  DeleteMultiplePromotionCodesError,
  GetPromotionCodesData,
  GetPromotionCodesResponse,
  GetPromotionCodesError,
  CreatePromotionCodesData,
  CreatePromotionCodesResponse,
  CreatePromotionCodesError,
  DeleteAPromotionCodeData,
  DeleteAPromotionCodeResponse,
  DeleteAPromotionCodeError,
  GetV2PromotionsByPromotionIdJobsData,
  GetV2PromotionsByPromotionIdJobsResponse,
  PostV2PromotionsByPromotionIdJobsData,
  PostV2PromotionsByPromotionIdJobsResponse,
  PostV2PromotionsByPromotionIdJobsByJobIdCancelData,
  PostV2PromotionsByPromotionIdJobsByJobIdCancelResponse,
  GetV2PromotionsByPromotionIdJobsByJobIdFileData,
  GetV2PromotionsByPromotionIdJobsByJobIdFileResponse,
} from "./types.gen"

export const client = createClient(createConfig())

/**
 * Get all Promotions
 * Returns all promotions.
 *
 * :::note
 *
 * You can use pagination with this resource. For more information, see [pagination](/guides/Getting-Started/pagination).
 *
 * :::
 *
 * ### Filtering
 *
 * The following operators and attributes are available when filtering on this endpoint. See [Supported Filtering Characters](https://elasticpath.dev/guides/Getting-Started/filtering#supported-characters).
 *
 * Use `code` filter to search codes within promotions.
 *
 * | Attribute | Type | Operator     | Example                            |
 * |:-----|:---------|:---------|:----------------------------------------|
 * | `code` |  `string`   | `eq` | `eq(code,some_code)`          |
 *
 * For filtering advanced promotion usages, pass the `EP-Public-Search-Type=cm_search` header. Advanced search filtering is only applicable when the promotion code is consumed and the promotion is not deleted.
 *
 * | Attribute | Type | Operator     | Example                            |
 * |:-----|:---------|:---------|:----------------------------------------|
 * | `promo_id`                    | `string`        |  `eq`	                  | `eq(promo_id, 69c63c9d-8ccf-44b1-8e98-1e7feebfb581)` |
 * | `promo_name`                  |`string`	      | `eq`, `like`	              | `eq(promo_name,cart percent discount)` |
 * | `promo_type`                  | `string`	      | `eq`	                  | `eq(promo_type,fixed_discount)` |
 * | `promo_status`                | `string`	      | `eq`	                  | `eq(promo_status,Running)` |
 * | `promo_checkouts`            | `string`	      | `eq`,`gt`, `ge`, `lt`, `le`	      | `eq(promo_checkouts,2)` |
 * | `promo_skus_prod_ids`         |	`string`	  | `eq`, `like`	              | `eq(promo_skus_prod_ids, sku1)` |
 * | `promo_start_date`            |	`string`	| `eq`, `gt`, `gr`, `lt`, `le`      | `eq(promo_start_date,2023-01-01)` |
 * | `promo_end_date`              |	`string`  | `eq`, `gt`, `gr`, `lt`, `le`	  | `eq(promo_end_date,2050-06-15)` |
 * | `code_id`	                  | `string`  | `eq`                  | `eq(promo_id,2ea0cd1d-43a9-441b-b03f-3cab84aaee0c):eq(code_id,14b55e6c-3f80-436e-a90a-4de5f0e36240)`  |
 * | `code_code`                   |  `string` | `eq`, `like`                | 	`eq(code_code,cart_fixed_10)` |
 * | `code_used`	                  | `string`  | `eq`, `gt`, `gr`, `lt`, `le`	  | `eq(code_used,2)` |
 * | `code_created_date`           |	`string`	| `eq`, `gt`, `gr`, `lt`, `le`	  | `eq(code_created_date,2023-11-15)` |
 * | `order_id`                    |	`string`  | `eq`, `like`	              | `eq(order_id,ccb13673-627c-4976-88da-f77c542b528f)`  |
 * | `order_customer_email`	      | `string`  | `eq`, `like`	              | `like(order_customer_email,andy*)`  |
 * | `order_created_date`	      |  `string`	| `eq`, `gt`, `gr`,`lt`, `le`	      |  `le(order_created_date,2023-11-15)`  |
 *
 */
export const getAllPromotions = <ThrowOnError extends boolean = false>(
  options: Options<GetAllPromotionsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAllPromotionsResponse,
    GetAllPromotionsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/promotions",
  })
}

/**
 * Create a Promotion
 * You can use this endpoint to create the following types of promotion:
 * - Cart Fixed Discount Promotion
 * - Cart Percent Discount Promotion
 * - X for Y Discount Promotion
 * - X for Amount Discount Promotion
 * - Fixed Bundle Discount Promotion
 * - Item Fixed Discount Promotion
 * - Item Percent Discount Promotion
 * - Free Gift Promotion
 *
 * ### The `schema` object
 *
 * Promotions are defined by schemas that are used internally to verify promotions and calculate discounts. You must define a schema when you create the promotion. For more information, see the schema.exclude criteria and the targeting fields criteria.
 *
 * #### The `schema.exclude` criteria
 *
 * When creating a promotion, you can specify when it **should not** be applied. The promotion will not be applied on any cart (or cart item, depending on the promotion type) that fulfills at least one of the `schema.exclude` criteria. The following criteria can be set to exclude items from a promotion:
 *
 * - `schema.exclude.targets`
 * - `schema.exclude.nodes`
 * - `schema.exclude.attributes`
 * - `schema.exclude.conditions`
 *
 * For example, if you want to create a promotion with value as *SKU1* in `schema.exclude.targets` and and color *yellow* and size *small* in `schema.exclude.attributes`, then any products with *SKU1* or the color *yellow* or the size *small* will be excluded from the promotion.
 *
 * To exclude products from a promotion based on multiple conditions at the same time, use `schema.exclude.conditions`. For example, use `schema.exclude.conditions` to exclude items that are both *yellow* in color and *small* in size.
 *
 * #### The targeting fields criteria
 *
 * When creating a promotion, you can also specify when it **should** be applied. To define the targeted products, use the following fields:
 *
 * - `schema.target_catalogs`
 * - `schema.targets`
 * - `schema.target_nodes`
 * - `schema.target_attributes`
 * - `schema.target_conditions`
 *
 * The cart item's catalog is verified if you define the `schema.target_catalogs` field. If the item is in any of the targeted catalogs specified in `schema.target_catalogs`, the promotion will be applied. If the item is not in any of the catalogs, the promotion will not be applied.
 *
 * Then, the cart item is verified to see if it fulfills at least one criteria of any of the four other targeting fields. In other words, the `schema` targeting fields such as `schema.targets`, `schema.target_nodes`, `schema.target_attributes` and `schema.target_conditions` create *OR* targeting conditions.
 *
 * For example, if you create a promotion with values as *SKU1* in `schema.targets` and color *yellow* and size *small* in `schema.target_attributes`, then it will be applied to any products with *SKU1* or the color *yellow* or the size *small*.
 *
 * To create a promotion that targets products based on multiple conditions at the same time, use `schema.target_conditions`. For example, use it to target items that are both *yellow* in color and *small* in size.
 *
 * :::note
 *
 * For Cart Fixed Discount Promotion and Cart Percent Discount Promotion, the cart item's catalog is verified if you define the `schema.target_catalogs` field. If the item is in any of the targeted catalogs specified in `schema.target_catalogs`, the promotion will be applied. If the item is not in any of the catalogs, the promotion will not be applied.
 *
 * :::
 *
 * :::caution
 *
 * - Line-item discounts are only supported by the line calculation method. For more information about this method, see the Calculation Method section.
 * - Hierarchy-based promotions are not supported for fixed bundle discount promotion and free gift promotion. To promote a bundle, create the bundle in Product Experience Manager, and then create a promotion for that bundle. For more information, see Bundles in Product Experience Manager.
 * - For Free Gift Promotion, we recommend using `auto_add_free_gift` feature with `automatic` setting enabled. When `automatic` is set to `true`, it indicates that promotions are added automatically, and discounts are applied accordingly. If you enable the `auto_add_free_gift`, but do not enable the `automatic` setting, gift items will be added without discounts. In this case, shoppers need to apply coupon codes twice, first to add the gift item and then to apply the discount.
 *
 * :::
 *
 */
export const createAPromotion = <ThrowOnError extends boolean = false>(
  options: Options<CreateAPromotionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateAPromotionResponse,
    CreateAPromotionError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/promotions",
  })
}

/**
 * Delete a Promotion
 * Use this endpoint to delete a specific promotion.
 */
export const deleteAPromotion = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAPromotionData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteAPromotionResponse,
    DeleteAPromotionError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/promotions/{promotionID}",
  })
}

/**
 * Get a Promotion
 * Retrieves a promotion.
 */
export const getAPromotion = <ThrowOnError extends boolean = false>(
  options: Options<GetAPromotionData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAPromotionResponse,
    GetAPromotionError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/promotions/{promotionID}",
  })
}

/**
 * Update a Promotion
 * Use this endpoint to update a specific promotion.
 *
 * :::note
 *
 * You can re-enable an expired promotion by updating the end date to a future date. However, when you enable a promotion again, all codes previously attached to it are deleted to make sure that duplicate promotion codes do not exist on different promotions.
 *
 * :::
 *
 * ### Errors
 *
 * When extending the end date of an expired promotion with over 1000 codes, you will receive the following error response. In such cases, we recommend duplicating the promotion, allowing you to set the new end dates and create promotion codes as needed.
 *
 * ```json
 * {
 * "errors": [
 * {
 * "status": 422,
 * "source": "request",
 * "title": "Unprocessable Entity",
 * "detail": ""
 * }
 * ]
 * }
 * ```
 *
 */
export const updateAPromotion = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAPromotionData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateAPromotionResponse,
    UpdateAPromotionError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/promotions/{promotionID}",
  })
}

/**
 * Get a Promotion History
 * Use this endpoint to retrieve a promotion history.
 */
export const getAPromotionHistory = <ThrowOnError extends boolean = false>(
  options: Options<GetAPromotionHistoryData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAPromotionHistoryResponse,
    GetAPromotionHistoryError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/promotions/{promotionID}/history",
  })
}

/**
 * Delete Multiple Promotion Codes
 * Use this endpoint to delete multiple promotion codes within a specific promotion.
 */
export const deleteMultiplePromotionCodes = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteMultiplePromotionCodesData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteMultiplePromotionCodesResponse,
    DeleteMultiplePromotionCodesError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/promotions/{promotionID}/codes",
  })
}

/**
 * Get Promotion Codes
 * You can use this endpoint to retrieve promotion codes.
 *
 * :::note
 * - The `codes.max_uses` attribute represents the maximum usage of the codes.
 * - The `codes.uses` attribute represents the remaining number of times the codes can be used for the promotion.
 * - Codes created before April 27, 2023 will only have `codes.uses` attribute in the response body.
 * :::
 *
 */
export const getPromotionCodes = <ThrowOnError extends boolean = false>(
  options: Options<GetPromotionCodesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPromotionCodesResponse,
    GetPromotionCodesError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/promotions/{promotionID}/codes",
  })
}

/**
 * Create Promotion Codes
 * Use this endpoint to create promotion codes for a specific promotion.
 *
 * :::note
 *
 * When a promotion expires, the promotion codes attached to the promotion automatically become invalid. However, when you re-enable the expired promotion, the promotion codes attached to the promotion are deleted.
 *
 * :::
 *
 */
export const createPromotionCodes = <ThrowOnError extends boolean = false>(
  options: Options<CreatePromotionCodesData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreatePromotionCodesResponse,
    CreatePromotionCodesError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/promotions/{promotionID}/codes",
  })
}

/**
 * Delete a Promotion Code
 * Use this endpoint to delete a single promotion code.
 */
export const deleteAPromotionCode = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAPromotionCodeData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteAPromotionCodeResponse,
    DeleteAPromotionCodeError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/promotions/{promotionID}/codes/{code}",
  })
}

/**
 * Get Promotion Jobs
 * Retrieves the list of jobs for a specific promotion.
 *
 * In the response example, you can see the `result.generated` field, which indicates the number of codes generated during the job processing. Additionally, you may also see the optional `result.deleted` field, indicating the number of codes deleted during the job cancellation. The parameters and result objects are shown only when `job_type` is `code_generate`.
 *
 * ### Filtering
 *
 * The following operators and attributes are available when filtering on this endpoint.
 *
 * | Attribute | Type | Operator | Example |
 * | ----------| ----- | -------- | ------ |
 * | `job_type` | `string` | `eq` | `eq(job_type, code_export)` |
 * | `status` | `string` | `eq` | `eq(status, complete)` |
 *
 * ### Errors
 *
 * If an error occurs during job processing, the response includes an optional error field. For example, when you `GET` promotion jobs, the following response shows the details within the error field if an error occurred during job processing.
 *
 * ```json
 * {
 * "data": [
 * {
 * "type": "promotion_job",
 * "id": "84d86114-a92d-4c34-92f1-3e36ef6cabeb",
 * "promotion_id": "ad386702-e780-42c6-b190-0527ad768917",
 * "job_type": "code_generate",
 * "name": "job",
 * "parameters": {
 * "number_of_codes": 1000,
 * "consume_unit": "per_cart",
 * "max_uses_per_code": 1,
 * "code_length": 8,
 * "code_prefix": "promo-"
 * },
 * "status": "failed",
 * "error": "codes limit exceeded",
 * "meta": {
 * "timestamps": {
 * "created_at": "2023-12-06T13:52:29.587Z",
 * "updated_at": "2023-12-06T13:54:49.133Z"
 * }
 * }
 * }
 * ],
 * "links": {
 * "current": "https://useast.api.elasticpath.com/v2/promotions/ad386702-e780-42c6-b190-0527ad768917/jobs?page[offset]=0&page[limit]=25",
 * "first": "https://useast.api.elasticpath.com/v2/promotions/ad386702-e780-42c6-b190-0527ad768917/jobs?page[offset]=0&page[limit]=25",
 * "last": "https://useast.api.elasticpath.com/v2/promotions/ad386702-e780-42c6-b190-0527ad768917/jobs?page[offset]=0&page[limit]=25",
 * "prev": "https://useast.api.elasticpath.com/v2/promotions/ad386702-e780-42c6-b190-0527ad768917/jobs?page[offset]=0&page[limit]=25",
 * "next": "https://useast.api.elasticpath.com/v2/promotions/ad386702-e780-42c6-b190-0527ad768917/jobs?page[offset]=0&page[limit]=25"
 * },
 * "meta": {
 * "page": {
 * "limit": 25,
 * "offset": 0,
 * "current": 1,
 * "total": 1
 * },
 * "results": {
 * "total": 1
 * }
 * }
 * }
 * ```
 *
 */
export const getV2PromotionsByPromotionIdJobs = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetV2PromotionsByPromotionIdJobsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetV2PromotionsByPromotionIdJobsResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/promotions/{promotionID}/jobs",
  })
}

/**
 * Create a Promotion Job
 * Use this endpoint to create an asynchronous job to generate codes and export promotion codes.
 */
export const postV2PromotionsByPromotionIdJobs = <
  ThrowOnError extends boolean = false,
>(
  options: Options<PostV2PromotionsByPromotionIdJobsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostV2PromotionsByPromotionIdJobsResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/promotions/{promotionID}/jobs",
  })
}

/**
 * Cancel a Job
 * Cancels an asynchronous job whose status is pending or processing.
 */
export const postV2PromotionsByPromotionIdJobsByJobIdCancel = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    PostV2PromotionsByPromotionIdJobsByJobIdCancelData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).post<
    PostV2PromotionsByPromotionIdJobsByJobIdCancelResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/promotions/{promotionID}/jobs/{jobID}/cancel",
  })
}

/**
 * Get Promotion Code Exported File
 * Retrieves exported codes in a CSV format.
 */
export const getV2PromotionsByPromotionIdJobsByJobIdFile = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetV2PromotionsByPromotionIdJobsByJobIdFileData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).get<
    GetV2PromotionsByPromotionIdJobsByJobIdFileResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/promotions/{promotionID}/jobs/{jobID}/file",
  })
}
