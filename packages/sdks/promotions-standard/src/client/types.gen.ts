// This file is auto-generated by @hey-api/openapi-ts

export type DataAttributeObject = {
  attribute?: {
    /**
     * Specifies the name of the template slug to be excluded from a promotion.
     */
    template?: string
    /**
     * Specifies the unique slug identifier for the field excluded from a promotion.
     */
    field?: string
    /**
     * Specifies the type of the field, such as `string`, `integer`, `boolean`, `float`, or `date`.
     */
    type?: string
    /**
     * Specifies the value of the field that was specified in the `attributes.field`. For example, you can specify any color in the value if you indicate color in the `attributes.field`.
     */
    value?: string
  }
}

export type DataNodesObject = {
  node?: {
    /**
     * Specifies unique identifiers of the nodes to be excluded from the promotion.
     */
    values?: Array<string>
  }
}

export type DataConditions = {
  or?: Array<{
    and?: Array<DataAttributeObject | DataNodesObject>
  }>
}

export type DataPromotionsSchemaTargetCatalogs = {
  /**
   * Specifies the unique identifiers of the catalogs to be applied for this promotion. If you do not set this parameter, promotion will be applied to all catalogs.
   */
  target_catalogs?: Array<string>
}

export type DataPromotionsSchemaTargets = {
  /**
   * Specifies the product SKUs or unique identifiers of the products included in the promotion. Set "targets:all" if you want to apply the promotion to all SKUs. Leaving this field empty might cause errors. You need to define `schema.targets`, `schema.target_nodes` or `schema.target_attributes`, or all three of them to qualify for this promotion.
   */
  targets?: Array<string>
}

export type DataPromotionsSchemaTargetNodes = {
  /**
   * Specifies the unique identifiers of the nodes to be applied for the promotion in addition to the product SKUs applied in targets. You can also define `schema.target_nodes` without defining the `schema.targets` if the promotion is intended for a certain node. You cannot define "targets":"all" and `schema.target_nodes` within the same schema. This will result in a validation error.
   */
  target_nodes?: Array<string>
}

export type DataPromotionsSchemaTargetAttributes = {
  target_attributes?: Array<{
    /**
     * Specifies the name of the template slug to be included in a promotion.
     */
    template?: string
    /**
     * Specifies the unique slug identifier for the field to be included in a promotion.
     */
    field?: string
    /**
     * Specifies the type of the field, such as `string`, `integer`, `boolean`, `float`, or `date`.
     */
    type?: string
    /**
     * Specifies the value of the field that was specified in the `attributes.type`. For example, you can specify any color in the value if you indicate color in the `attributes.field`.
     */
    value?: string
  }>
}

export type DataPromotionsSchemaCurrenciesAmountAndCurrency = {
  /**
   * Specifies the fixed discount amount to be applied to the cart. For example, $10 off the total amount in the cart.
   */
  amount: number
  /**
   * Specifies a three-letter currency code. For example, USD.
   */
  currency: string
}

export type DataPromotionsSchemaXValue = {
  /**
   * Specifies the X value for the promotion.
   */
  x: number
}

export type DataPromotionsSchemaYValue = {
  /**
   * Specifies the Y value for the promotion.
   */
  y: number
}

export type DataPromotionsSchemaRequirements = {
  requirements: Array<DataPromotionsSchemaRequirement>
}

export type DataPromotionsSchemaGifts = {
  /**
   * Specifies all the gift items that a shopper can avail when they qualify for the promotion. The gift quantity applies to each specified item. For example, if the promotion includes `giftA` and `giftB`, shopper can avail both the gifts if the cart qualifies for the gift promotion. If the cart qualifies for two gift promotions, the shopper can use two `giftA` and two `giftB`.
   */
  gifts: Array<string>
  /**
   * When set to `true`, free gift items are automatically added to the shopping cart for all the eligible products. Default is `false`.
   */
  auto_add_free_gift?: boolean
}

export type DataPromotionsSchemaRequirement = {
  /**
   * Specifies an array of required product SKUs or IDs for the bundle discount promotion.
   */
  targets: Array<string>
  /**
   * Specifies the quantities of products to be applied for the promotion.
   */
  quantity: number
}

export type DataPromotionsSchemaAmountAndCurrencyArray = {
  currencies: Array<DataPromotionsSchemaCurrenciesAmountAndCurrency>
}

export type DataPromotionsSchemaPercent = {
  /**
   * Specifies the discount percentage to be applied to the targeted SKU price. For example, 10% discount on a product SKU priced at $100. You can specify the discount percentage with up to six decimal places.
   */
  percent: number
}

export type DataPromotionsSchemaCurrenciesPercentageAndCurrency = {
  /**
   * Specifies the discount percentage of the cart total value. For example, 10 represents 10% discount of the cart value of $100. You can add up to six decimal places for the discount percentage to be applied for the promotion.
   */
  percentage: number
  /**
   * Specifies a three-letter currency code. For example, USD.
   */
  currency: string
}

export type DataPromotionsSchemaPercentageAndCurrencyArray = {
  currencies: Array<DataPromotionsSchemaCurrenciesPercentageAndCurrency>
}

export type DataPromotionsSchemaExclude = {
  conditions?: DataConditions
}

/**
 * Specifies the type of the promotion.
 */
export type PromotionType =
  | "fixed_discount"
  | "percent_discount"
  | "item_fixed_discount"
  | "item_percent_discount"
  | "x_for_y"
  | "x_for_amount"
  | "bundle_fixed_discount"
  | "bundle_gift"

export type DataBasePromotions = {
  /**
   * Specifies the type of the resource. The type of resource for promotions is `promotion`.
   */
  type: "promotion"
  readonly id: string
  /**
   * Specifies a name for the promotion.
   */
  name: string
  /**
   * Specifies a description for the promotion.
   */
  description: string
  /**
   * Specifies the type of the promotion.
   */
  promotion_type:
    | "fixed_discount"
    | "percent_discount"
    | "item_fixed_discount"
    | "item_percent_discount"
    | "x_for_y"
    | "x_for_amount"
    | "bundle_fixed_discount"
    | "bundle_gift"
  /**
   * Specifies whether the promotion is enabled. The options are `true` or `false`, and the default setting is `false`.
   */
  enabled: boolean
  /**
   * Specifies whether the promotion is applied automatically to the cart or a code is required to apply the promotion. The default setting is to `false`. When this value is set to `true`, a code is autogenerated. If this value is set to `false`, you must create the code manually. For more information about creating codes, see the Create Promotion Codes section.
   */
  automatic: boolean
  /**
   * Specifies the start date and time of the promotion or the start date of the promotion. You can provide a specific time in the HH:MM format.
   */
  start: string
  /**
   * Specifies the end date and time of the promotion or the end date of the promotion.
   */
  end: string
  /**
   * Specifies an array of currency-value objects, `min_cart_value[].currency` and `min_cart_value[].amount`, that provides the minimum cart value required for the promotion to apply. You can add one or several value specifications in different currencies. Do not use `max_discount_value` for Cart Fixed Discount promotion and Item Fixed Discount promotion. If `max_discount_value` is greater than the `fixed_discount` value, the `fixed_discount` value is applied; otherwise the `max_discount value` is applied.
   */
  min_cart_value?: {
    [key: string]: unknown
  }
  /**
   * Specifies the maximum number of application of a promotion per cart.
   */
  max_applications_per_cart?: number
}

export type DataCartFixedDiscountPromotion = DataBasePromotions & {
  schema?: DataPromotionsSchemaTargetCatalogs &
    DataPromotionsSchemaAmountAndCurrencyArray &
    DataPromotionsSchemaExclude
}

export type DataCartPercentDiscountPromotion = DataBasePromotions & {
  schema?: DataPromotionsSchemaTargetCatalogs &
    DataPromotionsSchemaPercentageAndCurrencyArray &
    DataPromotionsSchemaExclude
}

export type DataItemFixedDiscountPromotion = DataBasePromotions & {
  schema?: DataPromotionsSchemaTargetCatalogs &
    DataPromotionsSchemaTargets &
    DataPromotionsSchemaTargetNodes &
    DataPromotionsSchemaTargetAttributes &
    DataPromotionsSchemaAmountAndCurrencyArray &
    DataPromotionsSchemaExclude
}

export type DataItemPercentDiscountPromotion = DataBasePromotions & {
  schema?: DataPromotionsSchemaTargetCatalogs &
    DataPromotionsSchemaTargets &
    DataPromotionsSchemaTargetNodes &
    DataPromotionsSchemaTargetAttributes &
    DataPromotionsSchemaExclude &
    DataPromotionsSchemaPercent
}

export type DataXForYDiscountPromotion = DataBasePromotions & {
  schema?: DataPromotionsSchemaTargetCatalogs &
    DataPromotionsSchemaTargets &
    DataPromotionsSchemaTargetNodes &
    DataPromotionsSchemaTargetAttributes &
    DataPromotionsSchemaExclude &
    DataPromotionsSchemaXValue &
    DataPromotionsSchemaYValue
}

export type DataXForAmountDiscountPromotion = DataBasePromotions & {
  schema?: DataPromotionsSchemaTargetCatalogs &
    DataPromotionsSchemaTargets &
    DataPromotionsSchemaTargetNodes &
    DataPromotionsSchemaAmountAndCurrencyArray &
    DataPromotionsSchemaExclude &
    DataPromotionsSchemaXValue
}

export type DataFixedBundleDiscountPromotion = DataBasePromotions & {
  schema?: DataPromotionsSchemaTargetCatalogs &
    DataPromotionsSchemaAmountAndCurrencyArray &
    DataPromotionsSchemaRequirements
}

export type DataFreeGiftPromotion = DataBasePromotions & {
  schema?: DataPromotionsSchemaTargetCatalogs &
    DataPromotionsSchemaRequirements &
    DataPromotionsSchemaGifts
}

export type DataPromotionObject = (
  | ({
      promotion_type?: "fixed_discount"
    } & DataCartFixedDiscountPromotion)
  | ({
      promotion_type?: "percent_discount"
    } & DataCartPercentDiscountPromotion)
  | ({
      promotion_type?: "item_fixed_discount"
    } & DataItemFixedDiscountPromotion)
  | ({
      promotion_type?: "item_percent_discount"
    } & DataItemPercentDiscountPromotion)
  | ({
      promotion_type?: "x_for_y"
    } & DataXForYDiscountPromotion)
  | ({
      promotion_type?: "x_for_amount"
    } & DataXForAmountDiscountPromotion)
  | ({
      promotion_type?: "bundle_fixed_discount"
    } & DataFixedBundleDiscountPromotion)
  | ({
      promotion_type?: "bundle_gift"
    } & DataFreeGiftPromotion)
) & {
  promotion_type:
    | "fixed_discount"
    | "percent_discount"
    | "item_fixed_discount"
    | "item_percent_discount"
    | "x_for_y"
    | "x_for_amount"
    | "bundle_fixed_discount"
    | "bundle_gift"
}

export type DataPromotionsCodesObject = {
  data?: DataPromotionsCodes
}

export type DataPromotionsCodesRequest = {
  codes?: Array<DataCodeRequest>
  /**
   * Specifies the type of the resource. The type of resource for promotions is `promotion_codes`.
   */
  type?: string
}

export type DataCodeRequest = {
  /**
   * Specifies the string to use as a code for the promotion.
   */
  code?: string
  /**
   * Specifies whether the code is applied to a line item or cart. The options are `per_item` or `per_cart`. The default setting is per_cart, which is applied at cart level. The `per_item` setting specifies how many times a buyer can use a promotion code on promotion items in a cart. For example, in a store that offers 50% off on SKU1, but limits the maximum usage of the promotion code to two, buyer can apply the promotion to SKU1 up to 2 times if cart has two quantities of SKU1. The third SKU1 is sold for regular price. The code usage is applied at checkout. You must set the automatic setting to `false` and create a code for this promotion to work.
   */
  consume_unit?: string
  /**
   * Specifies the users who can use the code. You can use the customer object ID or an array of customer object IDs. For more information, see the [Create a customer](/docs/customer-management/customer-management-api/create-a-customer) section. Additionally, you could pass any identifying string to the promotions service that identifies a user.
   */
  user?: string
  /**
   * Specifies the maximum number of times the code can be used. If no value is set, the shopper can use the code any number of times.
   */
  uses?: number
}

export type DataPromotionsCodes = {
  codes?: Array<DataCodeResponse>
}

export type DataCodeResponse = {
  /**
   * Specifies the name of the code.
   */
  code?: string
  /**
   * Specifies whether the code is applied to a line item or cart. The options are `per_item` or `per_cart`. The default setting is `per_cart`, which is applied at cart level. The `per_item` setting specifies how many times a buyer can use a promotion code on promotion items in a cart. For example, in a store that offers 50% off on SKU1, but limits the maximum usage of the promotion code to two, buyer can apply the promotion to SKU1 up to 2 times if cart has two quantities of SKU1. The third SKU1 is sold for regular price. The code usage is applied at checkout. You must set the automatic setting to false and create a code for this promotion to work.
   */
  consume_unit?: string
  /**
   * Specifies the users who can use the code. You can use the customer object ID or an array of customer object IDs. For more information, see the [Create a customer](/docs/customer-management/customer-management-api/create-a-customer) section. Additionally, you could pass any identifying string to the promotions service that identifies a user.
   */
  user?: string
  /**
   * Specifies the maximum number of times the code can be used. If no value is set, the shopper can use the code any number of times.
   */
  uses?: number
  /**
   * Specifies by whom it was created.
   */
  created_by?: string
  meta?: {
    timestamps?: {
      /**
       * Specifies the date the code was created.
       */
      created_at?: string
    }
  }
}

export type ResponseMetaPromotions = {
  page?: ResponsePaginationPage
  results?: ResponsePaginationResults
}

export type ResponsePromotionCodes = {
  code?: string
}

export type ResponsePaginationPage = {
  /**
   * The current page.
   */
  current?: number
  /**
   * The maximum number of records per page for this response. You can set this value up to 100.
   */
  limit?: number
  /**
   * The current offset by number of records, not pages. Offset is zero-based.
   */
  offset?: number
  /**
   * The total page count.
   */
  total?: number
}

export type ResponsePaginationResults = {
  /**
   * The total number of results.
   */
  total?: number
}

export type ResponsePageLinks = {
  /**
   * Always the current page.
   */
  current?: string
  /**
   * Always the first page.
   */
  first?: string
  /**
   * If there is only one page, it returns `null`.
   */
  last?: string
  /**
   * If there is only one page, it returns `null`.
   */
  next?: string
  /**
   * If the user is on the first page, it returns `null`.
   */
  prev?: string
}

/**
 * Specifies the type of the resource. The type of resource for promotions is, `promotion_codes`.
 */
export type ResponseData = {
  data?: unknown
}

export type ResponseError = Array<unknown>

export type PromotionJob = {
  /**
   * A unique ID generated when a job is created.
   */
  id?: string
  /**
   * Always `promotion_job`.
   */
  type?: string
  /**
   * A unique ID of a promotion.
   */
  promotion_id?: string
  /**
   * The type of job you want to run. For example, `code_generate` to generate codes or `code_export` to export codes.
   */
  job_type?: string
  /**
   * The name of the job. The maximum length allowed is 50 characters.
   */
  name?: string
  parameters?: {
    [key: string]: unknown
  }
  /**
   * The status of the job. See [Overview](/docs/api/promotions/promotion-jobs).
   */
  status?: string
  meta?: {
    timestamps?: {
      /**
       * The creation date of the job.
       */
      created_at?: Date
      /**
       * The last updated date of the job.
       */
      updated_at?: Date
    }
  }
}

/**
 * The Bearer token required to get access to the API.
 */
export type Authorization = string

export type GetAllPromotionsData = {
  body?: never
  headers: {
    /**
     * The Bearer token required to get access to the API.
     */
    Authorization: string
  }
  path?: never
  query?: {
    /**
     * The number of records to offset the results by.
     */
    "page[offset]"?: string
    /**
     * The number of records per page.
     */
    "page[limit]"?: string
  }
  url: "/v2/promotions"
}

export type GetAllPromotionsErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type GetAllPromotionsError =
  GetAllPromotionsErrors[keyof GetAllPromotionsErrors]

export type GetAllPromotionsResponses = {
  200: ResponseData & {
    data?: Array<DataPromotionObject>
    links?: ResponsePageLinks
    meta?: ResponseMetaPromotions
  }
}

export type GetAllPromotionsResponse =
  GetAllPromotionsResponses[keyof GetAllPromotionsResponses]

export type CreateAPromotionData = {
  body?: {
    data: DataPromotionObject
  }
  headers: {
    /**
     * The Bearer token required to get access to the API.
     */
    Authorization: string
  }
  path?: never
  query?: never
  url: "/v2/promotions"
}

export type CreateAPromotionErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type CreateAPromotionError =
  CreateAPromotionErrors[keyof CreateAPromotionErrors]

export type CreateAPromotionResponses = {
  201: ResponseData & {
    data?: DataPromotionObject
  }
}

export type CreateAPromotionResponse =
  CreateAPromotionResponses[keyof CreateAPromotionResponses]

export type DeleteAPromotionData = {
  body?: never
  headers: {
    /**
     * The Bearer token required to get access to the API.
     */
    Authorization: string
  }
  path: {
    /**
     * The ID of the promotion that you want to delete.
     */
    promotionID: string
  }
  query?: never
  url: "/v2/promotions/{promotionID}"
}

export type DeleteAPromotionErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type DeleteAPromotionError =
  DeleteAPromotionErrors[keyof DeleteAPromotionErrors]

export type DeleteAPromotionResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteAPromotionResponse =
  DeleteAPromotionResponses[keyof DeleteAPromotionResponses]

export type GetAPromotionData = {
  body?: never
  headers: {
    /**
     * The Bearer token required to get access to the API.
     */
    Authorization: string
  }
  path: {
    /**
     * The ID of the promotion.
     */
    promotionID: string
  }
  query?: never
  url: "/v2/promotions/{promotionID}"
}

export type GetAPromotionErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type GetAPromotionError = GetAPromotionErrors[keyof GetAPromotionErrors]

export type GetAPromotionResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: DataPromotionObject
  }
}

export type GetAPromotionResponse =
  GetAPromotionResponses[keyof GetAPromotionResponses]

export type UpdateAPromotionData = {
  body?: DataPromotionObject
  headers: {
    /**
     * The Bearer token required to get access to the API.
     */
    Authorization: string
  }
  path: {
    /**
     * The unique promotion identifier.
     */
    promotionID: string
  }
  query?: never
  url: "/v2/promotions/{promotionID}"
}

export type UpdateAPromotionErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type UpdateAPromotionError =
  UpdateAPromotionErrors[keyof UpdateAPromotionErrors]

export type UpdateAPromotionResponses = {
  200: ResponseData & {
    data?: DataPromotionObject
  }
}

export type UpdateAPromotionResponse =
  UpdateAPromotionResponses[keyof UpdateAPromotionResponses]

export type GetAPromotionHistoryData = {
  body?: never
  headers: {
    /**
     * The Bearer token required to get access to the API.
     */
    Authorization: string
  }
  path: {
    /**
     * The ID of the promotion.
     */
    promotionID: string
  }
  query?: never
  url: "/v2/promotions/{promotionID}/history"
}

export type GetAPromotionHistoryErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type GetAPromotionHistoryError =
  GetAPromotionHistoryErrors[keyof GetAPromotionHistoryErrors]

export type GetAPromotionHistoryResponses = {
  200: ResponseData & {
    data?: Array<DataPromotionObject>
    links?: ResponsePageLinks
    meta?: ResponseMetaPromotions
  }
}

export type GetAPromotionHistoryResponse =
  GetAPromotionHistoryResponses[keyof GetAPromotionHistoryResponses]

export type DeleteMultiplePromotionCodesData = {
  body?: never
  headers: {
    /**
     * The Bearer token required to get access to the API.
     */
    Authorization: string
  }
  path: {
    /**
     * The ID of the promotion associated with the codes.
     */
    promotionID: string
  }
  query?: never
  url: "/v2/promotions/{promotionID}/codes"
}

export type DeleteMultiplePromotionCodesErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
  /**
   * Not Found
   */
  404: ResponseError
}

export type DeleteMultiplePromotionCodesError =
  DeleteMultiplePromotionCodesErrors[keyof DeleteMultiplePromotionCodesErrors]

export type DeleteMultiplePromotionCodesResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteMultiplePromotionCodesResponse =
  DeleteMultiplePromotionCodesResponses[keyof DeleteMultiplePromotionCodesResponses]

export type GetPromotionCodesData = {
  body?: never
  headers: {
    /**
     * The Bearer token required to get access to the API.
     */
    Authorization: string
  }
  path: {
    /**
     * The unique identifier of the promotion.
     */
    promotionID: string
  }
  query?: never
  url: "/v2/promotions/{promotionID}/codes"
}

export type GetPromotionCodesErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type GetPromotionCodesError =
  GetPromotionCodesErrors[keyof GetPromotionCodesErrors]

export type GetPromotionCodesResponses = {
  200: ResponseData & {
    data?: Array<DataPromotionsCodesObject>
    links?: ResponsePageLinks
    meta?: ResponseMetaPromotions
  }
}

export type GetPromotionCodesResponse =
  GetPromotionCodesResponses[keyof GetPromotionCodesResponses]

export type CreatePromotionCodesData = {
  body?: DataPromotionsCodesRequest
  headers: {
    /**
     * The Bearer token required to get access to the API.
     */
    Authorization: string
  }
  path: {
    /**
     * The unique identifier of the promotion.
     */
    promotionID: string
  }
  query?: never
  url: "/v2/promotions/{promotionID}/codes"
}

export type CreatePromotionCodesErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type CreatePromotionCodesError =
  CreatePromotionCodesErrors[keyof CreatePromotionCodesErrors]

export type CreatePromotionCodesResponses = {
  201: ResponseData & {
    data?: DataPromotionObject
  }
}

export type CreatePromotionCodesResponse =
  CreatePromotionCodesResponses[keyof CreatePromotionCodesResponses]

export type DeleteAPromotionCodeData = {
  body?: never
  headers: {
    /**
     * The Bearer token required to get access to the API.
     */
    Authorization: string
  }
  path: {
    /**
     * Specifies the unique identifier of the promotion associated with the codes.
     */
    promotionID: string
    /**
     * Specifies the code that you want to delete.
     */
    code: string
  }
  query?: never
  url: "/v2/promotions/{promotionID}/codes/{code}"
}

export type DeleteAPromotionCodeErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
  /**
   * Not Found
   */
  404: ResponseError
}

export type DeleteAPromotionCodeError =
  DeleteAPromotionCodeErrors[keyof DeleteAPromotionCodeErrors]

export type DeleteAPromotionCodeResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteAPromotionCodeResponse =
  DeleteAPromotionCodeResponses[keyof DeleteAPromotionCodeResponses]

export type GetV2PromotionsByPromotionIdJobsData = {
  body?: never
  headers: {
    /**
     * The Bearer token required to get access to the API.
     */
    Authorization: string
  }
  path: {
    /**
     * The unique identifier of a promotion.
     */
    promotionID: string
  }
  query?: {
    /**
     * Specifies the filter attributes.
     */
    filter?: string
  }
  url: "/v2/promotions/{promotionID}/jobs"
}

export type GetV2PromotionsByPromotionIdJobsResponses = {
  /**
   * Successful response
   */
  200: {
    data?: Array<PromotionJob>
  }
}

export type GetV2PromotionsByPromotionIdJobsResponse =
  GetV2PromotionsByPromotionIdJobsResponses[keyof GetV2PromotionsByPromotionIdJobsResponses]

/**
 * Specifies the type of task you want to run. For example, `code_generate` to generate codes or `code_export` to export codes.
 */
export type JobType = "code_generate" | "code_export"

/**
 * Specifies whether the usage limitation is at the item-level or cart-level.
 */
export type ConsumeUnit = "per_item" | "per_cart"

export type PostV2PromotionsByPromotionIdJobsData = {
  body: {
    /**
     * Must be set to `promotion_job`.
     */
    type?: string
    /**
     * Specifies the type of task you want to run. For example, `code_generate` to generate codes or `code_export` to export codes.
     */
    job_type?: "code_generate" | "code_export"
    /**
     * Represents the name of the job. The maximum allowed length is 50.
     */
    name?: string
    parameters?: {
      /**
       * Specifies the number of codes to be generated. It cannot be greater than the maximum number of codes per promotion, which defaults at 1000.
       */
      number_of_codes?: number
      /**
       * Specifies the maximum number of usages of a code. If set to zero, you cannot use this promotion. If no value is set, it can be used unlimited times.
       */
      max_uses_per_code?: number
      /**
       * Specifies whether the usage limitation is at the item-level or cart-level.
       */
      consume_unit?: "per_item" | "per_cart"
      /**
       * Indicates the prefix to include with the promotion code. For example, when the generated value is *aa2b-3c4d* and the prefix value is set as *summer*, the promotion code becomes *summer-aa2b-3c4d*.
       */
      code_prefix?: string
      /**
       * Specifies the code length, which ranges from 8 to 16 characters. The default code length is eight characters, and a dash is added after every four characters in the code. For example, *aa2b-3c4d*.
       */
      code_length?: number
    }
  }
  headers: {
    /**
     * The Bearer token required to get access to the API.
     */
    Authorization: string
  }
  path: {
    /**
     * The unique identifier of a promotion.
     */
    promotionID: string
  }
  query?: never
  url: "/v2/promotions/{promotionID}/jobs"
}

export type PostV2PromotionsByPromotionIdJobsResponses = {
  /**
   * Promotion job created
   */
  201: {
    data?: PromotionJob
  }
}

export type PostV2PromotionsByPromotionIdJobsResponse =
  PostV2PromotionsByPromotionIdJobsResponses[keyof PostV2PromotionsByPromotionIdJobsResponses]

export type PostV2PromotionsByPromotionIdJobsByJobIdCancelData = {
  body?: never
  headers: {
    /**
     * The Bearer token required to get access to the API.
     */
    Authorization: string
  }
  path: {
    /**
     * The unique identifier of a promotion.
     */
    promotionID: string
    /**
     * The unique identifier of a job to be canceled.
     */
    jobID: string
  }
  query?: never
  url: "/v2/promotions/{promotionID}/jobs/{jobID}/cancel"
}

export type PostV2PromotionsByPromotionIdJobsByJobIdCancelResponses = {
  /**
   * Job canceled successfully
   */
  200: {
    data?: PromotionJob
  }
}

export type PostV2PromotionsByPromotionIdJobsByJobIdCancelResponse =
  PostV2PromotionsByPromotionIdJobsByJobIdCancelResponses[keyof PostV2PromotionsByPromotionIdJobsByJobIdCancelResponses]

export type GetV2PromotionsByPromotionIdJobsByJobIdFileData = {
  body?: never
  headers: {
    /**
     * The Bearer token required to get access to the API.
     */
    Authorization: string
  }
  path: {
    /**
     * The unique identifier of a promotion.
     */
    promotionID: string
    /**
     * The unique identifier of a job associated with the file.
     */
    jobID: string
  }
  query?: never
  url: "/v2/promotions/{promotionID}/jobs/{jobID}/file"
}

export type GetV2PromotionsByPromotionIdJobsByJobIdFileResponses = {
  /**
   * Successful response
   */
  200: {
    /**
     * URL to download the CSV file.
     */
    href?: string
  }
}

export type GetV2PromotionsByPromotionIdJobsByJobIdFileResponse =
  GetV2PromotionsByPromotionIdJobsByJobIdFileResponses[keyof GetV2PromotionsByPromotionIdJobsByJobIdFileResponses]
