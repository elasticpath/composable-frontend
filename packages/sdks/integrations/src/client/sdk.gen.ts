// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from "@hey-api/client-fetch"
import type {
  ListIntegrationsData,
  ListIntegrationsResponse,
  ListIntegrationsError,
  CreateIntegrationData,
  CreateIntegrationResponse,
  CreateIntegrationError,
  DeleteIntegrationData,
  DeleteIntegrationError,
  GetIntegrationData,
  GetIntegrationResponse,
  GetIntegrationError,
  UpdateIntegrationData,
  UpdateIntegrationResponse,
  UpdateIntegrationError,
  ListStoreLogsData,
  ListStoreLogsResponse,
  ListStoreLogsError,
  ListIntegrationLogsData,
  ListIntegrationLogsResponse,
  ListIntegrationLogsError,
  ListIntegrationJobsData,
  ListIntegrationJobsResponse,
  ListIntegrationJobsError,
  ListJobLogsData,
  ListJobLogsResponse,
  ListJobLogsError,
} from "./types.gen"

export const client = createClient(createConfig())

/**
 * List integrations
 * Returns a list of all integrations created by the store.
 */
export const listIntegrations = <ThrowOnError extends boolean = false>(
  options?: Options<ListIntegrationsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListIntegrationsResponse,
    ListIntegrationsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/integrations",
  })
}

/**
 * Create an integration
 * Create an integration.
 */
export const createIntegration = <ThrowOnError extends boolean = false>(
  options?: Options<CreateIntegrationData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateIntegrationResponse,
    CreateIntegrationError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/integrations",
  })
}

/**
 * Delete an integration
 * Deletes the Integration for the given UUID
 */
export const deleteIntegration = <ThrowOnError extends boolean = false>(
  options: Options<DeleteIntegrationData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    unknown,
    DeleteIntegrationError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/integrations/{integration_uuid}",
  })
}

/**
 * Get an integration
 * Returns the integration for the given UUID.
 */
export const getIntegration = <ThrowOnError extends boolean = false>(
  options: Options<GetIntegrationData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetIntegrationResponse,
    GetIntegrationError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/integrations/{integration_uuid}",
  })
}

/**
 * Update an integration
 * Updates the Integration for the given UUID. Specify whichever attributes you want to change. The values of the other attributes remain the same. If the attributes section is empty, the integration is not updated.
 */
export const updateIntegration = <ThrowOnError extends boolean = false>(
  options: Options<UpdateIntegrationData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateIntegrationResponse,
    UpdateIntegrationError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/integrations/{integration_uuid}",
  })
}

/**
 * List logs for all integrations for the store
 * Returns all integration logs for the store.
 */
export const listStoreLogs = <ThrowOnError extends boolean = false>(
  options?: Options<ListStoreLogsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListStoreLogsResponse,
    ListStoreLogsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/integrations/logs",
  })
}

/**
 * List logs for integration
 * Returns the logs for the given integration UUID.
 */
export const listIntegrationLogs = <ThrowOnError extends boolean = false>(
  options: Options<ListIntegrationLogsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListIntegrationLogsResponse,
    ListIntegrationLogsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/integrations/{integration_uuid}/logs",
  })
}

/**
 * List jobs for integration
 * Returns the jobs for the given integration UUID.
 */
export const listIntegrationJobs = <ThrowOnError extends boolean = false>(
  options: Options<ListIntegrationJobsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListIntegrationJobsResponse,
    ListIntegrationJobsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/integrations/{integration_uuid}/jobs",
  })
}

/**
 * List logs for the job
 * Returns the integration logs for the given integration and job UUID.
 */
export const listJobLogs = <ThrowOnError extends boolean = false>(
  options: Options<ListJobLogsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListJobLogsResponse,
    ListJobLogsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/integrations/{integration_uuid}/jobs/{job_uuid}/logs",
  })
}
