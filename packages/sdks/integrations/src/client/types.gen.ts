// This file is auto-generated by @hey-api/openapi-ts

/**
 * The type represents the object being returned. Always `integration`.
 */
export type Type = "integration"

/**
 * Specifies how the event is delivered. The options are `webhook`, `aws-sqs`, or `stomp`.
 */
export type IntegrationType = "webhook" | "aws_sqs" | "stomp"

export type IntegrationCreate = {
  /**
   * The type represents the object being returned. Always `integration`.
   */
  type: "integration"
  /**
   * The name of the integration.
   */
  name: string
  /**
   * A description of what the integration is for.
   */
  description?: string
  /**
   * Whether the integration is enabled.
   */
  enabled?: boolean
  /**
   * Specifies how the event is delivered. The options are `webhook`, `aws-sqs`, or `stomp`.
   */
  integration_type: "webhook" | "aws_sqs" | "stomp"
  /**
   * The list of events you want to observe. See [**Observable Events**](#observable-events).
   */
  observes?: Array<string>
  /**
   * The content of the configuration object depends on the value of `integration_type`.
   */
  configuration:
    | AwssqsConfigurationObject
    | WebhookConfigurationObject
    | StompConfigurationObject
}

export type IntegrationUpdate = {
  /**
   * The type represents the object being returned. Always `integration`.
   */
  type: "integration"
  /**
   * The name of the integration.
   */
  name?: string
  /**
   * A description of what the integration is for.
   */
  description?: string
  /**
   * Whether the integration is enabled.
   */
  enabled?: boolean
  integration_type?: "webhook" | "aws_sqs" | "stomp"
  /**
   * The list of events you want to observe. See [**Observable Events**](#observable-events).
   */
  observes?: Array<string>
  /**
   * The content of the configuration object depends on the value of `integration_type`.
   */
  configuration?:
    | AwssqsConfigurationObject
    | WebhookConfigurationObject
    | StompConfigurationObject
}

export type Integration = {
  /**
   * The unique identifier of the integration.
   */
  id?: string
  /**
   * The type represents the object being returned. Always `integration`.
   */
  type?: "integration"
  /**
   * The name of the integration.
   */
  name?: string
  /**
   * A description of what the integration is for.
   */
  description?: string
  /**
   * Whether the integration is enabled.
   */
  enabled?: boolean
  /**
   * Specifies how the event is delivered. The options are `webhook`, `aws-sqs`, or `stomp`.
   */
  integration_type?: "webhook" | "aws_sqs" | "stomp"
  /**
   * The list of events you want to observe. See [**Observable Events**](#observable-events).
   */
  observes?: Array<string>
  configuration?:
    | AwssqsConfigurationObject
    | WebhookConfigurationObject
    | StompConfigurationObject
}

/**
 * As integrations can fail over time, Commerce provides the ability to browse all logs for your integrations.
 */
export type IntegrationLog = {
  /**
   * A unique identifier of an integration whose logs you want to view.
   */
  id?: string
  /**
   * This represents the type of resource object being returned. Always `integration`.
   */
  type?: "integration"
  /**
   * Whether the integration was successful.
   */
  succeeded?: boolean
  /**
   * The number of attempts made to process the integration.
   */
  attempt?: number
  /**
   * The response returned from the integration.
   */
  body?: string
  /**
   * The status code returned from the integration.
   */
  status_code?: number
  /**
   * The reason why the integration failed.
   */
  error_detail?: string
  /**
   * Relationships are established between different integration entities. For example, a log and an integration job are related to an integration.
   */
  relationships?: {
    integration?: {
      data?: {
        /**
         * The ID of the integration processed.
         */
        id?: string
        /**
         * This represents the resource type of the object being returned. Always `integration`.
         */
        type?: string
      }
    }
    job?: {
      data?: {
        /**
         * The ID of the integration job processed.
         */
        id?: string
        /**
         * This represents the resource type of the object being returned. Always `integration-job`.
         */
        type?: string
      }
    }
  }
}

export type IntegrationJob = {
  /**
   * The ID of the integration job processed.
   */
  id?: string
  /**
   * This represents the type of resource object being returned. Always `integration-job`.
   */
  type?: "integration-job"
}

export type WebhookConfigurationObject = {
  /**
   * A required URL that the integration fires.
   */
  url: string
  /**
   * An optional header. Useful to authenticate the response came from Elastic Path. This is sent as `X-MOLTIN-SECRET-KEY`.
   */
  secret_key?: string
}

export type AwssqsConfigurationObject = {
  /**
   * The required SQS queue URL.
   */
  url: string
  /**
   * The required AWS access key ID.
   */
  aws_access_key_id: string
  /**
   * The required AWS secret key ID.
   */
  aws_secret_access_key: string
  /**
   * The required AWS region.
   */
  region: string
}

export type StompConfigurationObject = {
  /**
   * The username used to authenticate against a STOMP server.
   */
  username?: string
  /**
   * The password used to authenticate against a STOMP server.
   */
  password?: string
  /**
   * The destination in the messaging queuing system.
   */
  destination?: string
  /**
   * The addresses that correspond with the destination name.
   */
  addresses?: Array<string>
}

/**
 * The results for this response for the entire collection.
 */
export type Results = {
  /**
   * The total number of records for this response for the entire collection.
   */
  total?: number
}

export type Meta = {
  meta?: {
    timestamps?: Timestamps
  }
}

export type Links = {
  /**
   * Links are used to allow you to move between requests.
   */
  links?: {
    /**
     * Single entities use a self parameter with a link to that specific resource.
     */
    self?: LinkUri
  }
}

export type LinkUri = string

export type ErrorResponse = {
  errors: Array<ErrorBody>
}

export type ErrorBody = {
  /**
   * The HTTP response code of the error.
   */
  status?: number
  /**
   * A brief summary of the error.
   */
  title: string
  /**
   * Optional additional detail about the error.
   */
  detail?: string
}

/**
 * The date and time a transaction is created.
 */
export type Timestamps = {
  /**
   * The date and time an integration is updated.
   */
  created_at?: Date
  /**
   * The date and time an integration is updated.
   */
  updated_at?: Date
}

export type PaginationMeta = {
  /**
   * The maximum number of records per page for a response. You can set this value up to 100.
   */
  limit?: number
  /**
   * The current offset by number of records, not pages. Offset is zero-based.
   */
  offset?: number
  /**
   * The current page.
   */
  current?: number
  /**
   * The total page count.
   */
  total?: number
}

/**
 * The unique identifier of the integration.
 */
export type IntegrationUuid = string

/**
 * The unique identifier of the integration job.
 */
export type JobUuid = string

export type ListIntegrationsData = {
  body?: never
  path?: never
  query?: never
  url: "/integrations"
}

export type ListIntegrationsErrors = {
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type ListIntegrationsError =
  ListIntegrationsErrors[keyof ListIntegrationsErrors]

export type ListIntegrationsResponses = {
  /**
   * Success. All integrations are returned.
   */
  200: {
    data?: Array<Integration & Links & Meta>
    links?: Links
    meta?: Meta
  }
}

export type ListIntegrationsResponse =
  ListIntegrationsResponses[keyof ListIntegrationsResponses]

export type CreateIntegrationData = {
  body?: {
    data: IntegrationCreate
  }
  path?: never
  query?: never
  url: "/integrations"
}

export type CreateIntegrationErrors = {
  /**
   * Bad request. The request failed validation.
   */
  422: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type CreateIntegrationError =
  CreateIntegrationErrors[keyof CreateIntegrationErrors]

export type CreateIntegrationResponses = {
  /**
   * Success. Integration created.
   */
  200: {
    data?: Integration & Links & Meta
  }
}

export type CreateIntegrationResponse =
  CreateIntegrationResponses[keyof CreateIntegrationResponses]

export type DeleteIntegrationData = {
  body?: never
  path: {
    /**
     * The unique identifier of the integration.
     */
    integration_uuid: string
  }
  query?: never
  url: "/integrations/{integration_uuid}"
}

export type DeleteIntegrationErrors = {
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type DeleteIntegrationError =
  DeleteIntegrationErrors[keyof DeleteIntegrationErrors]

export type DeleteIntegrationResponses = {
  /**
   * Integration was successfully deleted
   */
  200: unknown
}

export type GetIntegrationData = {
  body?: never
  path: {
    /**
     * The unique identifier of the integration.
     */
    integration_uuid: string
  }
  query?: never
  url: "/integrations/{integration_uuid}"
}

export type GetIntegrationErrors = {
  /**
   * Not found. The requested entity does not exist.
   */
  404: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type GetIntegrationError =
  GetIntegrationErrors[keyof GetIntegrationErrors]

export type GetIntegrationResponses = {
  /**
   * Success. An integration is returned.
   */
  200: {
    data?: Integration & Links & Meta
  }
}

export type GetIntegrationResponse =
  GetIntegrationResponses[keyof GetIntegrationResponses]

export type UpdateIntegrationData = {
  body?: {
    data: IntegrationUpdate
  }
  path: {
    /**
     * The unique identifier of the integration.
     */
    integration_uuid: string
  }
  query?: never
  url: "/integrations/{integration_uuid}"
}

export type UpdateIntegrationErrors = {
  /**
   * Not found. The requested entity does not exist.
   */
  404: ErrorResponse
  /**
   * Bad request. The request failed validation.
   */
  422: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type UpdateIntegrationError =
  UpdateIntegrationErrors[keyof UpdateIntegrationErrors]

export type UpdateIntegrationResponses = {
  /**
   * Success. All integrations are returned
   */
  200: {
    data?: Integration & Links & Meta
    links?: Links
    meta?: Meta
  }
}

export type UpdateIntegrationResponse =
  UpdateIntegrationResponses[keyof UpdateIntegrationResponses]

export type ListStoreLogsData = {
  body?: never
  path?: never
  query?: never
  url: "/integrations/logs"
}

export type ListStoreLogsErrors = {
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type ListStoreLogsError = ListStoreLogsErrors[keyof ListStoreLogsErrors]

export type ListStoreLogsResponses = {
  /**
   * Success. Returns a list of integration logs.
   */
  200: {
    data?: Array<IntegrationLog>
    meta?: PaginationMeta
    results?: Results
  }
}

export type ListStoreLogsResponse =
  ListStoreLogsResponses[keyof ListStoreLogsResponses]

export type ListIntegrationLogsData = {
  body?: never
  path: {
    /**
     * The unique identifier of the integration.
     */
    integration_uuid: string
  }
  query?: never
  url: "/integrations/{integration_uuid}/logs"
}

export type ListIntegrationLogsErrors = {
  /**
   * Not found. The requested entity does not exist.
   */
  404: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type ListIntegrationLogsError =
  ListIntegrationLogsErrors[keyof ListIntegrationLogsErrors]

export type ListIntegrationLogsResponses = {
  /**
   * Success. Returns a list of integration logs.
   */
  200: {
    data?: Array<IntegrationLog>
    meta?: PaginationMeta
    results?: Results
  }
}

export type ListIntegrationLogsResponse =
  ListIntegrationLogsResponses[keyof ListIntegrationLogsResponses]

export type ListIntegrationJobsData = {
  body?: never
  path: {
    /**
     * The unique identifier of the integration.
     */
    integration_uuid: string
  }
  query?: never
  url: "/integrations/{integration_uuid}/jobs"
}

export type ListIntegrationJobsErrors = {
  /**
   * Not found. The requested entity does not exist.
   */
  404: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type ListIntegrationJobsError =
  ListIntegrationJobsErrors[keyof ListIntegrationJobsErrors]

export type ListIntegrationJobsResponses = {
  /**
   * Success. All integrations are returned.
   */
  200: {
    data?: Array<IntegrationJob>
  }
}

export type ListIntegrationJobsResponse =
  ListIntegrationJobsResponses[keyof ListIntegrationJobsResponses]

export type ListJobLogsData = {
  body?: never
  path: {
    /**
     * The unique identifier of the integration.
     */
    integration_uuid: string
    /**
     * The unique identifier of the integration job.
     */
    job_uuid: string
  }
  query?: never
  url: "/integrations/{integration_uuid}/jobs/{job_uuid}/logs"
}

export type ListJobLogsErrors = {
  /**
   * Not found. The requested entity does not exist.
   */
  404: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type ListJobLogsError = ListJobLogsErrors[keyof ListJobLogsErrors]

export type ListJobLogsResponses = {
  /**
   * Success. Returns a list of integration logs.
   */
  200: {
    data?: Array<IntegrationLog>
    meta?: PaginationMeta
    results?: Results
  }
}

export type ListJobLogsResponse =
  ListJobLogsResponses[keyof ListJobLogsResponses]
