// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from "@hey-api/client-fetch"
import {
  queryOptions,
  infiniteQueryOptions,
  type InfiniteData,
  type UseMutationOptions,
  type DefaultError,
} from "@tanstack/react-query"
import type {
  GetByContextReleaseData,
  GetByContextAllHierarchiesData,
  GetByContextAllHierarchiesError,
  GetByContextAllHierarchiesResponse,
  GetByContextHierarchyData,
  GetByContextHierarchyNodesData,
  GetByContextHierarchyNodesError,
  GetByContextHierarchyNodesResponse,
  GetByContextHierarchyChildNodesData,
  GetByContextHierarchyChildNodesError,
  GetByContextHierarchyChildNodesResponse,
  GetByContextAllNodesData,
  GetByContextAllNodesError,
  GetByContextAllNodesResponse,
  GetByContextNodeData,
  GetByContextChildNodesData,
  GetByContextChildNodesError,
  GetByContextChildNodesResponse,
  GetByContextAllProductsData,
  GetByContextAllProductsError,
  GetByContextAllProductsResponse,
  GetByContextProductData,
  GetByContextComponentProductIdsData,
  GetByContextComponentProductIdsError,
  GetByContextComponentProductIdsResponse,
  GetByContextChildProductsData,
  GetByContextChildProductsError,
  GetByContextChildProductsResponse,
  GetByContextProductsForHierarchyData,
  GetByContextProductsForHierarchyError,
  GetByContextProductsForHierarchyResponse,
  GetByContextProductsForNodeData,
  GetByContextProductsForNodeError,
  GetByContextProductsForNodeResponse,
  ConfigureByContextProductData,
  ConfigureByContextProductError,
  ConfigureByContextProductResponse,
  CreateCatalogData,
  CreateCatalogError,
  CreateCatalogResponse,
  GetCatalogByIdData,
  UpdateCatalogData,
  UpdateCatalogError,
  UpdateCatalogResponse,
  DeleteCatalogByIdData,
  DeleteCatalogByIdError,
  DeleteCatalogByIdResponse,
  PublishReleaseData,
  PublishReleaseError,
  PublishReleaseResponse,
  GetReleasesData,
  DeleteReleasesData,
  DeleteReleasesError,
  DeleteReleasesResponse,
  GetReleaseByIdData,
  DeleteReleaseByIdData,
  DeleteReleaseByIdError,
  DeleteReleaseByIdResponse,
  CreateRuleData,
  CreateRuleError,
  CreateRuleResponse,
  GetRulesData,
  GetRulesError,
  GetRulesResponse,
  GetRuleByIdData,
  UpdateRuleData,
  UpdateRuleError,
  UpdateRuleResponse,
  DeleteRuleByIdData,
  DeleteRuleByIdError,
  DeleteRuleByIdResponse,
  GetAllHierarchiesData,
  GetAllHierarchiesError,
  GetAllHierarchiesResponse,
  GetHierarchyData,
  GetHierarchyNodesData,
  GetHierarchyNodesError,
  GetHierarchyNodesResponse,
  GetHierarchyChildNodesData,
  GetHierarchyChildNodesError,
  GetHierarchyChildNodesResponse,
  GetAllNodesData,
  GetAllNodesError,
  GetAllNodesResponse,
  GetNodeData,
  GetChildNodesData,
  GetChildNodesError,
  GetChildNodesResponse,
  GetAllProductsData,
  GetAllProductsError,
  GetAllProductsResponse,
  GetProductData,
  GetComponentProductIdsData,
  GetComponentProductIdsError,
  GetComponentProductIdsResponse,
  GetChildProductsData,
  GetChildProductsError,
  GetChildProductsResponse,
  GetProductsForHierarchyData,
  GetProductsForHierarchyError,
  GetProductsForHierarchyResponse,
  GetProductsForNodeData,
  GetProductsForNodeError,
  GetProductsForNodeResponse,
  GetCartsData,
  CreateAcartData,
  CreateAcartError,
  CreateAcartResponse,
  GetCartData,
  UpdateAcartData,
  UpdateAcartError,
  UpdateAcartResponse,
  DeleteAcartData,
  DeleteAcartError,
  DeleteAcartResponse,
  GetCartItemsData,
  BulkUpdateItemsInCartData,
  BulkUpdateItemsInCartError,
  BulkUpdateItemsInCartResponse,
  ManageCartsData,
  ManageCartsError,
  ManageCartsResponse,
  DeleteAllCartItemsData,
  DeleteAllCartItemsError,
  DeleteAllCartItemsResponse,
  UpdateAcartItemData,
  UpdateAcartItemError,
  UpdateAcartItemResponse,
  DeleteAcartItemData,
  DeleteAcartItemError,
  DeleteAcartItemResponse,
  CreateAccountCartAssociationData,
  CreateAccountCartAssociationError,
  CreateAccountCartAssociationResponse,
  DeleteAccountCartAssociationData,
  DeleteAccountCartAssociationError,
  DeleteAccountCartAssociationResponse,
  CreateCustomerCartAssociationData,
  CreateCustomerCartAssociationError,
  CreateCustomerCartAssociationResponse,
  DeleteCustomerCartAssociationData,
  DeleteCustomerCartAssociationError,
  DeleteCustomerCartAssociationResponse,
  DeleteApromotionViaPromotionCodeData,
  DeleteApromotionViaPromotionCodeError,
  DeleteApromotionViaPromotionCodeResponse,
  AddTaxItemToCartData,
  AddTaxItemToCartError,
  AddTaxItemToCartResponse,
  BulkAddTaxItemsToCartData,
  BulkAddTaxItemsToCartError,
  BulkAddTaxItemsToCartResponse,
  BulkDeleteTaxItemsFromCartData,
  BulkDeleteTaxItemsFromCartError,
  BulkDeleteTaxItemsFromCartResponse,
  UpdateAtaxItemData,
  UpdateAtaxItemError,
  UpdateAtaxItemResponse,
  DeleteAtaxItemData,
  DeleteAtaxItemError,
  DeleteAtaxItemResponse,
  BulkAddCustomDiscountsToCartData,
  BulkAddCustomDiscountsToCartError,
  BulkAddCustomDiscountsToCartResponse,
  BulkDeleteCustomDiscountsFromCartData,
  BulkDeleteCustomDiscountsFromCartError,
  BulkDeleteCustomDiscountsFromCartResponse,
  UpdateCustomDiscountForCartData,
  UpdateCustomDiscountForCartError,
  UpdateCustomDiscountForCartResponse,
  DeleteCustomDiscountFromCartData,
  DeleteCustomDiscountFromCartError,
  DeleteCustomDiscountFromCartResponse,
  AddCustomDiscountToCartItemData,
  UpdateCustomDiscountForCartItemData,
  DeleteCustomDiscountFromCartItemData,
  DeleteCustomDiscountFromCartItemError,
  DeleteCustomDiscountFromCartItemResponse,
  CreateCartPaymentIntentData,
  CreateCartPaymentIntentError,
  CreateCartPaymentIntentResponse,
  CheckoutApiData,
  CheckoutApiError,
  CheckoutApiResponse,
  GetCustomerOrdersData,
  GetAnOrderData,
  UpdateAnOrderData,
  UpdateAnOrderError,
  UpdateAnOrderResponse,
  GetOrderItemsData,
  AnonymizeOrdersData,
  AnonymizeOrdersError,
  AnonymizeOrdersResponse,
  AuthorizeSetupData,
  AuthorizeSetupError,
  AuthorizeSetupResponse,
  ConfirmSetupData,
  ConfirmSetupError,
  ConfirmSetupResponse,
  CaptureAtransactionData,
  CaptureAtransactionError,
  CaptureAtransactionResponse,
  RefundAtransactionData,
  RefundAtransactionError,
  RefundAtransactionResponse,
  GetOrderTransactionsData,
  GetAtransactionData,
  CancelAtransactionData,
  CancelAtransactionError,
  CancelAtransactionResponse,
} from "../types.gen"
import {
  client,
  getByContextRelease,
  getByContextAllHierarchies,
  getByContextHierarchy,
  getByContextHierarchyNodes,
  getByContextHierarchyChildNodes,
  getByContextAllNodes,
  getByContextNode,
  getByContextChildNodes,
  getByContextAllProducts,
  getByContextProduct,
  getByContextComponentProductIds,
  getByContextChildProducts,
  getByContextProductsForHierarchy,
  getByContextProductsForNode,
  configureByContextProduct,
  createCatalog,
  getCatalogs,
  getCatalogById,
  updateCatalog,
  deleteCatalogById,
  publishRelease,
  getReleases,
  deleteReleases,
  getReleaseById,
  deleteReleaseById,
  createRule,
  getRules,
  getRuleById,
  updateRule,
  deleteRuleById,
  getAllHierarchies,
  getHierarchy,
  getHierarchyNodes,
  getHierarchyChildNodes,
  getAllNodes,
  getNode,
  getChildNodes,
  getAllProducts,
  getProduct,
  getComponentProductIds,
  getChildProducts,
  getProductsForHierarchy,
  getProductsForNode,
  getCarts,
  createAcart,
  getCart,
  updateAcart,
  deleteAcart,
  getCartItems,
  bulkUpdateItemsInCart,
  manageCarts,
  deleteAllCartItems,
  updateAcartItem,
  deleteAcartItem,
  createAccountCartAssociation,
  deleteAccountCartAssociation,
  createCustomerCartAssociation,
  deleteCustomerCartAssociation,
  deleteApromotionViaPromotionCode,
  addTaxItemToCart,
  bulkAddTaxItemsToCart,
  bulkDeleteTaxItemsFromCart,
  updateAtaxItem,
  deleteAtaxItem,
  bulkAddCustomDiscountsToCart,
  bulkDeleteCustomDiscountsFromCart,
  updateCustomDiscountForCart,
  deleteCustomDiscountFromCart,
  addCustomDiscountToCartItem,
  updateCustomDiscountForCartItem,
  deleteCustomDiscountFromCartItem,
  createCartPaymentIntent,
  checkoutApi,
  getCustomerOrders,
  getAnOrder,
  updateAnOrder,
  getOrderItems,
  anonymizeOrders,
  authorizeSetup,
  confirmSetup,
  captureAtransaction,
  refundAtransaction,
  getOrderTransactions,
  getAtransaction,
  cancelAtransaction,
} from "../services.gen"

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string
    _infinite?: boolean
  },
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: client.getConfig().baseUrl,
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return params
}

export const getByContextReleaseOptions = (
  options?: Options<GetByContextReleaseData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getByContextRelease({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getByContextRelease", options)],
  })
}

export const getByContextAllHierarchiesOptions = (
  options?: Options<GetByContextAllHierarchiesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getByContextAllHierarchies({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getByContextAllHierarchies", options)],
  })
}

export const getByContextAllHierarchiesInfiniteOptions = (
  options?: Options<GetByContextAllHierarchiesData>,
) => {
  return infiniteQueryOptions<
    GetByContextAllHierarchiesResponse,
    GetByContextAllHierarchiesError,
    InfiniteData<GetByContextAllHierarchiesResponse>,
    QueryKey<Options<GetByContextAllHierarchiesData>>,
    | number
    | Pick<
        QueryKey<Options<GetByContextAllHierarchiesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetByContextAllHierarchiesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  "page[limit]": pageParam,
                },
              }
        const { data } = await getByContextAllHierarchies({
          ...options,
          ...queryKey[0],
          body: {
            ...(queryKey[0].body as any),
            ...(page.body as any),
          },
          headers: {
            ...queryKey[0].headers,
            ...page.headers,
          },
          path: {
            ...queryKey[0].path,
            ...page.path,
          },
          query: {
            ...queryKey[0].query,
            ...page.query,
          },
          throwOnError: true,
        })
        return data
      },
      queryKey: [createQueryKey("getByContextAllHierarchies", options, true)],
    },
  )
}

export const getByContextHierarchyOptions = (
  options: Options<GetByContextHierarchyData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getByContextHierarchy({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getByContextHierarchy", options)],
  })
}

export const getByContextHierarchyNodesOptions = (
  options: Options<GetByContextHierarchyNodesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getByContextHierarchyNodes({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getByContextHierarchyNodes", options)],
  })
}

export const getByContextHierarchyNodesInfiniteOptions = (
  options: Options<GetByContextHierarchyNodesData>,
) => {
  return infiniteQueryOptions<
    GetByContextHierarchyNodesResponse,
    GetByContextHierarchyNodesError,
    InfiniteData<GetByContextHierarchyNodesResponse>,
    QueryKey<Options<GetByContextHierarchyNodesData>>,
    | number
    | Pick<
        QueryKey<Options<GetByContextHierarchyNodesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetByContextHierarchyNodesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  "page[limit]": pageParam,
                },
              }
        const { data } = await getByContextHierarchyNodes({
          ...options,
          ...queryKey[0],
          body: {
            ...(queryKey[0].body as any),
            ...(page.body as any),
          },
          headers: {
            ...queryKey[0].headers,
            ...page.headers,
          },
          path: {
            ...queryKey[0].path,
            ...page.path,
          },
          query: {
            ...queryKey[0].query,
            ...page.query,
          },
          throwOnError: true,
        })
        return data
      },
      queryKey: [createQueryKey("getByContextHierarchyNodes", options, true)],
    },
  )
}

export const getByContextHierarchyChildNodesOptions = (
  options: Options<GetByContextHierarchyChildNodesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getByContextHierarchyChildNodes({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getByContextHierarchyChildNodes", options)],
  })
}

export const getByContextHierarchyChildNodesInfiniteOptions = (
  options: Options<GetByContextHierarchyChildNodesData>,
) => {
  return infiniteQueryOptions<
    GetByContextHierarchyChildNodesResponse,
    GetByContextHierarchyChildNodesError,
    InfiniteData<GetByContextHierarchyChildNodesResponse>,
    QueryKey<Options<GetByContextHierarchyChildNodesData>>,
    | number
    | Pick<
        QueryKey<Options<GetByContextHierarchyChildNodesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetByContextHierarchyChildNodesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  "page[limit]": pageParam,
                },
              }
        const { data } = await getByContextHierarchyChildNodes({
          ...options,
          ...queryKey[0],
          body: {
            ...(queryKey[0].body as any),
            ...(page.body as any),
          },
          headers: {
            ...queryKey[0].headers,
            ...page.headers,
          },
          path: {
            ...queryKey[0].path,
            ...page.path,
          },
          query: {
            ...queryKey[0].query,
            ...page.query,
          },
          throwOnError: true,
        })
        return data
      },
      queryKey: [
        createQueryKey("getByContextHierarchyChildNodes", options, true),
      ],
    },
  )
}

export const getByContextAllNodesOptions = (
  options?: Options<GetByContextAllNodesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getByContextAllNodes({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getByContextAllNodes", options)],
  })
}

export const getByContextAllNodesInfiniteOptions = (
  options?: Options<GetByContextAllNodesData>,
) => {
  return infiniteQueryOptions<
    GetByContextAllNodesResponse,
    GetByContextAllNodesError,
    InfiniteData<GetByContextAllNodesResponse>,
    QueryKey<Options<GetByContextAllNodesData>>,
    | number
    | Pick<
        QueryKey<Options<GetByContextAllNodesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetByContextAllNodesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  "page[limit]": pageParam,
                },
              }
        const { data } = await getByContextAllNodes({
          ...options,
          ...queryKey[0],
          body: {
            ...(queryKey[0].body as any),
            ...(page.body as any),
          },
          headers: {
            ...queryKey[0].headers,
            ...page.headers,
          },
          path: {
            ...queryKey[0].path,
            ...page.path,
          },
          query: {
            ...queryKey[0].query,
            ...page.query,
          },
          throwOnError: true,
        })
        return data
      },
      queryKey: [createQueryKey("getByContextAllNodes", options, true)],
    },
  )
}

export const getByContextNodeOptions = (
  options: Options<GetByContextNodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getByContextNode({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getByContextNode", options)],
  })
}

export const getByContextChildNodesOptions = (
  options: Options<GetByContextChildNodesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getByContextChildNodes({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getByContextChildNodes", options)],
  })
}

export const getByContextChildNodesInfiniteOptions = (
  options: Options<GetByContextChildNodesData>,
) => {
  return infiniteQueryOptions<
    GetByContextChildNodesResponse,
    GetByContextChildNodesError,
    InfiniteData<GetByContextChildNodesResponse>,
    QueryKey<Options<GetByContextChildNodesData>>,
    | number
    | Pick<
        QueryKey<Options<GetByContextChildNodesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetByContextChildNodesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  "page[limit]": pageParam,
                },
              }
        const { data } = await getByContextChildNodes({
          ...options,
          ...queryKey[0],
          body: {
            ...(queryKey[0].body as any),
            ...(page.body as any),
          },
          headers: {
            ...queryKey[0].headers,
            ...page.headers,
          },
          path: {
            ...queryKey[0].path,
            ...page.path,
          },
          query: {
            ...queryKey[0].query,
            ...page.query,
          },
          throwOnError: true,
        })
        return data
      },
      queryKey: [createQueryKey("getByContextChildNodes", options, true)],
    },
  )
}

export const getByContextAllProductsOptions = (
  options?: Options<GetByContextAllProductsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getByContextAllProducts({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getByContextAllProducts", options)],
  })
}

export const getByContextAllProductsInfiniteOptions = (
  options?: Options<GetByContextAllProductsData>,
) => {
  return infiniteQueryOptions<
    GetByContextAllProductsResponse,
    GetByContextAllProductsError,
    InfiniteData<GetByContextAllProductsResponse>,
    QueryKey<Options<GetByContextAllProductsData>>,
    | number
    | Pick<
        QueryKey<Options<GetByContextAllProductsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetByContextAllProductsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  "page[limit]": pageParam,
                },
              }
        const { data } = await getByContextAllProducts({
          ...options,
          ...queryKey[0],
          body: {
            ...(queryKey[0].body as any),
            ...(page.body as any),
          },
          headers: {
            ...queryKey[0].headers,
            ...page.headers,
          },
          path: {
            ...queryKey[0].path,
            ...page.path,
          },
          query: {
            ...queryKey[0].query,
            ...page.query,
          },
          throwOnError: true,
        })
        return data
      },
      queryKey: [createQueryKey("getByContextAllProducts", options, true)],
    },
  )
}

export const getByContextProductOptions = (
  options: Options<GetByContextProductData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getByContextProduct({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getByContextProduct", options)],
  })
}

export const getByContextComponentProductIdsOptions = (
  options: Options<GetByContextComponentProductIdsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getByContextComponentProductIds({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getByContextComponentProductIds", options)],
  })
}

export const getByContextComponentProductIdsInfiniteOptions = (
  options: Options<GetByContextComponentProductIdsData>,
) => {
  return infiniteQueryOptions<
    GetByContextComponentProductIdsResponse,
    GetByContextComponentProductIdsError,
    InfiniteData<GetByContextComponentProductIdsResponse>,
    QueryKey<Options<GetByContextComponentProductIdsData>>,
    | number
    | Pick<
        QueryKey<Options<GetByContextComponentProductIdsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetByContextComponentProductIdsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  "page[limit]": pageParam,
                },
              }
        const { data } = await getByContextComponentProductIds({
          ...options,
          ...queryKey[0],
          body: {
            ...(queryKey[0].body as any),
            ...(page.body as any),
          },
          headers: {
            ...queryKey[0].headers,
            ...page.headers,
          },
          path: {
            ...queryKey[0].path,
            ...page.path,
          },
          query: {
            ...queryKey[0].query,
            ...page.query,
          },
          throwOnError: true,
        })
        return data
      },
      queryKey: [
        createQueryKey("getByContextComponentProductIds", options, true),
      ],
    },
  )
}

export const getByContextChildProductsOptions = (
  options: Options<GetByContextChildProductsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getByContextChildProducts({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getByContextChildProducts", options)],
  })
}

export const getByContextChildProductsInfiniteOptions = (
  options: Options<GetByContextChildProductsData>,
) => {
  return infiniteQueryOptions<
    GetByContextChildProductsResponse,
    GetByContextChildProductsError,
    InfiniteData<GetByContextChildProductsResponse>,
    QueryKey<Options<GetByContextChildProductsData>>,
    | number
    | Pick<
        QueryKey<Options<GetByContextChildProductsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetByContextChildProductsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  "page[limit]": pageParam,
                },
              }
        const { data } = await getByContextChildProducts({
          ...options,
          ...queryKey[0],
          body: {
            ...(queryKey[0].body as any),
            ...(page.body as any),
          },
          headers: {
            ...queryKey[0].headers,
            ...page.headers,
          },
          path: {
            ...queryKey[0].path,
            ...page.path,
          },
          query: {
            ...queryKey[0].query,
            ...page.query,
          },
          throwOnError: true,
        })
        return data
      },
      queryKey: [createQueryKey("getByContextChildProducts", options, true)],
    },
  )
}

export const getByContextProductsForHierarchyOptions = (
  options: Options<GetByContextProductsForHierarchyData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getByContextProductsForHierarchy({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getByContextProductsForHierarchy", options)],
  })
}

export const getByContextProductsForHierarchyInfiniteOptions = (
  options: Options<GetByContextProductsForHierarchyData>,
) => {
  return infiniteQueryOptions<
    GetByContextProductsForHierarchyResponse,
    GetByContextProductsForHierarchyError,
    InfiniteData<GetByContextProductsForHierarchyResponse>,
    QueryKey<Options<GetByContextProductsForHierarchyData>>,
    | number
    | Pick<
        QueryKey<Options<GetByContextProductsForHierarchyData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetByContextProductsForHierarchyData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  "page[limit]": pageParam,
                },
              }
        const { data } = await getByContextProductsForHierarchy({
          ...options,
          ...queryKey[0],
          body: {
            ...(queryKey[0].body as any),
            ...(page.body as any),
          },
          headers: {
            ...queryKey[0].headers,
            ...page.headers,
          },
          path: {
            ...queryKey[0].path,
            ...page.path,
          },
          query: {
            ...queryKey[0].query,
            ...page.query,
          },
          throwOnError: true,
        })
        return data
      },
      queryKey: [
        createQueryKey("getByContextProductsForHierarchy", options, true),
      ],
    },
  )
}

export const getByContextProductsForNodeOptions = (
  options: Options<GetByContextProductsForNodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getByContextProductsForNode({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getByContextProductsForNode", options)],
  })
}

export const getByContextProductsForNodeInfiniteOptions = (
  options: Options<GetByContextProductsForNodeData>,
) => {
  return infiniteQueryOptions<
    GetByContextProductsForNodeResponse,
    GetByContextProductsForNodeError,
    InfiniteData<GetByContextProductsForNodeResponse>,
    QueryKey<Options<GetByContextProductsForNodeData>>,
    | number
    | Pick<
        QueryKey<Options<GetByContextProductsForNodeData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetByContextProductsForNodeData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  "page[limit]": pageParam,
                },
              }
        const { data } = await getByContextProductsForNode({
          ...options,
          ...queryKey[0],
          body: {
            ...(queryKey[0].body as any),
            ...(page.body as any),
          },
          headers: {
            ...queryKey[0].headers,
            ...page.headers,
          },
          path: {
            ...queryKey[0].path,
            ...page.path,
          },
          query: {
            ...queryKey[0].query,
            ...page.query,
          },
          throwOnError: true,
        })
        return data
      },
      queryKey: [createQueryKey("getByContextProductsForNode", options, true)],
    },
  )
}

export const configureByContextProductOptions = (
  options: Options<ConfigureByContextProductData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await configureByContextProduct({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("configureByContextProduct", options)],
  })
}

export const configureByContextProductMutation = () => {
  const mutationOptions: UseMutationOptions<
    ConfigureByContextProductResponse,
    ConfigureByContextProductError,
    Options<ConfigureByContextProductData>
  > = {
    mutationFn: async (options) => {
      const { data } = await configureByContextProduct({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const createCatalogOptions = (options: Options<CreateCatalogData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await createCatalog({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("createCatalog", options)],
  })
}

export const createCatalogMutation = () => {
  const mutationOptions: UseMutationOptions<
    CreateCatalogResponse,
    CreateCatalogError,
    Options<CreateCatalogData>
  > = {
    mutationFn: async (options) => {
      const { data } = await createCatalog({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getCatalogsOptions = (options?: Options) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getCatalogs({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getCatalogs", options)],
  })
}

export const getCatalogByIdOptions = (options: Options<GetCatalogByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getCatalogById({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getCatalogById", options)],
  })
}

export const updateCatalogMutation = () => {
  const mutationOptions: UseMutationOptions<
    UpdateCatalogResponse,
    UpdateCatalogError,
    Options<UpdateCatalogData>
  > = {
    mutationFn: async (options) => {
      const { data } = await updateCatalog({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteCatalogByIdMutation = () => {
  const mutationOptions: UseMutationOptions<
    DeleteCatalogByIdResponse,
    DeleteCatalogByIdError,
    Options<DeleteCatalogByIdData>
  > = {
    mutationFn: async (options) => {
      const { data } = await deleteCatalogById({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const publishReleaseOptions = (options: Options<PublishReleaseData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await publishRelease({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("publishRelease", options)],
  })
}

export const publishReleaseMutation = () => {
  const mutationOptions: UseMutationOptions<
    PublishReleaseResponse,
    PublishReleaseError,
    Options<PublishReleaseData>
  > = {
    mutationFn: async (options) => {
      const { data } = await publishRelease({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getReleasesOptions = (options: Options<GetReleasesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getReleases({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getReleases", options)],
  })
}

export const deleteReleasesMutation = () => {
  const mutationOptions: UseMutationOptions<
    DeleteReleasesResponse,
    DeleteReleasesError,
    Options<DeleteReleasesData>
  > = {
    mutationFn: async (options) => {
      const { data } = await deleteReleases({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getReleaseByIdOptions = (options: Options<GetReleaseByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getReleaseById({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getReleaseById", options)],
  })
}

export const deleteReleaseByIdMutation = () => {
  const mutationOptions: UseMutationOptions<
    DeleteReleaseByIdResponse,
    DeleteReleaseByIdError,
    Options<DeleteReleaseByIdData>
  > = {
    mutationFn: async (options) => {
      const { data } = await deleteReleaseById({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const createRuleOptions = (options: Options<CreateRuleData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await createRule({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("createRule", options)],
  })
}

export const createRuleMutation = () => {
  const mutationOptions: UseMutationOptions<
    CreateRuleResponse,
    CreateRuleError,
    Options<CreateRuleData>
  > = {
    mutationFn: async (options) => {
      const { data } = await createRule({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getRulesOptions = (options?: Options<GetRulesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getRules({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getRules", options)],
  })
}

export const getRulesInfiniteOptions = (options?: Options<GetRulesData>) => {
  return infiniteQueryOptions<
    GetRulesResponse,
    GetRulesError,
    InfiniteData<GetRulesResponse>,
    QueryKey<Options<GetRulesData>>,
    | number
    | Pick<
        QueryKey<Options<GetRulesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetRulesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  "page[limit]": pageParam,
                },
              }
        const { data } = await getRules({
          ...options,
          ...queryKey[0],
          body: {
            ...(queryKey[0].body as any),
            ...(page.body as any),
          },
          headers: {
            ...queryKey[0].headers,
            ...page.headers,
          },
          path: {
            ...queryKey[0].path,
            ...page.path,
          },
          query: {
            ...queryKey[0].query,
            ...page.query,
          },
          throwOnError: true,
        })
        return data
      },
      queryKey: [createQueryKey("getRules", options, true)],
    },
  )
}

export const getRuleByIdOptions = (options: Options<GetRuleByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getRuleById({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getRuleById", options)],
  })
}

export const updateRuleMutation = () => {
  const mutationOptions: UseMutationOptions<
    UpdateRuleResponse,
    UpdateRuleError,
    Options<UpdateRuleData>
  > = {
    mutationFn: async (options) => {
      const { data } = await updateRule({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteRuleByIdMutation = () => {
  const mutationOptions: UseMutationOptions<
    DeleteRuleByIdResponse,
    DeleteRuleByIdError,
    Options<DeleteRuleByIdData>
  > = {
    mutationFn: async (options) => {
      const { data } = await deleteRuleById({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getAllHierarchiesOptions = (
  options: Options<GetAllHierarchiesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getAllHierarchies({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getAllHierarchies", options)],
  })
}

export const getAllHierarchiesInfiniteOptions = (
  options: Options<GetAllHierarchiesData>,
) => {
  return infiniteQueryOptions<
    GetAllHierarchiesResponse,
    GetAllHierarchiesError,
    InfiniteData<GetAllHierarchiesResponse>,
    QueryKey<Options<GetAllHierarchiesData>>,
    | number
    | Pick<
        QueryKey<Options<GetAllHierarchiesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetAllHierarchiesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  "page[limit]": pageParam,
                },
              }
        const { data } = await getAllHierarchies({
          ...options,
          ...queryKey[0],
          body: {
            ...(queryKey[0].body as any),
            ...(page.body as any),
          },
          headers: {
            ...queryKey[0].headers,
            ...page.headers,
          },
          path: {
            ...queryKey[0].path,
            ...page.path,
          },
          query: {
            ...queryKey[0].query,
            ...page.query,
          },
          throwOnError: true,
        })
        return data
      },
      queryKey: [createQueryKey("getAllHierarchies", options, true)],
    },
  )
}

export const getHierarchyOptions = (options: Options<GetHierarchyData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getHierarchy({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getHierarchy", options)],
  })
}

export const getHierarchyNodesOptions = (
  options: Options<GetHierarchyNodesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getHierarchyNodes({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getHierarchyNodes", options)],
  })
}

export const getHierarchyNodesInfiniteOptions = (
  options: Options<GetHierarchyNodesData>,
) => {
  return infiniteQueryOptions<
    GetHierarchyNodesResponse,
    GetHierarchyNodesError,
    InfiniteData<GetHierarchyNodesResponse>,
    QueryKey<Options<GetHierarchyNodesData>>,
    | number
    | Pick<
        QueryKey<Options<GetHierarchyNodesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetHierarchyNodesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  "page[limit]": pageParam,
                },
              }
        const { data } = await getHierarchyNodes({
          ...options,
          ...queryKey[0],
          body: {
            ...(queryKey[0].body as any),
            ...(page.body as any),
          },
          headers: {
            ...queryKey[0].headers,
            ...page.headers,
          },
          path: {
            ...queryKey[0].path,
            ...page.path,
          },
          query: {
            ...queryKey[0].query,
            ...page.query,
          },
          throwOnError: true,
        })
        return data
      },
      queryKey: [createQueryKey("getHierarchyNodes", options, true)],
    },
  )
}

export const getHierarchyChildNodesOptions = (
  options: Options<GetHierarchyChildNodesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getHierarchyChildNodes({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getHierarchyChildNodes", options)],
  })
}

export const getHierarchyChildNodesInfiniteOptions = (
  options: Options<GetHierarchyChildNodesData>,
) => {
  return infiniteQueryOptions<
    GetHierarchyChildNodesResponse,
    GetHierarchyChildNodesError,
    InfiniteData<GetHierarchyChildNodesResponse>,
    QueryKey<Options<GetHierarchyChildNodesData>>,
    | number
    | Pick<
        QueryKey<Options<GetHierarchyChildNodesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetHierarchyChildNodesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  "page[limit]": pageParam,
                },
              }
        const { data } = await getHierarchyChildNodes({
          ...options,
          ...queryKey[0],
          body: {
            ...(queryKey[0].body as any),
            ...(page.body as any),
          },
          headers: {
            ...queryKey[0].headers,
            ...page.headers,
          },
          path: {
            ...queryKey[0].path,
            ...page.path,
          },
          query: {
            ...queryKey[0].query,
            ...page.query,
          },
          throwOnError: true,
        })
        return data
      },
      queryKey: [createQueryKey("getHierarchyChildNodes", options, true)],
    },
  )
}

export const getAllNodesOptions = (options: Options<GetAllNodesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getAllNodes({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getAllNodes", options)],
  })
}

export const getAllNodesInfiniteOptions = (
  options: Options<GetAllNodesData>,
) => {
  return infiniteQueryOptions<
    GetAllNodesResponse,
    GetAllNodesError,
    InfiniteData<GetAllNodesResponse>,
    QueryKey<Options<GetAllNodesData>>,
    | number
    | Pick<
        QueryKey<Options<GetAllNodesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetAllNodesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  "page[limit]": pageParam,
                },
              }
        const { data } = await getAllNodes({
          ...options,
          ...queryKey[0],
          body: {
            ...(queryKey[0].body as any),
            ...(page.body as any),
          },
          headers: {
            ...queryKey[0].headers,
            ...page.headers,
          },
          path: {
            ...queryKey[0].path,
            ...page.path,
          },
          query: {
            ...queryKey[0].query,
            ...page.query,
          },
          throwOnError: true,
        })
        return data
      },
      queryKey: [createQueryKey("getAllNodes", options, true)],
    },
  )
}

export const getNodeOptions = (options: Options<GetNodeData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getNode({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getNode", options)],
  })
}

export const getChildNodesOptions = (options: Options<GetChildNodesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getChildNodes({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getChildNodes", options)],
  })
}

export const getChildNodesInfiniteOptions = (
  options: Options<GetChildNodesData>,
) => {
  return infiniteQueryOptions<
    GetChildNodesResponse,
    GetChildNodesError,
    InfiniteData<GetChildNodesResponse>,
    QueryKey<Options<GetChildNodesData>>,
    | number
    | Pick<
        QueryKey<Options<GetChildNodesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetChildNodesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  "page[limit]": pageParam,
                },
              }
        const { data } = await getChildNodes({
          ...options,
          ...queryKey[0],
          body: {
            ...(queryKey[0].body as any),
            ...(page.body as any),
          },
          headers: {
            ...queryKey[0].headers,
            ...page.headers,
          },
          path: {
            ...queryKey[0].path,
            ...page.path,
          },
          query: {
            ...queryKey[0].query,
            ...page.query,
          },
          throwOnError: true,
        })
        return data
      },
      queryKey: [createQueryKey("getChildNodes", options, true)],
    },
  )
}

export const getAllProductsOptions = (options: Options<GetAllProductsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getAllProducts({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getAllProducts", options)],
  })
}

export const getAllProductsInfiniteOptions = (
  options: Options<GetAllProductsData>,
) => {
  return infiniteQueryOptions<
    GetAllProductsResponse,
    GetAllProductsError,
    InfiniteData<GetAllProductsResponse>,
    QueryKey<Options<GetAllProductsData>>,
    | number
    | Pick<
        QueryKey<Options<GetAllProductsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetAllProductsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  "page[limit]": pageParam,
                },
              }
        const { data } = await getAllProducts({
          ...options,
          ...queryKey[0],
          body: {
            ...(queryKey[0].body as any),
            ...(page.body as any),
          },
          headers: {
            ...queryKey[0].headers,
            ...page.headers,
          },
          path: {
            ...queryKey[0].path,
            ...page.path,
          },
          query: {
            ...queryKey[0].query,
            ...page.query,
          },
          throwOnError: true,
        })
        return data
      },
      queryKey: [createQueryKey("getAllProducts", options, true)],
    },
  )
}

export const getProductOptions = (options: Options<GetProductData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getProduct({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getProduct", options)],
  })
}

export const getComponentProductIdsOptions = (
  options: Options<GetComponentProductIdsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getComponentProductIds({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getComponentProductIds", options)],
  })
}

export const getComponentProductIdsInfiniteOptions = (
  options: Options<GetComponentProductIdsData>,
) => {
  return infiniteQueryOptions<
    GetComponentProductIdsResponse,
    GetComponentProductIdsError,
    InfiniteData<GetComponentProductIdsResponse>,
    QueryKey<Options<GetComponentProductIdsData>>,
    | number
    | Pick<
        QueryKey<Options<GetComponentProductIdsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetComponentProductIdsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  "page[limit]": pageParam,
                },
              }
        const { data } = await getComponentProductIds({
          ...options,
          ...queryKey[0],
          body: {
            ...(queryKey[0].body as any),
            ...(page.body as any),
          },
          headers: {
            ...queryKey[0].headers,
            ...page.headers,
          },
          path: {
            ...queryKey[0].path,
            ...page.path,
          },
          query: {
            ...queryKey[0].query,
            ...page.query,
          },
          throwOnError: true,
        })
        return data
      },
      queryKey: [createQueryKey("getComponentProductIds", options, true)],
    },
  )
}

export const getChildProductsOptions = (
  options: Options<GetChildProductsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getChildProducts({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getChildProducts", options)],
  })
}

export const getChildProductsInfiniteOptions = (
  options: Options<GetChildProductsData>,
) => {
  return infiniteQueryOptions<
    GetChildProductsResponse,
    GetChildProductsError,
    InfiniteData<GetChildProductsResponse>,
    QueryKey<Options<GetChildProductsData>>,
    | number
    | Pick<
        QueryKey<Options<GetChildProductsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetChildProductsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  "page[limit]": pageParam,
                },
              }
        const { data } = await getChildProducts({
          ...options,
          ...queryKey[0],
          body: {
            ...(queryKey[0].body as any),
            ...(page.body as any),
          },
          headers: {
            ...queryKey[0].headers,
            ...page.headers,
          },
          path: {
            ...queryKey[0].path,
            ...page.path,
          },
          query: {
            ...queryKey[0].query,
            ...page.query,
          },
          throwOnError: true,
        })
        return data
      },
      queryKey: [createQueryKey("getChildProducts", options, true)],
    },
  )
}

export const getProductsForHierarchyOptions = (
  options: Options<GetProductsForHierarchyData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getProductsForHierarchy({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getProductsForHierarchy", options)],
  })
}

export const getProductsForHierarchyInfiniteOptions = (
  options: Options<GetProductsForHierarchyData>,
) => {
  return infiniteQueryOptions<
    GetProductsForHierarchyResponse,
    GetProductsForHierarchyError,
    InfiniteData<GetProductsForHierarchyResponse>,
    QueryKey<Options<GetProductsForHierarchyData>>,
    | number
    | Pick<
        QueryKey<Options<GetProductsForHierarchyData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetProductsForHierarchyData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  "page[limit]": pageParam,
                },
              }
        const { data } = await getProductsForHierarchy({
          ...options,
          ...queryKey[0],
          body: {
            ...(queryKey[0].body as any),
            ...(page.body as any),
          },
          headers: {
            ...queryKey[0].headers,
            ...page.headers,
          },
          path: {
            ...queryKey[0].path,
            ...page.path,
          },
          query: {
            ...queryKey[0].query,
            ...page.query,
          },
          throwOnError: true,
        })
        return data
      },
      queryKey: [createQueryKey("getProductsForHierarchy", options, true)],
    },
  )
}

export const getProductsForNodeOptions = (
  options: Options<GetProductsForNodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getProductsForNode({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getProductsForNode", options)],
  })
}

export const getProductsForNodeInfiniteOptions = (
  options: Options<GetProductsForNodeData>,
) => {
  return infiniteQueryOptions<
    GetProductsForNodeResponse,
    GetProductsForNodeError,
    InfiniteData<GetProductsForNodeResponse>,
    QueryKey<Options<GetProductsForNodeData>>,
    | number
    | Pick<
        QueryKey<Options<GetProductsForNodeData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<GetProductsForNodeData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  "page[limit]": pageParam,
                },
              }
        const { data } = await getProductsForNode({
          ...options,
          ...queryKey[0],
          body: {
            ...(queryKey[0].body as any),
            ...(page.body as any),
          },
          headers: {
            ...queryKey[0].headers,
            ...page.headers,
          },
          path: {
            ...queryKey[0].path,
            ...page.path,
          },
          query: {
            ...queryKey[0].query,
            ...page.query,
          },
          throwOnError: true,
        })
        return data
      },
      queryKey: [createQueryKey("getProductsForNode", options, true)],
    },
  )
}

export const getCartsOptions = (options?: Options<GetCartsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getCarts({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getCarts", options)],
  })
}

export const createAcartOptions = (options?: Options<CreateAcartData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await createAcart({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("createAcart", options)],
  })
}

export const createAcartMutation = () => {
  const mutationOptions: UseMutationOptions<
    CreateAcartResponse,
    CreateAcartError,
    Options<CreateAcartData>
  > = {
    mutationFn: async (options) => {
      const { data } = await createAcart({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getCartOptions = (options: Options<GetCartData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getCart({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getCart", options)],
  })
}

export const updateAcartMutation = () => {
  const mutationOptions: UseMutationOptions<
    UpdateAcartResponse,
    UpdateAcartError,
    Options<UpdateAcartData>
  > = {
    mutationFn: async (options) => {
      const { data } = await updateAcart({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteAcartMutation = () => {
  const mutationOptions: UseMutationOptions<
    DeleteAcartResponse,
    DeleteAcartError,
    Options<DeleteAcartData>
  > = {
    mutationFn: async (options) => {
      const { data } = await deleteAcart({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getCartItemsOptions = (options: Options<GetCartItemsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getCartItems({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getCartItems", options)],
  })
}

export const bulkUpdateItemsInCartMutation = () => {
  const mutationOptions: UseMutationOptions<
    BulkUpdateItemsInCartResponse,
    BulkUpdateItemsInCartError,
    Options<BulkUpdateItemsInCartData>
  > = {
    mutationFn: async (options) => {
      const { data } = await bulkUpdateItemsInCart({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const manageCartsOptions = (options: Options<ManageCartsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await manageCarts({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("manageCarts", options)],
  })
}

export const manageCartsMutation = () => {
  const mutationOptions: UseMutationOptions<
    ManageCartsResponse,
    ManageCartsError,
    Options<ManageCartsData>
  > = {
    mutationFn: async (options) => {
      const { data } = await manageCarts({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteAllCartItemsMutation = () => {
  const mutationOptions: UseMutationOptions<
    DeleteAllCartItemsResponse,
    DeleteAllCartItemsError,
    Options<DeleteAllCartItemsData>
  > = {
    mutationFn: async (options) => {
      const { data } = await deleteAllCartItems({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const updateAcartItemMutation = () => {
  const mutationOptions: UseMutationOptions<
    UpdateAcartItemResponse,
    UpdateAcartItemError,
    Options<UpdateAcartItemData>
  > = {
    mutationFn: async (options) => {
      const { data } = await updateAcartItem({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteAcartItemMutation = () => {
  const mutationOptions: UseMutationOptions<
    DeleteAcartItemResponse,
    DeleteAcartItemError,
    Options<DeleteAcartItemData>
  > = {
    mutationFn: async (options) => {
      const { data } = await deleteAcartItem({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const createAccountCartAssociationOptions = (
  options: Options<CreateAccountCartAssociationData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await createAccountCartAssociation({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("createAccountCartAssociation", options)],
  })
}

export const createAccountCartAssociationMutation = () => {
  const mutationOptions: UseMutationOptions<
    CreateAccountCartAssociationResponse,
    CreateAccountCartAssociationError,
    Options<CreateAccountCartAssociationData>
  > = {
    mutationFn: async (options) => {
      const { data } = await createAccountCartAssociation({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteAccountCartAssociationMutation = () => {
  const mutationOptions: UseMutationOptions<
    DeleteAccountCartAssociationResponse,
    DeleteAccountCartAssociationError,
    Options<DeleteAccountCartAssociationData>
  > = {
    mutationFn: async (options) => {
      const { data } = await deleteAccountCartAssociation({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const createCustomerCartAssociationOptions = (
  options: Options<CreateCustomerCartAssociationData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await createCustomerCartAssociation({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("createCustomerCartAssociation", options)],
  })
}

export const createCustomerCartAssociationMutation = () => {
  const mutationOptions: UseMutationOptions<
    CreateCustomerCartAssociationResponse,
    CreateCustomerCartAssociationError,
    Options<CreateCustomerCartAssociationData>
  > = {
    mutationFn: async (options) => {
      const { data } = await createCustomerCartAssociation({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteCustomerCartAssociationMutation = () => {
  const mutationOptions: UseMutationOptions<
    DeleteCustomerCartAssociationResponse,
    DeleteCustomerCartAssociationError,
    Options<DeleteCustomerCartAssociationData>
  > = {
    mutationFn: async (options) => {
      const { data } = await deleteCustomerCartAssociation({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteApromotionViaPromotionCodeMutation = () => {
  const mutationOptions: UseMutationOptions<
    DeleteApromotionViaPromotionCodeResponse,
    DeleteApromotionViaPromotionCodeError,
    Options<DeleteApromotionViaPromotionCodeData>
  > = {
    mutationFn: async (options) => {
      const { data } = await deleteApromotionViaPromotionCode({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const addTaxItemToCartOptions = (
  options: Options<AddTaxItemToCartData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await addTaxItemToCart({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("addTaxItemToCart", options)],
  })
}

export const addTaxItemToCartMutation = () => {
  const mutationOptions: UseMutationOptions<
    AddTaxItemToCartResponse,
    AddTaxItemToCartError,
    Options<AddTaxItemToCartData>
  > = {
    mutationFn: async (options) => {
      const { data } = await addTaxItemToCart({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const bulkAddTaxItemsToCartOptions = (
  options: Options<BulkAddTaxItemsToCartData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await bulkAddTaxItemsToCart({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("bulkAddTaxItemsToCart", options)],
  })
}

export const bulkAddTaxItemsToCartMutation = () => {
  const mutationOptions: UseMutationOptions<
    BulkAddTaxItemsToCartResponse,
    BulkAddTaxItemsToCartError,
    Options<BulkAddTaxItemsToCartData>
  > = {
    mutationFn: async (options) => {
      const { data } = await bulkAddTaxItemsToCart({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const bulkDeleteTaxItemsFromCartMutation = () => {
  const mutationOptions: UseMutationOptions<
    BulkDeleteTaxItemsFromCartResponse,
    BulkDeleteTaxItemsFromCartError,
    Options<BulkDeleteTaxItemsFromCartData>
  > = {
    mutationFn: async (options) => {
      const { data } = await bulkDeleteTaxItemsFromCart({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const updateAtaxItemMutation = () => {
  const mutationOptions: UseMutationOptions<
    UpdateAtaxItemResponse,
    UpdateAtaxItemError,
    Options<UpdateAtaxItemData>
  > = {
    mutationFn: async (options) => {
      const { data } = await updateAtaxItem({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteAtaxItemMutation = () => {
  const mutationOptions: UseMutationOptions<
    DeleteAtaxItemResponse,
    DeleteAtaxItemError,
    Options<DeleteAtaxItemData>
  > = {
    mutationFn: async (options) => {
      const { data } = await deleteAtaxItem({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const bulkAddCustomDiscountsToCartOptions = (
  options: Options<BulkAddCustomDiscountsToCartData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await bulkAddCustomDiscountsToCart({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("bulkAddCustomDiscountsToCart", options)],
  })
}

export const bulkAddCustomDiscountsToCartMutation = () => {
  const mutationOptions: UseMutationOptions<
    BulkAddCustomDiscountsToCartResponse,
    BulkAddCustomDiscountsToCartError,
    Options<BulkAddCustomDiscountsToCartData>
  > = {
    mutationFn: async (options) => {
      const { data } = await bulkAddCustomDiscountsToCart({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const bulkDeleteCustomDiscountsFromCartMutation = () => {
  const mutationOptions: UseMutationOptions<
    BulkDeleteCustomDiscountsFromCartResponse,
    BulkDeleteCustomDiscountsFromCartError,
    Options<BulkDeleteCustomDiscountsFromCartData>
  > = {
    mutationFn: async (options) => {
      const { data } = await bulkDeleteCustomDiscountsFromCart({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const updateCustomDiscountForCartMutation = () => {
  const mutationOptions: UseMutationOptions<
    UpdateCustomDiscountForCartResponse,
    UpdateCustomDiscountForCartError,
    Options<UpdateCustomDiscountForCartData>
  > = {
    mutationFn: async (options) => {
      const { data } = await updateCustomDiscountForCart({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteCustomDiscountFromCartMutation = () => {
  const mutationOptions: UseMutationOptions<
    DeleteCustomDiscountFromCartResponse,
    DeleteCustomDiscountFromCartError,
    Options<DeleteCustomDiscountFromCartData>
  > = {
    mutationFn: async (options) => {
      const { data } = await deleteCustomDiscountFromCart({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const addCustomDiscountToCartItemOptions = (
  options: Options<AddCustomDiscountToCartItemData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await addCustomDiscountToCartItem({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("addCustomDiscountToCartItem", options)],
  })
}

export const addCustomDiscountToCartItemMutation = () => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    Options<AddCustomDiscountToCartItemData>
  > = {
    mutationFn: async (options) => {
      const { data } = await addCustomDiscountToCartItem({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const updateCustomDiscountForCartItemMutation = () => {
  const mutationOptions: UseMutationOptions<
    void,
    DefaultError,
    Options<UpdateCustomDiscountForCartItemData>
  > = {
    mutationFn: async (options) => {
      const { data } = await updateCustomDiscountForCartItem({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteCustomDiscountFromCartItemMutation = () => {
  const mutationOptions: UseMutationOptions<
    DeleteCustomDiscountFromCartItemResponse,
    DeleteCustomDiscountFromCartItemError,
    Options<DeleteCustomDiscountFromCartItemData>
  > = {
    mutationFn: async (options) => {
      const { data } = await deleteCustomDiscountFromCartItem({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const createCartPaymentIntentOptions = (
  options: Options<CreateCartPaymentIntentData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await createCartPaymentIntent({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("createCartPaymentIntent", options)],
  })
}

export const createCartPaymentIntentMutation = () => {
  const mutationOptions: UseMutationOptions<
    CreateCartPaymentIntentResponse,
    CreateCartPaymentIntentError,
    Options<CreateCartPaymentIntentData>
  > = {
    mutationFn: async (options) => {
      const { data } = await createCartPaymentIntent({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const checkoutApiOptions = (options: Options<CheckoutApiData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await checkoutApi({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("checkoutApi", options)],
  })
}

export const checkoutApiMutation = () => {
  const mutationOptions: UseMutationOptions<
    CheckoutApiResponse,
    CheckoutApiError,
    Options<CheckoutApiData>
  > = {
    mutationFn: async (options) => {
      const { data } = await checkoutApi({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getCustomerOrdersOptions = (
  options?: Options<GetCustomerOrdersData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getCustomerOrders({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getCustomerOrders", options)],
  })
}

export const getAnOrderOptions = (options: Options<GetAnOrderData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getAnOrder({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getAnOrder", options)],
  })
}

export const updateAnOrderMutation = () => {
  const mutationOptions: UseMutationOptions<
    UpdateAnOrderResponse,
    UpdateAnOrderError,
    Options<UpdateAnOrderData>
  > = {
    mutationFn: async (options) => {
      const { data } = await updateAnOrder({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getOrderItemsOptions = (options: Options<GetOrderItemsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getOrderItems({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getOrderItems", options)],
  })
}

export const anonymizeOrdersOptions = (
  options?: Options<AnonymizeOrdersData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await anonymizeOrders({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("anonymizeOrders", options)],
  })
}

export const anonymizeOrdersMutation = () => {
  const mutationOptions: UseMutationOptions<
    AnonymizeOrdersResponse,
    AnonymizeOrdersError,
    Options<AnonymizeOrdersData>
  > = {
    mutationFn: async (options) => {
      const { data } = await anonymizeOrders({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const authorizeSetupOptions = (options: Options<AuthorizeSetupData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await authorizeSetup({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("authorizeSetup", options)],
  })
}

export const authorizeSetupMutation = () => {
  const mutationOptions: UseMutationOptions<
    AuthorizeSetupResponse,
    AuthorizeSetupError,
    Options<AuthorizeSetupData>
  > = {
    mutationFn: async (options) => {
      const { data } = await authorizeSetup({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const confirmSetupOptions = (options: Options<ConfirmSetupData>) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await confirmSetup({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("confirmSetup", options)],
  })
}

export const confirmSetupMutation = () => {
  const mutationOptions: UseMutationOptions<
    ConfirmSetupResponse,
    ConfirmSetupError,
    Options<ConfirmSetupData>
  > = {
    mutationFn: async (options) => {
      const { data } = await confirmSetup({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const captureAtransactionOptions = (
  options: Options<CaptureAtransactionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await captureAtransaction({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("captureAtransaction", options)],
  })
}

export const captureAtransactionMutation = () => {
  const mutationOptions: UseMutationOptions<
    CaptureAtransactionResponse,
    CaptureAtransactionError,
    Options<CaptureAtransactionData>
  > = {
    mutationFn: async (options) => {
      const { data } = await captureAtransaction({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const refundAtransactionOptions = (
  options: Options<RefundAtransactionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await refundAtransaction({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("refundAtransaction", options)],
  })
}

export const refundAtransactionMutation = () => {
  const mutationOptions: UseMutationOptions<
    RefundAtransactionResponse,
    RefundAtransactionError,
    Options<RefundAtransactionData>
  > = {
    mutationFn: async (options) => {
      const { data } = await refundAtransaction({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getOrderTransactionsOptions = (
  options: Options<GetOrderTransactionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getOrderTransactions({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getOrderTransactions", options)],
  })
}

export const getAtransactionOptions = (
  options: Options<GetAtransactionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await getAtransaction({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("getAtransaction", options)],
  })
}

export const cancelAtransactionOptions = (
  options: Options<CancelAtransactionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey }) => {
      const { data } = await cancelAtransaction({
        ...options,
        ...queryKey[0],
        throwOnError: true,
      })
      return data
    },
    queryKey: [createQueryKey("cancelAtransaction", options)],
  })
}

export const cancelAtransactionMutation = () => {
  const mutationOptions: UseMutationOptions<
    CancelAtransactionResponse,
    CancelAtransactionError,
    Options<CancelAtransactionData>
  > = {
    mutationFn: async (options) => {
      const { data } = await cancelAtransaction({
        ...options,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}
