// This file is auto-generated by @hey-api/openapi-ts

import type { Options } from "@hey-api/client-fetch"
import {
  queryOptions,
  type UseMutationOptions,
  type DefaultError,
} from "@tanstack/react-query"
import type {
  GetByContextReleaseData,
  GetByContextAllHierarchiesData,
  GetByContextHierarchyData,
  GetByContextHierarchyNodesData,
  GetByContextHierarchyChildNodesData,
  GetByContextAllNodesData,
  GetByContextNodeData,
  GetByContextChildNodesData,
  GetByContextAllProductsData,
  GetByContextProductData,
  GetByContextAllRelatedProductsData,
  GetByContextComponentProductIdsData,
  GetByContextChildProductsData,
  GetByContextProductsForHierarchyData,
  GetByContextProductsForNodeData,
  ConfigureByContextProductData,
  ConfigureByContextProductError,
  ConfigureByContextProductResponse,
  GetCatalogsData,
  CreateCatalogData,
  CreateCatalogError,
  CreateCatalogResponse,
  DeleteCatalogByIdData,
  DeleteCatalogByIdError,
  DeleteCatalogByIdResponse,
  GetCatalogByIdData,
  UpdateCatalogData,
  UpdateCatalogError,
  UpdateCatalogResponse,
  DeleteReleasesData,
  DeleteReleasesError,
  DeleteReleasesResponse,
  GetReleasesData,
  PublishReleaseData,
  PublishReleaseError,
  PublishReleaseResponse,
  DeleteReleaseByIdData,
  DeleteReleaseByIdError,
  DeleteReleaseByIdResponse,
  GetReleaseByIdData,
  GetRulesData,
  CreateRuleData,
  CreateRuleError,
  CreateRuleResponse,
  DeleteRuleByIdData,
  DeleteRuleByIdError,
  DeleteRuleByIdResponse,
  GetRuleByIdData,
  UpdateRuleData,
  UpdateRuleError,
  UpdateRuleResponse,
  GetAllHierarchiesData,
  GetHierarchyData,
  GetHierarchyNodesData,
  GetHierarchyChildNodesData,
  GetAllNodesData,
  GetNodeData,
  GetChildNodesData,
  GetAllProductsData,
  GetProductData,
  GetAllRelatedProductsData,
  GetComponentProductIdsData,
  GetChildProductsData,
  GetProductsForHierarchyData,
  GetProductsForNodeData,
  GetCartsData,
  CreateACartData,
  CreateACartError,
  CreateACartResponse,
  DeleteACartData,
  DeleteACartError,
  DeleteACartResponse,
  GetACartData,
  UpdateACartData,
  UpdateACartError,
  UpdateACartResponse,
  DeleteAllCartItemsData,
  DeleteAllCartItemsError,
  DeleteAllCartItemsResponse,
  GetCartItemsData,
  ManageCartsData,
  ManageCartsError,
  ManageCartsResponse,
  BulkUpdateItemsInCartData,
  BulkUpdateItemsInCartError,
  DeleteACartItemData,
  DeleteACartItemResponse,
  UpdateACartItemData,
  UpdateACartItemError,
  UpdateACartItemResponse,
  DeleteAccountCartAssociationData,
  DeleteAccountCartAssociationError,
  DeleteAccountCartAssociationResponse,
  CreateAccountCartAssociationData,
  CreateAccountCartAssociationError,
  CreateAccountCartAssociationResponse,
  DeleteCustomerCartAssociationData,
  DeleteCustomerCartAssociationError,
  DeleteCustomerCartAssociationResponse,
  CreateCustomerCartAssociationData,
  CreateCustomerCartAssociationError,
  CreateCustomerCartAssociationResponse,
  DeleteAPromotionViaPromotionCodeData,
  DeleteAPromotionViaPromotionCodeResponse,
  AddTaxItemToCartData,
  AddTaxItemToCartError,
  AddTaxItemToCartResponse,
  BulkDeleteTaxItemsFromCartData,
  BulkDeleteTaxItemsFromCartResponse,
  BulkAddTaxItemsToCartData,
  BulkAddTaxItemsToCartError,
  BulkAddTaxItemsToCartResponse,
  DeleteATaxItemData,
  DeleteATaxItemResponse,
  UpdateATaxItemData,
  UpdateATaxItemResponse,
  BulkDeleteCustomDiscountsFromCartData,
  BulkDeleteCustomDiscountsFromCartResponse,
  BulkAddCustomDiscountsToCartData,
  BulkAddCustomDiscountsToCartError,
  BulkAddCustomDiscountsToCartResponse,
  DeleteCustomDiscountFromCartData,
  DeleteCustomDiscountFromCartResponse,
  UpdateCustomDiscountForCartData,
  UpdateCustomDiscountForCartResponse,
  AddCustomDiscountToCartItemData,
  AddCustomDiscountToCartItemError,
  AddCustomDiscountToCartItemResponse,
  DeleteCustomDiscountFromCartItemData,
  DeleteCustomDiscountFromCartItemResponse,
  UpdateCustomDiscountForCartItemData,
  UpdateCustomDiscountForCartItemResponse,
  GetShippingGroupsData,
  CreateShippingGroupData,
  CreateShippingGroupError,
  CreateShippingGroupResponse,
  DeleteCartShippingGroupData,
  DeleteCartShippingGroupError,
  DeleteCartShippingGroupResponse,
  GetShippingGroupByIdData,
  UpdateShippingGroupData,
  UpdateShippingGroupError,
  UpdateShippingGroupResponse,
  CreateCartPaymentIntentData,
  CreateCartPaymentIntentResponse,
  UpdateCartPaymentIntentData,
  UpdateCartPaymentIntentResponse,
  CheckoutApiData,
  CheckoutApiError,
  CheckoutApiResponse,
  GetCustomerOrdersData,
  GetAnOrderData,
  UpdateAnOrderData,
  UpdateAnOrderError,
  UpdateAnOrderResponse,
  GetOrderItemsData,
  AnonymizeOrdersData,
  AnonymizeOrdersError,
  AnonymizeOrdersResponse,
  ConfirmOrderData,
  ConfirmOrderError,
  ConfirmOrderResponse,
  PaymentSetupData,
  PaymentSetupError,
  PaymentSetupResponse,
  ConfirmPaymentData,
  ConfirmPaymentError,
  ConfirmPaymentResponse,
  CaptureATransactionData,
  CaptureATransactionError,
  CaptureATransactionResponse,
  RefundATransactionData,
  RefundATransactionError,
  RefundATransactionResponse,
  GetOrderTransactionsData,
  GetATransactionData,
  CancelATransactionData,
  CancelATransactionError,
  CancelATransactionResponse,
  GetOrderShippingGroupsData,
  CreateOrderShippingGroupData,
  CreateOrderShippingGroupError,
  CreateOrderShippingGroupResponse,
  GetShippingGroupsByIdData,
  PutShippingGroupByIdData,
  PutShippingGroupByIdError,
  PutShippingGroupByIdResponse,
  ListOfferingsData,
  GetOfferingData,
  ListOfferingPricingOptionsData,
  ListOfferingFeaturesData,
  ListOfferingPlansData,
  ListOfferingPlanPricingOptionsData,
  ListSubscriptionsData,
  GetSubscriptionData,
  ListSubscriptionPlansData,
  ListSubscriptionPricingOptionsData,
  ListSubscriptionStatesData,
  GetSubscriptionStateData,
  ListSubscriptionInvoicesData,
  ListSubscriptionInvoicePaymentsData,
  GetSubscriptionInvoicePaymentData,
  GetSubscriptionInvoiceData,
  ListInvoicesData,
  GetInvoiceData,
  GetFeatureData,
  GetStockData,
  ListLocationsData,
  CreateAnAccessTokenData,
  CreateAnAccessTokenError,
  CreateAnAccessTokenResponse,
  GetV2AccountAddressesData,
  PostV2AccountAddressData,
  PostV2AccountAddressError,
  PostV2AccountAddressResponse,
  DeleteV2AccountAddressData,
  DeleteV2AccountAddressError,
  DeleteV2AccountAddressResponse,
  GetV2AccountAddressData,
  PutV2AccountAddressData,
  PutV2AccountAddressError,
  PutV2AccountAddressResponse,
  GetV2AccountsData,
  PostV2AccountsData,
  PostV2AccountsError,
  PostV2AccountsResponse,
  GetV2AccountsAccountIdData,
  PutV2AccountsAccountIdData,
  PutV2AccountsAccountIdError,
  PutV2AccountsAccountIdResponse,
  GetV2AccountMembersData,
  GetV2AccountMembersAccountMemberIdData,
  GetV2AccountsAccountIdAccountMembershipsData,
  PostV2AccountMembersTokensData,
  PostV2AccountMembersTokensError,
  PostV2AccountMembersTokensResponse,
  CreateOneTimePasswordTokenRequestData,
  UpdatePasswordProfileInfoData,
  UpdatePasswordProfileInfoResponse,
  GetAllCurrenciesData,
  GetACurrencyData,
  GetAllFilesData,
  GetAFileData,
} from "../types.gen"
import {
  getByContextRelease,
  getByContextAllHierarchies,
  getByContextHierarchy,
  getByContextHierarchyNodes,
  getByContextHierarchyChildNodes,
  getByContextAllNodes,
  getByContextNode,
  getByContextChildNodes,
  getByContextAllProducts,
  getByContextProduct,
  getByContextAllRelatedProducts,
  getByContextComponentProductIds,
  getByContextChildProducts,
  getByContextProductsForHierarchy,
  getByContextProductsForNode,
  configureByContextProduct,
  getCatalogs,
  createCatalog,
  deleteCatalogById,
  getCatalogById,
  updateCatalog,
  deleteReleases,
  getReleases,
  publishRelease,
  deleteReleaseById,
  getReleaseById,
  getRules,
  createRule,
  deleteRuleById,
  getRuleById,
  updateRule,
  getAllHierarchies,
  getHierarchy,
  getHierarchyNodes,
  getHierarchyChildNodes,
  getAllNodes,
  getNode,
  getChildNodes,
  getAllProducts,
  getProduct,
  getAllRelatedProducts,
  getComponentProductIds,
  getChildProducts,
  getProductsForHierarchy,
  getProductsForNode,
  getCarts,
  createACart,
  deleteACart,
  getACart,
  updateACart,
  deleteAllCartItems,
  getCartItems,
  manageCarts,
  bulkUpdateItemsInCart,
  deleteACartItem,
  updateACartItem,
  deleteAccountCartAssociation,
  createAccountCartAssociation,
  deleteCustomerCartAssociation,
  createCustomerCartAssociation,
  deleteAPromotionViaPromotionCode,
  addTaxItemToCart,
  bulkDeleteTaxItemsFromCart,
  bulkAddTaxItemsToCart,
  deleteATaxItem,
  updateATaxItem,
  bulkDeleteCustomDiscountsFromCart,
  bulkAddCustomDiscountsToCart,
  deleteCustomDiscountFromCart,
  updateCustomDiscountForCart,
  addCustomDiscountToCartItem,
  deleteCustomDiscountFromCartItem,
  updateCustomDiscountForCartItem,
  getShippingGroups,
  createShippingGroup,
  deleteCartShippingGroup,
  getShippingGroupById,
  updateShippingGroup,
  createCartPaymentIntent,
  updateCartPaymentIntent,
  checkoutApi,
  getCustomerOrders,
  getAnOrder,
  updateAnOrder,
  getOrderItems,
  anonymizeOrders,
  confirmOrder,
  paymentSetup,
  confirmPayment,
  captureATransaction,
  refundATransaction,
  getOrderTransactions,
  getATransaction,
  cancelATransaction,
  getOrderShippingGroups,
  createOrderShippingGroup,
  getShippingGroupsById,
  putShippingGroupById,
  listOfferings,
  getOffering,
  listOfferingPricingOptions,
  listOfferingFeatures,
  listOfferingPlans,
  listOfferingPlanPricingOptions,
  listSubscriptions,
  getSubscription,
  listSubscriptionPlans,
  listSubscriptionPricingOptions,
  listSubscriptionStates,
  getSubscriptionState,
  listSubscriptionInvoices,
  listSubscriptionInvoicePayments,
  getSubscriptionInvoicePayment,
  getSubscriptionInvoice,
  listInvoices,
  getInvoice,
  getFeature,
  getStock,
  listLocations,
  createAnAccessToken,
  getV2AccountAddresses,
  postV2AccountAddress,
  deleteV2AccountAddress,
  getV2AccountAddress,
  putV2AccountAddress,
  getV2Accounts,
  postV2Accounts,
  getV2AccountsAccountId,
  putV2AccountsAccountId,
  getV2AccountMembers,
  getV2AccountMembersAccountMemberId,
  getV2AccountsAccountIdAccountMemberships,
  postV2AccountMembersTokens,
  createOneTimePasswordTokenRequest,
  updatePasswordProfileInfo,
  getAllCurrencies,
  getACurrency,
  getAllFiles,
  getAFile,
  client,
} from "../sdk.gen"

type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string
    _infinite?: boolean
  },
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return params
}

export const getByContextReleaseQueryKey = (
  options?: Options<GetByContextReleaseData>,
) => [createQueryKey("getByContextRelease", options)]

export const getByContextReleaseOptions = (
  options?: Options<GetByContextReleaseData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getByContextRelease({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getByContextReleaseQueryKey(options),
  })
}

export const getByContextAllHierarchiesQueryKey = (
  options?: Options<GetByContextAllHierarchiesData>,
) => [createQueryKey("getByContextAllHierarchies", options)]

export const getByContextAllHierarchiesOptions = (
  options?: Options<GetByContextAllHierarchiesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getByContextAllHierarchies({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getByContextAllHierarchiesQueryKey(options),
  })
}

export const getByContextHierarchyQueryKey = (
  options: Options<GetByContextHierarchyData>,
) => [createQueryKey("getByContextHierarchy", options)]

export const getByContextHierarchyOptions = (
  options: Options<GetByContextHierarchyData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getByContextHierarchy({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getByContextHierarchyQueryKey(options),
  })
}

export const getByContextHierarchyNodesQueryKey = (
  options: Options<GetByContextHierarchyNodesData>,
) => [createQueryKey("getByContextHierarchyNodes", options)]

export const getByContextHierarchyNodesOptions = (
  options: Options<GetByContextHierarchyNodesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getByContextHierarchyNodes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getByContextHierarchyNodesQueryKey(options),
  })
}

export const getByContextHierarchyChildNodesQueryKey = (
  options: Options<GetByContextHierarchyChildNodesData>,
) => [createQueryKey("getByContextHierarchyChildNodes", options)]

export const getByContextHierarchyChildNodesOptions = (
  options: Options<GetByContextHierarchyChildNodesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getByContextHierarchyChildNodes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getByContextHierarchyChildNodesQueryKey(options),
  })
}

export const getByContextAllNodesQueryKey = (
  options?: Options<GetByContextAllNodesData>,
) => [createQueryKey("getByContextAllNodes", options)]

export const getByContextAllNodesOptions = (
  options?: Options<GetByContextAllNodesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getByContextAllNodes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getByContextAllNodesQueryKey(options),
  })
}

export const getByContextNodeQueryKey = (
  options: Options<GetByContextNodeData>,
) => [createQueryKey("getByContextNode", options)]

export const getByContextNodeOptions = (
  options: Options<GetByContextNodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getByContextNode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getByContextNodeQueryKey(options),
  })
}

export const getByContextChildNodesQueryKey = (
  options: Options<GetByContextChildNodesData>,
) => [createQueryKey("getByContextChildNodes", options)]

export const getByContextChildNodesOptions = (
  options: Options<GetByContextChildNodesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getByContextChildNodes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getByContextChildNodesQueryKey(options),
  })
}

export const getByContextAllProductsQueryKey = (
  options?: Options<GetByContextAllProductsData>,
) => [createQueryKey("getByContextAllProducts", options)]

export const getByContextAllProductsOptions = (
  options?: Options<GetByContextAllProductsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getByContextAllProducts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getByContextAllProductsQueryKey(options),
  })
}

export const getByContextProductQueryKey = (
  options: Options<GetByContextProductData>,
) => [createQueryKey("getByContextProduct", options)]

export const getByContextProductOptions = (
  options: Options<GetByContextProductData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getByContextProduct({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getByContextProductQueryKey(options),
  })
}

export const getByContextAllRelatedProductsQueryKey = (
  options: Options<GetByContextAllRelatedProductsData>,
) => [createQueryKey("getByContextAllRelatedProducts", options)]

export const getByContextAllRelatedProductsOptions = (
  options: Options<GetByContextAllRelatedProductsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getByContextAllRelatedProducts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getByContextAllRelatedProductsQueryKey(options),
  })
}

export const getByContextComponentProductIdsQueryKey = (
  options: Options<GetByContextComponentProductIdsData>,
) => [createQueryKey("getByContextComponentProductIds", options)]

export const getByContextComponentProductIdsOptions = (
  options: Options<GetByContextComponentProductIdsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getByContextComponentProductIds({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getByContextComponentProductIdsQueryKey(options),
  })
}

export const getByContextChildProductsQueryKey = (
  options: Options<GetByContextChildProductsData>,
) => [createQueryKey("getByContextChildProducts", options)]

export const getByContextChildProductsOptions = (
  options: Options<GetByContextChildProductsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getByContextChildProducts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getByContextChildProductsQueryKey(options),
  })
}

export const getByContextProductsForHierarchyQueryKey = (
  options: Options<GetByContextProductsForHierarchyData>,
) => [createQueryKey("getByContextProductsForHierarchy", options)]

export const getByContextProductsForHierarchyOptions = (
  options: Options<GetByContextProductsForHierarchyData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getByContextProductsForHierarchy({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getByContextProductsForHierarchyQueryKey(options),
  })
}

export const getByContextProductsForNodeQueryKey = (
  options: Options<GetByContextProductsForNodeData>,
) => [createQueryKey("getByContextProductsForNode", options)]

export const getByContextProductsForNodeOptions = (
  options: Options<GetByContextProductsForNodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getByContextProductsForNode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getByContextProductsForNodeQueryKey(options),
  })
}

export const configureByContextProductQueryKey = (
  options: Options<ConfigureByContextProductData>,
) => [createQueryKey("configureByContextProduct", options)]

export const configureByContextProductOptions = (
  options: Options<ConfigureByContextProductData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await configureByContextProduct({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: configureByContextProductQueryKey(options),
  })
}

export const configureByContextProductMutation = (
  options?: Partial<Options<ConfigureByContextProductData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ConfigureByContextProductResponse,
    ConfigureByContextProductError,
    Options<ConfigureByContextProductData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await configureByContextProduct({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getCatalogsQueryKey = (options?: Options<GetCatalogsData>) => [
  createQueryKey("getCatalogs", options),
]

export const getCatalogsOptions = (options?: Options<GetCatalogsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCatalogs({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getCatalogsQueryKey(options),
  })
}

export const createCatalogQueryKey = (options: Options<CreateCatalogData>) => [
  createQueryKey("createCatalog", options),
]

export const createCatalogOptions = (options: Options<CreateCatalogData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createCatalog({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createCatalogQueryKey(options),
  })
}

export const createCatalogMutation = (
  options?: Partial<Options<CreateCatalogData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateCatalogResponse,
    CreateCatalogError,
    Options<CreateCatalogData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createCatalog({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteCatalogByIdMutation = (
  options?: Partial<Options<DeleteCatalogByIdData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteCatalogByIdResponse,
    DeleteCatalogByIdError,
    Options<DeleteCatalogByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteCatalogById({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getCatalogByIdQueryKey = (
  options: Options<GetCatalogByIdData>,
) => [createQueryKey("getCatalogById", options)]

export const getCatalogByIdOptions = (options: Options<GetCatalogByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCatalogById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getCatalogByIdQueryKey(options),
  })
}

export const updateCatalogMutation = (
  options?: Partial<Options<UpdateCatalogData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateCatalogResponse,
    UpdateCatalogError,
    Options<UpdateCatalogData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateCatalog({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteReleasesMutation = (
  options?: Partial<Options<DeleteReleasesData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteReleasesResponse,
    DeleteReleasesError,
    Options<DeleteReleasesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteReleases({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getReleasesQueryKey = (options: Options<GetReleasesData>) => [
  createQueryKey("getReleases", options),
]

export const getReleasesOptions = (options: Options<GetReleasesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getReleases({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getReleasesQueryKey(options),
  })
}

export const publishReleaseQueryKey = (
  options: Options<PublishReleaseData>,
) => [createQueryKey("publishRelease", options)]

export const publishReleaseOptions = (options: Options<PublishReleaseData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await publishRelease({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: publishReleaseQueryKey(options),
  })
}

export const publishReleaseMutation = (
  options?: Partial<Options<PublishReleaseData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PublishReleaseResponse,
    PublishReleaseError,
    Options<PublishReleaseData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await publishRelease({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteReleaseByIdMutation = (
  options?: Partial<Options<DeleteReleaseByIdData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteReleaseByIdResponse,
    DeleteReleaseByIdError,
    Options<DeleteReleaseByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteReleaseById({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getReleaseByIdQueryKey = (
  options: Options<GetReleaseByIdData>,
) => [createQueryKey("getReleaseById", options)]

export const getReleaseByIdOptions = (options: Options<GetReleaseByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getReleaseById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getReleaseByIdQueryKey(options),
  })
}

export const getRulesQueryKey = (options?: Options<GetRulesData>) => [
  createQueryKey("getRules", options),
]

export const getRulesOptions = (options?: Options<GetRulesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getRules({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getRulesQueryKey(options),
  })
}

export const createRuleQueryKey = (options: Options<CreateRuleData>) => [
  createQueryKey("createRule", options),
]

export const createRuleOptions = (options: Options<CreateRuleData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createRule({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createRuleQueryKey(options),
  })
}

export const createRuleMutation = (
  options?: Partial<Options<CreateRuleData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateRuleResponse,
    CreateRuleError,
    Options<CreateRuleData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createRule({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteRuleByIdMutation = (
  options?: Partial<Options<DeleteRuleByIdData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteRuleByIdResponse,
    DeleteRuleByIdError,
    Options<DeleteRuleByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteRuleById({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getRuleByIdQueryKey = (options: Options<GetRuleByIdData>) => [
  createQueryKey("getRuleById", options),
]

export const getRuleByIdOptions = (options: Options<GetRuleByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getRuleById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getRuleByIdQueryKey(options),
  })
}

export const updateRuleMutation = (
  options?: Partial<Options<UpdateRuleData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateRuleResponse,
    UpdateRuleError,
    Options<UpdateRuleData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateRule({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getAllHierarchiesQueryKey = (
  options: Options<GetAllHierarchiesData>,
) => [createQueryKey("getAllHierarchies", options)]

export const getAllHierarchiesOptions = (
  options: Options<GetAllHierarchiesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAllHierarchies({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getAllHierarchiesQueryKey(options),
  })
}

export const getHierarchyQueryKey = (options: Options<GetHierarchyData>) => [
  createQueryKey("getHierarchy", options),
]

export const getHierarchyOptions = (options: Options<GetHierarchyData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getHierarchy({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getHierarchyQueryKey(options),
  })
}

export const getHierarchyNodesQueryKey = (
  options: Options<GetHierarchyNodesData>,
) => [createQueryKey("getHierarchyNodes", options)]

export const getHierarchyNodesOptions = (
  options: Options<GetHierarchyNodesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getHierarchyNodes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getHierarchyNodesQueryKey(options),
  })
}

export const getHierarchyChildNodesQueryKey = (
  options: Options<GetHierarchyChildNodesData>,
) => [createQueryKey("getHierarchyChildNodes", options)]

export const getHierarchyChildNodesOptions = (
  options: Options<GetHierarchyChildNodesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getHierarchyChildNodes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getHierarchyChildNodesQueryKey(options),
  })
}

export const getAllNodesQueryKey = (options: Options<GetAllNodesData>) => [
  createQueryKey("getAllNodes", options),
]

export const getAllNodesOptions = (options: Options<GetAllNodesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAllNodes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getAllNodesQueryKey(options),
  })
}

export const getNodeQueryKey = (options: Options<GetNodeData>) => [
  createQueryKey("getNode", options),
]

export const getNodeOptions = (options: Options<GetNodeData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getNode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getNodeQueryKey(options),
  })
}

export const getChildNodesQueryKey = (options: Options<GetChildNodesData>) => [
  createQueryKey("getChildNodes", options),
]

export const getChildNodesOptions = (options: Options<GetChildNodesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getChildNodes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getChildNodesQueryKey(options),
  })
}

export const getAllProductsQueryKey = (
  options: Options<GetAllProductsData>,
) => [createQueryKey("getAllProducts", options)]

export const getAllProductsOptions = (options: Options<GetAllProductsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAllProducts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getAllProductsQueryKey(options),
  })
}

export const getProductQueryKey = (options: Options<GetProductData>) => [
  createQueryKey("getProduct", options),
]

export const getProductOptions = (options: Options<GetProductData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProduct({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getProductQueryKey(options),
  })
}

export const getAllRelatedProductsQueryKey = (
  options: Options<GetAllRelatedProductsData>,
) => [createQueryKey("getAllRelatedProducts", options)]

export const getAllRelatedProductsOptions = (
  options: Options<GetAllRelatedProductsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAllRelatedProducts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getAllRelatedProductsQueryKey(options),
  })
}

export const getComponentProductIdsQueryKey = (
  options: Options<GetComponentProductIdsData>,
) => [createQueryKey("getComponentProductIds", options)]

export const getComponentProductIdsOptions = (
  options: Options<GetComponentProductIdsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getComponentProductIds({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getComponentProductIdsQueryKey(options),
  })
}

export const getChildProductsQueryKey = (
  options: Options<GetChildProductsData>,
) => [createQueryKey("getChildProducts", options)]

export const getChildProductsOptions = (
  options: Options<GetChildProductsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getChildProducts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getChildProductsQueryKey(options),
  })
}

export const getProductsForHierarchyQueryKey = (
  options: Options<GetProductsForHierarchyData>,
) => [createQueryKey("getProductsForHierarchy", options)]

export const getProductsForHierarchyOptions = (
  options: Options<GetProductsForHierarchyData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProductsForHierarchy({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getProductsForHierarchyQueryKey(options),
  })
}

export const getProductsForNodeQueryKey = (
  options: Options<GetProductsForNodeData>,
) => [createQueryKey("getProductsForNode", options)]

export const getProductsForNodeOptions = (
  options: Options<GetProductsForNodeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProductsForNode({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getProductsForNodeQueryKey(options),
  })
}

export const getCartsQueryKey = (options?: Options<GetCartsData>) => [
  createQueryKey("getCarts", options),
]

export const getCartsOptions = (options?: Options<GetCartsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCarts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getCartsQueryKey(options),
  })
}

export const createACartQueryKey = (options?: Options<CreateACartData>) => [
  createQueryKey("createACart", options),
]

export const createACartOptions = (options?: Options<CreateACartData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createACart({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createACartQueryKey(options),
  })
}

export const createACartMutation = (
  options?: Partial<Options<CreateACartData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateACartResponse,
    CreateACartError,
    Options<CreateACartData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createACart({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteACartMutation = (
  options?: Partial<Options<DeleteACartData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteACartResponse,
    DeleteACartError,
    Options<DeleteACartData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteACart({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getACartQueryKey = (options: Options<GetACartData>) => [
  createQueryKey("getACart", options),
]

export const getACartOptions = (options: Options<GetACartData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getACart({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getACartQueryKey(options),
  })
}

export const updateACartMutation = (
  options?: Partial<Options<UpdateACartData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateACartResponse,
    UpdateACartError,
    Options<UpdateACartData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateACart({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteAllCartItemsMutation = (
  options?: Partial<Options<DeleteAllCartItemsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteAllCartItemsResponse,
    DeleteAllCartItemsError,
    Options<DeleteAllCartItemsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteAllCartItems({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getCartItemsQueryKey = (options: Options<GetCartItemsData>) => [
  createQueryKey("getCartItems", options),
]

export const getCartItemsOptions = (options: Options<GetCartItemsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCartItems({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getCartItemsQueryKey(options),
  })
}

export const manageCartsQueryKey = (options: Options<ManageCartsData>) => [
  createQueryKey("manageCarts", options),
]

export const manageCartsOptions = (options: Options<ManageCartsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await manageCarts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: manageCartsQueryKey(options),
  })
}

export const manageCartsMutation = (
  options?: Partial<Options<ManageCartsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ManageCartsResponse,
    ManageCartsError,
    Options<ManageCartsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await manageCarts({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const bulkUpdateItemsInCartMutation = (
  options?: Partial<Options<BulkUpdateItemsInCartData>>,
) => {
  const mutationOptions: UseMutationOptions<
    unknown,
    BulkUpdateItemsInCartError,
    Options<BulkUpdateItemsInCartData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await bulkUpdateItemsInCart({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteACartItemMutation = (
  options?: Partial<Options<DeleteACartItemData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteACartItemResponse,
    DefaultError,
    Options<DeleteACartItemData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteACartItem({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const updateACartItemMutation = (
  options?: Partial<Options<UpdateACartItemData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateACartItemResponse,
    UpdateACartItemError,
    Options<UpdateACartItemData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateACartItem({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteAccountCartAssociationMutation = (
  options?: Partial<Options<DeleteAccountCartAssociationData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteAccountCartAssociationResponse,
    DeleteAccountCartAssociationError,
    Options<DeleteAccountCartAssociationData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteAccountCartAssociation({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const createAccountCartAssociationQueryKey = (
  options: Options<CreateAccountCartAssociationData>,
) => [createQueryKey("createAccountCartAssociation", options)]

export const createAccountCartAssociationOptions = (
  options: Options<CreateAccountCartAssociationData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createAccountCartAssociation({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createAccountCartAssociationQueryKey(options),
  })
}

export const createAccountCartAssociationMutation = (
  options?: Partial<Options<CreateAccountCartAssociationData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateAccountCartAssociationResponse,
    CreateAccountCartAssociationError,
    Options<CreateAccountCartAssociationData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createAccountCartAssociation({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteCustomerCartAssociationMutation = (
  options?: Partial<Options<DeleteCustomerCartAssociationData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteCustomerCartAssociationResponse,
    DeleteCustomerCartAssociationError,
    Options<DeleteCustomerCartAssociationData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteCustomerCartAssociation({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const createCustomerCartAssociationQueryKey = (
  options: Options<CreateCustomerCartAssociationData>,
) => [createQueryKey("createCustomerCartAssociation", options)]

export const createCustomerCartAssociationOptions = (
  options: Options<CreateCustomerCartAssociationData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createCustomerCartAssociation({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createCustomerCartAssociationQueryKey(options),
  })
}

export const createCustomerCartAssociationMutation = (
  options?: Partial<Options<CreateCustomerCartAssociationData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateCustomerCartAssociationResponse,
    CreateCustomerCartAssociationError,
    Options<CreateCustomerCartAssociationData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createCustomerCartAssociation({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteAPromotionViaPromotionCodeMutation = (
  options?: Partial<Options<DeleteAPromotionViaPromotionCodeData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteAPromotionViaPromotionCodeResponse,
    DefaultError,
    Options<DeleteAPromotionViaPromotionCodeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteAPromotionViaPromotionCode({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const addTaxItemToCartQueryKey = (
  options: Options<AddTaxItemToCartData>,
) => [createQueryKey("addTaxItemToCart", options)]

export const addTaxItemToCartOptions = (
  options: Options<AddTaxItemToCartData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await addTaxItemToCart({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: addTaxItemToCartQueryKey(options),
  })
}

export const addTaxItemToCartMutation = (
  options?: Partial<Options<AddTaxItemToCartData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AddTaxItemToCartResponse,
    AddTaxItemToCartError,
    Options<AddTaxItemToCartData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await addTaxItemToCart({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const bulkDeleteTaxItemsFromCartMutation = (
  options?: Partial<Options<BulkDeleteTaxItemsFromCartData>>,
) => {
  const mutationOptions: UseMutationOptions<
    BulkDeleteTaxItemsFromCartResponse,
    DefaultError,
    Options<BulkDeleteTaxItemsFromCartData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await bulkDeleteTaxItemsFromCart({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const bulkAddTaxItemsToCartQueryKey = (
  options: Options<BulkAddTaxItemsToCartData>,
) => [createQueryKey("bulkAddTaxItemsToCart", options)]

export const bulkAddTaxItemsToCartOptions = (
  options: Options<BulkAddTaxItemsToCartData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await bulkAddTaxItemsToCart({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: bulkAddTaxItemsToCartQueryKey(options),
  })
}

export const bulkAddTaxItemsToCartMutation = (
  options?: Partial<Options<BulkAddTaxItemsToCartData>>,
) => {
  const mutationOptions: UseMutationOptions<
    BulkAddTaxItemsToCartResponse,
    BulkAddTaxItemsToCartError,
    Options<BulkAddTaxItemsToCartData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await bulkAddTaxItemsToCart({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteATaxItemMutation = (
  options?: Partial<Options<DeleteATaxItemData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteATaxItemResponse,
    DefaultError,
    Options<DeleteATaxItemData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteATaxItem({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const updateATaxItemMutation = (
  options?: Partial<Options<UpdateATaxItemData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateATaxItemResponse,
    DefaultError,
    Options<UpdateATaxItemData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateATaxItem({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const bulkDeleteCustomDiscountsFromCartMutation = (
  options?: Partial<Options<BulkDeleteCustomDiscountsFromCartData>>,
) => {
  const mutationOptions: UseMutationOptions<
    BulkDeleteCustomDiscountsFromCartResponse,
    DefaultError,
    Options<BulkDeleteCustomDiscountsFromCartData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await bulkDeleteCustomDiscountsFromCart({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const bulkAddCustomDiscountsToCartQueryKey = (
  options: Options<BulkAddCustomDiscountsToCartData>,
) => [createQueryKey("bulkAddCustomDiscountsToCart", options)]

export const bulkAddCustomDiscountsToCartOptions = (
  options: Options<BulkAddCustomDiscountsToCartData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await bulkAddCustomDiscountsToCart({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: bulkAddCustomDiscountsToCartQueryKey(options),
  })
}

export const bulkAddCustomDiscountsToCartMutation = (
  options?: Partial<Options<BulkAddCustomDiscountsToCartData>>,
) => {
  const mutationOptions: UseMutationOptions<
    BulkAddCustomDiscountsToCartResponse,
    BulkAddCustomDiscountsToCartError,
    Options<BulkAddCustomDiscountsToCartData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await bulkAddCustomDiscountsToCart({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteCustomDiscountFromCartMutation = (
  options?: Partial<Options<DeleteCustomDiscountFromCartData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteCustomDiscountFromCartResponse,
    DefaultError,
    Options<DeleteCustomDiscountFromCartData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteCustomDiscountFromCart({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const updateCustomDiscountForCartMutation = (
  options?: Partial<Options<UpdateCustomDiscountForCartData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateCustomDiscountForCartResponse,
    DefaultError,
    Options<UpdateCustomDiscountForCartData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateCustomDiscountForCart({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const addCustomDiscountToCartItemQueryKey = (
  options: Options<AddCustomDiscountToCartItemData>,
) => [createQueryKey("addCustomDiscountToCartItem", options)]

export const addCustomDiscountToCartItemOptions = (
  options: Options<AddCustomDiscountToCartItemData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await addCustomDiscountToCartItem({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: addCustomDiscountToCartItemQueryKey(options),
  })
}

export const addCustomDiscountToCartItemMutation = (
  options?: Partial<Options<AddCustomDiscountToCartItemData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AddCustomDiscountToCartItemResponse,
    AddCustomDiscountToCartItemError,
    Options<AddCustomDiscountToCartItemData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await addCustomDiscountToCartItem({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteCustomDiscountFromCartItemMutation = (
  options?: Partial<Options<DeleteCustomDiscountFromCartItemData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteCustomDiscountFromCartItemResponse,
    DefaultError,
    Options<DeleteCustomDiscountFromCartItemData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteCustomDiscountFromCartItem({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const updateCustomDiscountForCartItemMutation = (
  options?: Partial<Options<UpdateCustomDiscountForCartItemData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateCustomDiscountForCartItemResponse,
    DefaultError,
    Options<UpdateCustomDiscountForCartItemData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateCustomDiscountForCartItem({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getShippingGroupsQueryKey = (
  options: Options<GetShippingGroupsData>,
) => [createQueryKey("getShippingGroups", options)]

export const getShippingGroupsOptions = (
  options: Options<GetShippingGroupsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getShippingGroups({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getShippingGroupsQueryKey(options),
  })
}

export const createShippingGroupQueryKey = (
  options: Options<CreateShippingGroupData>,
) => [createQueryKey("createShippingGroup", options)]

export const createShippingGroupOptions = (
  options: Options<CreateShippingGroupData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createShippingGroup({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createShippingGroupQueryKey(options),
  })
}

export const createShippingGroupMutation = (
  options?: Partial<Options<CreateShippingGroupData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateShippingGroupResponse,
    CreateShippingGroupError,
    Options<CreateShippingGroupData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createShippingGroup({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteCartShippingGroupMutation = (
  options?: Partial<Options<DeleteCartShippingGroupData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteCartShippingGroupResponse,
    DeleteCartShippingGroupError,
    Options<DeleteCartShippingGroupData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteCartShippingGroup({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getShippingGroupByIdQueryKey = (
  options: Options<GetShippingGroupByIdData>,
) => [createQueryKey("getShippingGroupById", options)]

export const getShippingGroupByIdOptions = (
  options: Options<GetShippingGroupByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getShippingGroupById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getShippingGroupByIdQueryKey(options),
  })
}

export const updateShippingGroupMutation = (
  options?: Partial<Options<UpdateShippingGroupData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateShippingGroupResponse,
    UpdateShippingGroupError,
    Options<UpdateShippingGroupData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateShippingGroup({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const createCartPaymentIntentQueryKey = (
  options: Options<CreateCartPaymentIntentData>,
) => [createQueryKey("createCartPaymentIntent", options)]

export const createCartPaymentIntentOptions = (
  options: Options<CreateCartPaymentIntentData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createCartPaymentIntent({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createCartPaymentIntentQueryKey(options),
  })
}

export const createCartPaymentIntentMutation = (
  options?: Partial<Options<CreateCartPaymentIntentData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateCartPaymentIntentResponse,
    DefaultError,
    Options<CreateCartPaymentIntentData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createCartPaymentIntent({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const updateCartPaymentIntentMutation = (
  options?: Partial<Options<UpdateCartPaymentIntentData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateCartPaymentIntentResponse,
    DefaultError,
    Options<UpdateCartPaymentIntentData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateCartPaymentIntent({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const checkoutApiQueryKey = (options: Options<CheckoutApiData>) => [
  createQueryKey("checkoutApi", options),
]

export const checkoutApiOptions = (options: Options<CheckoutApiData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await checkoutApi({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: checkoutApiQueryKey(options),
  })
}

export const checkoutApiMutation = (
  options?: Partial<Options<CheckoutApiData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CheckoutApiResponse,
    CheckoutApiError,
    Options<CheckoutApiData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await checkoutApi({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getCustomerOrdersQueryKey = (
  options?: Options<GetCustomerOrdersData>,
) => [createQueryKey("getCustomerOrders", options)]

export const getCustomerOrdersOptions = (
  options?: Options<GetCustomerOrdersData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCustomerOrders({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getCustomerOrdersQueryKey(options),
  })
}

export const getAnOrderQueryKey = (options: Options<GetAnOrderData>) => [
  createQueryKey("getAnOrder", options),
]

export const getAnOrderOptions = (options: Options<GetAnOrderData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAnOrder({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getAnOrderQueryKey(options),
  })
}

export const updateAnOrderMutation = (
  options?: Partial<Options<UpdateAnOrderData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdateAnOrderResponse,
    UpdateAnOrderError,
    Options<UpdateAnOrderData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateAnOrder({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getOrderItemsQueryKey = (options: Options<GetOrderItemsData>) => [
  createQueryKey("getOrderItems", options),
]

export const getOrderItemsOptions = (options: Options<GetOrderItemsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getOrderItems({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getOrderItemsQueryKey(options),
  })
}

export const anonymizeOrdersQueryKey = (
  options?: Options<AnonymizeOrdersData>,
) => [createQueryKey("anonymizeOrders", options)]

export const anonymizeOrdersOptions = (
  options?: Options<AnonymizeOrdersData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await anonymizeOrders({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: anonymizeOrdersQueryKey(options),
  })
}

export const anonymizeOrdersMutation = (
  options?: Partial<Options<AnonymizeOrdersData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AnonymizeOrdersResponse,
    AnonymizeOrdersError,
    Options<AnonymizeOrdersData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await anonymizeOrders({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const confirmOrderQueryKey = (options: Options<ConfirmOrderData>) => [
  createQueryKey("confirmOrder", options),
]

export const confirmOrderOptions = (options: Options<ConfirmOrderData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await confirmOrder({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: confirmOrderQueryKey(options),
  })
}

export const confirmOrderMutation = (
  options?: Partial<Options<ConfirmOrderData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ConfirmOrderResponse,
    ConfirmOrderError,
    Options<ConfirmOrderData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await confirmOrder({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const paymentSetupQueryKey = (options: Options<PaymentSetupData>) => [
  createQueryKey("paymentSetup", options),
]

export const paymentSetupOptions = (options: Options<PaymentSetupData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await paymentSetup({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: paymentSetupQueryKey(options),
  })
}

export const paymentSetupMutation = (
  options?: Partial<Options<PaymentSetupData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PaymentSetupResponse,
    PaymentSetupError,
    Options<PaymentSetupData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await paymentSetup({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const confirmPaymentQueryKey = (
  options: Options<ConfirmPaymentData>,
) => [createQueryKey("confirmPayment", options)]

export const confirmPaymentOptions = (options: Options<ConfirmPaymentData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await confirmPayment({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: confirmPaymentQueryKey(options),
  })
}

export const confirmPaymentMutation = (
  options?: Partial<Options<ConfirmPaymentData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ConfirmPaymentResponse,
    ConfirmPaymentError,
    Options<ConfirmPaymentData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await confirmPayment({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const captureATransactionQueryKey = (
  options: Options<CaptureATransactionData>,
) => [createQueryKey("captureATransaction", options)]

export const captureATransactionOptions = (
  options: Options<CaptureATransactionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await captureATransaction({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: captureATransactionQueryKey(options),
  })
}

export const captureATransactionMutation = (
  options?: Partial<Options<CaptureATransactionData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CaptureATransactionResponse,
    CaptureATransactionError,
    Options<CaptureATransactionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await captureATransaction({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const refundATransactionQueryKey = (
  options: Options<RefundATransactionData>,
) => [createQueryKey("refundATransaction", options)]

export const refundATransactionOptions = (
  options: Options<RefundATransactionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await refundATransaction({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: refundATransactionQueryKey(options),
  })
}

export const refundATransactionMutation = (
  options?: Partial<Options<RefundATransactionData>>,
) => {
  const mutationOptions: UseMutationOptions<
    RefundATransactionResponse,
    RefundATransactionError,
    Options<RefundATransactionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await refundATransaction({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getOrderTransactionsQueryKey = (
  options: Options<GetOrderTransactionsData>,
) => [createQueryKey("getOrderTransactions", options)]

export const getOrderTransactionsOptions = (
  options: Options<GetOrderTransactionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getOrderTransactions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getOrderTransactionsQueryKey(options),
  })
}

export const getATransactionQueryKey = (
  options: Options<GetATransactionData>,
) => [createQueryKey("getATransaction", options)]

export const getATransactionOptions = (
  options: Options<GetATransactionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getATransaction({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getATransactionQueryKey(options),
  })
}

export const cancelATransactionQueryKey = (
  options: Options<CancelATransactionData>,
) => [createQueryKey("cancelATransaction", options)]

export const cancelATransactionOptions = (
  options: Options<CancelATransactionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await cancelATransaction({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: cancelATransactionQueryKey(options),
  })
}

export const cancelATransactionMutation = (
  options?: Partial<Options<CancelATransactionData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CancelATransactionResponse,
    CancelATransactionError,
    Options<CancelATransactionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await cancelATransaction({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getOrderShippingGroupsQueryKey = (
  options: Options<GetOrderShippingGroupsData>,
) => [createQueryKey("getOrderShippingGroups", options)]

export const getOrderShippingGroupsOptions = (
  options: Options<GetOrderShippingGroupsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getOrderShippingGroups({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getOrderShippingGroupsQueryKey(options),
  })
}

export const createOrderShippingGroupQueryKey = (
  options: Options<CreateOrderShippingGroupData>,
) => [createQueryKey("createOrderShippingGroup", options)]

export const createOrderShippingGroupOptions = (
  options: Options<CreateOrderShippingGroupData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createOrderShippingGroup({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createOrderShippingGroupQueryKey(options),
  })
}

export const createOrderShippingGroupMutation = (
  options?: Partial<Options<CreateOrderShippingGroupData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateOrderShippingGroupResponse,
    CreateOrderShippingGroupError,
    Options<CreateOrderShippingGroupData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createOrderShippingGroup({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getShippingGroupsByIdQueryKey = (
  options: Options<GetShippingGroupsByIdData>,
) => [createQueryKey("getShippingGroupsById", options)]

export const getShippingGroupsByIdOptions = (
  options: Options<GetShippingGroupsByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getShippingGroupsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getShippingGroupsByIdQueryKey(options),
  })
}

export const putShippingGroupByIdMutation = (
  options?: Partial<Options<PutShippingGroupByIdData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PutShippingGroupByIdResponse,
    PutShippingGroupByIdError,
    Options<PutShippingGroupByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putShippingGroupById({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const listOfferingsQueryKey = (options?: Options<ListOfferingsData>) => [
  createQueryKey("listOfferings", options),
]

export const listOfferingsOptions = (options?: Options<ListOfferingsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listOfferings({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listOfferingsQueryKey(options),
  })
}

export const getOfferingQueryKey = (options: Options<GetOfferingData>) => [
  createQueryKey("getOffering", options),
]

export const getOfferingOptions = (options: Options<GetOfferingData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getOffering({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getOfferingQueryKey(options),
  })
}

export const listOfferingPricingOptionsQueryKey = (
  options: Options<ListOfferingPricingOptionsData>,
) => [createQueryKey("listOfferingPricingOptions", options)]

export const listOfferingPricingOptionsOptions = (
  options: Options<ListOfferingPricingOptionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listOfferingPricingOptions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listOfferingPricingOptionsQueryKey(options),
  })
}

export const listOfferingFeaturesQueryKey = (
  options: Options<ListOfferingFeaturesData>,
) => [createQueryKey("listOfferingFeatures", options)]

export const listOfferingFeaturesOptions = (
  options: Options<ListOfferingFeaturesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listOfferingFeatures({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listOfferingFeaturesQueryKey(options),
  })
}

export const listOfferingPlansQueryKey = (
  options: Options<ListOfferingPlansData>,
) => [createQueryKey("listOfferingPlans", options)]

export const listOfferingPlansOptions = (
  options: Options<ListOfferingPlansData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listOfferingPlans({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listOfferingPlansQueryKey(options),
  })
}

export const listOfferingPlanPricingOptionsQueryKey = (
  options: Options<ListOfferingPlanPricingOptionsData>,
) => [createQueryKey("listOfferingPlanPricingOptions", options)]

export const listOfferingPlanPricingOptionsOptions = (
  options: Options<ListOfferingPlanPricingOptionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listOfferingPlanPricingOptions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listOfferingPlanPricingOptionsQueryKey(options),
  })
}

export const listSubscriptionsQueryKey = (
  options?: Options<ListSubscriptionsData>,
) => [createQueryKey("listSubscriptions", options)]

export const listSubscriptionsOptions = (
  options?: Options<ListSubscriptionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listSubscriptions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listSubscriptionsQueryKey(options),
  })
}

export const getSubscriptionQueryKey = (
  options: Options<GetSubscriptionData>,
) => [createQueryKey("getSubscription", options)]

export const getSubscriptionOptions = (
  options: Options<GetSubscriptionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getSubscription({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getSubscriptionQueryKey(options),
  })
}

export const listSubscriptionPlansQueryKey = (
  options: Options<ListSubscriptionPlansData>,
) => [createQueryKey("listSubscriptionPlans", options)]

export const listSubscriptionPlansOptions = (
  options: Options<ListSubscriptionPlansData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listSubscriptionPlans({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listSubscriptionPlansQueryKey(options),
  })
}

export const listSubscriptionPricingOptionsQueryKey = (
  options: Options<ListSubscriptionPricingOptionsData>,
) => [createQueryKey("listSubscriptionPricingOptions", options)]

export const listSubscriptionPricingOptionsOptions = (
  options: Options<ListSubscriptionPricingOptionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listSubscriptionPricingOptions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listSubscriptionPricingOptionsQueryKey(options),
  })
}

export const listSubscriptionStatesQueryKey = (
  options: Options<ListSubscriptionStatesData>,
) => [createQueryKey("listSubscriptionStates", options)]

export const listSubscriptionStatesOptions = (
  options: Options<ListSubscriptionStatesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listSubscriptionStates({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listSubscriptionStatesQueryKey(options),
  })
}

export const getSubscriptionStateQueryKey = (
  options: Options<GetSubscriptionStateData>,
) => [createQueryKey("getSubscriptionState", options)]

export const getSubscriptionStateOptions = (
  options: Options<GetSubscriptionStateData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getSubscriptionState({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getSubscriptionStateQueryKey(options),
  })
}

export const listSubscriptionInvoicesQueryKey = (
  options: Options<ListSubscriptionInvoicesData>,
) => [createQueryKey("listSubscriptionInvoices", options)]

export const listSubscriptionInvoicesOptions = (
  options: Options<ListSubscriptionInvoicesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listSubscriptionInvoices({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listSubscriptionInvoicesQueryKey(options),
  })
}

export const listSubscriptionInvoicePaymentsQueryKey = (
  options: Options<ListSubscriptionInvoicePaymentsData>,
) => [createQueryKey("listSubscriptionInvoicePayments", options)]

export const listSubscriptionInvoicePaymentsOptions = (
  options: Options<ListSubscriptionInvoicePaymentsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listSubscriptionInvoicePayments({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listSubscriptionInvoicePaymentsQueryKey(options),
  })
}

export const getSubscriptionInvoicePaymentQueryKey = (
  options: Options<GetSubscriptionInvoicePaymentData>,
) => [createQueryKey("getSubscriptionInvoicePayment", options)]

export const getSubscriptionInvoicePaymentOptions = (
  options: Options<GetSubscriptionInvoicePaymentData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getSubscriptionInvoicePayment({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getSubscriptionInvoicePaymentQueryKey(options),
  })
}

export const getSubscriptionInvoiceQueryKey = (
  options: Options<GetSubscriptionInvoiceData>,
) => [createQueryKey("getSubscriptionInvoice", options)]

export const getSubscriptionInvoiceOptions = (
  options: Options<GetSubscriptionInvoiceData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getSubscriptionInvoice({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getSubscriptionInvoiceQueryKey(options),
  })
}

export const listInvoicesQueryKey = (options?: Options<ListInvoicesData>) => [
  createQueryKey("listInvoices", options),
]

export const listInvoicesOptions = (options?: Options<ListInvoicesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listInvoices({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listInvoicesQueryKey(options),
  })
}

export const getInvoiceQueryKey = (options: Options<GetInvoiceData>) => [
  createQueryKey("getInvoice", options),
]

export const getInvoiceOptions = (options: Options<GetInvoiceData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getInvoice({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getInvoiceQueryKey(options),
  })
}

export const getFeatureQueryKey = (options: Options<GetFeatureData>) => [
  createQueryKey("getFeature", options),
]

export const getFeatureOptions = (options: Options<GetFeatureData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getFeature({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getFeatureQueryKey(options),
  })
}

export const getStockQueryKey = (options: Options<GetStockData>) => [
  createQueryKey("getStock", options),
]

export const getStockOptions = (options: Options<GetStockData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getStock({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getStockQueryKey(options),
  })
}

export const listLocationsQueryKey = (options?: Options<ListLocationsData>) => [
  createQueryKey("listLocations", options),
]

export const listLocationsOptions = (options?: Options<ListLocationsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listLocations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listLocationsQueryKey(options),
  })
}

export const createAnAccessTokenQueryKey = (
  options?: Options<CreateAnAccessTokenData>,
) => [createQueryKey("createAnAccessToken", options)]

export const createAnAccessTokenOptions = (
  options?: Options<CreateAnAccessTokenData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createAnAccessToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createAnAccessTokenQueryKey(options),
  })
}

export const createAnAccessTokenMutation = (
  options?: Partial<Options<CreateAnAccessTokenData>>,
) => {
  const mutationOptions: UseMutationOptions<
    CreateAnAccessTokenResponse,
    CreateAnAccessTokenError,
    Options<CreateAnAccessTokenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createAnAccessToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getV2AccountAddressesQueryKey = (
  options: Options<GetV2AccountAddressesData>,
) => [createQueryKey("getV2AccountAddresses", options)]

export const getV2AccountAddressesOptions = (
  options: Options<GetV2AccountAddressesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getV2AccountAddresses({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getV2AccountAddressesQueryKey(options),
  })
}

export const postV2AccountAddressQueryKey = (
  options: Options<PostV2AccountAddressData>,
) => [createQueryKey("postV2AccountAddress", options)]

export const postV2AccountAddressOptions = (
  options: Options<PostV2AccountAddressData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postV2AccountAddress({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: postV2AccountAddressQueryKey(options),
  })
}

export const postV2AccountAddressMutation = (
  options?: Partial<Options<PostV2AccountAddressData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostV2AccountAddressResponse,
    PostV2AccountAddressError,
    Options<PostV2AccountAddressData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postV2AccountAddress({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteV2AccountAddressMutation = (
  options?: Partial<Options<DeleteV2AccountAddressData>>,
) => {
  const mutationOptions: UseMutationOptions<
    DeleteV2AccountAddressResponse,
    DeleteV2AccountAddressError,
    Options<DeleteV2AccountAddressData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteV2AccountAddress({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getV2AccountAddressQueryKey = (
  options: Options<GetV2AccountAddressData>,
) => [createQueryKey("getV2AccountAddress", options)]

export const getV2AccountAddressOptions = (
  options: Options<GetV2AccountAddressData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getV2AccountAddress({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getV2AccountAddressQueryKey(options),
  })
}

export const putV2AccountAddressMutation = (
  options?: Partial<Options<PutV2AccountAddressData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PutV2AccountAddressResponse,
    PutV2AccountAddressError,
    Options<PutV2AccountAddressData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putV2AccountAddress({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getV2AccountsQueryKey = (options?: Options<GetV2AccountsData>) => [
  createQueryKey("getV2Accounts", options),
]

export const getV2AccountsOptions = (options?: Options<GetV2AccountsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getV2Accounts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getV2AccountsQueryKey(options),
  })
}

export const postV2AccountsQueryKey = (
  options?: Options<PostV2AccountsData>,
) => [createQueryKey("postV2Accounts", options)]

export const postV2AccountsOptions = (
  options?: Options<PostV2AccountsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postV2Accounts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: postV2AccountsQueryKey(options),
  })
}

export const postV2AccountsMutation = (
  options?: Partial<Options<PostV2AccountsData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostV2AccountsResponse,
    PostV2AccountsError,
    Options<PostV2AccountsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postV2Accounts({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getV2AccountsAccountIdQueryKey = (
  options: Options<GetV2AccountsAccountIdData>,
) => [createQueryKey("getV2AccountsAccountId", options)]

export const getV2AccountsAccountIdOptions = (
  options: Options<GetV2AccountsAccountIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getV2AccountsAccountId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getV2AccountsAccountIdQueryKey(options),
  })
}

export const putV2AccountsAccountIdMutation = (
  options?: Partial<Options<PutV2AccountsAccountIdData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PutV2AccountsAccountIdResponse,
    PutV2AccountsAccountIdError,
    Options<PutV2AccountsAccountIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putV2AccountsAccountId({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getV2AccountMembersQueryKey = (
  options?: Options<GetV2AccountMembersData>,
) => [createQueryKey("getV2AccountMembers", options)]

export const getV2AccountMembersOptions = (
  options?: Options<GetV2AccountMembersData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getV2AccountMembers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getV2AccountMembersQueryKey(options),
  })
}

export const getV2AccountMembersAccountMemberIdQueryKey = (
  options: Options<GetV2AccountMembersAccountMemberIdData>,
) => [createQueryKey("getV2AccountMembersAccountMemberId", options)]

export const getV2AccountMembersAccountMemberIdOptions = (
  options: Options<GetV2AccountMembersAccountMemberIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getV2AccountMembersAccountMemberId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getV2AccountMembersAccountMemberIdQueryKey(options),
  })
}

export const getV2AccountsAccountIdAccountMembershipsQueryKey = (
  options: Options<GetV2AccountsAccountIdAccountMembershipsData>,
) => [createQueryKey("getV2AccountsAccountIdAccountMemberships", options)]

export const getV2AccountsAccountIdAccountMembershipsOptions = (
  options: Options<GetV2AccountsAccountIdAccountMembershipsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getV2AccountsAccountIdAccountMemberships({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getV2AccountsAccountIdAccountMembershipsQueryKey(options),
  })
}

export const postV2AccountMembersTokensQueryKey = (
  options?: Options<PostV2AccountMembersTokensData>,
) => [createQueryKey("postV2AccountMembersTokens", options)]

export const postV2AccountMembersTokensOptions = (
  options?: Options<PostV2AccountMembersTokensData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postV2AccountMembersTokens({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: postV2AccountMembersTokensQueryKey(options),
  })
}

export const postV2AccountMembersTokensMutation = (
  options?: Partial<Options<PostV2AccountMembersTokensData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostV2AccountMembersTokensResponse,
    PostV2AccountMembersTokensError,
    Options<PostV2AccountMembersTokensData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postV2AccountMembersTokens({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const createOneTimePasswordTokenRequestQueryKey = (
  options: Options<CreateOneTimePasswordTokenRequestData>,
) => [createQueryKey("createOneTimePasswordTokenRequest", options)]

export const createOneTimePasswordTokenRequestOptions = (
  options: Options<CreateOneTimePasswordTokenRequestData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createOneTimePasswordTokenRequest({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createOneTimePasswordTokenRequestQueryKey(options),
  })
}

export const createOneTimePasswordTokenRequestMutation = (
  options?: Partial<Options<CreateOneTimePasswordTokenRequestData>>,
) => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<CreateOneTimePasswordTokenRequestData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createOneTimePasswordTokenRequest({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const updatePasswordProfileInfoMutation = (
  options?: Partial<Options<UpdatePasswordProfileInfoData>>,
) => {
  const mutationOptions: UseMutationOptions<
    UpdatePasswordProfileInfoResponse,
    DefaultError,
    Options<UpdatePasswordProfileInfoData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updatePasswordProfileInfo({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getAllCurrenciesQueryKey = (
  options?: Options<GetAllCurrenciesData>,
) => [createQueryKey("getAllCurrencies", options)]

export const getAllCurrenciesOptions = (
  options?: Options<GetAllCurrenciesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAllCurrencies({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getAllCurrenciesQueryKey(options),
  })
}

export const getACurrencyQueryKey = (options: Options<GetACurrencyData>) => [
  createQueryKey("getACurrency", options),
]

export const getACurrencyOptions = (options: Options<GetACurrencyData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getACurrency({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getACurrencyQueryKey(options),
  })
}

export const getAllFilesQueryKey = (options?: Options<GetAllFilesData>) => [
  createQueryKey("getAllFiles", options),
]

export const getAllFilesOptions = (options?: Options<GetAllFilesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAllFiles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getAllFilesQueryKey(options),
  })
}

export const getAFileQueryKey = (options: Options<GetAFileData>) => [
  createQueryKey("getAFile", options),
]

export const getAFileOptions = (options: Options<GetAFileData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAFile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getAFileQueryKey(options),
  })
}
