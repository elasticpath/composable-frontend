// This file is auto-generated by @hey-api/openapi-ts

import { client, type Options } from "@hey-api/client-fetch"
import {
  type CreateCatalogData,
  type CreateCatalogError,
  type CreateCatalogResponse,
  type GetCatalogsError,
  type GetCatalogsResponse,
  type GetCatalogByIdData,
  type GetCatalogByIdError,
  type GetCatalogByIdResponse,
  type UpdateCatalogData,
  type UpdateCatalogError,
  type UpdateCatalogResponse,
  type DeleteCatalogByIdData,
  type DeleteCatalogByIdError,
  type DeleteCatalogByIdResponse,
  type PublishReleaseData,
  type PublishReleaseError,
  type PublishReleaseResponse,
  type GetReleasesData,
  type GetReleasesError,
  type GetReleasesResponse,
  type DeleteReleasesData,
  type DeleteReleasesError,
  type DeleteReleasesResponse,
  type GetReleaseByIdData,
  type GetReleaseByIdError,
  type GetReleaseByIdResponse,
  type DeleteReleaseByIdData,
  type DeleteReleaseByIdError,
  type DeleteReleaseByIdResponse,
  type CreateRuleData,
  type CreateRuleError,
  type CreateRuleResponse,
  type GetRulesData,
  type GetRulesError,
  type GetRulesResponse,
  type GetRuleByIdData,
  type GetRuleByIdError,
  type GetRuleByIdResponse,
  type UpdateRuleData,
  type UpdateRuleError,
  type UpdateRuleResponse,
  type DeleteRuleByIdData,
  type DeleteRuleByIdError,
  type DeleteRuleByIdResponse,
  type GetAllHierarchiesData,
  type GetAllHierarchiesError,
  type GetAllHierarchiesResponse,
  type GetHierarchyData,
  type GetHierarchyError,
  type GetHierarchyResponse,
  type GetHierarchyNodesData,
  type GetHierarchyNodesError,
  type GetHierarchyNodesResponse,
  type GetHierarchyChildNodesData,
  type GetHierarchyChildNodesError,
  type GetHierarchyChildNodesResponse,
  type GetAllNodesData,
  type GetAllNodesError,
  type GetAllNodesResponse,
  type GetNodeData,
  type GetNodeError,
  type GetNodeResponse,
  type GetChildNodesData,
  type GetChildNodesError,
  type GetChildNodesResponse,
  type GetAllProductsData,
  type GetAllProductsError,
  type GetAllProductsResponse,
  type GetProductData,
  type GetProductError,
  type GetProductResponse,
  type GetComponentProductIdsData,
  type GetComponentProductIdsError,
  type GetComponentProductIdsResponse,
  type GetChildProductsData,
  type GetChildProductsError,
  type GetChildProductsResponse,
  type GetProductsForHierarchyData,
  type GetProductsForHierarchyError,
  type GetProductsForHierarchyResponse,
  type GetProductsForNodeData,
  type GetProductsForNodeError,
  type GetProductsForNodeResponse,
  type GetByContextReleaseData,
  type GetByContextReleaseError,
  type GetByContextReleaseResponse,
  type GetByContextAllHierarchiesData,
  type GetByContextAllHierarchiesError,
  type GetByContextAllHierarchiesResponse,
  type GetByContextHierarchyData,
  type GetByContextHierarchyError,
  type GetByContextHierarchyResponse,
  type GetByContextHierarchyNodesData,
  type GetByContextHierarchyNodesError,
  type GetByContextHierarchyNodesResponse,
  type GetByContextHierarchyChildNodesData,
  type GetByContextHierarchyChildNodesError,
  type GetByContextHierarchyChildNodesResponse,
  type GetByContextAllNodesData,
  type GetByContextAllNodesError,
  type GetByContextAllNodesResponse,
  type GetByContextNodeData,
  type GetByContextNodeError,
  type GetByContextNodeResponse,
  type GetByContextChildNodesData,
  type GetByContextChildNodesError,
  type GetByContextChildNodesResponse,
  type GetByContextAllProductsData,
  type GetByContextAllProductsError,
  type GetByContextAllProductsResponse,
  type GetByContextProductData,
  type GetByContextProductError,
  type GetByContextProductResponse,
  type GetByContextComponentProductIdsData,
  type GetByContextComponentProductIdsError,
  type GetByContextComponentProductIdsResponse,
  type GetByContextChildProductsData,
  type GetByContextChildProductsError,
  type GetByContextChildProductsResponse,
  type GetByContextProductsForHierarchyData,
  type GetByContextProductsForHierarchyError,
  type GetByContextProductsForHierarchyResponse,
  type GetByContextProductsForNodeData,
  type GetByContextProductsForNodeError,
  type GetByContextProductsForNodeResponse,
  type ConfigureByContextProductData,
  type ConfigureByContextProductError,
  type ConfigureByContextProductResponse,
  CreateCatalogResponseTransformer,
  GetCatalogsResponseTransformer,
  GetCatalogByIdResponseTransformer,
  UpdateCatalogResponseTransformer,
  PublishReleaseResponseTransformer,
  GetReleasesResponseTransformer,
  GetReleaseByIdResponseTransformer,
  CreateRuleResponseTransformer,
  GetRulesResponseTransformer,
  GetRuleByIdResponseTransformer,
  UpdateRuleResponseTransformer,
  GetAllHierarchiesResponseTransformer,
  GetHierarchyResponseTransformer,
  GetHierarchyNodesResponseTransformer,
  GetHierarchyChildNodesResponseTransformer,
  GetAllNodesResponseTransformer,
  GetNodeResponseTransformer,
  GetChildNodesResponseTransformer,
  GetAllProductsResponseTransformer,
  GetProductResponseTransformer,
  GetChildProductsResponseTransformer,
  GetProductsForHierarchyResponseTransformer,
  GetProductsForNodeResponseTransformer,
  GetByContextReleaseResponseTransformer,
  GetByContextAllHierarchiesResponseTransformer,
  GetByContextHierarchyResponseTransformer,
  GetByContextHierarchyNodesResponseTransformer,
  GetByContextHierarchyChildNodesResponseTransformer,
  GetByContextAllNodesResponseTransformer,
  GetByContextNodeResponseTransformer,
  GetByContextChildNodesResponseTransformer,
  GetByContextAllProductsResponseTransformer,
  GetByContextProductResponseTransformer,
  GetByContextChildProductsResponseTransformer,
  GetByContextProductsForHierarchyResponseTransformer,
  GetByContextProductsForNodeResponseTransformer,
  ConfigureByContextProductResponseTransformer,
} from "./types.gen"

/**
 * Creates a new catalog
 * Before you create a catalog, you must define the following resources:
 *
 * - Hierarchies - hierarchies and nodes to categorize the products.
 * - Products - product information, associated assets, and links to hierarchy nodes.
 * - Price Books - prices for the products associated with the hierarchies. You can create multiple price books for different scenarios, such as seasonal sales, business versus retail customer pricing, and reward programs. When creating a catalog, you can specify up to five price books. You must configure a priority for your price books. Product prices are displayed in the catalog according to the priority of the price books. Priority is a number and the price book with the highest number has the highest priority.
 *
 */
export const createCatalog = (options: Options<CreateCatalogData>) => {
  return (options?.client ?? client).post<
    CreateCatalogResponse,
    CreateCatalogError
  >({
    ...options,
    url: "/pcm/catalogs",
    responseTransformer: CreateCatalogResponseTransformer,
  })
}

/**
 * Gets all authorized catalogs
 * Retrieves a list of all the catalogs that you are authorized to view. Currently, published catalogs are limited to the current release and two releases prior to the current release. You can see the differences between the last 2 consecutive catalog releases using the delta link returned in the response of a [publish a catalog](/docs/api/pxm/catalog/publish-release) endpoint.
 *
 * You can use the `is_full_delta` attribute returned from the `get a release of a catalog` endpoint to determine if you need to refresh the data in your company system before publishing a catalog release and injecting fresh data in a delta link. The `is_full_delta` attribute tells you if this is a full publish of a catalog release. Using a search service as an example, if the `is_full_delta` attribute is `true`, you should remove all data about that catalog from the search service before publishing a catalog release and injecting fresh data from the delta file. See [Publish a catalog](/docs/api/pxm/catalog/publish-release).
 *
 * If the `is_full_publish` attribute returned in the response is `false`, data from the previous catalog release overlaid the existing data in the delta file. The `is_full_publish` attribute is always `true` the first time a catalog is published.
 *
 */
export const getCatalogs = (options?: Options) => {
  return (options?.client ?? client).get<GetCatalogsResponse, GetCatalogsError>(
    {
      ...options,
      url: "/pcm/catalogs",
      responseTransformer: GetCatalogsResponseTransformer,
    },
  )
}

/**
 * Get a catalog by ID
 * Retrieves the specified catalog.
 */
export const getCatalogById = (options: Options<GetCatalogByIdData>) => {
  return (options?.client ?? client).get<
    GetCatalogByIdResponse,
    GetCatalogByIdError
  >({
    ...options,
    url: "/pcm/catalogs/{catalog_id}",
    responseTransformer: GetCatalogByIdResponseTransformer,
  })
}

/**
 * Updates a catalog
 * Specify whichever attributes you want to change. The values of the other attributes remain the same. If the attributes section is empty, the catalog is not updated.
 */
export const updateCatalog = (options: Options<UpdateCatalogData>) => {
  return (options?.client ?? client).put<
    UpdateCatalogResponse,
    UpdateCatalogError
  >({
    ...options,
    url: "/pcm/catalogs/{catalog_id}",
    responseTransformer: UpdateCatalogResponseTransformer,
  })
}

/**
 * Deletes a catalog
 * Deletes an unpublished catalog. Use [**Delete a Release**](/docs/api/pxm/catalog/delete-release-by-id) and [**Delete All Releases**](/docs/api/pxm/catalog/delete-releases) to delete releases of a catalog. If the catalog is associated with any catalog rules, you must first update the catalog rules to remove the catalog.
 */
export const deleteCatalogById = (options: Options<DeleteCatalogByIdData>) => {
  return (options?.client ?? client).delete<
    DeleteCatalogByIdResponse,
    DeleteCatalogByIdError
  >({
    ...options,
    url: "/pcm/catalogs/{catalog_id}",
  })
}

/**
 * Publishes a catalog
 *
 * Publishes a catalog. You must publish a catalog before you can retrieve that catalog in an organization or store. The hierarchies, live products, and prices associated with a published catalog are in read-only mode. If you make a change to these resources, for example, a change to your price book or hierarchies, you need to republish the catalog.
 *
 * You can get [a catalog release](/docs/api/pxm/catalog/get-release-by-id) to retrieve a published catalog. Currently, published catalogs are limited to the current release and two releases prior to the current release.
 *
 * You can see the differences between the last 2 consecutive catalog releases. This is useful if want to understand how your products have changed in your catalog, ensuring your site search integration is kept up-to-date.
 *
 * Once a catalog release has completed publishing, the delta relationship links to the delta document.
 *
 * The `delta` links are signed and only valid for 1 hour. Re-reading a catalog release, for example, using [Getting a release of a catalog](/docs/pxm/catalogs/catalog-latest-release/get-a-release-of-a-catalog) returns a fresh a link.
 *
 * You can use the `is_full_delta` attribute returned from the `get a release of a catalog` endpoint to determine if you need to refresh the data in your company system before injecting fresh data in a `delta` link. The `is_full_delta` attribute tells you if this is a full publish of the catalog. Using a search service as an example, if the `is_full_delta` attribute is `true`, you should remove all data about that catalog from the search service before injecting fresh data from the `delta` file. If the `is_full_delta` attribute is `false`, then data from the previous catalog overlays the existing data in the `delta` file. To publish a catalog and inject fresh data in a `delta` link, set `export_full_delta` to `true`.
 *
 * If a previous catalog publish date is greater than 90 days, then a full catalog publish is automatically performed. If you publish your catalogs infrequently, Commerce may perform a full publish when you are expecting a delta publish.
 *
 * :::caution
 *
 * Generating a full delta is resource intensive and slows down the publishing process and so should only be performed in certain circumstances, for example, when initializing an integration with a service like Algolia.
 *
 * :::
 *
 * The `is_full_delta` attribute is always `true` the first time a catalog is published. The information is stored in a collection of `json` documents in a compressed file. You can either manually check the file or, for example, use them to automatically update another company system you may have.
 *
 * - Delta files are only available for 30 days.
 * - Delta files are removed when a catalog release is deleted.
 *
 * Each document has a `delta_type` with one of the following values, depending on whether a product has been deleted, updated or created in a catalog release.
 *
 * - `delete` describes products deleted from this release of a catalog.
 * - `createupdate` describes products updated in this release of a catalog.
 *
 * ### Multi-Store Management Solutions
 *
 * In a multi-store management solution.
 *
 * - You can create organization catalogs. Your organization catalogs are available for your stores to use.
 * - Your stores can create their own catalogs.
 * - Your stores can create catalogs that have a combination of organization products and store products.
 *
 * If you are publishing a catalog in a store that contains resources from an organization, in Commerce Manager, you must enable the **Include Organization Resources in Catalog Publishes** checkbox.
 *
 * 1. Go to **SYSTEM** > **Store Settings**.
 * 2. Click **General Settings**.
 * 3. Select **PXM** from the list.
 * 4. Select the **Include Organization Resources in Catalog Publishes** checkbox.
 *
 */
export const publishRelease = (options: Options<PublishReleaseData>) => {
  return (options?.client ?? client).post<
    PublishReleaseResponse,
    PublishReleaseError
  >({
    ...options,
    url: "/pcm/catalogs/{catalog_id}/releases",
    responseTransformer: PublishReleaseResponseTransformer,
  })
}

/**
 * Gets all authorized catalog releases
 * Returns a list of all published releases of the specified catalog. Currently, published catalogs are limited to the current release and two releases prior to the current release. You can see the differences between the last 2 consecutive catalog releases using the `delta` link returned in the response of a `publish a catalog` endpoint.
 *
 * You can use the `is_full_delta` attribute returned from the `get a release of a catalog` endpoint to determine if you need to refresh the data in your company system before publishing a catalog release and injecting fresh data in a delta link. The `is_full_delta` attribute tells you if this is a full publish of a catalog release. Using a search service as an example, if the `is_full_delta` attribute is `true`, you should remove all data about that catalog from the search service before publishing a catalog release and injecting fresh data from the delta file.
 *
 * If the `is_full_publish` attribute returned in the response is `false`, data from the previous catalog release overlaid the existing data in the delta file. The `is_full_publish` attribute is always `true` the first time a catalog is published.
 *
 */
export const getReleases = (options: Options<GetReleasesData>) => {
  return (options?.client ?? client).get<GetReleasesResponse, GetReleasesError>(
    {
      ...options,
      url: "/pcm/catalogs/{catalog_id}/releases",
      responseTransformer: GetReleasesResponseTransformer,
    },
  )
}

/**
 * Deletes all releases
 * Deletes all releases of the specified published catalog.
 */
export const deleteReleases = (options: Options<DeleteReleasesData>) => {
  return (options?.client ?? client).delete<
    DeleteReleasesResponse,
    DeleteReleasesError
  >({
    ...options,
    url: "/pcm/catalogs/{catalog_id}/releases",
  })
}

/**
 * Get a catalog release by ID
 * Retrieves the specified catalog release.
 */
export const getReleaseById = (options: Options<GetReleaseByIdData>) => {
  return (options?.client ?? client).get<
    GetReleaseByIdResponse,
    GetReleaseByIdError
  >({
    ...options,
    url: "/pcm/catalogs/{catalog_id}/releases/{release_id}",
    responseTransformer: GetReleaseByIdResponseTransformer,
  })
}

/**
 * Deletes a release
 * Deletes the specified published catalog release.
 */
export const deleteReleaseById = (options: Options<DeleteReleaseByIdData>) => {
  return (options?.client ?? client).delete<
    DeleteReleaseByIdResponse,
    DeleteReleaseByIdError
  >({
    ...options,
    url: "/pcm/catalogs/{catalog_id}/releases/{release_id}",
  })
}

/**
 * Creates a new catalog rule
 * If you have multiple catalogs, create catalog rule resources. With catalog rules, you can display different catalogs to different shoppers. For example, you can display a preferred pricing catalog to a few special customers. Or you can display one catalog to shoppers using your website and a different catalog to shoppers using your mobile app. Finally, you can define custom criteria by creating tags.
 *
 * :::note
 *
 * - If you have one catalog for all customers and channels, you can omit creating this resource.
 * - Due to the way catalogs are cached in Commerce, using catalog rules to display catalogs sometimes causes a 5-minute time delay before the catalogs are displayed.
 * - You cannot create catalog rules for organization catalogs.
 *
 * :::
 *
 * For ideas about the kinds of business scenarios you can achieve with catalog rules, see [Catalog Rules](/docs/api/pxm/catalog/rules). To understand how catalogs are matched to shoppers by using rules, see [Resolving Catalog Rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).
 *
 */
export const createRule = (options: Options<CreateRuleData>) => {
  return (options?.client ?? client).post<CreateRuleResponse, CreateRuleError>({
    ...options,
    url: "/pcm/catalogs/rules",
    responseTransformer: CreateRuleResponseTransformer,
  })
}

/**
 * Gets all authorized catalog rules
 * Retrieves all authorized catalog rules.
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For general filtering syntax, see [Filtering](https://elasticpath.dev/docs/commerce-cloud/api-overview/filtering). The following operators and attributes are supported.
 *
 * | Operator | Description | Supported Attributes | Example |
 * |:--- |:--- |:--- |:--- |
 * | `In` | Checks if the values are included in the specified string. If they are, the condition is true. | `id` | `filter=in(id,some-id)` |
 *
 */
export const getRules = (options?: Options<GetRulesData>) => {
  return (options?.client ?? client).get<GetRulesResponse, GetRulesError>({
    ...options,
    url: "/pcm/catalogs/rules",
    responseTransformer: GetRulesResponseTransformer,
  })
}

/**
 * Get a catalog rule by ID
 */
export const getRuleById = (options: Options<GetRuleByIdData>) => {
  return (options?.client ?? client).get<GetRuleByIdResponse, GetRuleByIdError>(
    {
      ...options,
      url: "/pcm/catalogs/rules/{catalog_rule_id}",
      responseTransformer: GetRuleByIdResponseTransformer,
    },
  )
}

/**
 * Updates a catalog rule
 * Specify whichever attributes you want to change. The values of the other attributes remain the same. If the attributes section is empty, the catalog rule is not updated.
 */
export const updateRule = (options: Options<UpdateRuleData>) => {
  return (options?.client ?? client).put<UpdateRuleResponse, UpdateRuleError>({
    ...options,
    url: "/pcm/catalogs/rules/{catalog_rule_id}",
    responseTransformer: UpdateRuleResponseTransformer,
  })
}

/**
 * Deletes a catalog rule
 */
export const deleteRuleById = (options: Options<DeleteRuleByIdData>) => {
  return (options?.client ?? client).delete<
    DeleteRuleByIdResponse,
    DeleteRuleByIdError
  >({
    ...options,
    url: "/pcm/catalogs/rules/{catalog_rule_id}",
  })
}

/**
 * Get all Hierarchies
 * Returns the hierarchies from a published catalog.
 *
 * :::note
 *
 * Currently, published catalogs are limited to the current release and two releases prior to the current release.
 *
 * :::
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For general syntax, see [Filtering](https://beta.elasticpath.dev/docs/commerce-cloud/api-overview/filtering).
 *
 * | Operator | Description | Supported Attributes | Example |
 * |:--- |:--- |:--- |:--- |
 * | `Eq` | Checks if the values of two operands are equal. If they are, the condition is true. | `name`, `slug`| `filter=eq(name,some-name)` |
 * | `In` | Checks if the values are included in the specified string. If they are, the condition is true. | `id` | `filter=in(id,some-id)` |
 *
 * ### Building breadcrumbs in a storefront
 *
 * In a catalog, you can use a filter to return a list of nodes in a hierarchy structure that a product belongs to. You can use this to build breadcrumbs in your storefront. An example is shown below.
 *
 * `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`
 *
 * - Specify the node Ids in the filter expression.
 * - You can have as many node Ids as you want.
 * - It does not matter what order you specify the node Ids. The nodes are returned in the order they were last updated.
 *
 */
export const getAllHierarchies = (options: Options<GetAllHierarchiesData>) => {
  return (options?.client ?? client).get<
    GetAllHierarchiesResponse,
    GetAllHierarchiesError
  >({
    ...options,
    url: "/pcm/catalogs/{catalog_id}/releases/{release_id}/hierarchies",
    responseTransformer: GetAllHierarchiesResponseTransformer,
  })
}

/**
 * Get a Hierarchy
 * Returns the specified hierarchy from a published catalog.
 *
 * :::note
 *
 * Currently, published catalogs are limited to the current release and two releases prior to the current release.
 *
 * :::
 *
 */
export const getHierarchy = (options: Options<GetHierarchyData>) => {
  return (options?.client ?? client).get<
    GetHierarchyResponse,
    GetHierarchyError
  >({
    ...options,
    url: "/pcm/catalogs/{catalog_id}/releases/{release_id}/hierarchies/{hierarchy_id}",
    responseTransformer: GetHierarchyResponseTransformer,
  })
}

/**
 * Get a Hierarchy's Nodes
 * Returns all nodes for the specified hierarchy from a published catalog.
 *
 * :::note
 *
 * Currently, published catalogs are limited to the current release and two releases prior to the current release.
 *
 * :::
 *
 * In the `bread_crumb` metadata, you can identify the parent nodes that a node is associated with. This is useful if you want to improve how your shoppers search your store, for example. See [Product and Node Associations in Breadcrumb Metadata](https://beta.elasticpath.dev/guides/Catalogs/breadcrumbs).
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For general syntax, see [Filtering](/docs/commerce-cloud/api-overview/filtering).
 *
 * | Operator | Description | Supported Attributes | Example |
 * |:--- |:--- |:--- |:--- |
 * | `Eq` | Checks if the values of two operands are equal. If they are, the condition is true. | `name`, `slug`| `filter=eq(name,some-name)` |
 * | `In` | Checks if the values are included in the specified string. If they are, the condition is true. | `id` | `filter=in(id,some-id)` |
 *
 * ### Building breadcrumbs in a storefront
 *
 * In a catalog, you can use a filter to return a list of nodes in a hierarchy structure that a product belongs to. You can use this to build breadcrumbs in your storefront. An example is shown below.
 *
 * `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`
 *
 * - Specify the node Ids in the filter expression.
 * - You can have as many node Ids as you want.
 * - It does not matter what order you specify the node Ids. The nodes are returned in the order they were last updated.
 *
 */
export const getHierarchyNodes = (options: Options<GetHierarchyNodesData>) => {
  return (options?.client ?? client).get<
    GetHierarchyNodesResponse,
    GetHierarchyNodesError
  >({
    ...options,
    url: "/pcm/catalogs/{catalog_id}/releases/{release_id}/hierarchies/{hierarchy_id}/nodes",
    responseTransformer: GetHierarchyNodesResponseTransformer,
  })
}

/**
 * Get a Hierarchy's Children
 * Returns the parent nodes for the specified hierarchy from a published catalog.
 *
 * ![Parent Nodes](/assets/rootnodes.PNG)
 *
 * :::note
 *
 * Currently, published catalogs are limited to the current release and two releases prior to the current release.
 *
 * :::
 *
 * In the `bread_crumb` metadata, you can identify the parent nodes that a node is associated with. This is useful if you want to improve how your shoppers search your store, for example. See [Product and Node Associations in Breadcrumb Metadata](https://beta.elasticpath.dev/guides/Catalogs/breadcrumbs).
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For general syntax, see [Filtering](/docs/commerce-cloud/api-overview/filtering).
 *
 * | Operator | Description | Supported Attributes | Example |
 * |:--- |:--- |:--- |:--- |
 * | `Eq` | Checks if the values of two operands are equal. If they are, the condition is true. | `name`, `slug`| `filter=eq(name,some-name)` |
 * | `In` | Checks if the values are included in the specified string. If they are, the condition is true. | `id` | `filter=in(id,some-id)` |
 *
 * ### Building breadcrumbs in a storefront
 *
 * In a catalog, you can use a filter to return a list of nodes in a hierarchy structure that a product belongs to. You can use this to build breadcrumbs in your storefront. An example is shown below.
 *
 * `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`
 *
 * - Specify the node Ids in the filter expression.
 * - You can have as many node Ids as you want.
 * - It does not matter what order you specify the node Ids. The nodes are returned in the order they were last updated.
 *
 */
export const getHierarchyChildNodes = (
  options: Options<GetHierarchyChildNodesData>,
) => {
  return (options?.client ?? client).get<
    GetHierarchyChildNodesResponse,
    GetHierarchyChildNodesError
  >({
    ...options,
    url: "/pcm/catalogs/{catalog_id}/releases/{release_id}/hierarchies/{hierarchy_id}/children",
    responseTransformer: GetHierarchyChildNodesResponseTransformer,
  })
}

/**
 * Get all Nodes
 * Returns the child nodes from a published catalog.
 *
 * :::note
 *
 * Currently, published catalogs are limited to the current release and two releases prior to the current release.
 *
 * :::
 *
 * You can see the parent nodes a node is associated with in the `bread_crumb` metadata for each node. This is useful if you want to improve how your shoppers search your store, for example. See [Product and Node Associations in Breadcrumb Metadata](https://beta.elasticpath.dev/guides/Catalogs/breadcrumbs).
 *
 * In a catalog, you can use a filter to return a list of nodes in a hierarchy structure that a product belongs to. You can use this to build breadcrumbs in your storefront. See [Building breadcrumbs in a storefront](#building-breadcrumbs-in-a-storefront).
 *
 * The response lists the products associated with the nodes. If products are [curated](https://beta.elasticpath.dev/guides/Products/curating-products), they are displayed in `curated_products`. Product curation allows you to promote specific products within each of your hierarchies, enabling you to create unique product collections in your storefront.
 *
 * - If you don't provide any `curated_products`, products are listed by their `updated_at` time in descending order, with the most recently updated product first.
 * - If you configure `curated_products` for only a few products, the curated products are displayed first and the other products are displayed in the order of `updated_at` time.
 * - You can only curate 20 products or less. You cannot have more than 20 curated products.
 * - If a curated product is removed from a node, the product is also removed from the `curated_products` list.
 * - A product that is curated has the `"curated_product": true` attribute displayed.
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For general syntax, see (/docs/commerce-cloud/api-overview/filtering). The following operators and attributes are available.
 *
 * | Operator  | Description | Attributes | Example |
 * | --- | --- | --- | --- |
 * | `Eq` | Checks if the values of two operands are equal. If they are, the condition is true. | `name`, `slug` | `filter=eq(name,some-name)` |
 * | `in`      | Checks if the values are included in the specified string. If they are, the condition is true.
 * | `Id` |  `filter=in(id,9214719b-17fe-4ea7-896c-d61e60fc0d05,e104d541-2c52-47fa-8a9a-c4382480d97c,65daaf68-ff2e-4632-8944-370de835967d)` |
 *
 * ### Building breadcrumbs in a storefront
 *
 * In a catalog, you can use a filter to return a list of nodes in a hierarchy structure that a product belongs to. You can use this to build breadcrumbs in your storefront. An example is shown below.
 *
 * `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`
 *
 * - Specify the node Ids in the filter expression.
 * - You can have as many node Ids as you want.
 * - It does not matter what order you specify the node Ids. The nodes are returned in the order they were last updated.
 *
 */
export const getAllNodes = (options: Options<GetAllNodesData>) => {
  return (options?.client ?? client).get<GetAllNodesResponse, GetAllNodesError>(
    {
      ...options,
      url: "/pcm/catalogs/{catalog_id}/releases/{release_id}/nodes",
      responseTransformer: GetAllNodesResponseTransformer,
    },
  )
}

/**
 * Get a Node
 * Returns a node from a published catalog.
 *
 * :::note
 *
 * Currently, published catalogs are limited to the current release and two releases prior to the current release.
 *
 * :::
 *
 * You can see the parent nodes a node is associated with in the `bread_crumb` metadata for each node. This is useful if you want to improve how your shoppers search your store, for example. See [Product and Node Associations in Breadcrumb Metadata](https://beta.elasticpath.dev/guides/Catalogs/breadcrumbs).
 *
 * The response lists the products associated with the nodes. If products are [curated](https://beta.elasticpath.dev/guides/Products/curating-products), they are displayed in `curated_products`. Product curation allows you to promote specific products within each of your hierarchies, enabling you to create unique product collections in your storefront.
 *
 * - If you don't provide any `curated_products`, products are listed by their `updated_at` time in descending order, with the most recently updated product first.
 * - If you configure `curated_products` for only a few products, the curated products are displayed first and the other products are displayed in the order of `updated_at` time.
 * - You can only curate 20 products or less. You cannot have more than 20 curated products.
 * - If a curated product is removed from a node, the product is also removed from the `curated_products` list.
 * - A product that is curated has the `"curated_product": true` attribute displayed.
 *
 */
export const getNode = (options: Options<GetNodeData>) => {
  return (options?.client ?? client).get<GetNodeResponse, GetNodeError>({
    ...options,
    url: "/pcm/catalogs/{catalog_id}/releases/{release_id}/nodes/{node_id}",
    responseTransformer: GetNodeResponseTransformer,
  })
}

/**
 * Get a Node's Children
 * Returns the child nodes for a node from a published catalog.
 *
 * :::note
 *
 * Currently, published catalogs are limited to the current release and two releases prior to the current release.
 *
 * :::
 *
 * You can see the parent nodes a node is associated with in the `bread_crumb` metadata for each node. This is useful if you want to improve how your shoppers search your store, for example. See [Product and Node Associations in Breadcrumb Metadata](https://beta.elasticpath.dev/guides/Catalogs/breadcrumbs).
 *
 * In a catalog, you can use a filter to return a list of nodes in a hierarchy structure that a product belongs to. You can use this to build breadcrumbs in your storefront. For more information, see [Building breadcrumbs in a storefront](#building-breadcrumbs-in-a-storefront).
 *
 * The response lists the products associated with the nodes. If products are [curated](https://beta.elasticpath.dev/guides/Products/curating-products), they are displayed in `curated_products`. Product curation allows you to promote specific products within each of your hierarchies, enabling you to create unique product collections in your storefront.
 *
 * - If you don't provide any `curated_products`, products are listed by their `updated_at` time in descending order, with the most recently updated product first.
 * - If you configure `curated_products` for only a few products, the curated products are displayed first and the other products are displayed in the order of `updated_at` time.
 * - You can only curate 20 products or less. You cannot have more than 20 curated products.
 * - If a curated product is removed from a node, the product is also removed from the `curated_products` list.
 * - A product that is curated has the `"curated_product": true` attribute displayed.
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For general syntax, see (/docs/commerce-cloud/api-overview/filtering). The following operators and attributes are available.
 *
 * | Operator  | Description | Attributes | Example |
 * | --- | --- | --- | --- |
 * | `Eq` | Checks if the values of two operands are equal. If they are, the condition is true. | `name`, `slug` | `filter=eq(name,some-name)` |
 * | `in`      | Checks if the values are included in the specified string. If they are, the condition is true.
 * | `Id` |  `filter=in(id,9214719b-17fe-4ea7-896c-d61e60fc0d05,e104d541-2c52-47fa-8a9a-c4382480d97c,65daaf68-ff2e-4632-8944-370de835967d)` |
 *
 * ### Building breadcrumbs in a storefront
 *
 * In a catalog, you can use a filter to return a list of nodes in a hierarchy structure that a product belongs to. You can use this to build breadcrumbs in your storefront. An example is shown below.
 *
 * `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`
 *
 * - Specify the node Ids in the filter expression.
 * - You can have as many node Ids as you want.
 * - It does not matter what order you specify the node Ids. The nodes are returned in the order they were last updated.
 *
 */
export const getChildNodes = (options: Options<GetChildNodesData>) => {
  return (options?.client ?? client).get<
    GetChildNodesResponse,
    GetChildNodesError
  >({
    ...options,
    url: "/pcm/catalogs/{catalog_id}/releases/{release_id}/nodes/{node_id}/relationships/children",
    responseTransformer: GetChildNodesResponseTransformer,
  })
}

/**
 * Get all Products
 * Returns the products from a published catalog. Only the products in a `live` status are retrieved. Currently, published catalogs are limited to the current release and two releases prior to the current release.
 *
 * You can see the parent nodes a product is associated with in the `bread_crumbs` and `bread_crumb_nodes` metadata for each product. This is useful if you want to improve how your shoppers search your store, for example. See [Product and Node Associations in Breadcrumb Metadata](https://beta.elasticpath.dev/guides/Catalogs/breadcrumbs).
 *
 * The `variations` object lists the variation IDs and variation option IDs and their corresponding product IDs that are generated when the variation and variation options are built with a product. The `variations` object can then be added to your catalogs. By default, variations and variation options are sorted randomly. You can use the `sort_order` attribute to sort the order of your variation and variation options in `variations`. Once a parent product is published in a catalog, the [Get a List of products in a catalog release](/docs/api/pxm/catalog/get-all-products) response displays the sorted variations and variation options. Variations and variation options are displayed in descending order according to their `sort_order` values.
 *
 * Using the `include` parameter, you can retrieve top-level resources, such as, files or main image, bundle component products and product attributes, such as SKU or slug.
 *
 * | Parameter           | Required | Description                                                                                                                                                                                                           |
 * |  :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
 * | `component_products` | Optional | The  component product data and key attribute data, such as SKU or slug, to return for component products in a product bundle.  |
 * | `main_image`         | Optional | The main images associated with a product.                                                                                                           |
 * | `files`              | Optional | Any files associated with a product.
 *
 * See [**Including Resources**](https://elasticpath.dev/docs/commerce-cloud/api-overview/includes).
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For general filtering syntax, see [Filtering](/docs/commerce-cloud/api-overview/filtering). The following operators and attributes are available when filtering on this endpoint.
 *
 * | Operator | Description                                                                                     | Supported Attributes                                     | Example |
 * |:---|:------------------------------------------------------------------------------------------------|:---------------------------------------------------------|:--- |
 * | `Eq` | Checks if the values of two operands are equal. If they are, the condition is true. For `product_types`, you can only specify one product type. For example, `filter=eq(product_types,child)`.            | `name`, `sku`, `slug`, `manufacturer_part_num`, `upc_ean`, `product_types`, `tags` | `filter=eq(name,some-name)` |
 * | `In` | Checks if the values are included in the specified string. If they are, the condition is true. For `product_types`, you can specify more than one product type. For example, `filter=in(product_types,child,bundle)`. | `id`, `name`, `sku`, `slug`, `manufacturer_part_num`, `upc_ean`, `product_types`, `tags`          | `filter=in(id,some-id)` |
 *
 * ### Building breadcrumbs in a storefront
 *
 * In a catalog, you can use a filter to return a list of nodes in a hierarchy structure that a product belongs to. You can use this to build breadcrumbs in your storefront. An example is shown below.
 *
 * `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`
 *
 * - Specify the node Ids in the filter expression.
 * - You can have as many node Ids as you want.
 * - It does not matter what order you specify the node Ids. The nodes are returned in the order they were last updated.
 *
 * ### Including Resources
 *
 * Using the `include` parameter, you can retrieve top-level resources, such as, files or main image, bundle component products and product attributes, such as SKU or slug.
 *
 * | Parameter | Required | Description                                                                                                                                                                                                    |
 * |  :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
 * | `component_products` | Optional | The  component product data and key attribute data, such as SKU or slug, to return for component products in a product bundle.  |
 * | `main_image`         | Optional | The main images associated with a product. |
 * | `files`              | Optional | Any files associated with a product. |
 *
 * See [**Including Resources**](https://elasticpath.dev/docs/commerce-cloud/api-overview/includes).
 *
 */
export const getAllProducts = (options: Options<GetAllProductsData>) => {
  return (options?.client ?? client).get<
    GetAllProductsResponse,
    GetAllProductsError
  >({
    ...options,
    url: "/pcm/catalogs/{catalog_id}/releases/{release_id}/products",
    responseTransformer: GetAllProductsResponseTransformer,
  })
}

/**
 * Get a Product
 * Returns a product from a published catalog. The product must be in `live` status. Currently, published catalogs are limited to the current release and two releases prior to the current release.
 *
 * ### Product and Node Associations in Breadcrumb Metadata
 *
 * You can see the parent nodes a product is associated with in the `bread_crumbs` and `bread_crumb_nodes` metadata for each product. This is useful if you want to improve how your shoppers search your store, for example. See [Product and Node Associations in Breadcrumb Metadata](https://beta.elasticpath.dev/guides/Catalogs/breadcrumbs).
 *
 * ### Product Variations
 *
 * The `variations` object lists the variation IDs and variation option IDs and their corresponding product IDs that are generated when the variation and variation options are built with a product. The `variations` object can then be added to your catalogs. By default, variations and variation options are sorted randomly. You can use the `sort_order`attribute to sort the order of your variation and variation options in `variations`. Once a parent product is published in a catalog, the get a product in a catalog release response displays the sorted variations and variation options. Variations and variation options are displayed in descending order according to their `sort_order` values.
 *
 * ### Including Resources
 *
 * Using the `include` parameter, you can retrieve top-level resources, such as, files or main image, bundle component products and product attributes, such as SKU or slug.
 *
 * | Parameter          | Required | Description                                                                                                                                                                                                           |
 * |  :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
 * | `component_products` | Optional | The  component product data and key attribute data, such as SKU or slug, to return for component products in a product bundle.  |
 * | `main_image`         | Optional | The main images associated with a product.                                                                                                           |
 * | `files`              | Optional | Any files associated with a product.
 *
 * See [**Including Resources**](https://elasticpath.dev/docs/commerce-cloud/api-overview/includes).
 *
 */
export const getProduct = (options: Options<GetProductData>) => {
  return (options?.client ?? client).get<GetProductResponse, GetProductError>({
    ...options,
    url: "/pcm/catalogs/{catalog_id}/releases/{release_id}/products/{product_id}",
    responseTransformer: GetProductResponseTransformer,
  })
}

/**
 * Get a Bundle's Component Products
 * With Product Experience Manager, you can [create](/docs/api/pxm/products/create-product) and manage bundles. A bundle is a purchasable product, comprising of one or more products that you want to sell together.
 *
 * You can create multiple components within a bundle. Each component must have at least one or more options. Each option is a product and a quantity.
 *
 * This endpoint returns a list of component product IDs for the specified bundle.
 *
 * ### Including Resources
 *
 * Using the `include` parameter, you can retrieve top-level resources, such as, files or main image, bundle component products and product attributes, such as SKU or slug.
 *
 * | Parameter | Required | Description                                                                                                                                                                                                    |
 * |  :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
 * | `component_products` | Optional | The  component product data and key attribute data, such as SKU or slug, to return for component products in a product bundle.  |
 * | `main_image`         | Optional | The main images associated with a product. |
 * | `files`              | Optional | Any files associated with a product. |
 *
 * See [**Including Resources**](https://elasticpath.dev/docs/commerce-cloud/api-overview/includes).
 *
 */
export const getComponentProductIds = (
  options: Options<GetComponentProductIdsData>,
) => {
  return (options?.client ?? client).get<
    GetComponentProductIdsResponse,
    GetComponentProductIdsError
  >({
    ...options,
    url: "/pcm/catalogs/{catalog_id}/releases/{release_id}/products/{product_id}/relationships/component_products",
  })
}

/**
 * Get a Parent Product's Child Products
 * For a specified product and catalog release, retrieves a list of child products from a parent product. Any product other than a base product results in a `422 Unprocessable Entity` response. Only the products in a `live` status are retrieved.
 *
 * If you have multiple catalog rules defined, the rule that best matches the shoppers context is used to determine which catalog is retrieved. If no catalog rules are configured, the first catalog found is returned. For information about how rules are matched, see [Resolving Catalog Rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).
 *
 * You can see the parent nodes a product is associated within the breadcrumbs metadata for each product. For example, this is useful if you want to improve how your shoppers search your store. See [Product and Node Associations in Breadcrumb Metadata](https://beta.elasticpath.dev/guides/Catalogs/breadcrumbs).
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For general filtering syntax, see [Filtering](/docs/commerce-cloud/api-overview/filtering). The following operators and attributes are available when filtering on this endpoint.
 *
 * | Operator | Description                                                                                     | Supported Attributes                                     | Example |
 * |:---|:------------------------------------------------------------------------------------------------|:---------------------------------------------------------|:--- |
 * | `Eq` | Checks if the values of two operands are equal. If they are, the condition is true. For `product_types`, you can only specify one product type. For example, `filter=eq(product_types,child)`.            | `name`, `sku`, `slug`, `manufacturer_part_num`, `upc_ean`, `product_types`, `tags` | `filter=eq(name,some-name)` |
 * | `In` | Checks if the values are included in the specified string. If they are, the condition is true. For `product_types`, you can specify more than one product type. For example, `filter=in(product_types,child,bundle)`. | `id`, `name`, `sku`, `slug`, `manufacturer_part_num`, `upc_ean`, `product_types`, `tags`          | `filter=in(id,some-id)` |
 *
 * ### Building breadcrumbs in a storefront
 *
 * In a catalog, you can use a filter to return a list of nodes in a hierarchy structure that a product belongs to. You can use this to build breadcrumbs in your storefront. An example is shown below.
 *
 * `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`
 *
 * - Specify the node Ids in the filter expression.
 * - You can have as many node Ids as you want.
 * - It does not matter what order you specify the node Ids. The nodes are returned in the order they were last updated.
 *
 * ### Including Resources
 *
 * Using the `include` parameter, you can retrieve top-level resources, such as, files or main image, bundle component products and product attributes, such as SKU or slug.
 *
 * | Parameter | Required | Description                                                                                                                                                                                                    |
 * |  :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
 * | `component_products` | Optional | The  component product data and key attribute data, such as SKU or slug, to return for component products in a product bundle.  |
 * | `main_image`         | Optional | The main images associated with a product. |
 * | `files`              | Optional | Any files associated with a product. |
 *
 * See [**Including Resources**](https://elasticpath.dev/docs/commerce-cloud/api-overview/includes).
 *
 */
export const getChildProducts = (options: Options<GetChildProductsData>) => {
  return (options?.client ?? client).get<
    GetChildProductsResponse,
    GetChildProductsError
  >({
    ...options,
    url: "/pcm/catalogs/{catalog_id}/releases/{release_id}/products/{product_id}/relationships/children",
    responseTransformer: GetChildProductsResponseTransformer,
  })
}

/**
 * Get a Hierarchy's Products
 * Returns the products associated with the specified hierarchy in the catalog. The products must be in the `live` status.
 *
 * If you have multiple catalog rules defined, the rule that best matches the shoppers context is used to determine which catalog is retrieved. See [Resolving catalog rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).
 *
 * You can see the parent nodes a product is associated with in the `bread_crumbs` and `bread_crumb_nodes` metadata for each product. This is useful if you want to improve how your shoppers search your store, for example. See [Product and Node Associations in Breadcrumb Metadata](https://beta.elasticpath.dev/guides/Catalogs/breadcrumbs).
 *
 * The `variations` object lists the variation IDs and variation option IDs and their corresponding product IDs that are generated when the variation and variation options are built with a product. The variations object can then be added to your catalogs. By default, variations and variation options are sorted randomly. You can use the `sort_order` attribute to sort the order of your variation and variation options in variations. Once a parent product is published in a catalog, the [Get a List of products in a catalog](/docs/api/pxm/catalog/get-all-products) release response displays the sorted variations and variation options. Variations and variation options are displayed in descending order according to their `sort_order` values.
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For general filtering syntax, see [Filtering](/docs/commerce-cloud/api-overview/filtering). The following operators and attributes are available when filtering on this endpoint.
 *
 * | Operator | Description                                                                                     | Supported Attributes                                     | Example |
 * |:---|:------------------------------------------------------------------------------------------------|:---------------------------------------------------------|:--- |
 * | `Eq` | Checks if the values of two operands are equal. If they are, the condition is true. For `product_types`, you can only specify one product type. For example, `filter=eq(product_types,child)`.          | `name`, `sku`, `slug`, `manufacturer_part_num`, `upc_ean`, `product_types`, `tags` | `filter=eq(name,some-name)` |
 * | `In` | Checks if the values are included in the specified string. If they are, the condition is true. For `product_types`, you can specify more than one product type. For example, `filter=in(product_types,child,bundle)`. | `id`, `name`, `sku`, `slug`, `manufacturer_part_num`, `upc_ean`, `product_types`, `tags`          | `filter=in(id,some-id)` |
 *
 * ### Building breadcrumbs in a storefront
 *
 * In a catalog, you can use a filter to return a list of nodes in a hierarchy structure that a product belongs to. You can use this to build breadcrumbs in your storefront. An example is shown below.
 *
 * `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`
 *
 * - Specify the node Ids in the filter expression.
 * - You can have as many node Ids as you want.
 * - It does not matter what order you specify the node Ids. The nodes are returned in the order they were last updated.
 *
 * ### Including Resources
 *
 * Using the `include` parameter, you can retrieve top-level resources, such as, files or main image, bundle component products and product attributes, such as SKU or slug.
 *
 * | Parameter | Required | Description                                                                                                                                                                                                    |
 * |  :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
 * | `component_products` | Optional | The  component product data and key attribute data, such as SKU or slug, to return for component products in a product bundle.  |
 * | `main_image`         | Optional | The main images associated with a product. |
 * | `files`              | Optional | Any files associated with a product. |
 *
 * See [**Including Resources**](https://elasticpath.dev/docs/commerce-cloud/api-overview/includes).
 *
 */
export const getProductsForHierarchy = (
  options: Options<GetProductsForHierarchyData>,
) => {
  return (options?.client ?? client).get<
    GetProductsForHierarchyResponse,
    GetProductsForHierarchyError
  >({
    ...options,
    url: "/pcm/catalogs/{catalog_id}/releases/{release_id}/hierarchies/{hierarchy_id}/products",
    responseTransformer: GetProductsForHierarchyResponseTransformer,
  })
}

/**
 * Get a Node's Products
 * Returns the products associated with the specified hierarchy node in the catalog. The products must be in the `live` status. If the products have been curated, then the products are returned in the order specified in the `curated_products` attribute. A product that is curated has the `"curated_product": true` attribute displayed.
 *
 * :::note
 *
 * Currently, published catalogs are limited to the current release and two releases prior to the current release.
 *
 * :::
 *
 * If you have multiple catalog rules defined, the rule that best matches the shoppers context is used to determine which catalog is retrieved. See [Resolving catalog rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).
 *
 * You can see the parent nodes a product is associated with in the `bread_crumbs` and `bread_crumb_nodes` metadata for each product. This is useful if you want to improve how your shoppers search your store, for example. See [Product and Node Associations in Breadcrumb Metadata](https://elasticpath.dev/guides/Catalogs/breadcrumbs).
 *
 * The `variations` object lists the variation IDs and variation option IDs and their corresponding product IDs that are generated when the variation and variation options are built with a product. The `variations` object can then be added to your catalogs. By default, variations and variation options are sorted randomly. You can use the `sort_order` attribute to sort the order of your variation and variation options in `variations`. Once a parent product is published in a catalog, the [Get a List of products in a catalog release](/docs/api/pxm/catalog/get-all-products) response displays the sorted variations and variation options. Variations and variation options are displayed in descending order according to their `sort_order` values.
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For general filtering syntax, see [Filtering](/docs/commerce-cloud/api-overview/filtering). The following operators and attributes are available when filtering on this endpoint.
 *
 * | Operator | Description                                                                                     | Supported Attributes                                     | Example |
 * |:---|:------------------------------------------------------------------------------------------------|:---------------------------------------------------------|:--- |
 * | `Eq` | Checks if the values of two operands are equal. If they are, the condition is true. For `product_types` and `tags`, you can only specify one. For example, `filter=eq(product_types,child)`.          | `name`, `sku`, `slug`, `manufacturer_part_num`, `upc_ean`, `product_types`, `tags` | `filter=eq(name,some-name)` |
 * | `In` | Checks if the values are included in the specified string. If they are, the condition is true. For `product_types` and `tags`, you can specify more than one. For example, `filter=in(product_types,child,bundle)`. | `id`, `name`, `sku`, `slug`, `manufacturer_part_num`, `upc_ean`, `product_types`, `tags`          | `filter=in(id,some-id)` |
 *
 * ### Building breadcrumbs in a storefront
 *
 * In a catalog, you can use a filter to return a list of nodes in a hierarchy structure that a product belongs to. You can use this to build breadcrumbs in your storefront. An example is shown below.
 *
 * `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`
 *
 * - Specify the node Ids in the filter expression.
 * - You can have as many node Ids as you want.
 * - It does not matter what order you specify the node Ids. The nodes are returned in the order they were last updated.
 *
 * ### Including Resources
 *
 * Using the `include` parameter, you can retrieve top-level resources, such as, files or main image, bundle component products and product attributes, such as SKU or slug.
 *
 * | Parameter | Required | Description                                                                                                                                                                                                    |
 * |  :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
 * | `component_products` | Optional | The  component product data and key attribute data, such as SKU or slug, to return for component products in a product bundle.  |
 * | `main_image`         | Optional | The main images associated with a product. |
 * | `files`              | Optional | Any files associated with a product. |
 *
 * See [**Including Resources**](https://elasticpath.dev/docs/commerce-cloud/api-overview/includes).
 *
 */
export const getProductsForNode = (
  options: Options<GetProductsForNodeData>,
) => {
  return (options?.client ?? client).get<
    GetProductsForNodeResponse,
    GetProductsForNodeError
  >({
    ...options,
    url: "/pcm/catalogs/{catalog_id}/releases/{release_id}/nodes/{node_id}/relationships/products",
    responseTransformer: GetProductsForNodeResponseTransformer,
  })
}

/**
 * Get the catalog release as shoppers
 * Returns a list of all published releases of the specified catalog.
 */
export const getByContextRelease = (
  options?: Options<GetByContextReleaseData>,
) => {
  return (options?.client ?? client).get<
    GetByContextReleaseResponse,
    GetByContextReleaseError
  >({
    ...options,
    url: "/catalog",
    responseTransformer: GetByContextReleaseResponseTransformer,
  })
}

/**
 * Get all Hierarchies
 * Returns all hierarchies from a catalog.
 *
 * If you have multiple catalog rules defined, the rule that best matches the shoppers context is used to determine which catalog is retrieved. For information about how rules are matched, see [Resolving Catalog Rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For general syntax, see [Filtering](/docs/commerce-cloud/api-overview/filtering).
 *
 * | Operator | Description | Supported Attributes | Example |
 * |:--- |:--- |:--- |:--- |
 * | `Eq` | Checks if the values of two operands are equal. If they are, the condition is true. | `name`, `slug`| `filter=eq(name,some-name)` |
 * | `In` | Checks if the values are included in the specified string. If they are, the condition is true. | `id` | `filter=in(id,some-id)` |
 *
 * ### Building breadcrumbs in a storefront
 *
 * In a catalog, you can use a filter to return a list of nodes in a hierarchy structure that a product belongs to. You can use this to build breadcrumbs in your storefront. An example is shown below.
 *
 * `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`
 *
 * - Specify the node Ids in the filter expression.
 * - You can have as many node Ids as you want.
 * - It does not matter what order you specify the node Ids. The nodes are returned in the order they were last updated.
 *
 */
export const getByContextAllHierarchies = (
  options?: Options<GetByContextAllHierarchiesData>,
) => {
  return (options?.client ?? client).get<
    GetByContextAllHierarchiesResponse,
    GetByContextAllHierarchiesError
  >({
    ...options,
    url: "/catalog/hierarchies",
    responseTransformer: GetByContextAllHierarchiesResponseTransformer,
  })
}

/**
 * Get a Hierarchy
 * Returns a hierarchy from the catalog.
 *
 * If you have multiple catalog rules defined, the rule that best matches the shoppers context is used to determine which catalog to retrieve. For information about how catalog rules are matched, see [Resolving Catalog Rules](/docs/api/pxm/catalog/rules).
 *
 */
export const getByContextHierarchy = (
  options: Options<GetByContextHierarchyData>,
) => {
  return (options?.client ?? client).get<
    GetByContextHierarchyResponse,
    GetByContextHierarchyError
  >({
    ...options,
    url: "/catalog/hierarchies/{hierarchy_id}",
    responseTransformer: GetByContextHierarchyResponseTransformer,
  })
}

/**
 * Get a Hierarchy's Nodes
 * Returns all the nodes for the specified hierarchy.
 *
 * If you have multiple catalog rules defined, the rule that best matches the shoppers context is used to determine which catalog is retrieved. For information about how rules are matched, see [Resolving Catalog Rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).
 *
 * In the `bread_crumb` metadata, you can identify the parent nodes that a node is associated with. This is useful if you want to improve how your shoppers search your store, for example. See [Product and Node Associations in Breadcrumb Metadata](https://beta.elasticpath.dev/guides/Catalogs/breadcrumbs).
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For general syntax, see [Filtering](/docs/commerce-cloud/api-overview/filtering).
 *
 * | Operator | Description | Supported Attributes | Example |
 * |:--- |:--- |:--- |:--- |
 * | `Eq` | Checks if the values of two operands are equal. If they are, the condition is true. | `name`, `slug`| `filter=eq(name,some-name)` |
 * | `In` | Checks if the values are included in the specified string. If they are, the condition is true. | `id` | `filter=in(id,some-id)` |
 *
 * ### Building breadcrumbs in a storefront
 *
 * In a catalog, you can use a filter to return a list of nodes in a hierarchy structure that a product belongs to. You can use this to build breadcrumbs in your storefront. An example is shown below.
 *
 * `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`
 *
 * - Specify the node Ids in the filter expression.
 * - You can have as many node Ids as you want.
 * - It does not matter what order you specify the node Ids. The nodes are returned in the order they were last updated.
 *
 */
export const getByContextHierarchyNodes = (
  options: Options<GetByContextHierarchyNodesData>,
) => {
  return (options?.client ?? client).get<
    GetByContextHierarchyNodesResponse,
    GetByContextHierarchyNodesError
  >({
    ...options,
    url: "/catalog/hierarchies/{hierarchy_id}/nodes",
    responseTransformer: GetByContextHierarchyNodesResponseTransformer,
  })
}

/**
 * Get a Hierarchy's Children
 * Returns the parent nodes for the specified hierarchy.
 *
 * ![Parent Nodes](/assets/rootnodes.PNG)
 *
 * If you have multiple catalog rules defined, the rule that best matches the shopperʼs context is used to determine which catalog is retrieved. For information about how rules are matched, see [Resolving Catalog Rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).
 *
 * In the `bread_crumb` metadata, you can identify the parent nodes that a node is associated with. This is useful if you want to improve how your shoppers search your store, for example. See [Product and Node Associations in Breadcrumb Metadata](https://beta.elasticpath.dev/guides/Catalogs/breadcrumbs).
 *
 * ### Filtering
 *
 * The following operators and attributes are available when filtering on this endpoint.
 *
 * | Operator | Description | Supported Attributes | Example |
 * |:--- |:--- |:--- |:--- |
 * | `Eq` | Checks if the values of two operands are equal. If they are, the condition is true. | `name`, `slug`| `filter=eq(name,some-name)` |
 * | `In` | Checks if the values are included in the specified string. If they are, the condition is true. | `id` | `filter=in(id,some-id)` |
 *
 * For more information, see [Filtering](/docs/commerce-cloud/api-overview/filtering).
 *
 * ### Building breadcrumbs in a storefront
 *
 * In a catalog, you can use a filter to return a list of nodes in a hierarchy structure that a product belongs to. You can use this to build breadcrumbs in your storefront. An example is shown below.
 *
 * `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`
 *
 * - Specify the node Ids in the filter expression.
 * - You can have as many node Ids as you want.
 * - It does not matter what order you specify the node Ids. The nodes are returned in the order they were last updated.
 *
 */
export const getByContextHierarchyChildNodes = (
  options: Options<GetByContextHierarchyChildNodesData>,
) => {
  return (options?.client ?? client).get<
    GetByContextHierarchyChildNodesResponse,
    GetByContextHierarchyChildNodesError
  >({
    ...options,
    url: "/catalog/hierarchies/{hierarchy_id}/children",
    responseTransformer: GetByContextHierarchyChildNodesResponseTransformer,
  })
}

/**
 * Get all Nodes
 * Returns all nodes in the catalog.
 *
 * If you have multiple catalog rules defined, the rule that best matches the shoppers context is used to determine which catalog is retrieved. For information about how rules are matched, see [Resolving Catalog Rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).
 *
 * You can see the parent nodes a node is associated with in the `bread_crumb` metadata for each node. This is useful if you want to improve how your shoppers search your store, for example. See [Product and Node Associations in Breadcrumb Metadata](https://beta.elasticpath.dev/guides/Catalogs/breadcrumbs).
 *
 * In a catalog, you can use a filter to return a list of nodes in a hierarchy structure that a product belongs to. You can use this to build breadcrumbs in your storefront. For more information, see [Building breadcrumbs in a storefront](#building-breadcrumbs-in-a-storefront).
 *
 * The response lists the products associated with the nodes. If products are [curated](https://beta.elasticpath.dev/guides/Products/curating-products), they are displayed in `curated_products`. Product curation allows you to promote specific products within each of your hierarchies, enabling you to create unique product collections in your storefront.
 *
 * - You can only curate 20 products or less. You cannot have more than 20 curated products.
 * - If a curated product is removed from a node, the product is also removed from the `curated_products` list.
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For general syntax, see (/docs/commerce-cloud/api-overview/filtering). The following operators and attributes are available.
 *
 * | Operator  | Description | Attributes | Example |
 * | --- | --- | --- | --- |
 * | `Eq` | Checks if the values of two operands are equal. If they are, the condition is true. | `name`, `slug` | `filter=eq(name,some-name)` |
 * | `in`      | Checks if the values are included in the specified string. If they are, the condition is true.
 * | `Id` |  `filter=in(id,9214719b-17fe-4ea7-896c-d61e60fc0d05,e104d541-2c52-47fa-8a9a-c4382480d97c,65daaf68-ff2e-4632-8944-370de835967d)` |
 *
 * ### Building breadcrumbs in a storefront
 *
 * In a catalog, you can use a filter to return a list of nodes in a hierarchy structure that a product belongs to. You can use this to build breadcrumbs in your storefront. An example is shown below.
 *
 * `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`
 *
 * - Specify the node Ids in the filter expression.
 * - You can have as many node Ids as you want.
 * - It does not matter what order you specify the node Ids. The nodes are returned in the order they were last updated.
 *
 */
export const getByContextAllNodes = (
  options?: Options<GetByContextAllNodesData>,
) => {
  return (options?.client ?? client).get<
    GetByContextAllNodesResponse,
    GetByContextAllNodesError
  >({
    ...options,
    url: "/catalog/nodes",
    responseTransformer: GetByContextAllNodesResponseTransformer,
  })
}

/**
 * Get a Node
 * Returns a node from the catalog.
 *
 * If you have multiple catalog rules defined, the rule that best matches the shoppers context is used to determine which catalog is retrieved. For information about how rules are matched, see [Resolving Catalog Rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).
 *
 * You can see the parent nodes a node is associated with in the `bread_crumb` metadata for each node. This is useful if you want to improve how your shoppers search your store, for example. See [Product and Node Associations in Breadcrumb Metadata](https://beta.elasticpath.dev/guides/Catalogs/breadcrumbs).
 *
 * The response lists the products associated with a node. If products are curated, they are displayed in `curated_products`. Product curation allows you to promote specific products within each of your nodes, enabling you to create unique product collections in your storefront.
 *
 * - If you don't provide any `curated_products`, products are listed by their `updated_at` time in descending order, with the most recently updated product first.
 * - If you configure `curated_products` for only a few products, the curated products are displayed first and the other products are displayed in the order of `updated_at` time.
 * - You can only curate 20 products or less. You cannot have more than 20 curated products.
 * - A product that is curated has the `"curated_product": true` attribute displayed.
 * - If a curated product is removed from a node, the product is also removed from the `curated_products` list.
 *
 */
export const getByContextNode = (options: Options<GetByContextNodeData>) => {
  return (options?.client ?? client).get<
    GetByContextNodeResponse,
    GetByContextNodeError
  >({
    ...options,
    url: "/catalog/nodes/{node_id}",
    responseTransformer: GetByContextNodeResponseTransformer,
  })
}

/**
 * Get a Node's Children
 * Returns the child nodes for a node in the catalog.
 *
 * If you have multiple catalog rules defined, the rule that best matches the shoppers context is used to determine which catalog is retrieved. For information about how rules are matched, see [Resolving Catalog Rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).
 *
 * You can see which parent nodes a node is associated with in the `bread_crumb` metadata for each node. This is useful if you want to improve how your shoppers search your store, for example. See [Product and Node Associations in Breadcrumb Metadata](https://beta.elasticpath.dev/guides/Catalogs/breadcrumbs).
 *
 * The response lists the products associated with the nodes. If products are [curated](https://beta.elasticpath.dev/guides/Products/curating-products), they are displayed in `curated_products`. Product curation allows you to promote specific products within each of your hierarchies, enabling you to create unique product collections in your storefront.
 *
 * - If you don't provide any curated_products, products are listed by their updated_at time in descending order, with the most recently updated product first.
 * - If you configure curated_products for only a few products, the curated products are displayed first and the other products are displayed in the order of updated_at time.
 * - You can only curate 20 products or less. You cannot have more than 20 curated products.
 * - A product that is curated has the "curated_product": true attribute displayed.
 * - If a curated product is removed from a node, the product is also removed from the curated_products list.
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For general syntax, see (/docs/commerce-cloud/api-overview/filtering). The following operators and attributes are available.
 *
 * | Operator  | Description | Attributes | Example |
 * | --- | --- | --- | --- |
 * | `Eq` | Checks if the values of two operands are equal. If they are, the condition is true. | `name`, `slug` | `filter=eq(name,some-name)` |
 * | `in`      | Checks if the values are included in the specified string. If they are, the condition is true.
 * | `Id` |  `filter=in(id,9214719b-17fe-4ea7-896c-d61e60fc0d05,e104d541-2c52-47fa-8a9a-c4382480d97c,65daaf68-ff2e-4632-8944-370de835967d)` |
 *
 * ### Building breadcrumbs in a storefront
 *
 * In a catalog, you can use a filter to return a list of nodes in a hierarchy structure that a product belongs to. You can use this to build breadcrumbs in your storefront. An example is shown below.
 *
 * `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`
 *
 * - Specify the node Ids in the filter expression.
 * - You can have as many node Ids as you want.
 * - It does not matter what order you specify the node Ids. The nodes are returned in the order they were last updated.
 *
 */
export const getByContextChildNodes = (
  options: Options<GetByContextChildNodesData>,
) => {
  return (options?.client ?? client).get<
    GetByContextChildNodesResponse,
    GetByContextChildNodesError
  >({
    ...options,
    url: "/catalog/nodes/{node_id}/relationships/children",
    responseTransformer: GetByContextChildNodesResponseTransformer,
  })
}

/**
 * Get all Products
 * Retrieves the list of products from the catalog. Only the products in a live status are retrieved.
 *
 * ### Catalog Rules
 *
 * If you have multiple catalog rules defined, the rule that best matches the shoppers context is used to determine which catalog is retrieved. If no catalog rules are configured, the first catalog found is returned. For information about how rules are matched, see [Resolving Catalog Rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).
 *
 * ### Product and Node Associations
 *
 * You can see the parent nodes a product is associated within the `bread_crumbs` and `bread_crumb_nodes` metadata for each product. For example, this is useful if you want to improve how your shoppers search your store. See [Product and Node Associations in Breadcrumb Metadata](https://elasticpath.dev/guides/Catalogs/breadcrumbs).
 *
 *
 * ### Including Resources
 *
 * Using the `include` parameter, you can retrieve top-level resources, such as, files or main image, bundle component products and product attributes, such as SKU or slug.
 *
 * | Parameter | Required | Description                                                                                                                                                                                                    |
 * |  :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
 * | `component_products` | Optional | The  component product data and key attribute data, such as SKU or slug, to return for component products in a product bundle.  |
 * | `main_image`         | Optional | The main images associated with a product. |
 * | `files`              | Optional | Any files associated with a product. |
 *
 * See [**Including Resources**](https://elasticpath.dev/docs/commerce-cloud/api-overview/includes).
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For general filtering syntax, see [Filtering](/docs/commerce-cloud/api-overview/filtering). The following operators and attributes are available when filtering on this endpoint.
 *
 * | Operator | Description                                                                                     | Supported Attributes                                     | Example |
 * |:---|:------------------------------------------------------------------------------------------------|:---------------------------------------------------------|:--- |
 * | `Eq` | Checks if the values of two operands are equal. If they are, the condition is true. For `product_types` and `tags`, you can only specify one. For example, `filter=eq(product_types,child)`.            | `name`, `sku`, `slug`, `manufacturer_part_num`, `upc_ean`, `product_types`, `tags` | `filter=eq(name,some-name)` |
 * | `In` | Checks if the values are included in the specified string. If they are, the condition is true. For `product_types` and `tags`, you can specify more than one. For example, `filter=in(product_types,child,bundle)`. | `id`, `name`, `sku`, `slug`, `manufacturer_part_num`, `upc_ean`, `product_types`, `tags`          | `filter=in(id,some-id)` |
 *
 * ### Building breadcrumbs in a storefront
 *
 * In a catalog, you can use a filter to return a list of nodes in a hierarchy structure that a product belongs to. You can use this to build breadcrumbs in your storefront. An example is shown below.
 *
 * `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`
 *
 * - Specify the node Ids in the filter expression.
 * - You can have as many node Ids as you want.
 * - It does not matter what order you specify the node Ids. The nodes are returned in the order they were last updated.
 *
 * ### Including Resources
 *
 * Using the `include` parameter, you can retrieve top-level resources, such as, files or main image, bundle component products and product attributes, such as SKU or slug.
 *
 * | Parameter | Required | Description                                                                                                                                                                                                    |
 * |  :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
 * | `component_products` | Optional | The  component product data and key attribute data, such as SKU or slug, to return for component products in a product bundle.  |
 * | `main_image`         | Optional | The main images associated with a product. |
 * | `files`              | Optional | Any files associated with a product. |
 *
 * See [**Including Resources**](https://elasticpath.dev/docs/commerce-cloud/api-overview/includes).
 *
 */
export const getByContextAllProducts = (
  options?: Options<GetByContextAllProductsData>,
) => {
  return (options?.client ?? client).get<
    GetByContextAllProductsResponse,
    GetByContextAllProductsError
  >({
    ...options,
    url: "/catalog/products",
    responseTransformer: GetByContextAllProductsResponseTransformer,
  })
}

/**
 * Get a Product
 * Returns the specified product from the catalog. The product must be in the `live` status.
 *
 * If you have multiple catalog rules defined, the rule that best matches the shoppers context is used to determine which catalog is retrieved. For information about how rules are matched, see [Resolving Catalog Rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).
 *
 * You can see the parent nodes a product is associated with in the `bread_crumbs` and `bread_crumb_nodes` metadata for each product. This is useful if you want to improve how your shoppers search your store, for example. See [Product and Node Associations in Breadcrumb Metadata](https://elasticpath.dev/guides/Catalogs/breadcrumbs).
 *
 * Using the `include` parameter, you can retrieve top-level resources, such as, files or main image, bundle component products and product attributes, such as SKU or slug.
 *
 * | Parameter | Required | Description                                                                                                                                                                                                       |
 * |  :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
 * | `component_products` | Optional | The  component product data and key attribute data, such as SKU or slug, to return for component products in a product bundle.  |
 * | `main_image`         | Optional | The main images associated with a product. |
 * | `files`              | Optional | Any files associated with a product. |
 *
 * See [**Including Resources**](https://elasticpath.dev/docs/commerce-cloud/api-overview/includes).
 *
 */
export const getByContextProduct = (
  options: Options<GetByContextProductData>,
) => {
  return (options?.client ?? client).get<
    GetByContextProductResponse,
    GetByContextProductError
  >({
    ...options,
    url: "/catalog/products/{product_id}",
    responseTransformer: GetByContextProductResponseTransformer,
  })
}

/**
 * Get a Bundle's Component Products
 * With Product Experience Manager, you can [create](/docs/api/pxm/products/create-product) and manage bundles. A bundle is a purchasable product, comprising of one or more products that you want to sell together.
 *
 * You can create multiple components within a bundle. Each component must have at least one or more options. Each option is a product and a quantity.
 *
 * This endpoint returns a list of component product IDs for the specified bundle.
 *
 */
export const getByContextComponentProductIds = (
  options: Options<GetByContextComponentProductIdsData>,
) => {
  return (options?.client ?? client).get<
    GetByContextComponentProductIdsResponse,
    GetByContextComponentProductIdsError
  >({
    ...options,
    url: "/catalog/products/{product_id}/relationships/component_products",
  })
}

/**
 * Get a Parent Product's Child Products
 * For a specified product and catalog release, retrieves a list of child products from a parent product. Any product other than a base product results in a `422 Unprocessable Entity` response. Only the products in a `live` status are retrieved.
 *
 * If you have multiple catalog rules defined, the rule that best matches the shopperʼs context is used to determine which catalog is retrieved. If no catalog rules are configured, the first catalog found is returned. For information about how rules are matched, see [Resolving Catalog Rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).
 *
 * You can see the parent nodes a product is associated within the `breadcrumbs` metadata for each product. For example, this is useful if you want to improve how your shoppers search your store. See [Product and Node Associations in Breadcrumb Metadata](https://elasticpath.dev/guides/Catalogs/breadcrumbs).
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For general filtering syntax, see [Filtering](/docs/commerce-cloud/api-overview/filtering). The following operators and attributes are available when filtering on this endpoint.
 *
 * | Operator | Description                                                                                     | Supported Attributes                                     | Example |
 * |:---|:------------------------------------------------------------------------------------------------|:---------------------------------------------------------|:--- |
 * | `Eq` | Checks if the values of two operands are equal. If they are, the condition is true. For `product_types` and `tags`, you can only specify one. For example, `filter=eq(product_types,child)`.            | `name`, `sku`, `slug`, `manufacturer_part_num`, `upc_ean`, `product_types`, `tags` | `filter=eq(name,some-name)` |
 * | `In` | Checks if the values are included in the specified string. If they are, the condition is true. For `product_types` and `tags`, you can specify more than one. For example, `filter=in(product_types,child,bundle)`. | `id`, `name`, `sku`, `slug`, `manufacturer_part_num`, `upc_ean`, `product_types`, `tags`          | `filter=in(id,some-id)` |
 *
 * ### Building breadcrumbs in a storefront
 *
 * In a catalog, you can use a filter to return a list of nodes in a hierarchy structure that a product belongs to. You can use this to build breadcrumbs in your storefront. An example is shown below.
 *
 * `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`
 *
 * - Specify the node Ids in the filter expression.
 * - You can have as many node Ids as you want.
 * - It does not matter what order you specify the node Ids. The nodes are returned in the order they were last updated.
 *
 * ### Including Resources
 *
 * Using the `include` parameter, you can retrieve top-level resources, such as, files or main image, bundle component products and product attributes, such as SKU or slug.
 *
 * | Parameter | Required | Description                                                                                                                                                                                                    |
 * |  :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
 * | `component_products` | Optional | The  component product data and key attribute data, such as SKU or slug, to return for component products in a product bundle.  |
 * | `main_image`         | Optional | The main images associated with a product. |
 * | `files`              | Optional | Any files associated with a product. |
 *
 * See [**Including Resources**](https://elasticpath.dev/docs/commerce-cloud/api-overview/includes).
 *
 */
export const getByContextChildProducts = (
  options: Options<GetByContextChildProductsData>,
) => {
  return (options?.client ?? client).get<
    GetByContextChildProductsResponse,
    GetByContextChildProductsError
  >({
    ...options,
    url: "/catalog/products/{product_id}/relationships/children",
    responseTransformer: GetByContextChildProductsResponseTransformer,
  })
}

/**
 * Get a Hierarchy's Products
 * Returns the products associated with the specified hierarchy in the catalog. The products must be in the live status.
 *
 * If you have multiple catalog rules defined, the rule that best matches the shoppers context is used to determine which catalog is retrieved. See [Resolving catalog rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).
 *
 * You can see the parent nodes a product is associated with in the `bread_crumbs` and `bread_crumb_nodes` metadata for each product. This is useful if you want to improve how your shoppers search your store, for example. See [Product and Node Associations in Breadcrumb Metadata](https://elasticpath.dev/guides/Catalogs/breadcrumbs).
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For general filtering syntax, see [Filtering](/docs/commerce-cloud/api-overview/filtering). The following operators and attributes are available when filtering on this endpoint.
 *
 * | Operator | Description                                                                                     | Supported Attributes                                     | Example |
 * |:---|:------------------------------------------------------------------------------------------------|:---------------------------------------------------------|:--- |
 * | `Eq` | Checks if the values of two operands are equal. If they are, the condition is true. For `product_types` and `tags`, you can only specify one. For example, `filter=eq(product_types,child)`.            | `name`, `sku`, `slug`, `manufacturer_part_num`, `upc_ean`, `product_types`, `tags` | `filter=eq(name,some-name)` |
 * | `In` | Checks if the values are included in the specified string. If they are, the condition is true. For `product_types` and `tags`, you can specify more than one. For example, `filter=in(product_types,child,bundle)`. | `id`, `name`, `sku`, `slug`, `manufacturer_part_num`, `upc_ean`, `product_types`, `tags`          | `filter=in(id,some-id)` |
 *
 * ### Building breadcrumbs in a storefront
 *
 * In a catalog, you can use a filter to return a list of nodes in a hierarchy structure that a product belongs to. You can use this to build breadcrumbs in your storefront. An example is shown below.
 *
 * `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`
 *
 * - Specify the node Ids in the filter expression.
 * - You can have as many node Ids as you want.
 * - It does not matter what order you specify the node Ids. The nodes are returned in the order they were last updated.
 *
 * ### Including Resources
 *
 * Using the `include` parameter, you can retrieve top-level resources, such as, files or main image, bundle component products and product attributes, such as SKU or slug.
 *
 * | Parameter | Required | Description                                                                                                                                                                                                    |
 * |  :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
 * | `component_products` | Optional | The  component product data and key attribute data, such as SKU or slug, to return for component products in a product bundle.  |
 * | `main_image`         | Optional | The main images associated with a product. |
 * `files`              | Optional | Any files associated with a product. |
 *
 * See [**Including Resources**](https://elasticpath.dev/docs/commerce-cloud/api-overview/includes).
 *
 */
export const getByContextProductsForHierarchy = (
  options: Options<GetByContextProductsForHierarchyData>,
) => {
  return (options?.client ?? client).get<
    GetByContextProductsForHierarchyResponse,
    GetByContextProductsForHierarchyError
  >({
    ...options,
    url: "/catalog/hierarchies/{hierarchy_id}/products",
    responseTransformer: GetByContextProductsForHierarchyResponseTransformer,
  })
}

/**
 * Get a Node's Products
 * Returns the products associated with the specified hierarchy node in the catalog. The products must be in the `live` status. If the products have been curated then the products are returned in the order specified in the `curated_products` attribute. A product that is curated has the `"curated_product": true` attribute displayed.
 *
 * If you have multiple catalog rules defined, the rule that best matches the shoppers context is used to determine which catalog is retrieved. See [Resolving catalog rules](/docs/api/pxm/catalog/rules#resolving-catalog-rules).
 *
 * You can see the parent nodes a product is associated with in the `bread_crumbs` and `bread_crumb_nodes` metadata for each product. This is useful if you want to improve how your shoppers search your store, for example. See [Product and Node Associations in Breadcrumb Metadata](https://elasticpath.dev/guides/Catalogs/breadcrumbs).
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For general filtering syntax, see [Filtering](/docs/commerce-cloud/api-overview/filtering). The following operators and attributes are available when filtering on this endpoint.
 *
 * | Operator | Description                                                                                     | Supported Attributes                                     | Example |
 * |:---|:------------------------------------------------------------------------------------------------|:---------------------------------------------------------|:--- |
 * | `Eq` | Checks if the values of two operands are equal. If they are, the condition is true. For `product_types` and `tags`, you can only specify one. For example, `filter=eq(product_types,child)`.            | `name`, `sku`, `slug`, `manufacturer_part_num`, `upc_ean`, `product_types`, `tags` | `filter=eq(name,some-name)` |
 * | `In` | Checks if the values are included in the specified string. If they are, the condition is true. For `product_types` and `tags`, you can specify more than one. For example, `filter=in(product_types,child,bundle)`. | `id`, `name`, `sku`, `slug`, `manufacturer_part_num`, `upc_ean`, `product_types`, `tags`          | `filter=in(id,some-id)` |
 *
 * ### Building breadcrumbs in a storefront
 *
 * In a catalog, you can use a filter to return a list of nodes in a hierarchy structure that a product belongs to. You can use this to build breadcrumbs in your storefront. An example is shown below.
 *
 * `filter=in(id,c83bfe55-0d87-4302-a86d-ab19e7e323f1,6003d7ef-84f3-49bb-a8bd-4cbfa203dcbb)`
 *
 * - Specify the node Ids in the filter expression.
 * - You can have as many node Ids as you want.
 * - It does not matter what order you specify the node Ids. The nodes are returned in the order they were last updated.
 *
 * ### Including Resources
 *
 * Using the `include` parameter, you can retrieve top-level resources, such as, files or main image, bundle component products and product attributes, such as SKU or slug.
 *
 * | Parameter | Required | Description                                                                                                                                                                                                    |
 * |  :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
 * | `component_products` | Optional | The  component product data and key attribute data, such as SKU or slug, to return for component products in a product bundle.  |
 * | `main_image`         | Optional | The main images associated with a product. |
 * | `files`              | Optional | Any files associated with a product. |
 *
 * See [**Including Resources**](https://elasticpath.dev/docs/commerce-cloud/api-overview/includes).
 *
 */
export const getByContextProductsForNode = (
  options: Options<GetByContextProductsForNodeData>,
) => {
  return (options?.client ?? client).get<
    GetByContextProductsForNodeResponse,
    GetByContextProductsForNodeError
  >({
    ...options,
    url: "/catalog/nodes/{node_id}/relationships/products",
    responseTransformer: GetByContextProductsForNodeResponseTransformer,
  })
}

/**
 * Configure a Shopper Bundle
 * Once you have configured your product bundles, you can display them in your storefront in your published catalog. Depending on how you have configured the minimum and maximum values for the product options in your components, you can allow your shoppers to choose which products they want to select. For example, you can enable a shopper to select 1 or more product options from a list of 10, giving your shoppers greater flexibility when selecting products in your store front.
 *
 * - Products must be in a `live` status.
 * - If you have not specified any minimum or maximum values for the product options in your components, your shoppers can select any combination of product options.
 *
 * If you have configured minimum and maximum values using [Create a Bundle](/docs/api/pxm/products/create-product), this becomes part of the `bundle_configuration`. You can check how your bundle is configured using [Get a product in a catalog release](/docs/api/pxm/catalog/get-product) in `bundle_configuration` under `meta`. The `bundle_configuration` forms the body of the request.
 *
 * The response updates the `bundle_configuration` with the product options the shopper selects. The `meta` data is updated with the `meta` data of the selected product options. In your storefront, you could display this as a summary of the product options a shopper has selected.
 *
 * ### Including Resources
 *
 * Using the `include` parameter, you can retrieve top-level resources, such as, files or main image, bundle component products and product attributes, such as SKU or slug.
 *
 * | Parameter | Required | Description                                                                                                                                                                                                    |
 * |  :---------------------|:---------|:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
 * | `component_products` | Optional | The  component product data and key attribute data, such as SKU or slug, to return for component products in a product bundle.  |
 * | `main_image`         | Optional | The main images associated with a product. |
 * | `files`              | Optional | Any files associated with a product. |
 *
 * See [**Including Resources**](https://elasticpath.dev/docs/commerce-cloud/api-overview/includes).
 *
 */
export const configureByContextProduct = (
  options: Options<ConfigureByContextProductData>,
) => {
  return (options?.client ?? client).post<
    ConfigureByContextProductResponse,
    ConfigureByContextProductError
  >({
    ...options,
    url: "/catalog/products/{product_id}/configure",
    responseTransformer: ConfigureByContextProductResponseTransformer,
  })
}
