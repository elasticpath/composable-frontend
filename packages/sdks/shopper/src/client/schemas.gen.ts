// This file is auto-generated by @hey-api/openapi-ts

export const $amount = {
  type: "object",
  description:
    "The three-letter ISO code for the currency associated with this price.",
  title: "Amount",
  properties: {
    amount: {
      description:
        "The price in the lowest denomination for the specified currency. This is a product's list price.",
      type: "integer",
      example: 100,
      format: "int64",
      "x-omitempty": false,
      "x-go-name": "Amount",
    },
    includes_tax: {
      description: "Whether this price includes tax.",
      type: "boolean",
      example: false,
      default: false,
      "x-go-name": "IncludesTax",
    },
  },
  "x-go-name": "PriceAmount",
} as const

export const $prioritized_pricebooks = {
  description:
    "If you want multiple price books for different scenarios, such as seasonal sales, business versus retail pricing, and reward programs, when creating a catalog, you can specify up to five price books. You must configure a priority for your price books. Product prices are displayed in the catalog according to the priority of the price books.",
  type: "array",
  maxItems: 5,
  items: {
    type: "object",
    properties: {
      id: {
        description: "A unique identifier of a price book.",
        type: "string",
        format: "uuid",
      },
      priority: {
        description:
          "Priority is a number and the price book with the highest number has the highest priority.",
        type: "integer",
      },
    },
    required: ["priority", "id"],
    "x-go-name": "PrioritizedPricebook",
  },
} as const

export const $catalog = {
  type: "object",
  title: "Catalog",
  description: "Creates a catalog with the following attributes.",
  properties: {
    id: {
      type: "string",
      description: "A unique identifier of a catalog.",
      example: "8dbb35b2-ef04-477e-974d-e5f3abe6faae",
    },
    attributes: {
      type: "object",
      properties: {
        name: {
          description: "The name of a catalog.",
          type: "string",
          example: "catalog-123",
        },
        description: {
          description:
            "A brief description of the catalog, such as the purpose of the catalog.",
          type: "string",
          example: "Catalog for Store 123",
          default: "",
        },
        hierarchy_ids: {
          description:
            "The unique identifiers of the hierarchies associated with a catalog.",
          type: "array",
          items: {
            type: "string",
          },
        },
        pricebook_id: {
          description:
            "The unique identifier of a price book associated with a catalog. If no price book is selected, the catalog is displayed without prices.",
          type: "string",
        },
        pricebook_ids: {
          $ref: "#/components/schemas/prioritized-pricebooks",
        },
        locales: {
          description:
            "Product Experience Manager supports localization of products and hierarchies. If you store supports multiple languages, you can localize product names and descriptions.",
          type: "object",
          additionalProperties: {
            description:
              "A [three-letter language code](https://www.iso.org/iso-639-language-code) that represents the name of language you have used.",
            type: "object",
            additionalProperties: {
              description:
                "A [three-letter language code](https://www.iso.org/iso-639-language-code) that represents the name of language you have used.",
              type: "string",
            },
          },
        },
        created_at: {
          description: "The date and time a catalog is created.",
          type: "string",
          example: "2020-09-22T09:00:00",
          format: "date-time",
        },
        updated_at: {
          description: "The date and time a catalog was updated.",
          type: "string",
          example: "2020-09-22T09:00:00",
          format: "date-time",
        },
        owner: {
          description:
            "The owner of this resource, can be either `organization` or `store`.",
          type: "string",
          enum: ["store", "organization"],
          "x-go-name": "Owner",
          default: "store",
          nullable: true,
        },
      },
      required: ["name", "hierarchy_ids", "created_at", "updated_at"],
    },
    relationships: {
      description:
        "Relationships are established between different catalog entities. For example, a catalog rule and a price book are related to a catalog, as both are associated with it.",
      type: "object",
      title: "CatalogRelationships",
      properties: {
        rules: {
          description: "The catalog rules related to a catalog.",
          type: "object",
          properties: {
            links: {
              $ref: "#/components/schemas/related-link",
            },
          },
        },
        releases: {
          description:
            "When a catalog is published, a catalog release is created. This is a URL to all catalog published releases available for this catalog.",
          type: "object",
          properties: {
            links: {
              $ref: "#/components/schemas/related-link",
            },
            meta: {
              type: "object",
              properties: {
                count: {
                  description: "The number releases available for a catalog.",
                  type: "integer",
                },
              },
            },
          },
        },
      },
    },
    type: {
      type: "string",
      example: "catalog",
      enum: ["catalog"],
    },
  },
  required: ["id", "type", "attributes"],
} as const

export const $catalog_create_data = {
  type: "object",
  title: "CatalogCreateData",
  description: "Creates a catalog with the following attributes.",
  properties: {
    data: {
      type: "object",
      properties: {
        attributes: {
          type: "object",
          properties: {
            name: {
              description: "The name of the catalog.",
              type: "string",
              minLength: 1,
              example: "catalog-123",
            },
            description: {
              description: "A brief description of the catalog.",
              type: "string",
              example: "Catalog for Store 123",
              nullable: true,
            },
            hierarchy_ids: {
              description:
                "The unique identifiers of the hierarchies to associate with a catalog.",
              type: "array",
              items: {
                type: "string",
              },
            },
            pricebook_id: {
              description: `The unique identifier of the price book to associate with this catalog. You can specify either a \`pricebook_id\` or \`pricebook_ids\` but not both. If you specify both a \`pricebook_id\` and \`pricebook_ids\`, a \`422 Unprocessable Entity\` error is displayed.
`,
              type: "string",
            },
            pricebook_ids: {
              $ref: "#/components/schemas/prioritized-pricebooks",
            },
            locales: {
              description:
                "Product Experience Manager supports localization of products and hierarchies. If you store supports multiple languages, you can localize product names and descriptions.",
              type: "object",
              additionalProperties: {
                description:
                  "A [three-letter language code](https://www.iso.org/iso-639-language-code) that represents the name of language you have used.",
                type: "object",
                additionalProperties: {
                  description:
                    "A [three-letter language code](https://www.iso.org/iso-639-language-code) that represents the name of language you have used.",
                  type: "string",
                },
              },
            },
          },
          required: ["name", "hierarchy_ids"],
        },
        type: {
          description:
            "Represents the type of object being returned. Always `Catalog`.",
          type: "string",
          example: "catalog",
          enum: ["catalog"],
        },
      },
      required: ["type", "attributes"],
    },
  },
  required: ["data"],
} as const

export const $catalog_data = {
  type: "object",
  title: "CatalogData",
  description: "Container for a single catalog.",
  properties: {
    data: {
      $ref: "#/components/schemas/catalog",
    },
    links: {
      $ref: "#/components/schemas/links",
    },
  },
  required: ["data"],
} as const

export const $catalog_list_data = {
  type: "object",
  title: "CatalogListData",
  description: "Container for a list of catalogs.",
  properties: {
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/catalog",
      },
    },
    links: {
      $ref: "#/components/schemas/links",
    },
  },
  required: ["data"],
} as const

export const $catalog_update_data = {
  type: "object",
  title: "CatalogUpdateData",
  description:
    "A catalog combines price books, product lists, and hierarchies.",
  properties: {
    data: {
      type: "object",
      properties: {
        attributes: {
          type: "object",
          properties: {
            name: {
              description: "The name of the catalog.",
              type: "string",
              minLength: 1,
              example: "catalog-123",
              nullable: true,
            },
            description: {
              description: "A brief description of the catalog.",
              type: "string",
              example: "Catalog for Store 123",
              nullable: true,
            },
            hierarchy_ids: {
              description:
                "The unique identifiers of the hierarchies to associate with a catalog.",
              type: "array",
              items: {
                type: "string",
              },
              nullable: true,
            },
            pricebook_id: {
              description:
                "The unique identifier of a price book to associate with a catalog. You can specify a `pricebook_id` or a `pricebook_ids` but not both. If you specify both, a `422 unprocessable entity` error is displayed.",
              type: "string",
              nullable: true,
            },
            pricebook_ids: {
              $ref: "#/components/schemas/prioritized-pricebooks",
            },
            locales: {
              description:
                "Product Experience Manager supports localization of products and hierarchies. If you store supports multiple languages, you can localize product names and descriptions.",
              type: "object",
              additionalProperties: {
                description:
                  "A [three-letter language code](https://www.loc.gov/standards/iso639-2/) that represents the name of language you have used.",
                type: "object",
                additionalProperties: {
                  description:
                    "A [three-letter language code](https://www.loc.gov/standards/iso639-2/) that represents the name of language you have used.",
                  type: "string",
                },
              },
            },
          },
        },
        id: {
          description: "The unique identifier of the catalog to be updated.",
          type: "string",
          "x-go-name": "ID",
          example: "8dbb35b2-ef04-477e-974d-e5f3abe6faae",
        },
        type: {
          description:
            "This represents the type of object being returned. Always `catalog`.",
          type: "string",
          example: "catalog",
          enum: ["catalog"],
        },
      },
      required: ["type", "id", "attributes"],
    },
  },
  required: ["data"],
} as const

export const $component_product = {
  type: "object",
  title: "Component Product",
  description: "The unique identifier of the component, for example, `games`.",
  properties: {
    name: {
      description:
        "The component name is the name that is displayed in your storefront.",
      type: "string",
      "x-go-name": "Name",
    },
    min: {
      description:
        "The minimum number of product options a shopper can select from this component.",
      type: "integer",
      "x-go-name": "Min",
      nullable: true,
    },
    max: {
      description:
        "The maximum number of product options a shopper can select from this component.",
      type: "integer",
      "x-go-name": "Max",
      nullable: true,
    },
    sort_order: {
      description:
        "The sort order of the components. The `create a bundle` and `update a bundle` endpoints do not sort the components. You can use the `sort_order` attribute when programming your storefront to display the components in the order that you want.",
      type: "integer",
      "x-go-name": "Sort Order",
      nullable: true,
    },
    options: {
      description:
        "The product options included in a component. This can be the ID of another bundle.",
      type: "array",
      items: {
        $ref: "#/components/schemas/component-product-option",
      },
      "x-go-name": "Options",
    },
  },
} as const

export const $component_product_option = {
  type: "object",
  title: "Component Product Option",
  description:
    "The product options included in a component. This can be the ID of another bundle.",
  properties: {
    id: {
      description:
        "A unique identifier of the product you want to add to a component.",
      type: "string",
      format: "uuid",
      "x-go-name": "ID",
    },
    type: {
      description:
        "This represents the type of object being returned. Always `product`.",
      type: "string",
      "x-go-name": "Type",
      default: "product",
      example: "product",
      enum: ["product"],
    },
    quantity: {
      description:
        "The number of this product option that a shopper must purchase.",
      type: "integer",
      example: 2,
      "x-go-name": "Quantity",
    },
    sort_order: {
      description:
        "The sort order of the options. The `create a bundle` and `update a bundle` endpoints do not sort the options. You can use the `sort_order` attribute when programming your storefront to display the options in the order that you want.",
      type: "integer",
      example: 15,
      "x-go-name": "Sort Order",
      nullable: true,
    },
    default: {
      description:
        "The boolean indicates whether the current option is a default option for the component.",
      type: "boolean",
      example: true,
      default: false,
      "x-go-name": "Default",
      nullable: true,
    },
  },
} as const

export const $components = {
  type: "object",
  title: "Components",
  description:
    "A bundle is a purchasable product, comprising of one or more products that you want to sell together. You can create multiple components within a bundle. Each component must have at least one or more options. Each option is a product and a quantity.",
  additionalProperties: {
    $ref: "#/components/schemas/component-product",
  },
} as const

export const $custom_input_validation_rule_options = {
  type: "object",
  description: "The length of the custom input text field.",
  "x-go-name": "CustomInputValidationRuleOptions",
  properties: {
    max_length: {
      description:
        "The number of characters the custom text field can be. You can specify a maximum length up to 255 characters, as the limit is 255 characters.",
      type: "integer",
      "x-go-name": "MaxLength",
      example: 255,
    },
  },
} as const

export const $custom_input_validation_rule = {
  type: "object",
  title: "Custom Input Validation Rule",
  description: "The validation rules for the custom text.",
  "x-go-name": "CustomInputValidationRule",
  properties: {
    type: {
      description:
        "This represents the type of object being returned. Must be `string`.",
      type: "string",
      "x-go-name": "Type",
      default: "string",
      example: "string",
      enum: ["string"],
    },
    options: {
      $ref: "#/components/schemas/custom-input-validation-rule-options",
    },
  },
} as const

export const $custom_input = {
  type: "object",
  title: "Custom Input",
  description:
    "The name of the custom input. You can rename the input to something more representative of the input that shoppers are adding, for example, `message` or `front`.",
  properties: {
    name: {
      description:
        "The name for the custom text field that is displayed in your storefront.",
      type: "string",
      "x-go-name": "Name",
      example: "Message",
    },
    validation_rules: {
      description: "The validation rules for the custom text.",
      type: "array",
      "x-go-name": "ValidationRules",
      items: {
        $ref: "#/components/schemas/custom-input-validation-rule",
      },
    },
    required: {
      description:
        "This is `true` or `false` depending on whether the custom text is required.",
      type: "boolean",
      "x-go-name": "Required",
      example: false,
      default: false,
      nullable: true,
    },
  },
} as const

export const $custom_inputs = {
  type: "object",
  title: "Custom Inputs",
  description: `You can allow your shoppers to add custom text to a product when adding product items to their carts. This is useful, for example, if you have a product like a T-shirt that can be personalized or you sell greetings cards that can be printed with your shoppers personalized messages.  You can do this using the \`custom_inputs\` attribute.

 - You can rename input to something more representative of the input that shoppers are adding, for example, \`message\` or \`front\`.
 - \`name\` is the name that is displayed in your storefront.
 - You can add validation rules. For example, the input field must be a string and/or up to 255 characters in length. The limit is 255 characters.
`,
  additionalProperties: {
    $ref: "#/components/schemas/custom-input",
  },
} as const

export const $currencies = {
  type: "object",
  description:
    "A collection of one or more currencies objects that consists of the [**three-letter ISO code**](https://www.iso.org/iso-3166-country-codes.html) of the currencies associated with this price and the amount. This is the product's price.",
  title: "Currencies",
  additionalProperties: {
    $ref: "#/components/schemas/amount",
  },
} as const

export const $shopper_attributes = {
  type: "object",
  description:
    "The optional price extension with values in string format, viewable by shoppers.",
  title: "ShopperAttributes",
  additionalProperties: {
    type: "string",
  },
} as const

export const $diff_list_data = {
  type: "object",
  title: "DiffListData",
  description: "A list of differences between two releases.",
  properties: {
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/product-diff",
      },
    },
    links: {
      $ref: "#/components/schemas/links",
    },
  },
} as const

export const $display_price = {
  type: "object",
  description: "A price formatted for display.",
  "x-omitempty": true,
  properties: {
    with_tax: {
      $ref: "#/components/schemas/formatted-price",
    },
    without_tax: {
      $ref: "#/components/schemas/formatted-price",
    },
  },
} as const

export const $error = {
  type: "object",
  title: "APIError",
  description: "APIError is a json-api style part of an error response.",
  properties: {
    detail: {
      type: "string",
      example: "not processable",
      "x-go-name": "Detail",
    },
    status: {
      type: "string",
      example: "422",
      "x-go-name": "Status",
    },
    title: {
      type: "string",
      example: "There was a problem processing your request.",
      "x-go-name": "Title",
    },
  },
  "x-go-name": "APIError",
} as const

export const $error_response = {
  type: "object",
  title: "ErrorResponse",
  description: "ErrorResponse is a json-api style Error response.",
  properties: {
    errors: {
      type: "array",
      items: {
        $ref: "#/components/schemas/error",
      },
      "x-go-name": "Errors",
    },
  },
  "x-go-name": "ErrorResponse",
} as const

export const $extension = {
  type: "object",
  title: "Extension",
  description: "The name of the product template.",
  additionalProperties: {
    description: "The product attributes available for this template.",
    type: "object",
  },
} as const

export const $extensions = {
  type: "object",
  title: "Extensions",
  description:
    "With extension templates, you can attach a specific set of custom fields to your products in Product Experience Manager. For example, a **Book** template might contain the attributes, such as **ISBN**, **Author**, **Number of pages**, **Year Published**, or **Condition (New/Used)**.",
  additionalProperties: {
    $ref: "#/components/schemas/extension",
  },
} as const

export const $file_reference = {
  description:
    "In Product Experience Manager, products can have associated rich media assets, such as product images or a file containing additional product details.",
  type: "object",
  properties: {
    type: {
      description:
        "This represents the type of object being returned. Always `file`.",
      type: "string",
      example: "file",
      enum: ["file"],
    },
    id: {
      description: "A unique identifier for a file.",
      type: "string",
      format: "uuid",
    },
    created_at: {
      description: "The date and time a file is created.",
      type: "string",
      format: "date-time",
      example: "1970-01-01T00:00:00.000",
      "x-go-name": "CreatedAt",
    },
  },
  "x-go-name": "FileRelationship",
} as const

export const $files_relationship = {
  description:
    "In Product Experience Manager, products can have associated rich media assets, such as product images or a file containing additional product details.",
  type: "object",
  properties: {
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/file-reference",
      },
    },
  },
  "x-omitempty": true,
} as const

export const $component_products_relationship = {
  description:
    "A bundle is a purchasable product, comprising of one or more products that you want to sell together. You can create multiple components within a bundle. Each component must have at least one or more options. Each option is a product and a quantity. You can link to the products that make up your bundle components.",
  type: "object",
  properties: {
    data: {
      $ref: "#/components/schemas/product-references",
    },
    links: {
      $ref: "#/components/schemas/self-link",
    },
  },
  "x-omitempty": true,
} as const

export const $formatted_price = {
  type: "object",
  title: "FormattedPrice",
  "x-omitempty": true,
  description: "A price formatted for display.",
  properties: {
    amount: {
      description:
        "The price in the lowest denomination for the specified currency. This is a product's list price.",
      type: "integer",
      "x-omitempty": false,
      example: "47500",
    },
    currency: {
      description:
        "The three-letter ISO code of the currencies associated with this price and the amount.",
      type: "string",
      example: "USD",
    },
    formatted: {
      description: "The format of the price for display.",
      type: "string",
      example: "$475.00",
    },
  },
} as const

export const $hierarchy = {
  type: "object",
  title: "Hierarchy",
  description:
    "A category hierarchy in a catalog. Hierarchies can have parent nodes and child nodes, as well as a list of attached products.",
  properties: {
    attributes: {
      $ref: "#/components/schemas/hierarchy-attributes",
    },
    id: {
      description: "A unique identifier of a hierarchy.",
      type: "string",
      example: "e871df93-c769-49a9-9394-a6fd555b8e8a",
      "x-go-name": "ID",
    },
    relationships: {
      $ref: "#/components/schemas/hierarchy-relationships",
    },
    type: {
      description:
        "This represents the type of object being returned. Always `hierarchy`.",
      type: "string",
      example: "hierarchy",
      "x-go-name": "Type",
    },
    meta: {
      $ref: "#/components/schemas/hierarchy-meta",
    },
  },
  "x-go-name": "Hierarchy",
} as const

export const $hierarchy_meta = {
  type: "object",
  title: "HierarchyMeta",
  description: "A hierarchy's metadata.",
  properties: {
    language: {
      description:
        "Product Experience Manager supports localization of hierarchies. If your store supports multiple languages, you can localize hierarchy names and descriptions. This is [**three-letter language code**](https://www.iso.org/iso-639-language-code) that represents the name of the language you have used.",
      type: "string",
      example: "en-GB",
    },
  },
  "x-go-name": "HierarchyMeta",
  "x-omitempty": true,
} as const

export const $hierarchy_attributes = {
  type: "object",
  title: "HierarchyAttributes",
  description: "Resource attributes of a catalog hierarchy.",
  properties: {
    created_at: {
      description: "The date and time a hierarchy is created.",
      type: "string",
      format: "date-time",
      example: "1970-01-01T00:00:00.000",
      "x-go-name": "CreatedAt",
    },
    published_at: {
      description: "The date and time a hierarchy is published in a catalog.",
      type: "string",
      format: "date-time",
      example: "1970-01-01T00:00:00.000",
      nullable: true,
    },
    description: {
      description: "A description of a hierarchy.",
      type: "string",
      example: "Formal dresswear",
      "x-go-name": "Description",
    },
    name: {
      description: "The name of a hierarchy.",
      type: "string",
      example: "Formal dresswear",
      "x-go-name": "Name",
    },
    slug: {
      description: "A unique slug for a hierarchy.",
      type: "string",
      example: "formal",
      "x-go-name": "Slug",
    },
    updated_at: {
      description: "The date and time a hierarchy was updated.",
      type: "string",
      format: "date-time",
      example: "1970-01-01T00:00:00.000",
      "x-go-name": "UpdatedAt",
    },
  },
  "x-go-name": "HierarchyAttributes",
} as const

export const $hierarchy_data = {
  type: "object",
  title: "HierarchyData",
  description: "Container for hierarchies.",
  properties: {
    data: {
      $ref: "#/components/schemas/hierarchy",
    },
    links: {
      $ref: "#/components/schemas/links",
    },
  },
} as const

export const $hierarchy_list_data = {
  type: "object",
  title: "HierarchyListData",
  description: "Container for a list of hierarchies.",
  properties: {
    meta: {
      $ref: "#/components/schemas/page-meta",
    },
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/hierarchy",
      },
    },
    links: {
      $ref: "#/components/schemas/links",
    },
  },
} as const

export const $hierarchy_relationships = {
  type: "object",
  title: "HierarchyRelationships",
  description: "Relationships to child nodes, and products.",
  properties: {
    products: {
      description: "A URL to all the products associated with a hierarchy.",
      type: "object",
      properties: {
        links: {
          $ref: "#/components/schemas/related-link",
        },
      },
    },
    children: {
      description:
        "A URL to all the child products associated with a hierarchy.",
      type: "object",
      properties: {
        links: {
          $ref: "#/components/schemas/related-link",
        },
      },
      required: ["links"],
    },
    nodes: {
      description: "A URL to all the nodes associated with a hierarchy.",
      type: "object",
      properties: {
        links: {
          $ref: "#/components/schemas/related-link",
        },
      },
      required: ["links"],
    },
  },
  "x-go-name": "HierarchyRelationships",
} as const

export const $links = {
  description: "Links allow you to move between requests.",
  type: "object",
  properties: {
    self: {
      description:
        "Single entities use a `self` parameter with a link the specific resource.",
      type: "string",
      format: "uri",
      nullable: true,
    },
    first: {
      description: "Always the first page.",
      type: "string",
      format: "uri",
      nullable: true,
    },
    last: {
      description: "This is `null` if there is only one page.",
      type: "string",
      format: "uri",
      nullable: true,
    },
    prev: {
      description: "This is `null` if there is only one page.",
      type: "string",
      format: "uri",
      nullable: true,
    },
    next: {
      description: "This is `null` if there is only one page.",
      type: "string",
      format: "uri",
      nullable: true,
    },
  },
} as const

export const $included = {
  description:
    "Included is an array of resources that are included in the response.",
  type: "object",
  properties: {
    main_images: {
      description: "The main images associated with a product.",
      type: "array",
      items: {
        $ref: "#/components/schemas/file",
      },
    },
    component_products: {
      description: "The component products associated with a product.",
      type: "array",
      items: {
        $ref: "#/components/schemas/product",
      },
    },
    files: {
      description: "The files associated with a product.",
      type: "array",
      items: {
        $ref: "#/components/schemas/file",
      },
    },
  },
} as const

export const $main_image_relationship = {
  type: "object",
  description:
    "In Product Experience Manager, products can also have associated product images.",
  properties: {
    data: {
      description: "The images associated with a product.",
      type: "object",
      "x-nullable": "true",
      properties: {
        type: {
          description:
            "This represents the type of object being returned. Always `main_image`.",
          type: "string",
          example: "main_image",
          enum: ["main_image"],
        },
        id: {
          description: "A unique identifier for an image.",
          type: "string",
          format: "uuid",
        },
      },
    },
  },
  "x-omitempty": true,
} as const

export const $node = {
  type: "object",
  title: "Node",
  description:
    "A category node in a catalog. Nodes can have child nodes, as well as a list of attached products.",
  properties: {
    attributes: {
      $ref: "#/components/schemas/node-attributes",
    },
    id: {
      description: "The unique identifier of a node.",
      type: "string",
      example: "e871df93-c769-49a9-9394-a6fd555b8e8a",
      "x-go-name": "ID",
    },
    relationships: {
      $ref: "#/components/schemas/node-relationships",
    },
    type: {
      description:
        "This represents the type of object being returned. Always `node`.",
      type: "string",
      example: "node",
      "x-go-name": "Type",
    },
    meta: {
      $ref: "#/components/schemas/node-meta",
    },
  },
  "x-go-name": "Node",
} as const

export const $node_attributes = {
  type: "object",
  title: "NodeAttributes",
  description: "Resource attributes of a catalog node.",
  properties: {
    created_at: {
      description: "The date and time a node was created.",
      type: "string",
      format: "date-time",
      example: "1970-01-01T00:00:00.000",
      "x-go-name": "CreatedAt",
    },
    published_at: {
      description: "The date and time a node was published in a catalog.",
      type: "string",
      format: "date-time",
      example: "1970-01-01T00:00:00.000",
      nullable: true,
    },
    description: {
      type: "string",
      description: "A description of a node.",
      example: "Formal dresswear",
      "x-go-name": "Description",
    },
    label: {
      type: "string",
      example: "category",
      "x-go-name": "Label",
    },
    name: {
      description:
        "The name of a node. Names must be unique among sibling nodes in a hierarchy. Otherwise, a name can be non-unique within the hierarchy and across multiple hierarchies.",
      type: "string",
      example: "Formal dresswear",
      "x-go-name": "Name",
    },
    slug: {
      description:
        "A slug for the node. Slugs must be unique among sibling nodes in the hierarchy. Otherwise, a slug can be non-unique within the hierarchy and across multiple hierarchies.",
      type: "string",
      example: "formal",
      "x-go-name": "Slug",
    },
    curated_products: {
      description:
        "A list of curated products for a node. You can curate your products in your nodes product lists. Product curation allows you to promote specific products within each node in a hierarchy, enabling you to create unique product collections in your storefront.",
      type: "array",
      items: {
        type: "string",
        example: "8dbb35b2-ef04-477e-974d-e5f3abe6faae",
      },
      "x-omitempty": true,
    },
    status: {
      type: "string",
      example: "live",
      "x-go-name": "Status",
    },
    updated_at: {
      description: "The date and time a node was updated.",
      type: "string",
      format: "date-time",
      example: "1970-01-01T00:00:00.000",
      "x-go-name": "UpdatedAt",
    },
  },
  "x-go-name": "NodeAttributes",
} as const

export const $node_create_data = {
  type: "object",
  title: "NodeCreateData",
  description: "Container for nodes.",
  properties: {
    data: {
      type: "object",
      title: "NodeCreateArgs",
      description:
        "A node in a catalog (e.g. a category node). Nodes can have child nodes, as well as a list of attached products",
      properties: {
        attributes: {
          type: "object",
          title: "NodeCreateAttributes",
          description: "Resource attributes of a catalog node.",
          properties: {
            description: {
              type: "string",
              example: "Formal dresswear",
              "x-go-name": "Description",
            },
            hierarchy_id: {
              type: "string",
              description: "hierarchy id of the node",
              example: "ddd401ac-db06-4d9e-af60-cf5206abb9bc",
            },
            label: {
              type: "string",
              example: "category",
              "x-go-name": "Label",
            },
            name: {
              type: "string",
              example: "Formal dresswear",
              "x-go-name": "Name",
            },
            slug: {
              type: "string",
              example: "formal",
              "x-go-name": "Slug",
            },
            status: {
              type: "string",
              example: "Live",
              "x-go-name": "Status",
            },
            locales: {
              type: "object",
              additionalProperties: {
                type: "object",
                additionalProperties: {
                  type: "string",
                },
              },
            },
          },
          required: ["name"],
        },
        relationships: {
          $ref: "#/components/schemas/node-relationships",
        },
        id: {
          type: "string",
          example: "8fccaa19-dba9-4621-8d11-31a222a68c7c",
          "x-go-name": "ID",
        },
        type: {
          type: "string",
          example: "node",
          "x-go-name": "Type",
        },
      },
      required: ["type", "attributes"],
    },
    links: {
      $ref: "#/components/schemas/links",
    },
  },
  required: ["data"],
} as const

export const $node_data = {
  type: "object",
  title: "NodeData",
  description: "Container for nodes.",
  properties: {
    data: {
      $ref: "#/components/schemas/node",
    },
    links: {
      $ref: "#/components/schemas/links",
    },
  },
} as const

export const $node_list_data = {
  type: "object",
  title: "NodeListData",
  description: "Container for a list of nodes.",
  properties: {
    meta: {
      $ref: "#/components/schemas/page-meta",
    },
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/node",
      },
    },
    links: {
      $ref: "#/components/schemas/links",
    },
  },
} as const

export const $node_meta = {
  type: "object",
  title: "NodeMeta",
  description: "A node's metadata.",
  properties: {
    language: {
      description: "The node details localized in the supported languages.",
      type: "string",
      example: "en-GB",
    },
    bread_crumb: {
      description:
        "Helps you understand the association of products with nodes. It explains how products are associated with parent nodes and the relationship among the array of nodes. This is useful if you want to improve how your shoppers search within you store.",
      type: "array",
      items: {
        type: "string",
        example: "8dbb35b2-ef04-477e-974d-e5f3abe6faae",
      },
      "x-omitempty": true,
    },
  },
  "x-go-name": "NodeMeta",
  "x-omitempty": true,
} as const

export const $node_reference = {
  type: "object",
  title: "NodeReference",
  description: "Minimum set of information to identify a catalog node.",
  properties: {
    id: {
      description: "The unique identifier of a hierarchy.",
      type: "string",
      example: "65477ce0-fcb8-436b-a120-3d57979421dd",
      "x-go-name": "ID",
    },
    label: {
      description: "A label for a hierarchy.",
      type: "string",
      example: "category",
      "x-go-name": "Label",
    },
    name: {
      description: "The name of a hierarchy.",
      type: "string",
      example: "Formal dresswear",
      "x-go-name": "Name",
    },
  },
  "x-go-name": "NodeReference",
} as const

export const $node_relationships = {
  type: "object",
  title: "NodeRelationships",
  description: "Relationships to parent and child nodes, and products.",
  properties: {
    products: {
      description: "A URL to all products associated with a node.",
      type: "object",
      properties: {
        data: {
          type: "array",
          "x-omitempty": true,
          items: {
            $ref: "#/components/schemas/product-reference",
          },
        },
        links: {
          $ref: "#/components/schemas/related-link",
        },
      },
    },
    children: {
      description: "A URL to all child nodes associated with a node.",
      type: "object",
      properties: {
        links: {
          $ref: "#/components/schemas/related-link",
        },
      },
      required: ["links"],
    },
    parent: {
      description: "A URL to all parent nodes associated with a node.",
      type: "object",
      properties: {
        data: {
          type: "object",
          properties: {
            type: {
              type: "string",
              example: "node",
              enum: ["node"],
            },
            id: {
              type: "string",
              example: "8fccaa19-dba9-4621-8d11-31a222a68c7c",
              "x-go-name": "ID",
            },
          },
          required: ["id", "type"],
        },
        links: {
          $ref: "#/components/schemas/related-link",
        },
      },
      required: ["data"],
    },
    hierarchy: {
      description: "A URL to the hierarchies associated with a node.",
      type: "object",
      properties: {
        data: {
          type: "object",
          properties: {
            type: {
              type: "string",
              example: "hierarchy",
              enum: ["hierarchy"],
            },
            id: {
              type: "string",
              example: "8fccaa19-dba9-4621-8d11-31a222a68c7c",
              "x-go-name": "ID",
            },
          },
          required: ["id", "type"],
        },
        links: {
          $ref: "#/components/schemas/related-link",
        },
      },
      required: ["data"],
    },
  },
  "x-go-name": "NodeRelationships",
} as const

export const $node_relationships_data = {
  type: "object",
  title: "NodeRelationshipsData",
  description: "Container for node relationships.",
  properties: {
    data: {
      $ref: "#/components/schemas/node-relationships",
    },
    links: {
      $ref: "#/components/schemas/links",
    },
  },
} as const

export const $page_meta = {
  type: "object",
  description: "Contains the results for the entire collection.",
  title: "PageMeta",
  properties: {
    results: {
      description: "Total number of results for the entire collection.",
      type: "object",
      properties: {
        total: {
          description: "Total number of results for the entire collection.",
          type: "integer",
          format: "int64",
        },
      },
    },
    page: {
      type: "object",
      properties: {
        limit: {
          description: "The maximum number of records for all pages.",
          type: "integer",
          format: "int64",
        },
        offset: {
          description: "The current offset by number of pages.",
          type: "integer",
          format: "int64",
        },
        current: {
          description: "The current number of pages.",
          type: "integer",
          format: "int64",
        },
        total: {
          description: "The total number of records for the entire collection.",
          type: "integer",
          format: "int64",
        },
      },
    },
  },
} as const

export const $pricebook = {
  type: "object",
  title: "Pricebook",
  description:
    "Top level entity in the pricebooks domain model. It contains a list of product prices.",
  properties: {
    id: {
      description: "The unique identifier of a price book.",
      type: "string",
      example: "4c45e4ec-26e0-4043-86e4-c15b9cf985a7",
      "x-go-name": "ID",
    },
    type: {
      description:
        "This represents the type of object being returned. Always `pricebook`.",
      type: "string",
      "x-go-name": "Type",
      default: "pricebook",
      example: "pricebook",
      enum: ["pricebook"],
    },
    attributes: {
      type: "object",
      properties: {
        created_at: {
          type: "string",
          format: "date-time",
          example: "2020-09-22T09:00:00",
          "x-go-name": "CreatedAt",
        },
        description: {
          type: "string",
          example: "This is a pricebook",
          "x-go-name": "Description",
          nullable: true,
        },
        name: {
          type: "string",
          example: "pricebook-store-abc",
          "x-go-name": "Name",
          nullable: true,
        },
        updated_at: {
          type: "string",
          example: "2020-09-22T09:00:00",
          format: "date-time",
          "x-go-name": "UpdatedAt",
        },
      },
      required: ["name"],
    },
  },
  required: ["type", "attributes"],
  additionalProperties: false,
  "x-go-name": "Pricebook",
} as const

export const $pricebook_create_data = {
  type: "object",
  title: "PricebookData",
  description: "Container for pricebooks.",
  properties: {
    data: {
      type: "object",
      description: "New top level pricebook.",
      title: "PricebookCreateArgs",
      properties: {
        type: {
          type: "string",
          "x-go-name": "Type",
          default: "pricebook",
          example: "pricebook",
          enum: ["pricebook"],
        },
        attributes: {
          type: "object",
          properties: {
            description: {
              type: "string",
              example: "This is a pricebook",
              "x-go-name": "Description",
              nullable: true,
            },
            name: {
              type: "string",
              example: "pricebook-store-abc",
              "x-go-name": "Name",
              nullable: true,
            },
          },
          required: ["name"],
        },
      },
      required: ["type", "attributes"],
      additionalProperties: false,
    },
    links: {
      $ref: "#/components/schemas/links",
    },
  },
  required: ["data"],
} as const

export const $pricebook_data = {
  type: "object",
  title: "PricebookData",
  description: "Container for pricebooks.",
  properties: {
    data: {
      $ref: "#/components/schemas/pricebook",
    },
    links: {
      $ref: "#/components/schemas/links",
    },
  },
  required: ["data"],
} as const

export const $pricebook_price = {
  type: "object",
  title: "PricebookPrice",
  description:
    "ProductPrice associates a collection of locale specific prices with a product ID.",
  properties: {
    type: {
      type: "string",
      example: "product-price",
      default: "product-price",
      enum: ["product-price"],
    },
    attributes: {
      type: "object",
      properties: {
        currencies: {
          $ref: "#/components/schemas/tiered-currencies",
        },
        sales: {
          $ref: "#/components/schemas/sales",
        },
        sku: {
          type: "string",
          example: "4c45e4ec-sku",
        },
      },
      required: ["currencies", "sku"],
    },
    id: {
      type: "string",
      example: "4c45e4ec-26e0-4043-86e4-c15b9cf985a7",
      "x-go-name": "ID",
    },
  },
  required: ["type", "id", "attributes"],
  additionalProperties: false,
} as const

export const $pricebook_price_create_data = {
  type: "object",
  title: "PricebookPriceCreateData",
  description: "Container for pricebook prices.",
  properties: {
    data: {
      type: "object",
      title: "PricebookPriceCreateArgs",
      description:
        "ProductPrice associates a collection of locale specific prices with a product ID.",
      properties: {
        type: {
          type: "string",
          example: "product-price",
          default: "product-price",
          enum: ["product-price"],
        },
        attributes: {
          type: "object",
          properties: {
            currencies: {
              $ref: "#/components/schemas/tiered-currencies",
            },
            sales: {
              $ref: "#/components/schemas/sales",
            },
            sku: {
              type: "string",
              example: "4c45e4ec-sku",
            },
          },
          required: ["currencies", "sku"],
        },
      },
      required: ["type", "attributes"],
    },
    links: {
      $ref: "#/components/schemas/links",
    },
  },
  required: ["data"],
} as const

export const $pricebook_price_data = {
  type: "object",
  title: "PricebookPriceData",
  description: "Container for pricebook prices.",
  properties: {
    data: {
      $ref: "#/components/schemas/pricebook-price",
    },
    links: {
      $ref: "#/components/schemas/links",
    },
  },
  required: ["data"],
} as const

export const $product = {
  type: "object",
  title: "Product",
  description: "A product in a catalog with the following attributes.",
  properties: {
    attributes: {
      $ref: "#/components/schemas/product-attributes",
    },
    id: {
      description: "A unique identifier for a product.",
      type: "string",
      example: "8fccaa19-dba9-4621-8d11-31a222a68c7c",
      "x-go-name": "ID",
    },
    relationships: {
      $ref: "#/components/schemas/product-relationships",
    },
    type: {
      description:
        "This represents the type of object being returned. Always `product`.",
      type: "string",
      example: "product",
      "x-go-name": "Type",
    },
    meta: {
      $ref: "#/components/schemas/product-meta",
    },
  },
  "x-go-name": "Product",
} as const

export const $product_attributes = {
  type: "object",
  title: "ProductAttributes",
  description: "A product's attributes.",
  properties: {
    published_at: {
      description: "The date and time a product was published in a catalog.",
      type: "string",
      format: "date-time",
      example: "1970-01-01T00:00:00.000",
      nullable: true,
    },
    base_product: {
      description:
        "If this product is a `parent` product. A `parent` product is a product that has child products that have been built using the `build child products` endpoint.",
      type: "boolean",
      example: false,
      default: false,
      "x-go-name": "BaseProduct",
    },
    base_product_id: {
      description: "The unique identifier of a `parent` product.",
      type: "string",
      example: "cdf574bc-e36e-48fc-9eac-01c87839b285",
      "x-go-name": "BaseProductID",
    },
    commodity_type: {
      description: "The commodity type, either `physical` or `digital`.",
      type: "string",
      example: "physical",
      "x-go-name": "CommodityType",
    },
    curated_product: {
      description:
        "If a product is curated, then the `curated_product` attribute with a value of `true` is displayed. If a product is not curated, the `curated_product` attribute is not displayed.",
      type: "boolean",
      example: true,
      "x-omitempty": true,
      "x-go-name": "CuratedProduct",
    },
    upc_ean: {
      description:
        "The universal product code or european article number of the product.",
      type: "string",
      example: "0123456",
      "x-go-name": "UpcEan",
    },
    manufacturer_part_num: {
      description: "The manufacturer part number of the product.",
      type: "string",
      example: "mfn1",
      "x-go-name": "ManufacturerPartNum",
    },
    tags: {
      type: "array",
      description:
        "A list of tags associated with the product. A tag must be HTML compatible characters excluding commas and will be stored in lowercase letters.",
      items: {
        description: "A tag associated with the product.",
        type: "string",
        example: "tag-a",
      },
      "x-go-name": "Tags",
      "x-omitempty": true,
    },
    price_modifiers: {
      type: "array",
      description: "A list of price modifier names.",
      items: {
        description: "A list of price modifier names.",
        type: "string",
        example: "modifier-1",
      },
      "x-go-name": "PriceModifiers",
      "x-omitempty": true,
    },
    created_at: {
      description: "The date and time a product was created.",
      type: "string",
      format: "date-time",
      example: "1970-01-01T00:00:00.000",
      "x-go-name": "CreatedAt",
    },
    description: {
      description: "A description of the product.",
      type: "string",
      example: "This is a product",
      "x-go-name": "Description",
    },
    name: {
      description: "A name of a product.",
      type: "string",
      example: "Blue shirt",
      "x-go-name": "Name",
    },
    price: {
      $ref: "#/components/schemas/currencies",
    },
    shopper_attributes: {
      $ref: "#/components/schemas/shopper_attributes",
    },
    tiers: {
      $ref: "#/components/schemas/tiers",
    },
    components: {
      $ref: "#/components/schemas/components",
    },
    custom_inputs: {
      $ref: "#/components/schemas/custom_inputs",
    },
    sku: {
      description: "The unique stock keeping unit of the product.",
      type: "string",
      example: "blue-shirt",
      "x-go-name": "Sku",
    },
    slug: {
      description:
        "A label for the product that is used in the URL paths. A slug can contain A to Z, a to z, 0 to 9, hyphen, underscore, and period. Spaces or other special characters like ^, [], *, and $ are not allowed. By default, the product name is used as the slug.",
      type: "string",
      example: "blue-shirt",
      "x-go-name": "Slug",
    },
    status: {
      description: "The status of the product, either `live` or `draft`.",
      type: "string",
      example: "live",
      "x-go-name": "Status",
    },
    external_ref: {
      description:
        "The unique attribute associated with the product. This could be an external reference from a separate company system, for example.",
      type: "string",
      "x-go-name": "ExternalRef",
      nullable: true,
    },
    updated_at: {
      description: "The date and time a product was updated.",
      type: "string",
      example: "1970-01-01T00:00:00.000",
      format: "date-time",
      "x-go-name": "UpdatedAt",
    },
    extensions: {
      $ref: "#/components/schemas/extensions",
    },
  },
  "x-go-name": "ProductAttributes",
} as const

export const $product_create_data = {
  type: "object",
  title: "ProductData",
  description: "Container for products.",
  properties: {
    data: {
      type: "object",
      title: "ProductCreateArgs",
      description: "A new product in a catalog.",
      properties: {
        attributes: {
          type: "object",
          title: "ProductCreateAttributes",
          description: "A product's attributes.",
          properties: {
            description: {
              type: "string",
              example: "This is a product",
            },
            name: {
              type: "string",
              example: "Blue shirt",
            },
            sku: {
              type: "string",
              example: "blue-shirt",
            },
            slug: {
              type: "string",
              example: "blue-shirt",
            },
            status: {
              type: "string",
              example: "live",
            },
            locales: {
              type: "object",
              additionalProperties: {
                type: "object",
                additionalProperties: {
                  type: "string",
                },
              },
            },
          },
          required: ["name", "status"],
        },
        id: {
          type: "string",
          example: "8fccaa19-dba9-4621-8d11-31a222a68c7c",
          "x-go-name": "ID",
        },
        type: {
          type: "string",
          example: "product",
          "x-go-name": "Type",
        },
      },
      required: ["attributes", "type"],
    },
    links: {
      $ref: "#/components/schemas/links",
    },
  },
} as const

export const $product_data = {
  type: "object",
  title: "ProductData",
  description: "Container for products.",
  properties: {
    data: {
      $ref: "#/components/schemas/product",
    },
    links: {
      $ref: "#/components/schemas/links",
    },
    included: {
      $ref: "#/components/schemas/included",
    },
  },
} as const

export const $product_diff = {
  "x-go-name": "ProductDiff",
  type: "object",
  properties: {
    id: {
      type: "string",
      example: "e871df93-c769-49a9-9394-a6fd555b8e8a",
      "x-go-name": "ID",
    },
    type: {
      type: "string",
      example: "product_diff",
      "x-go-name": "Type",
    },
    attributes: {
      type: "object",
      properties: {
        sku: {
          type: "string",
        },
        this_release_id: {
          type: "string",
        },
        other_release_id: {
          type: "string",
        },
        diff_created_at: {
          type: "string",
          format: "date-time",
          example: "1970-01-01T00:00:00.000",
        },
        exists: {
          "x-go-name": "ProductDiffExists",
          type: "object",
          properties: {
            this: {
              type: "boolean",
            },
            other: {
              type: "boolean",
            },
          },
          required: ["this", "other"],
        },
        updated_at: {
          "x-go-name": "ProductDiffUpdatedAt",
          type: "object",
          properties: {
            this: {
              type: "string",
              format: "date-time",
              example: "1970-01-01T00:00:00.000",
              "x-omitempty": true,
              nullable: true,
            },
            other: {
              type: "string",
              format: "date-time",
              example: "1970-01-01T00:00:00.000",
              "x-omitempty": true,
              nullable: true,
            },
          },
        },
      },
    },
  },
} as const

export const $product_list_data = {
  type: "object",
  title: "ProductListData",
  description: "Container for a list of products.",
  properties: {
    meta: {
      $ref: "#/components/schemas/page-meta",
    },
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/product",
      },
      "x-go-name": "Data",
    },
    links: {
      $ref: "#/components/schemas/links",
    },
    included: {
      $ref: "#/components/schemas/included",
    },
  },
} as const

export const $product_meta = {
  type: "object",
  title: "ProductMeta",
  description:
    "A product's metadata contains information about products, for example, the nodes a product is associated with, any child products, bundle configurations, and so on.",
  properties: {
    bread_crumbs: {
      description:
        "The relationship among the array of nodes a product is associated with, demonstrating the linking of the children nodes with the parent nodes. Up to 10 levels of parent nodes are displayed, depending on the number of levels of parent nodes you have.",
      type: "object",
      additionalProperties: {
        type: "array",
        items: {
          type: "string",
          example: "8dbb35b2-ef04-477e-974d-e5f3abe6faae",
        },
      },
      "x-omitempty": true,
    },
    bread_crumb_nodes: {
      description:
        "An array of parent node IDs that a product is associated with. Up to 10 levels of parent nodes are displayed, depending on the number of levels of parent nodes you have.",
      type: "array",
      items: {
        type: "string",
        example: "8dbb35b2-ef04-477e-974d-e5f3abe6faae",
      },
      "x-omitempty": true,
    },
    catalog_id: {
      description:
        "A unique identifier of the catalog a product is associated with.",
      type: "string",
      example: "362a16dc-f7c6-4280-83d6-4fcc152af091",
      "x-go-name": "CatalogID",
    },
    pricebook_id: {
      description:
        "The unique identifier of the price book a product is associated with.",
      type: "string",
      example: "f5466169-0037-460c-b181-b02682b6f4de",
      "x-go-name": "PricebookID",
      nullable: true,
    },
    display_price: {
      $ref: "#/components/schemas/display-price",
    },
    catalog_source: {
      description: "The source of a catalog. Always `pim`.",
      type: "string",
      example: "pim",
      enum: ["pim"],
      "x-go-name": "CatalogSource",
    },
    sale_id: {
      description:
        "With sales pricing, a store can optionally add a sale price to a product price. For example, a store can schedule seasonal pricing on products without creating a new price book and catalog ruleset. Optionally, a store can schedule the date ranges for the sale products. This is the unique identifier of a sale.",
      type: "string",
      "x-go-name": "SaleID",
    },
    sale_expires: {
      description: "The date and time a sale expires.",
      type: "string",
      format: "date-time",
      example: "1970-01-01T00:00:00.000",
      "x-go-name": "SaleExpires",
      nullable: true,
    },
    original_price: {
      $ref: "#/components/schemas/currencies",
    },
    original_display_price: {
      $ref: "#/components/schemas/display-price",
    },
    bundle_configuration: {
      $ref: "#/components/schemas/bundle-configuration",
    },
    component_products: {
      description:
        "A bundle is a purchasable product, comprising of one or more products that you want to sell together. You can create multiple components within a bundle. Each component must have at least one or more options. Each option is a product and a quantity.",
      type: "object",
      additionalProperties: {
        type: "object",
        properties: {
          sale_id: {
            description:
              "With sales pricing, a store can optionally add a sale price to a product price. For example, a store can schedule seasonal pricing on products without creating a new price book and catalog ruleset. Optionally, a store can schedule the date ranges for the sale products. This is the unique identifier of a sale.",
            type: "string",
            "x-go-name": "SaleID",
          },
          sale_expires: {
            description: "The date and time a sale expires.",
            type: "string",
            format: "date-time",
            example: "1970-01-01T00:00:00.000",
            "x-go-name": "SaleExpires",
            nullable: true,
          },
          price: {
            $ref: "#/components/schemas/currencies",
          },
          display_price: {
            $ref: "#/components/schemas/display-price",
          },
          original_price: {
            $ref: "#/components/schemas/currencies",
          },
          original_display_price: {
            $ref: "#/components/schemas/display-price",
          },
          pricebook_id: {
            type: "string",
            example: "f5466169-0037-460c-b181-b02682b6f4de",
            "x-go-name": "PricebookID",
            nullable: true,
          },
        },
        "x-go-name": "ComponentProductMeta",
      },
    },
    price_modifiers: {
      type: "object",
      description:
        "You can use price modifiers to change the price property of child products. By default, child products inherit the same price as their base products. Using price modifiers, you can enable child products to inherit a different price.",
      additionalProperties: {
        description:
          "A name for the modifier. The name must be unique and is case-sensitive.",
        type: "object",
        properties: {
          modifier_type: {
            description: `There are three modifier types.
 
 - The \`price_increment\` type increases the prices of a product.
 - The \`price_decrement\` type decreases the price of a product.
 - The \`price_equals\` type sets the price of a product to an amount you specify.
`,
            type: "string",
            example: "price_equals",
          },
          currencies: {
            $ref: "#/components/schemas/currencies",
          },
        },
        "x-go-name": "PriceModifierMeta",
      },
    },
    tiers: {
      description:
        "You can use tiers to allow your store to offer different pricing for minimum quantities of items that your shoppers purchase.",
      type: "object",
      additionalProperties: {
        description: "The name of the tier, such as `Pencils`.",
        type: "object",
        properties: {
          sale_id: {
            description: "The unique identifier of a sale.",
            type: "string",
            "x-go-name": "SaleID",
          },
          sale_expires: {
            description: "The date and time a sale expires.",
            type: "string",
            format: "date-time",
            example: "1970-01-01T00:00:00.000",
            "x-go-name": "SaleExpires",
            nullable: true,
          },
          display_price: {
            $ref: "#/components/schemas/display-price",
          },
          original_price: {
            $ref: "#/components/schemas/currencies",
          },
          original_display_price: {
            $ref: "#/components/schemas/display-price",
          },
        },
        "x-go-name": "ProductMetaTier",
      },
      "x-go-name": "ProductMetaTiers",
    },
    variation_matrix: {
      description:
        "The `variation_matrix` object lists the variation IDs and variation option IDs and their corresponding product IDs that are generated when the variation and variation options are built with a product. If no variations are available, the `variation_matrix` is empty.",
      type: "object",
    },
    variations: {
      description:
        "If you specified `build_rules` for a product, the `variations` object lists the variation option IDs that you specified to include when building your child products. If no `build_rules` are specified, all the variation and variation options available for a product are displayed. If a product does not have any variations, then the `variations` object is not displayed.",
      type: "array",
      items: {
        $ref: "#/components/schemas/variation",
      },
      "x-omitempty": true,
    },
    child_option_ids: {
      description:
        "An array of variation options IDs that a child product has.",
      type: "array",
      items: {
        type: "string",
        example: [
          "8dbb35b2-ef04-477e-974d-e5f3abe6faae",
          "6ddf2a66-d805-449c-a0e1-8e81335e31a6",
        ],
      },
      "x-omitempty": true,
      nullable: true,
    },
    child_variations: {
      description:
        "If this is a child product, the `child_variations` object lists the variation option IDs that define this child product.",
      type: "array",
      items: {
        $ref: "#/components/schemas/variation",
      },
      "x-omitempty": true,
      nullable: true,
    },
    product_types: {
      description: `Commerce automatically assigns types to the products you create. In Commerce Manager, you can see at a glance the product types in a list of a products. In addition, you can filter on product types in both the API and Commerce Manager.
 
 Product types can also be used in catalogs. For example, in your catalog, you can filter on parent so that only your parent products are displayed in your storefront.
 
 Products have one of the following types:

 - **standard** - Standard products are a standalone products.
 - **parent** - A parent product is a product that has child products that have been built using the \`Build Child Products\` endpoint.
  - **child** - When you configure product variations and variation options for parent products, the child products derived from the parent products are automatically created in Commerce.
 - **bundle** - A bundle is a purchasable product, comprising two or more standalone products (in other words, components) to be sold together. 
`,
      type: "array",
      items: {
        type: "string",
      },
      "x-omitempty": true,
      "x-go-name": "ProductTypes",
    },
    language: {
      description:
        "If you storefront supports multiple languages, your storefront's preferred language and locale.",
      type: "string",
      example: "en-GB",
    },
  },
  "x-go-name": "ProductMeta",
  "x-omitempty": true,
} as const

export const $variation_option = {
  description: "The options available for a variation.",
  type: "object",
  properties: {
    id: {
      description: "A unique identifier for an option.",
      type: "string",
      format: "uuid",
      "x-go-name": "ID",
    },
    name: {
      description: "The name of the option.",
      type: "string",
    },
    sort_order: {
      description:
        "If you specified a `sort_order` when creating your variations and variation options, then use the `sort_order` value to program your storefront to display the variations and variation options in the order that you want.",
      type: "integer",
      "x-go-name": "Sort Order",
      nullable: true,
    },
    description: {
      description: "The option description to display to customers.",
      type: "string",
    },
  },
  "x-go-name": "ProductVariationOption",
} as const

export const $variation = {
  type: "object",
  properties: {
    id: {
      description: "A unique identifier of a variation.",
      type: "string",
      format: "uuid",
      "x-go-name": "ID",
    },
    name: {
      description: "The name of a variation.",
      type: "string",
    },
    sort_order: {
      description:
        "If you specified a `sort_order` when creating your variations and variation options, then use the `sort_order` value to program your storefront to display the variations and variation options in the order that you want.",
      type: "integer",
      "x-go-name": "Sort Order",
      nullable: true,
    },
    option: {
      $ref: "#/components/schemas/variation_option",
    },
    options: {
      description: "The options available for this variation.",
      type: "array",
      "x-omitempty": true,
      items: {
        $ref: "#/components/schemas/variation_option",
      },
    },
  },
  "x-go-name": "ProductVariation",
} as const

export const $bundle_configuration_data = {
  type: "object",
  title: "BundleConfigurationData",
  description: "Container for a bundle configuration.",
  properties: {
    data: {
      $ref: "#/components/schemas/bundle-configuration",
    },
  },
  required: ["data"],
} as const

export const $bundle_configuration = {
  type: "object",
  title: "BundleConfiguration",
  description:
    "A bundle is a purchasable product, comprising of one or more products that you want to sell together. You can create multiple components within a bundle. Each component must have at least one or more options. Each option is a product and a quantity.",
  properties: {
    selected_options: {
      type: "object",
      description:
        "The product options included in a component. This can be the ID of another bundle.",
      additionalProperties: {
        description:
          "The unique identifier of the component, for example, `games`.",
        type: "object",
        additionalProperties: {
          description:
            "The number of this product option that a shopper must purchase.",
          type: "integer",
          format: "int64",
        },
      },
    },
  },
  required: ["selected_options"],
  "x-go-name": "ProductBundleConfiguration",
} as const

export const $product_reference = {
  type: "object",
  title: "ProductReference",
  description: "A product identifier.",
  "x-nullable": "true",
  properties: {
    id: {
      description: "A unique identifier for a product.",
      type: "string",
      format: "uuid",
      "x-go-name": "ID",
    },
    type: {
      description:
        "This represents the type of object being returned. Always `product`.",
      type: "string",
      "x-go-name": "Type",
      example: "product",
      enum: ["product"],
    },
  },
  "x-go-name": "ProductReference",
} as const

export const $product_reference_list_data = {
  type: "object",
  title: "ProductReferenceListData",
  description: "Container for a list of product references.",
  properties: {
    meta: {
      $ref: "#/components/schemas/page-meta",
    },
    data: {
      $ref: "#/components/schemas/product-references",
    },
    links: {
      $ref: "#/components/schemas/links",
    },
  },
} as const

export const $product_references = {
  type: "array",
  title: "ProductReferences",
  description: "A list of product identifiers.",
  items: {
    $ref: "#/components/schemas/product-reference",
  },
  "x-go-name": "ProductReferences",
} as const

export const $product_relationships = {
  type: "object",
  title: "ProductRelationships",
  description:
    "Relationships allow you to move between requests. Includes links to the parent and child products, bundle component products, files, and main images associated with a product.",
  properties: {
    parent: {
      description:
        "The details of a `parent` product. A `parent` product is a product that has child products that have been built using the `Build Child Products` endpoint.",
      type: "object",
      properties: {
        data: {
          $ref: "#/components/schemas/product-reference",
        },
      },
      "x-go-name": "Parent",
      "x-omitempty": true,
    },
    children: {
      description:
        "The details of a `child` product. When you configure product variations and variation options for parent products, the child products derived from the parent products are automatically created in Commerce.",
      type: "object",
      properties: {
        data: {
          $ref: "#/components/schemas/product-references",
        },
        links: {
          $ref: "#/components/schemas/self-link",
        },
      },
      "x-go-name": "Children",
      "x-omitempty": true,
    },
    files: {
      $ref: "#/components/schemas/files-relationship",
    },
    main_image: {
      $ref: "#/components/schemas/main-image-relationship",
    },
    component_products: {
      $ref: "#/components/schemas/component-products-relationship",
    },
  },
  "x-go-name": "ProductRelationships",
  "x-omitempty": true,
} as const

export const $product_relationships_data = {
  type: "object",
  title: "ProductRelationshipsData",
  description: "Container for product relationships.",
  properties: {
    data: {
      $ref: "#/components/schemas/product-relationships",
    },
    links: {
      $ref: "#/components/schemas/links",
    },
  },
} as const

export const $products_for_cart = {
  type: "object",
  title: "ProductsForCart",
  description:
    "A list of products to be added to cart. Can be type product-data or error-response.",
  properties: {
    data: {
      type: "array",
      items: {},
      "x-go-name": "Data",
    },
    included: {
      type: "object",
      "x-go-name": "Included",
      properties: {
        component_products: {
          type: "array",
          items: {
            $ref: "#/components/schemas/product",
          },
          "x-go-name": "ComponentProducts",
        },
      },
      nullable: true,
    },
  },
  required: ["data"],
  "x-go-name": "ProductsForCart",
} as const

export const $products_for_cart_configuration = {
  type: "object",
  title: "ProductsForCartConfiguration",
  description: "A list of product id or sku and bundle configuration for cart.",
  properties: {
    data: {
      type: "array",
      minItems: 1,
      items: {
        type: "object",
        properties: {
          id: {
            type: "string",
            format: "uuid",
            "x-go-name": "ID",
            nullable: true,
          },
          sku: {
            type: "string",
            "x-go-name": "SKU",
            nullable: true,
          },
          bundle_configuration: {
            $ref: "#/components/schemas/bundle-configuration",
          },
        },
      },
      "x-go-name": "Data",
    },
  },
  required: ["data"],
  "x-go-name": "ProductsForCartConfiguration",
} as const

export const $related_link = {
  description:
    "A URL to a related object, for example, catalog rules, hierarchies, price books, products and deltas.",
  type: "object",
  properties: {
    related: {
      description:
        "A URL to a related object, for example, catalog rules, hierarchies, price books, products and deltas.",
      type: "string",
    },
  },
  required: ["related"],
} as const

export const $self_link = {
  description: "Links are used to allow you to move between requests.",
  type: "object",
  properties: {
    self: {
      description:
        "Single entities use a self parameter with a link to that specific resource.",
      type: "string",
    },
  },
  required: ["self"],
} as const

export const $release = {
  type: "object",
  title: "Release",
  description:
    "A catalog release represents a collection of hierarchical product data, price books and catalogs rules.",
  properties: {
    id: {
      description: "A unique identifier for the catalog release.",
      type: "string",
      "x-go-name": "ID",
      example: "8dbb35b2-ef04-477e-974d-e5f3abe6faae",
    },
    attributes: {
      type: "object",
      properties: {
        name: {
          description: "The name of a release.",
          type: "string",
          example: "Clothing",
        },
        published_at: {
          description: "The date and time a release was published.",
          type: "string",
          format: "date-time",
          example: "1970-01-01T00:00:00.000",
          nullable: true,
        },
        catalog_id: {
          description: "A unique identifier for the catalog.",
          type: "string",
          example: "0194f54d-f2a1-4e33-9a6e-9ec366152490",
        },
        description: {
          description: "A description of the catalog release.",
          type: "string",
          example: "Catalog for Store 123",
          default: "",
        },
        hierarchies: {
          description: "An array of hierarchy IDs associated with the release.",
          type: "array",
          items: {
            $ref: "#/components/schemas/node-reference",
          },
          "x-go-name": "RootNodes",
        },
      },
    },
    relationships: {
      $ref: "#/components/schemas/release-relationships",
    },
    type: {
      description:
        "This represents the type of object being returned. Always `catalog-release`.",
      type: "string",
      "x-go-name": "Type",
    },
    meta: {
      $ref: "#/components/schemas/release-meta",
    },
  },
  "x-go-name": "Release",
} as const

export const $release_data = {
  type: "object",
  title: "Release Data",
  description: "Container for a catalog release.",
  properties: {
    data: {
      $ref: "#/components/schemas/release",
    },
    links: {
      $ref: "#/components/schemas/links",
    },
  },
} as const

export const $release_list_data = {
  type: "object",
  title: "ReleaseListData",
  description: "Container for a list of catalog releases.",
  properties: {
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/release",
      },
    },
    links: {
      $ref: "#/components/schemas/links",
    },
  },
} as const

export const $release_meta = {
  type: "object",
  title: "ReleaseMeta",
  description: "A release's metadata.",
  properties: {
    created_at: {
      description: "The date and time a release is created.",
      type: "string",
      format: "date-time",
      example: "1970-01-01T00:00:00.000",
    },
    started_at: {
      description:
        "The date and time a release is available for use. In other words, the date and time the status of a catalog release changes to PUBLISHED, rather than IN PROGRESS.",
      type: "string",
      format: "date-time",
      example: "1970-01-01T00:00:00.000",
      nullable: true,
    },
    updated_at: {
      description: "The date and time a release is updated.",
      type: "string",
      format: "date-time",
      example: "1970-01-01T00:00:00.000",
      nullable: true,
    },
    release_status: {
      description: "The status of the current release.",
      type: "string",
      enum: ["PENDING", "IN_PROGRESS", "FAILED", "PUBLISHED"],
    },
    language: {
      description: "Your storefront's preferred language code and locale.",
      type: "string",
      example: "en-GB",
    },
    is_full_publish: {
      description: `Indicates that a full publish was performed (either because this is the first time a catalog has been published or because of a change that occurred, for example, adding/removing a price book or hierarchy). When determining whether delta data needs to be refreshed, ignore this attribute and always use the \`is_full_delta\` attribute.
`,
      type: "boolean",
      example: false,
      default: false,
      "x-go-name": "IsFullPublish",
    },
    is_full_delta: {
      description: `Indicates whether the release delta file contains the full content of a catalog release. Using a search service as an example, if the \`is_full_delta\` attribute is \`true\`, you should remove all data about that catalog release from the search service before injecting fresh data from the delta file. If the \`is_full_delta\` attribute is \`false\`, then data from the previous catalog release overlays the existing data in the delta file. The \`is_full_delta\` attribute is always \`true\` the first time a catalog is published.
`,
      type: "boolean",
      example: false,
      default: false,
      "x-go-name": "IsFullDelta",
    },
    total_products: {
      description:
        "The total number of products displayed in a catalog release.",
      type: "integer",
      format: "int64",
      "x-go-name": "TotalProducts",
      nullable: true,
    },
    total_nodes: {
      description:
        "The total number of hierarchy nodes displayed in a catalog release.",
      type: "integer",
      format: "int64",
      "x-go-name": "TotalNodes",
      nullable: true,
    },
    percent_completed: {
      description:
        "An integer that represents the progress of a catalog publish. The attribute starts at `0` and reaches `100` when publishing is complete.",
      type: "integer",
      format: "int32",
      "x-go-name": "PercentCompleted",
      nullable: true,
    },
    owner: {
      description:
        "The owner of the resource, can be either `organization` or `store`.",
      type: "string",
      enum: ["store", "organization"],
      "x-go-name": "Owner",
      nullable: true,
    },
  },
  "x-go-name": "ReleaseMeta",
  "x-omitempty": true,
} as const

export const $release_relationships = {
  type: "object",
  title: "ReleaseRelationships",
  description:
    "Relationships are established between different catalog entities. For example, products, hierarchies, price books, and catalog rules are related to a catalog, as they are associated with it.",
  properties: {
    delta: {
      description:
        "A URL to a delta document that describes the changes between catalog releases.",
      type: "object",
      properties: {
        links: {
          $ref: "#/components/schemas/related-link",
        },
      },
    },
    products: {
      description: "A URL to all products included in a catalog release.",
      type: "object",
      properties: {
        links: {
          $ref: "#/components/schemas/related-link",
        },
      },
    },
    hierarchies: {
      description: "A URL to all hierarchies included in a catalog release.",
      type: "object",
      properties: {
        links: {
          $ref: "#/components/schemas/related-link",
        },
      },
      required: ["links"],
    },
  },
  "x-go-name": "ReleaseRelationships",
} as const

export const $rule = {
  type: "object",
  title: "Catalog Rule",
  description:
    "A catalog rule specifies which catalog to use for a given shopper context.",
  properties: {
    id: {
      type: "string",
      description:
        "The catalog rule ID. Use this to get, modify, or delete the catalog rule.",
      example: "8dbb35b2-ef04-477e-974d-e5f3abe6faae",
    },
    attributes: {
      type: "object",
      properties: {
        name: {
          description:
            "The name of a catalog rule. The name must not contain any spaces.",
          type: "string",
          example: "rule-123",
        },
        description: {
          description: "A brief description of the purpose of a catalog rule.",
          type: "string",
          example: "Catalog Rule for most favored customers",
          default: "",
          "x-omitempty": true,
        },
        account_ids: {
          description:
            "The list of accounts who are eligible to see this catalog. If this field is empty, the rule matches all accounts.",
          type: "array",
          items: {
            type: "string",
          },
          "x-omitempty": true,
        },
        customer_ids: {
          description:
            "The list of customers who are eligible to see this catalog. If empty, the rule matches all customers.",
          type: "array",
          items: {
            type: "string",
          },
          "x-omitempty": true,
        },
        channels: {
          description:
            "The list of channels in which this catalog can be displayed. A channel is the shopping experience, such as a mobile app or web storefront. If empty, the catalog rule matches all channels. The channel will eventually be included in the bearer token that is used for authorization, but currently, you must set the `EP-Channel` header in your requests.",
          type: "array",
          items: {
            type: "string",
          },
          "x-omitempty": true,
        },
        tags: {
          description:
            "A list of user-defined tags that can be used to further restrict the eligibility criteria for this rule. Requests populate the catalog rule tag using the `EP-Context-Tag` header.",
          type: "array",
          items: {
            type: "string",
          },
          "x-omitempty": true,
        },
        schedules: {
          description: `Specifies a time period when a catalog is displayed, such as on a specific date or during summer. Requests populate the rule tag using the \`EP-Context-Tag\` header. 

The schedules attribute must include the following.

- \`valid_from\` matches the date and time that the catalog is displayed from. 
- \`valid_to\` matches the date and time the catalog is displayed to. 

Commerce runs on UTC time. 

You can offset the timezone by adding the offset to the end of the date and time. For example, a catalog which contains a sale hierarchy that should appear for a set timeframe may be scheduled to publish on a given date and time within a given timezone. For instance, a sale that should begin on 1st of June 2022 05:00 ET and end on the 15th of June 2022 at 23:50 PT would have a valid schedule of \`"valid_from": "2022-06-01T05:00:00.000-05:00"\`, \`"valid_to": "2022-06-15T11:59:99.000-08:00"\`.
`,
          type: "array",
          items: {
            $ref: "#/components/schemas/rule-schedule",
          },
          "x-omitempty": true,
        },
        catalog_id: {
          type: "string",
          description: "The unique identifier of a catalog.",
          example: "d09b4e16-08a5-4f42-817c-6e0d98acbb63",
        },
        created_at: {
          description: "The date and time a catalog rule was created.",
          type: "string",
          example: "2020-09-22T09:00:00",
          format: "date-time",
        },
        updated_at: {
          description: "The date and time a catalog release is updated.",
          type: "string",
          example: "2020-09-22T09:00:00",
          format: "date-time",
        },
      },
      required: ["name", "catalog_id", "created_at", "updated_at"],
    },
    type: {
      description:
        "This represents the type of object being returned. Always `catalog_rule`.",
      type: "string",
      example: "catalog_rule",
      enum: ["catalog_rule"],
    },
  },
  required: ["id", "type", "attributes"],
} as const

export const $rule_create_data = {
  type: "object",
  title: "CatalogRuleCreateData",
  description:
    "A catalog rule specifies which catalog to use for a given shopper context.",
  properties: {
    data: {
      type: "object",
      properties: {
        attributes: {
          type: "object",
          properties: {
            name: {
              description:
                "The name of a catalog rule. The name must not contain spaces.",
              type: "string",
              minLength: 1,
              example: "rule-123",
            },
            description: {
              description:
                "A brief description of the purpose of a catalog rule.",
              type: "string",
              example: "Catalog Rule for most favored customers",
              default: "",
              nullable: true,
            },
            account_ids: {
              description:
                "The list of accounts who are eligible to see this catalog. If this field is empty, the rule matches all accounts.",
              type: "array",
              items: {
                type: "string",
              },
              nullable: true,
            },
            customer_ids: {
              description:
                "The list of customers who are eligible to see this catalog. If empty, the rule matches all customers.",
              type: "array",
              items: {
                type: "string",
              },
              nullable: true,
            },
            channels: {
              description:
                "The list of channels in which this catalog can be displayed. A channel is the shopping experience, such as a mobile app or web storefront. If empty, the catalog rule matches all channels. The channel will eventually be included in the bearer token that is used for authorization, but currently, you must set the `EP-Channel` header in your requests.",
              type: "array",
              items: {
                type: "string",
              },
              nullable: true,
            },
            tags: {
              description:
                "A list of user-defined tags that can be used to further restrict the eligibility criteria for this rule. Requests populate the catalog rule tag using the `EP-Context-Tag` header.",
              type: "array",
              items: {
                type: "string",
              },
              nullable: true,
            },
            schedules: {
              description: `Specifies a time period when a catalog is displayed, such as on a specific date or during summer. Requests populate the rule tag using the \`EP-Context-Tag\` header. 

The schedules attribute must include the following.

- \`valid_from\` matches the date and time that the catalog is displayed from. 
- \`valid_to\` matches the date and time the catalog is displayed to. 

Commerce runs on UTC time. 

You can offset the timezone by adding the offset to the end of the date and time. For example, a catalog which contains a sale hierarchy that should appear for a set timeframe may be scheduled to publish on a given date and time within a given timezone. For instance, a sale that should begin on 1st of June 2022 05:00 ET and end on the 15th of June 2022 at 23:50 PT would have a valid schedule of \`"valid_from": "2022-06-01T05:00:00.000-05:00"\`, \`"valid_to": "2022-06-15T11:59:99.000-08:00"\`.
`,
              type: "array",
              items: {
                $ref: "#/components/schemas/rule-schedule",
              },
              nullable: true,
            },
            catalog_id: {
              type: "string",
              description: "The unique identifier of a catalog.",
              example: "d09b4e16-08a5-4f42-817c-6e0d98acbb63",
            },
          },
          required: ["name", "catalog_id"],
        },
        type: {
          description:
            "This represents the type of object being returned. Always `catalog_rule`.",
          type: "string",
          example: "catalog_rule",
          enum: ["catalog_rule"],
        },
      },
      required: ["type", "attributes"],
    },
  },
  required: ["data"],
} as const

export const $rule_data = {
  type: "object",
  title: "CatalogRuleData",
  description: "Container for a single catalog rule.",
  properties: {
    data: {
      $ref: "#/components/schemas/rule",
    },
    links: {
      $ref: "#/components/schemas/links",
    },
  },
  required: ["data"],
} as const

export const $rule_list_data = {
  type: "object",
  title: "CatalogRuleListData",
  description: "Container for a list of catalog rules.",
  properties: {
    meta: {
      $ref: "#/components/schemas/page-meta",
    },
    data: {
      type: "array",
      items: {
        $ref: "#/components/schemas/rule",
      },
    },
    links: {
      $ref: "#/components/schemas/links",
    },
  },
  required: ["data"],
} as const

export const $rule_schedule = {
  type: "object",
  title: "Catalog Schedule",
  description: "A period of time during which a catalog is valid",
  properties: {
    valid_from: {
      description:
        "Matches the date and time that the catalog is displayed from.",
      type: "string",
      example: "2020-09-22T09:00:00",
      format: "date-time",
      "x-go-name": "ValidFrom",
      nullable: true,
    },
    valid_to: {
      description: "Matches the date and time the catalog is displayed to.",
      type: "string",
      example: "2020-09-22T09:00:00",
      format: "date-time",
      "x-go-name": "ValidTo",
      nullable: true,
    },
  },
  "x-go-name": "RuleSchedule",
} as const

export const $rule_update_data = {
  type: "object",
  title: "CatalogRuleUpdateData",
  description:
    "A catalog rule specifies which catalog to use for a given shopper context.",
  properties: {
    data: {
      type: "object",
      properties: {
        id: {
          type: "string",
          description:
            "The catalog rule ID. Use this to get, modify, or delete the catalog rule.",
          example: "8dbb35b2-ef04-477e-974d-e5f3abe6faae",
        },
        attributes: {
          type: "object",
          properties: {
            name: {
              description:
                "The name of a catalog rule. The name must not contain spaces.",
              type: "string",
              minLength: 1,
              example: "rule-123",
              nullable: true,
            },
            description: {
              description: "A description of the purpose of a catalog rule.",
              type: "string",
              example: "Catalog Rule for most favored customers",
              default: "",
              nullable: true,
            },
            account_ids: {
              description:
                "Specifies the list of accounts who are eligible to see this catalog. If this field is empty, the rule matches all accounts.",
              type: "array",
              items: {
                type: "string",
              },
              nullable: true,
            },
            customer_ids: {
              description:
                "The list of customers who are eligible to see this catalog. If empty, the rule matches all customers.",
              type: "array",
              items: {
                type: "string",
              },
              nullable: true,
            },
            channels: {
              description:
                "The list of channels in which this catalog can be displayed. A channel is the shopping experience, such as a mobile app or web storefront. If empty, the catalog rule matches all channels. The channel will eventually be included in the bearer token that is used for authorization, but currently, you must set the `EP-Channel` header in your requests.",
              type: "array",
              items: {
                type: "string",
              },
              nullable: true,
            },
            schedules: {
              description: `Specifies a time period when a catalog is displayed, such as on a specific date or during summer. Requests populate the rule tag using the \`EP-Context-Tag\` header. 

The schedules attribute must include the following.

- \`valid_from\` matches the date and time that the catalog is displayed from. 
- \`valid_to\` matches the date and time the catalog is displayed to. 

Commerce runs on UTC time. 

You can offset the timezone by adding the offset to the end of the date and time. For example, a catalog which contains a sale hierarchy that should appear for a set timeframe may be scheduled to publish on a given date and time within a given timezone. For instance, a sale that should begin on 1st of June 2022 05:00 ET and end on the 15th of June 2022 at 23:50 PT would have a valid schedule of \`"valid_from": "2022-06-01T05:00:00.000-05:00"\`, \`"valid_to": "2022-06-15T11:59:99.000-08:00"\`.
`,
              type: "array",
              items: {
                $ref: "#/components/schemas/rule-schedule",
              },
              nullable: true,
            },
            tags: {
              description:
                "A list of user-defined tags that can be used to further restrict the eligibility criteria for this rule. Requests populate the catalog rule tag using the `EP-Context-Tag` header.",
              type: "array",
              items: {
                type: "string",
              },
              nullable: true,
            },
            catalog_id: {
              type: "string",
              description: "The unique identifier of a catalog rule.",
              example: "d09b4e16-08a5-4f42-817c-6e0d98acbb63",
              nullable: true,
            },
          },
        },
        type: {
          description:
            "This represents the type of object being returned. Always `catalog_rule`.",
          type: "string",
          example: "catalog_rule",
          enum: ["catalog_rule"],
        },
      },
      required: ["id", "type"],
    },
  },
  required: ["data"],
} as const

export const $sale = {
  type: "object",
  description: "A set of sale prices and a validity period.",
  properties: {
    schedule: {
      $ref: "#/components/schemas/schedule",
    },
    currencies: {
      $ref: "#/components/schemas/tiered-currencies",
    },
  },
} as const

export const $sales = {
  type: "object",
  title: "Sales",
  description: "A set of sale specifications",
  additionalProperties: {
    $ref: "#/components/schemas/sale",
  },
} as const

export const $schedule = {
  type: "object",
  description: "A definition of the times at which a sale is valid",
  properties: {
    valid_from: {
      type: "string",
      example: "2020-09-22T09:00:00",
      format: "date-time",
      "x-go-name": "ValidFrom",
      nullable: true,
    },
    valid_to: {
      type: "string",
      example: "2020-09-22T09:00:00",
      format: "date-time",
      "x-go-name": "ValidTo",
      nullable: true,
    },
  },
  "x-go-name": "Schedule",
} as const

export const $tier = {
  type: "object",
  title: "Tier",
  description: "The name of the tier, for example, `Pencils`.",
  properties: {
    minimum_quantity: {
      description:
        "The minimum quantity of 1 or more defined for the specified price. If a minimum quantity is not specified, an error is returned.",
      type: "integer",
      example: "5",
    },
    price: {
      $ref: "#/components/schemas/currencies",
    },
  },
} as const

export const $tiered_amount = {
  type: "object",
  title: "TieredAmount",
  description:
    "The three-letter ISO code for the currency associated with this price.",
  properties: {
    amount: {
      description:
        "The price in the lowest denomination for the specified currency. This is a product's list price.",
      type: "integer",
      example: 100,
      format: "int64",
      "x-omitempty": false,
      "x-go-name": "Amount",
    },
    includes_tax: {
      description: "Whether this price includes tax.",
      type: "boolean",
      example: false,
      default: false,
      "x-go-name": "IncludesTax",
    },
    tiers: {
      description:
        "The price tier that an item is eligible for based on the quantity purchased. You cannot have conflicting tiers within the same currencies block.",
      type: "object",
      additionalProperties: {
        description: "The name of the tier, for example, `Pencils`.",
        type: "object",
        properties: {
          minimum_quantity: {
            description:
              "The minimum quantity of 1 or more defined for the specified price. If a minimum quantity is not specified, an error is returned.",
            type: "integer",
            example: 5,
            "x-go-name": "MinimumQuantity",
          },
          amount: {
            description: "The price for each quantity.",
            type: "integer",
            example: 100,
            format: "int64",
            "x-omitempty": false,
            "x-go-name": "Amount",
          },
        },
        "x-go-name": "TierAmount",
      },
      "x-go-name": "Tiers",
    },
  },
  "x-go-name": "TieredAmount",
} as const

export const $tiered_currencies = {
  type: "object",
  title: "TieredCurrencies",
  description: "Collection of currency specific prices for a product.",
  additionalProperties: {
    $ref: "#/components/schemas/tiered-amount",
  },
} as const

export const $tiers = {
  type: "object",
  title: "Tiers",
  description:
    "The price tier that an item is eligible for based on the quantity purchased. You cannot have conflicting tiers within the same currencies block.",
  additionalProperties: {
    $ref: "#/components/schemas/tier",
  },
} as const

export const $catalog_release_create_data = {
  type: "object",
  title: "CatalogReleaseCreateData",
  description: "Creates a catalog release with the following attributes.",
  properties: {
    data: {
      type: "object",
      properties: {
        export_full_delta: {
          type: "boolean",
          description: `Set to \`true\` if you want to export all the data from a catalog release in a delta link. The \`is_full_delta\` attribute is returned from the \`get a release of a catalog\` endpoint. The \`is_full_delta\` attribute tells you if the delta file contains the full content of a catalog release. You can use the \`is_full_delta\` to determine if you need to refresh the data in your company system before publishing a catalog release with fresh data in a delta link. Using a search service as an example, if the \`is_full_delta\` attribute is true, you should remove all data about that catalog from the search service before publishing a catalog release and injecting fresh data from the delta file. If the \`is_full_delta\` attribute is false, then data from the previous catalog overlays the existing data in the delta file. The \`is_full_delta\` attribute is always \`true\` the first time a catalog is published.
`,
          "x-go-name": "ExportFullDelta",
        },
        include_organization_resources: {
          type: "boolean",
          description:
            "If you are publishing a catalog in a store that contains resources from an organization, you must set this to true and you must enable the **Include Organization Resources in Catalog Publishes** checkbox in Commerce Manager. See [**Multi-Store Management Solutions**](/docs/api/pxm/catalog/publish-release).",
          "x-go-name": "IncludeOrganizationResources",
          nullable: true,
        },
      },
    },
  },
} as const

export const $file = {
  properties: {
    id: {
      type: "string",
      description: "The unique identifier for this file.",
      format: "uuid",
    },
    type: {
      description: "The type represents the object being returned.",
      type: "string",
      example: "file",
    },
    file_name: {
      description: "The name of the file.",
      type: "string",
      example: "file_name.jpg",
    },
    mime_type: {
      description: "The mime type of the file.",
      type: "string",
      example: "image/jpeg",
    },
    file_size: {
      description: "The size of the file. Required when uploading files.",
      type: "integer",
      example: 36000,
    },
    public: {
      description:
        "DEPRECATED Whether the file public or not. Required when uploading files.",
      type: "boolean",
      example: true,
    },
    meta: {
      $ref: "#/components/schemas/file-meta",
    },
    links: {
      $ref: "#/components/schemas/links",
    },
    link: {
      $ref: "#/components/schemas/file-link",
    },
  },
} as const

export const $file_meta = {
  properties: {
    timestamps: {
      type: "object",
      description: "The date and time the file was created.",
      properties: {
        created_at: {
          description: "The date and time the file was created.",
          type: "string",
          example: "2023-10-11T13:02:25.293Z",
        },
      },
    },
    dimensions: {
      description: "The file dimensions.",
      type: "object",
      properties: {
        width: {
          description: "The width of the file.",
          type: "integer",
          example: 1800,
        },
        height: {
          description: "The height of the file.",
          type: "integer",
          example: 1000,
        },
      },
    },
  },
} as const

export const $file_link = {
  type: "object",
  description: "The publicly available URL for this file.",
  properties: {
    href: {
      description: "The publicly available URL for this file.",
      type: "string",
      example:
        "https://files-eu.epusercontent.com/e8c53cb0-120d-4ea5-8941-ce74dec06038/f8cf26b3-6d38-4275-937a-624a83994702.png",
    },
  },
} as const
