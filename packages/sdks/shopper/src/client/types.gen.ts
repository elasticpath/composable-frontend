// This file is auto-generated by @hey-api/openapi-ts

/**
 * The three-letter ISO code for the currency associated with this price.
 */
export type Amount = {
  /**
   * The price in the lowest denomination for the specified currency. This is a product's list price.
   */
  amount?: BigInt
  /**
   * Whether this price includes tax.
   */
  includes_tax?: boolean
}

/**
 * If you want multiple price books for different scenarios, such as seasonal sales, business versus retail pricing, and reward programs, when creating a catalog, you can specify up to five price books. You must configure a priority for your price books. Product prices are displayed in the catalog according to the priority of the price books.
 */
export type PrioritizedPricebooks = Array<{
  /**
   * A unique identifier of a price book.
   */
  id: string
  /**
   * Priority is a number and the price book with the highest number has the highest priority.
   */
  priority: number
}>

/**
 * The owner of this resource, can be either `organization` or `store`.
 */
export type Owner = "store" | "organization"

/**
 * Creates a catalog with the following attributes.
 */
export type Catalog = {
  /**
   * A unique identifier of a catalog.
   */
  id: string
  attributes: {
    /**
     * The name of a catalog.
     */
    name: string
    /**
     * A brief description of the catalog, such as the purpose of the catalog.
     */
    description?: string
    /**
     * The unique identifiers of the hierarchies associated with a catalog.
     */
    hierarchy_ids: Array<string>
    /**
     * The unique identifier of a price book associated with a catalog. If no price book is selected, the catalog is displayed without prices.
     */
    pricebook_id?: string
    pricebook_ids?: PrioritizedPricebooks
    /**
     * Product Experience Manager supports localization of products and hierarchies. If you store supports multiple languages, you can localize product names and descriptions.
     */
    locales?: {
      [key: string]: {
        [key: string]: string
      }
    }
    /**
     * The date and time a catalog is created.
     */
    created_at: Date
    /**
     * The date and time a catalog was updated.
     */
    updated_at: Date
    /**
     * The owner of this resource, can be either `organization` or `store`.
     */
    owner?: "store" | "organization"
  }
  /**
   * Relationships are established between different catalog entities. For example, a catalog rule and a price book are related to a catalog, as both are associated with it.
   */
  relationships?: {
    /**
     * The catalog rules related to a catalog.
     */
    rules?: {
      links?: RelatedLink
    }
    /**
     * When a catalog is published, a catalog release is created. This is a URL to all catalog published releases available for this catalog.
     */
    releases?: {
      links?: RelatedLink
      meta?: {
        /**
         * The number releases available for a catalog.
         */
        count?: number
      }
    }
  }
  type: "catalog"
}

/**
 * Creates a catalog with the following attributes.
 */
export type CatalogCreateData = {
  data: {
    attributes: {
      /**
       * The name of the catalog.
       */
      name: string
      /**
       * A brief description of the catalog.
       */
      description?: string | null
      /**
       * The unique identifiers of the hierarchies to associate with a catalog.
       */
      hierarchy_ids: Array<string>
      /**
       * The unique identifier of the price book to associate with this catalog. You can specify either a `pricebook_id` or `pricebook_ids` but not both. If you specify both a `pricebook_id` and `pricebook_ids`, a `422 Unprocessable Entity` error is displayed.
       *
       */
      pricebook_id?: string
      pricebook_ids?: PrioritizedPricebooks
      /**
       * Product Experience Manager supports localization of products and hierarchies. If you store supports multiple languages, you can localize product names and descriptions.
       */
      locales?: {
        [key: string]: {
          [key: string]: string
        }
      }
    }
    /**
     * Represents the type of object being returned. Always `Catalog`.
     */
    type: "catalog"
  }
}

/**
 * Container for a single catalog.
 */
export type CatalogData = {
  data: Catalog
  links?: Links
}

/**
 * Container for a list of catalogs.
 */
export type CatalogListData = {
  data: Array<Catalog>
  links?: Links
}

/**
 * A catalog combines price books, product lists, and hierarchies.
 */
export type CatalogUpdateData = {
  data: {
    attributes: {
      /**
       * The name of the catalog.
       */
      name?: string | null
      /**
       * A brief description of the catalog.
       */
      description?: string | null
      /**
       * The unique identifiers of the hierarchies to associate with a catalog.
       */
      hierarchy_ids?: Array<string> | null
      /**
       * The unique identifier of a price book to associate with a catalog. You can specify a `pricebook_id` or a `pricebook_ids` but not both. If you specify both, a `422 unprocessable entity` error is displayed.
       */
      pricebook_id?: string | null
      pricebook_ids?: PrioritizedPricebooks
      /**
       * Product Experience Manager supports localization of products and hierarchies. If you store supports multiple languages, you can localize product names and descriptions.
       */
      locales?: {
        [key: string]: {
          [key: string]: string
        }
      }
    }
    /**
     * The unique identifier of the catalog to be updated.
     */
    id: string
    /**
     * This represents the type of object being returned. Always `catalog`.
     */
    type: "catalog"
  }
}

/**
 * The unique identifier of the component, for example, `games`.
 */
export type ComponentProduct = {
  /**
   * The component name is the name that is displayed in your storefront.
   */
  name?: string
  /**
   * The minimum number of product options a shopper can select from this component.
   */
  min?: number | null
  /**
   * The maximum number of product options a shopper can select from this component.
   */
  max?: number | null
  /**
   * The sort order of the components. The `create a bundle` and `update a bundle` endpoints do not sort the components. You can use the `sort_order` attribute when programming your storefront to display the components in the order that you want.
   */
  sort_order?: number | null
  /**
   * The product options included in a component. This can be the ID of another bundle.
   */
  options?: Array<ComponentProductOption>
}

/**
 * The product options included in a component. This can be the ID of another bundle.
 */
export type ComponentProductOption = {
  /**
   * A unique identifier of the product you want to add to a component.
   */
  id?: string
  /**
   * This represents the type of object being returned. Always `product`.
   */
  type?: "product"
  /**
   * The number of this product option that a shopper must purchase.
   */
  quantity?: number
  /**
   * The sort order of the options. The `create a bundle` and `update a bundle` endpoints do not sort the options. You can use the `sort_order` attribute when programming your storefront to display the options in the order that you want.
   */
  sort_order?: number | null
  /**
   * The boolean indicates whether the current option is a default option for the component.
   */
  default?: boolean | null
}

/**
 * A bundle is a purchasable product, comprising of one or more products that you want to sell together. You can create multiple components within a bundle. Each component must have at least one or more options. Each option is a product and a quantity.
 */
export type Components = {
  [key: string]: ComponentProduct
}

/**
 * The length of the custom input text field.
 */
export type CustomInputValidationRuleOptions = {
  /**
   * The number of characters the custom text field can be. You can specify a maximum length up to 255 characters, as the limit is 255 characters.
   */
  max_length?: number
}

/**
 * The validation rules for the custom text.
 */
export type CustomInputValidationRule = {
  /**
   * This represents the type of object being returned. Must be `string`.
   */
  type?: "string"
  options?: CustomInputValidationRuleOptions
}

/**
 * The name of the custom input. You can rename the input to something more representative of the input that shoppers are adding, for example, `message` or `front`.
 */
export type CustomInput = {
  /**
   * The name for the custom text field that is displayed in your storefront.
   */
  name?: string
  /**
   * The validation rules for the custom text.
   */
  validation_rules?: Array<CustomInputValidationRule>
  /**
   * This is `true` or `false` depending on whether the custom text is required.
   */
  required?: boolean | null
}

/**
 * You can allow your shoppers to add custom text to a product when adding product items to their carts. This is useful, for example, if you have a product like a T-shirt that can be personalized or you sell greetings cards that can be printed with your shoppers personalized messages.  You can do this using the `custom_inputs` attribute.
 *
 * - You can rename input to something more representative of the input that shoppers are adding, for example, `message` or `front`.
 * - `name` is the name that is displayed in your storefront.
 * - You can add validation rules. For example, the input field must be a string and/or up to 255 characters in length. The limit is 255 characters.
 *
 */
export type CustomInputs = {
  [key: string]: CustomInput
}

/**
 * A collection of one or more currencies objects that consists of the [**three-letter ISO code**](https://www.iso.org/iso-3166-country-codes.html) of the currencies associated with this price and the amount. This is the product's price.
 */
export type Currencies = {
  [key: string]: Amount
}

/**
 * The optional price extension with values in string format, viewable by shoppers.
 */
export type ShopperAttributes = {
  [key: string]: string
}

/**
 * A list of differences between two releases.
 */
export type DiffListData = {
  data?: Array<ProductDiff>
  links?: Links
}

/**
 * A price formatted for display.
 */
export type DisplayPrice = {
  with_tax?: FormattedPrice
  without_tax?: FormattedPrice
}

/**
 * APIError is a json-api style part of an error response.
 */
export type _Error = {
  detail?: string
  status?: string
  title?: string
}

/**
 * ErrorResponse is a json-api style Error response.
 */
export type ErrorResponse = {
  errors?: Array<_Error>
}

/**
 * The name of the product template.
 */
export type Extension = {
  [key: string]: {
    [key: string]: unknown
  }
}

/**
 * With extension templates, you can attach a specific set of custom fields to your products in Product Experience Manager. For example, a **Book** template might contain the attributes, such as **ISBN**, **Author**, **Number of pages**, **Year Published**, or **Condition (New/Used)**.
 */
export type Extensions = {
  [key: string]: Extension
}

/**
 * In Product Experience Manager, products can have associated rich media assets, such as product images or a file containing additional product details.
 */
export type FileReference = {
  /**
   * This represents the type of object being returned. Always `file`.
   */
  type?: "file"
  /**
   * A unique identifier for a file.
   */
  id?: string
  /**
   * The date and time a file is created.
   */
  created_at?: Date
}

/**
 * In Product Experience Manager, products can have associated rich media assets, such as product images or a file containing additional product details.
 */
export type FilesRelationship = {
  data?: Array<FileReference>
}

/**
 * A bundle is a purchasable product, comprising of one or more products that you want to sell together. You can create multiple components within a bundle. Each component must have at least one or more options. Each option is a product and a quantity. You can link to the products that make up your bundle components.
 */
export type ComponentProductsRelationship = {
  data?: ProductReferences
  links?: SelfLink
}

/**
 * A price formatted for display.
 */
export type FormattedPrice = {
  /**
   * The price in the lowest denomination for the specified currency. This is a product's list price.
   */
  amount?: number
  /**
   * The three-letter ISO code of the currencies associated with this price and the amount.
   */
  currency?: string
  /**
   * The format of the price for display.
   */
  formatted?: string
}

/**
 * A category hierarchy in a catalog. Hierarchies can have parent nodes and child nodes, as well as a list of attached products.
 */
export type Hierarchy = {
  attributes?: HierarchyAttributes
  /**
   * A unique identifier of a hierarchy.
   */
  id?: string
  relationships?: HierarchyRelationships
  /**
   * This represents the type of object being returned. Always `hierarchy`.
   */
  type?: string
  meta?: HierarchyMeta
}

/**
 * A hierarchy's metadata.
 */
export type HierarchyMeta = {
  /**
   * Product Experience Manager supports localization of hierarchies. If your store supports multiple languages, you can localize hierarchy names and descriptions. This is [**three-letter language code**](https://www.iso.org/iso-639-language-code) that represents the name of the language you have used.
   */
  language?: string
}

/**
 * Resource attributes of a catalog hierarchy.
 */
export type HierarchyAttributes = {
  /**
   * The date and time a hierarchy is created.
   */
  created_at?: Date
  /**
   * The date and time a hierarchy is published in a catalog.
   */
  published_at?: Date | null
  /**
   * A description of a hierarchy.
   */
  description?: string
  /**
   * The name of a hierarchy.
   */
  name?: string
  /**
   * A unique slug for a hierarchy.
   */
  slug?: string
  /**
   * The date and time a hierarchy was updated.
   */
  updated_at?: Date
}

/**
 * Container for hierarchies.
 */
export type HierarchyData = {
  data?: Hierarchy
  links?: Links
}

/**
 * Container for a list of hierarchies.
 */
export type HierarchyListData = {
  meta?: PageMeta
  data?: Array<Hierarchy>
  links?: Links
}

/**
 * Relationships to child nodes, and products.
 */
export type HierarchyRelationships = {
  /**
   * A URL to all the products associated with a hierarchy.
   */
  products?: {
    links?: RelatedLink
  }
  /**
   * A URL to all the child products associated with a hierarchy.
   */
  children?: {
    links: RelatedLink
  }
  /**
   * A URL to all the nodes associated with a hierarchy.
   */
  nodes?: {
    links: RelatedLink
  }
}

/**
 * Links allow you to move between requests.
 */
export type Links = {
  /**
   * Single entities use a `self` parameter with a link the specific resource.
   */
  self?: string | null
  /**
   * Always the first page.
   */
  first?: string | null
  /**
   * This is `null` if there is only one page.
   */
  last?: string | null
  /**
   * This is `null` if there is only one page.
   */
  prev?: string | null
  /**
   * This is `null` if there is only one page.
   */
  next?: string | null
}

/**
 * In Product Experience Manager, products can also have associated product images.
 */
export type MainImageRelationship = {
  /**
   * The images associated with a product.
   */
  data?: {
    /**
     * This represents the type of object being returned. Always `main_image`.
     */
    type?: "main_image"
    /**
     * A unique identifier for an image.
     */
    id?: string
  }
}

/**
 * A category node in a catalog. Nodes can have child nodes, as well as a list of attached products.
 */
export type Node = {
  attributes?: NodeAttributes
  /**
   * The unique identifier of a node.
   */
  id?: string
  relationships?: NodeRelationships
  /**
   * This represents the type of object being returned. Always `node`.
   */
  type?: string
  meta?: NodeMeta
}

/**
 * Resource attributes of a catalog node.
 */
export type NodeAttributes = {
  /**
   * The date and time a node was created.
   */
  created_at?: Date
  /**
   * The date and time a node was published in a catalog.
   */
  published_at?: Date | null
  /**
   * A description of a node.
   */
  description?: string
  label?: string
  /**
   * The name of a node. Names must be unique among sibling nodes in a hierarchy. Otherwise, a name can be non-unique within the hierarchy and across multiple hierarchies.
   */
  name?: string
  /**
   * A slug for the node. Slugs must be unique among sibling nodes in the hierarchy. Otherwise, a slug can be non-unique within the hierarchy and across multiple hierarchies.
   */
  slug?: string
  /**
   * A list of curated products for a node. You can curate your products in your nodes product lists. Product curation allows you to promote specific products within each node in a hierarchy, enabling you to create unique product collections in your storefront.
   */
  curated_products?: Array<string>
  status?: string
  /**
   * The date and time a node was updated.
   */
  updated_at?: Date
}

/**
 * Container for nodes.
 */
export type NodeCreateData = {
  /**
   * A node in a catalog (e.g. a category node). Nodes can have child nodes, as well as a list of attached products
   */
  data: {
    /**
     * Resource attributes of a catalog node.
     */
    attributes: {
      description?: string
      /**
       * hierarchy id of the node
       */
      hierarchy_id?: string
      label?: string
      name: string
      slug?: string
      status?: string
      locales?: {
        [key: string]: {
          [key: string]: string
        }
      }
    }
    relationships?: NodeRelationships
    id?: string
    type: string
  }
  links?: Links
}

/**
 * Container for nodes.
 */
export type NodeData = {
  data?: Node
  links?: Links
}

/**
 * Container for a list of nodes.
 */
export type NodeListData = {
  meta?: PageMeta
  data?: Array<Node>
  links?: Links
}

/**
 * A node's metadata.
 */
export type NodeMeta = {
  /**
   * The node details localized in the supported languages.
   */
  language?: string
  /**
   * Helps you understand the association of products with nodes. It explains how products are associated with parent nodes and the relationship among the array of nodes. This is useful if you want to improve how your shoppers search within you store.
   */
  bread_crumb?: Array<string>
}

/**
 * Minimum set of information to identify a catalog node.
 */
export type NodeReference = {
  /**
   * The unique identifier of a hierarchy.
   */
  id?: string
  /**
   * A label for a hierarchy.
   */
  label?: string
  /**
   * The name of a hierarchy.
   */
  name?: string
}

/**
 * Relationships to parent and child nodes, and products.
 */
export type NodeRelationships = {
  /**
   * A URL to all products associated with a node.
   */
  products?: {
    data?: Array<ProductReference>
    links?: RelatedLink
  }
  /**
   * A URL to all child nodes associated with a node.
   */
  children?: {
    links: RelatedLink
  }
  /**
   * A URL to all parent nodes associated with a node.
   */
  parent?: {
    data: {
      type: "node"
      id: string
    }
    links?: RelatedLink
  }
  /**
   * A URL to the hierarchies associated with a node.
   */
  hierarchy?: {
    data: {
      type: "hierarchy"
      id: string
    }
    links?: RelatedLink
  }
}

/**
 * Container for node relationships.
 */
export type NodeRelationshipsData = {
  data?: NodeRelationships
  links?: Links
}

/**
 * Contains the results for the entire collection.
 */
export type PageMeta = {
  /**
   * Total number of results for the entire collection.
   */
  results?: {
    /**
     * Total number of results for the entire collection.
     */
    total?: BigInt
  }
  page?: {
    /**
     * The maximum number of records for all pages.
     */
    limit?: BigInt
    /**
     * The current offset by number of pages.
     */
    offset?: BigInt
    /**
     * The current number of pages.
     */
    current?: BigInt
    /**
     * The total number of records for the entire collection.
     */
    total?: BigInt
  }
}

/**
 * Top level entity in the pricebooks domain model. It contains a list of product prices.
 */
export type Pricebook = {
  /**
   * The unique identifier of a price book.
   */
  id?: string
  /**
   * This represents the type of object being returned. Always `pricebook`.
   */
  type: "pricebook"
  attributes: {
    created_at?: Date
    description?: string | null
    name: string | null
    updated_at?: Date
  }
}

/**
 * Container for pricebooks.
 */
export type PricebookCreateData = {
  /**
   * New top level pricebook.
   */
  data: {
    type: "pricebook"
    attributes: {
      description?: string | null
      name: string | null
    }
  }
  links?: Links
}

/**
 * Container for pricebooks.
 */
export type PricebookData = {
  data: Pricebook
  links?: Links
}

/**
 * ProductPrice associates a collection of locale specific prices with a product ID.
 */
export type PricebookPrice = {
  type: "product-price"
  attributes: {
    currencies: TieredCurrencies
    sales?: Sales
    sku: string
  }
  id: string
}

/**
 * Container for pricebook prices.
 */
export type PricebookPriceCreateData = {
  /**
   * ProductPrice associates a collection of locale specific prices with a product ID.
   */
  data: {
    type: "product-price"
    attributes: {
      currencies: TieredCurrencies
      sales?: Sales
      sku: string
    }
  }
  links?: Links
}

/**
 * Container for pricebook prices.
 */
export type PricebookPriceData = {
  data: PricebookPrice
  links?: Links
}

/**
 * A product in a catalog with the following attributes.
 */
export type Product = {
  attributes?: ProductAttributes
  /**
   * A unique identifier for a product.
   */
  id?: string
  relationships?: ProductRelationships
  /**
   * This represents the type of object being returned. Always `product`.
   */
  type?: string
  meta?: ProductMeta
}

/**
 * A product's attributes.
 */
export type ProductAttributes = {
  /**
   * The date and time a product was published in a catalog.
   */
  published_at?: Date | null
  /**
   * If this product is a `parent` product. A `parent` product is a product that has child products that have been built using the `build child products` endpoint.
   */
  base_product?: boolean
  /**
   * The unique identifier of a `parent` product.
   */
  base_product_id?: string
  /**
   * The commodity type, either `physical` or `digital`.
   */
  commodity_type?: string
  /**
   * If a product is curated, then the `curated_product` attribute with a value of `true` is displayed. If a product is not curated, the `curated_product` attribute is not displayed.
   */
  curated_product?: boolean
  /**
   * The universal product code or european article number of the product.
   */
  upc_ean?: string
  /**
   * The manufacturer part number of the product.
   */
  manufacturer_part_num?: string
  /**
   * A list of tags associated with the product. A tag must be HTML compatible characters excluding commas and will be stored in lowercase letters.
   */
  tags?: Array<string>
  /**
   * A list of price modifier names.
   */
  price_modifiers?: Array<string>
  /**
   * The date and time a product was created.
   */
  created_at?: Date
  /**
   * A description of the product.
   */
  description?: string
  /**
   * A name of a product.
   */
  name?: string
  price?: Currencies
  shopper_attributes?: ShopperAttributes
  tiers?: Tiers
  components?: Components
  custom_inputs?: CustomInputs
  /**
   * The unique stock keeping unit of the product.
   */
  sku?: string
  /**
   * A label for the product that is used in the URL paths. A slug can contain A to Z, a to z, 0 to 9, hyphen, underscore, and period. Spaces or other special characters like ^, [], *, and $ are not allowed. By default, the product name is used as the slug.
   */
  slug?: string
  /**
   * The status of the product, either `live` or `draft`.
   */
  status?: string
  /**
   * The unique attribute associated with the product. This could be an external reference from a separate company system, for example.
   */
  external_ref?: string | null
  /**
   * The date and time a product was updated.
   */
  updated_at?: Date
  extensions?: Extensions
}

/**
 * Container for products.
 */
export type ProductCreateData = {
  /**
   * A new product in a catalog.
   */
  data?: {
    /**
     * A product's attributes.
     */
    attributes: {
      description?: string
      name: string
      sku?: string
      slug?: string
      status: string
      locales?: {
        [key: string]: {
          [key: string]: string
        }
      }
    }
    id?: string
    type: string
  }
  links?: Links
}

/**
 * Container for products.
 */
export type ProductData = {
  data?: Product
  links?: Links
  included?: Included
}

export type ProductDiff = {
  id?: string
  type?: string
  attributes?: {
    sku?: string
    this_release_id?: string
    other_release_id?: string
    diff_created_at?: Date
    exists?: {
      this: boolean
      other: boolean
    }
    updated_at?: {
      this?: Date | null
      other?: Date | null
    }
  }
}

/**
 * Container for a list of products.
 */
export type ProductListData = {
  meta?: PageMeta
  data?: Array<Product>
  links?: Links
  included?: Included
}

/**
 * A product's metadata contains information about products, for example, the nodes a product is associated with, any child products, bundle configurations, and so on.
 */
export type ProductMeta = {
  /**
   * The relationship among the array of nodes a product is associated with, demonstrating the linking of the children nodes with the parent nodes. Up to 10 levels of parent nodes are displayed, depending on the number of levels of parent nodes you have.
   */
  bread_crumbs?: {
    [key: string]: Array<string>
  }
  /**
   * An array of parent node IDs that a product is associated with. Up to 10 levels of parent nodes are displayed, depending on the number of levels of parent nodes you have.
   */
  bread_crumb_nodes?: Array<string>
  /**
   * A unique identifier of the catalog a product is associated with.
   */
  catalog_id?: string
  /**
   * The unique identifier of the price book a product is associated with.
   */
  pricebook_id?: string | null
  display_price?: DisplayPrice
  /**
   * The source of a catalog. Always `pim`.
   */
  catalog_source?: "pim"
  /**
   * With sales pricing, a store can optionally add a sale price to a product price. For example, a store can schedule seasonal pricing on products without creating a new price book and catalog ruleset. Optionally, a store can schedule the date ranges for the sale products. This is the unique identifier of a sale.
   */
  sale_id?: string
  /**
   * The date and time a sale expires.
   */
  sale_expires?: Date | null
  original_price?: Currencies
  original_display_price?: DisplayPrice
  bundle_configuration?: BundleConfiguration
  /**
   * A bundle is a purchasable product, comprising of one or more products that you want to sell together. You can create multiple components within a bundle. Each component must have at least one or more options. Each option is a product and a quantity.
   */
  component_products?: {
    [key: string]: {
      /**
       * With sales pricing, a store can optionally add a sale price to a product price. For example, a store can schedule seasonal pricing on products without creating a new price book and catalog ruleset. Optionally, a store can schedule the date ranges for the sale products. This is the unique identifier of a sale.
       */
      sale_id?: string
      /**
       * The date and time a sale expires.
       */
      sale_expires?: Date | null
      price?: Currencies
      display_price?: DisplayPrice
      original_price?: Currencies
      original_display_price?: DisplayPrice
      pricebook_id?: string | null
    }
  }
  /**
   * You can use price modifiers to change the price property of child products. By default, child products inherit the same price as their base products. Using price modifiers, you can enable child products to inherit a different price.
   */
  price_modifiers?: {
    [key: string]: {
      /**
       * There are three modifier types.
       *
       * - The `price_increment` type increases the prices of a product.
       * - The `price_decrement` type decreases the price of a product.
       * - The `price_equals` type sets the price of a product to an amount you specify.
       *
       */
      modifier_type?: string
      currencies?: Currencies
    }
  }
  /**
   * You can use tiers to allow your store to offer different pricing for minimum quantities of items that your shoppers purchase.
   */
  tiers?: {
    [key: string]: {
      /**
       * The unique identifier of a sale.
       */
      sale_id?: string
      /**
       * The date and time a sale expires.
       */
      sale_expires?: Date | null
      display_price?: DisplayPrice
      original_price?: Currencies
      original_display_price?: DisplayPrice
    }
  }
  /**
   * The `variation_matrix` object lists the variation IDs and variation option IDs and their corresponding product IDs that are generated when the variation and variation options are built with a product. If no variations are available, the `variation_matrix` is empty.
   */
  variation_matrix?: {
    [key: string]: unknown
  }
  /**
   * If you specified `build_rules` for a product, the `variations` object lists the variation option IDs that you specified to include when building your child products. If no `build_rules` are specified, all the variation and variation options available for a product are displayed. If a product does not have any variations, then the `variations` object is not displayed.
   */
  variations?: Array<Variation>
  /**
   * An array of variation options IDs that a child product has.
   */
  child_option_ids?: Array<string> | null
  /**
   * If this is a child product, the `child_variations` object lists the variation option IDs that define this child product.
   */
  child_variations?: Array<Variation> | null
  /**
   * Commerce automatically assigns types to the products you create. In Commerce Manager, you can see at a glance the product types in a list of a products. In addition, you can filter on product types in both the API and Commerce Manager.
   *
   * Product types can also be used in catalogs. For example, in your catalog, you can filter on parent so that only your parent products are displayed in your storefront.
   *
   * Products have one of the following types:
   *
   * - **standard** - Standard products are a standalone products.
   * - **parent** - A parent product is a product that has child products that have been built using the `Build Child Products` endpoint.
   * - **child** - When you configure product variations and variation options for parent products, the child products derived from the parent products are automatically created in Commerce.
   * - **bundle** - A bundle is a purchasable product, comprising two or more standalone products (in other words, components) to be sold together.
   *
   */
  product_types?: Array<string>
  /**
   * If you storefront supports multiple languages, your storefront's preferred language and locale.
   */
  language?: string
}

/**
 * The options available for a variation.
 */
export type VariationOption = {
  /**
   * A unique identifier for an option.
   */
  id?: string
  /**
   * The name of the option.
   */
  name?: string
  /**
   * If you specified a `sort_order` when creating your variations and variation options, then use the `sort_order` value to program your storefront to display the variations and variation options in the order that you want.
   */
  sort_order?: number | null
  /**
   * The option description to display to customers.
   */
  description?: string
}

export type Variation = {
  /**
   * A unique identifier of a variation.
   */
  id?: string
  /**
   * The name of a variation.
   */
  name?: string
  /**
   * If you specified a `sort_order` when creating your variations and variation options, then use the `sort_order` value to program your storefront to display the variations and variation options in the order that you want.
   */
  sort_order?: number | null
  option?: VariationOption
  /**
   * The options available for this variation.
   */
  options?: Array<VariationOption>
}

/**
 * Container for a bundle configuration.
 */
export type BundleConfigurationData = {
  data: BundleConfiguration
}

/**
 * A bundle is a purchasable product, comprising of one or more products that you want to sell together. You can create multiple components within a bundle. Each component must have at least one or more options. Each option is a product and a quantity.
 */
export type BundleConfiguration = {
  /**
   * The product options included in a component. This can be the ID of another bundle.
   */
  selected_options: {
    [key: string]: {
      [key: string]: BigInt
    }
  }
}

/**
 * A product identifier.
 */
export type ProductReference = {
  /**
   * A unique identifier for a product.
   */
  id?: string
  /**
   * This represents the type of object being returned. Always `product`.
   */
  type?: "product"
}

/**
 * Container for a list of product references.
 */
export type ProductReferenceListData = {
  meta?: PageMeta
  data?: ProductReferences
  links?: Links
}

/**
 * A list of product identifiers.
 */
export type ProductReferences = Array<ProductReference>

/**
 * Relationships allow you to move between requests. Includes links to the parent and child products, bundle component products, files, and main images associated with a product.
 */
export type ProductRelationships = {
  /**
   * The details of a `parent` product. A `parent` product is a product that has child products that have been built using the `Build Child Products` endpoint.
   */
  parent?: {
    data?: ProductReference
  }
  /**
   * The details of a `child` product. When you configure product variations and variation options for parent products, the child products derived from the parent products are automatically created in Commerce.
   */
  children?: {
    data?: ProductReferences
    links?: SelfLink
  }
  files?: FilesRelationship
  main_image?: MainImageRelationship
  component_products?: ComponentProductsRelationship
}

/**
 * Container for product relationships.
 */
export type ProductRelationshipsData = {
  data?: ProductRelationships
  links?: Links
}

/**
 * A list of products to be added to cart. Can be type product-data or error-response.
 */
export type ProductsForCart = {
  data: Array<unknown>
  included?: {
    component_products?: Array<Product>
  } | null
}

/**
 * A list of product id or sku and bundle configuration for cart.
 */
export type ProductsForCartConfiguration = {
  data: Array<{
    id?: string | null
    sku?: string | null
    bundle_configuration?: BundleConfiguration
  }>
}

/**
 * A URL to a related object, for example, catalog rules, hierarchies, price books, products and deltas.
 */
export type RelatedLink = {
  /**
   * A URL to a related object, for example, catalog rules, hierarchies, price books, products and deltas.
   */
  related: string
}

/**
 * Links are used to allow you to move between requests.
 */
export type SelfLink = {
  /**
   * Single entities use a self parameter with a link to that specific resource.
   */
  self: string
}

/**
 * A catalog release represents a collection of hierarchical product data, price books and catalogs rules.
 */
export type Release = {
  /**
   * A unique identifier for the catalog release.
   */
  id?: string
  attributes?: {
    /**
     * The name of a release.
     */
    name?: string
    /**
     * The date and time a release was published.
     */
    published_at?: Date | null
    /**
     * A unique identifier for the catalog.
     */
    catalog_id?: string
    /**
     * A description of the catalog release.
     */
    description?: string
    /**
     * An array of hierarchy IDs associated with the release.
     */
    hierarchies?: Array<NodeReference>
  }
  relationships?: ReleaseRelationships
  /**
   * This represents the type of object being returned. Always `catalog-release`.
   */
  type?: string
  meta?: ReleaseMeta
}

/**
 * Container for a catalog release.
 */
export type ReleaseData = {
  data?: Release
  links?: Links
}

/**
 * Container for a list of catalog releases.
 */
export type ReleaseListData = {
  data?: Array<Release>
  links?: Links
}

/**
 * The status of the current release.
 */
export type ReleaseStatus = "PENDING" | "IN_PROGRESS" | "FAILED" | "PUBLISHED"

/**
 * A release's metadata.
 */
export type ReleaseMeta = {
  /**
   * The date and time a release is created.
   */
  created_at?: Date
  /**
   * The date and time a release is available for use. In other words, the date and time the status of a catalog release changes to PUBLISHED, rather than IN PROGRESS.
   */
  started_at?: Date | null
  /**
   * The date and time a release is updated.
   */
  updated_at?: Date | null
  /**
   * The status of the current release.
   */
  release_status?: "PENDING" | "IN_PROGRESS" | "FAILED" | "PUBLISHED"
  /**
   * Your storefront's preferred language code and locale.
   */
  language?: string
  /**
   * Indicates that a full publish was performed (either because this is the first time a catalog has been published or because of a change that occurred, for example, adding/removing a price book or hierarchy). When determining whether delta data needs to be refreshed, ignore this attribute and always use the `is_full_delta` attribute.
   *
   */
  is_full_publish?: boolean
  /**
   * Indicates whether the release delta file contains the full content of a catalog release. Using a search service as an example, if the `is_full_delta` attribute is `true`, you should remove all data about that catalog release from the search service before injecting fresh data from the delta file. If the `is_full_delta` attribute is `false`, then data from the previous catalog release overlays the existing data in the delta file. The `is_full_delta` attribute is always `true` the first time a catalog is published.
   *
   */
  is_full_delta?: boolean
  /**
   * The total number of products displayed in a catalog release.
   */
  total_products?: BigInt | null
  /**
   * The total number of hierarchy nodes displayed in a catalog release.
   */
  total_nodes?: BigInt | null
  /**
   * An integer that represents the progress of a catalog publish. The attribute starts at `0` and reaches `100` when publishing is complete.
   */
  percent_completed?: number | null
  /**
   * The owner of the resource, can be either `organization` or `store`.
   */
  owner?: "store" | "organization"
}

/**
 * Relationships are established between different catalog entities. For example, products, hierarchies, price books, and catalog rules are related to a catalog, as they are associated with it.
 */
export type ReleaseRelationships = {
  /**
   * A URL to a delta document that describes the changes between catalog releases.
   */
  delta?: {
    links?: RelatedLink
  }
  /**
   * A URL to all products included in a catalog release.
   */
  products?: {
    links?: RelatedLink
  }
  /**
   * A URL to all hierarchies included in a catalog release.
   */
  hierarchies?: {
    links: RelatedLink
  }
}

/**
 * A catalog rule specifies which catalog to use for a given shopper context.
 */
export type Rule = {
  /**
   * The catalog rule ID. Use this to get, modify, or delete the catalog rule.
   */
  id: string
  attributes: {
    /**
     * The name of a catalog rule. The name must not contain any spaces.
     */
    name: string
    /**
     * A brief description of the purpose of a catalog rule.
     */
    description?: string
    /**
     * The list of accounts who are eligible to see this catalog. If this field is empty, the rule matches all accounts.
     */
    account_ids?: Array<string>
    /**
     * The list of customers who are eligible to see this catalog. If empty, the rule matches all customers.
     */
    customer_ids?: Array<string>
    /**
     * The list of channels in which this catalog can be displayed. A channel is the shopping experience, such as a mobile app or web storefront. If empty, the catalog rule matches all channels. The channel will eventually be included in the bearer token that is used for authorization, but currently, you must set the `EP-Channel` header in your requests.
     */
    channels?: Array<string>
    /**
     * A list of user-defined tags that can be used to further restrict the eligibility criteria for this rule. Requests populate the catalog rule tag using the `EP-Context-Tag` header.
     */
    tags?: Array<string>
    /**
     * Specifies a time period when a catalog is displayed, such as on a specific date or during summer. Requests populate the rule tag using the `EP-Context-Tag` header.
     *
     * The schedules attribute must include the following.
     *
     * - `valid_from` matches the date and time that the catalog is displayed from.
     * - `valid_to` matches the date and time the catalog is displayed to.
     *
     * Commerce runs on UTC time.
     *
     * You can offset the timezone by adding the offset to the end of the date and time. For example, a catalog which contains a sale hierarchy that should appear for a set timeframe may be scheduled to publish on a given date and time within a given timezone. For instance, a sale that should begin on 1st of June 2022 05:00 ET and end on the 15th of June 2022 at 23:50 PT would have a valid schedule of `"valid_from": "2022-06-01T05:00:00.000-05:00"`, `"valid_to": "2022-06-15T11:59:99.000-08:00"`.
     *
     */
    schedules?: Array<RuleSchedule>
    /**
     * The unique identifier of a catalog.
     */
    catalog_id: string
    /**
     * The date and time a catalog rule was created.
     */
    created_at: Date
    /**
     * The date and time a catalog release is updated.
     */
    updated_at: Date
  }
  /**
   * This represents the type of object being returned. Always `catalog_rule`.
   */
  type: "catalog_rule"
}

/**
 * A catalog rule specifies which catalog to use for a given shopper context.
 */
export type RuleCreateData = {
  data: {
    attributes: {
      /**
       * The name of a catalog rule. The name must not contain spaces.
       */
      name: string
      /**
       * A brief description of the purpose of a catalog rule.
       */
      description?: string | null
      /**
       * The list of accounts who are eligible to see this catalog. If this field is empty, the rule matches all accounts.
       */
      account_ids?: Array<string> | null
      /**
       * The list of customers who are eligible to see this catalog. If empty, the rule matches all customers.
       */
      customer_ids?: Array<string> | null
      /**
       * The list of channels in which this catalog can be displayed. A channel is the shopping experience, such as a mobile app or web storefront. If empty, the catalog rule matches all channels. The channel will eventually be included in the bearer token that is used for authorization, but currently, you must set the `EP-Channel` header in your requests.
       */
      channels?: Array<string> | null
      /**
       * A list of user-defined tags that can be used to further restrict the eligibility criteria for this rule. Requests populate the catalog rule tag using the `EP-Context-Tag` header.
       */
      tags?: Array<string> | null
      /**
       * Specifies a time period when a catalog is displayed, such as on a specific date or during summer. Requests populate the rule tag using the `EP-Context-Tag` header.
       *
       * The schedules attribute must include the following.
       *
       * - `valid_from` matches the date and time that the catalog is displayed from.
       * - `valid_to` matches the date and time the catalog is displayed to.
       *
       * Commerce runs on UTC time.
       *
       * You can offset the timezone by adding the offset to the end of the date and time. For example, a catalog which contains a sale hierarchy that should appear for a set timeframe may be scheduled to publish on a given date and time within a given timezone. For instance, a sale that should begin on 1st of June 2022 05:00 ET and end on the 15th of June 2022 at 23:50 PT would have a valid schedule of `"valid_from": "2022-06-01T05:00:00.000-05:00"`, `"valid_to": "2022-06-15T11:59:99.000-08:00"`.
       *
       */
      schedules?: Array<RuleSchedule> | null
      /**
       * The unique identifier of a catalog.
       */
      catalog_id: string
    }
    /**
     * This represents the type of object being returned. Always `catalog_rule`.
     */
    type: "catalog_rule"
  }
}

/**
 * Container for a single catalog rule.
 */
export type RuleData = {
  data: Rule
  links?: Links
}

/**
 * Container for a list of catalog rules.
 */
export type RuleListData = {
  meta?: PageMeta
  data: Array<Rule>
  links?: Links
}

/**
 * A period of time during which a catalog is valid
 */
export type RuleSchedule = {
  /**
   * Matches the date and time that the catalog is displayed from.
   */
  valid_from?: Date | null
  /**
   * Matches the date and time the catalog is displayed to.
   */
  valid_to?: Date | null
}

/**
 * A catalog rule specifies which catalog to use for a given shopper context.
 */
export type RuleUpdateData = {
  data: {
    /**
     * The catalog rule ID. Use this to get, modify, or delete the catalog rule.
     */
    id: string
    attributes?: {
      /**
       * The name of a catalog rule. The name must not contain spaces.
       */
      name?: string | null
      /**
       * A description of the purpose of a catalog rule.
       */
      description?: string | null
      /**
       * Specifies the list of accounts who are eligible to see this catalog. If this field is empty, the rule matches all accounts.
       */
      account_ids?: Array<string> | null
      /**
       * The list of customers who are eligible to see this catalog. If empty, the rule matches all customers.
       */
      customer_ids?: Array<string> | null
      /**
       * The list of channels in which this catalog can be displayed. A channel is the shopping experience, such as a mobile app or web storefront. If empty, the catalog rule matches all channels. The channel will eventually be included in the bearer token that is used for authorization, but currently, you must set the `EP-Channel` header in your requests.
       */
      channels?: Array<string> | null
      /**
       * Specifies a time period when a catalog is displayed, such as on a specific date or during summer. Requests populate the rule tag using the `EP-Context-Tag` header.
       *
       * The schedules attribute must include the following.
       *
       * - `valid_from` matches the date and time that the catalog is displayed from.
       * - `valid_to` matches the date and time the catalog is displayed to.
       *
       * Commerce runs on UTC time.
       *
       * You can offset the timezone by adding the offset to the end of the date and time. For example, a catalog which contains a sale hierarchy that should appear for a set timeframe may be scheduled to publish on a given date and time within a given timezone. For instance, a sale that should begin on 1st of June 2022 05:00 ET and end on the 15th of June 2022 at 23:50 PT would have a valid schedule of `"valid_from": "2022-06-01T05:00:00.000-05:00"`, `"valid_to": "2022-06-15T11:59:99.000-08:00"`.
       *
       */
      schedules?: Array<RuleSchedule> | null
      /**
       * A list of user-defined tags that can be used to further restrict the eligibility criteria for this rule. Requests populate the catalog rule tag using the `EP-Context-Tag` header.
       */
      tags?: Array<string> | null
      /**
       * The unique identifier of a catalog rule.
       */
      catalog_id?: string | null
    }
    /**
     * This represents the type of object being returned. Always `catalog_rule`.
     */
    type: "catalog_rule"
  }
}

/**
 * A set of sale prices and a validity period.
 */
export type Sale = {
  schedule?: Schedule
  currencies?: TieredCurrencies
}

/**
 * A set of sale specifications
 */
export type Sales = {
  [key: string]: Sale
}

/**
 * A definition of the times at which a sale is valid
 */
export type Schedule = {
  valid_from?: Date | null
  valid_to?: Date | null
}

/**
 * The name of the tier, for example, `Pencils`.
 */
export type Tier = {
  /**
   * The minimum quantity of 1 or more defined for the specified price. If a minimum quantity is not specified, an error is returned.
   */
  minimum_quantity?: number
  price?: Currencies
}

/**
 * The three-letter ISO code for the currency associated with this price.
 */
export type TieredAmount = {
  /**
   * The price in the lowest denomination for the specified currency. This is a product's list price.
   */
  amount?: BigInt
  /**
   * Whether this price includes tax.
   */
  includes_tax?: boolean
  /**
   * The price tier that an item is eligible for based on the quantity purchased. You cannot have conflicting tiers within the same currencies block.
   */
  tiers?: {
    [key: string]: {
      /**
       * The minimum quantity of 1 or more defined for the specified price. If a minimum quantity is not specified, an error is returned.
       */
      minimum_quantity?: number
      /**
       * The price for each quantity.
       */
      amount?: BigInt
    }
  }
}

/**
 * Collection of currency specific prices for a product.
 */
export type TieredCurrencies = {
  [key: string]: TieredAmount
}

/**
 * The price tier that an item is eligible for based on the quantity purchased. You cannot have conflicting tiers within the same currencies block.
 */
export type Tiers = {
  [key: string]: Tier
}

/**
 * Creates a catalog release with the following attributes.
 */
export type CatalogReleaseCreateData = {
  data?: {
    /**
     * Set to `true` if you want to export all the data from a catalog release in a delta link. The `is_full_delta` attribute is returned from the `get a release of a catalog` endpoint. The `is_full_delta` attribute tells you if the delta file contains the full content of a catalog release. You can use the `is_full_delta` to determine if you need to refresh the data in your company system before publishing a catalog release with fresh data in a delta link. Using a search service as an example, if the `is_full_delta` attribute is true, you should remove all data about that catalog from the search service before publishing a catalog release and injecting fresh data from the delta file. If the `is_full_delta` attribute is false, then data from the previous catalog overlays the existing data in the delta file. The `is_full_delta` attribute is always `true` the first time a catalog is published.
     *
     */
    export_full_delta?: boolean
    /**
     * If you are publishing a catalog in a store that contains resources from an organization, you must set this to true and you must enable the **Include Organization Resources in Catalog Publishes** checkbox in Commerce Manager. See [**Multi-Store Management Solutions**](/docs/api/pxm/catalog/publish-release).
     */
    include_organization_resources?: boolean | null
  }
}

/**
 * Included is an array of resources that are included in the response.
 */
export type Included = {
  /**
   * The main images associated with a product.
   */
  main_images?: Array<ElasticPathFile>
  /**
   * The component products associated with a product.
   */
  component_products?: Array<Product>
  /**
   * The files associated with a product.
   */
  files?: Array<ElasticPathFile>
}

export type ElasticPathFile = {
  /**
   * The unique identifier for this file.
   */
  id?: string
  /**
   * The type represents the object being returned.
   */
  type?: string
  /**
   * The name of the file.
   */
  file_name?: string
  /**
   * The mime type of the file.
   */
  mime_type?: string
  /**
   * The size of the file. Required when uploading files.
   */
  file_size?: number
  /**
   * DEPRECATED Whether the file public or not. Required when uploading files.
   */
  public?: boolean
  meta?: FileMeta
  links?: Links
  link?: FileLink
}

export type FileMeta = {
  /**
   * The date and time the file was created.
   */
  timestamps?: {
    /**
     * The date and time the file was created.
     */
    created_at?: string
  }
  /**
   * The file dimensions.
   */
  dimensions?: {
    /**
     * The width of the file.
     */
    width?: number
    /**
     * The height of the file.
     */
    height?: number
  }
}

/**
 * The publicly available URL for this file.
 */
export type FileLink = {
  /**
   * The publicly available URL for this file.
   */
  href?: string
}

export type CartsRequest = {
  /**
   * The cart description.
   */
  description?: string
  discount_settings?: DiscountSettings
  /**
   * The cart name provided by the shopper. A cart name must contain 1 to 255 characters. You cannot use whitespace characters, but special characters are permitted. For more information, see the [Safe Characters](/guides/Getting-Started/safe-characters) section.
   */
  name?: string
  contact?: CartContact
  /**
   * This optional parameter sets a reference date for the cart. If this parameter is set, it allows the cart to act as one that might occur on that specified date. For example, such future carts might acquire future-enabled discounts, allowing users to test and validate future interactions with carts. The snapshot_date must be in the format 2026-02-21T15:07:25Z. By default, this parameter is left empty.
   */
  snapshot_date?: string
  custom_attributes?: CustomAttributes
  /**
   * To remove the Stripe payment intent from a cart, pass the empty value in the `payment_intent_id` field.  You must use an empty value for this field. You cannot use this endpoint to directly update the cart to use an existing Payment Intent.
   */
  payment_intent_id?: string
}

export type CartContact = {
  /**
   * The email address attached to a cart.
   */
  email?: string
}

export type DiscountSettings = {
  /**
   * This parameter enables custom discounts for a cart. When set to true, Elastic Path promotions will not be applied to the new carts. Default is set from cart discount settings for the store. See [Cart Settings](/docs/api/settings/put-v-2-settings-cart).
   */
  custom_discounts_enabled?: boolean
  /**
   * When set to true, this parameter allows the cart to use rule promotions.
   */
  use_rule_promotions?: boolean
}

export type CustomAttributes = {
  /**
   * Specifies the custom attributes for the cart object. The attribute can be any string, numerical, and underscore. A cart can have maximum of 20 custom attributes.
   */
  custom_attributes?: {
    /**
     * Specifies the attribute `type` and `value`.
     */
    attribute?: {
      /**
       * Specifies the type of the attribute such as string, integer, boolean, and float.
       */
      type?: string
      /**
       * Specifies the value of the attribute.
       */
      value?: string | number | boolean
    }
  }
}

export type CartResponse = {
  /**
   * The unique identifier for the cart. Use SDK or create it yourself.
   */
  id?: string
  /**
   * The type of object being returned.
   */
  type?: string
  /**
   * The name of this cart.
   */
  name?: string
  /**
   * A description of the cart.
   */
  description?: string
  contact?: CartContact
  discount_settings?: DiscountSettings
  /**
   * Stripe-assigned unique identifier for the linked Payment Intent
   */
  payment_intent_id?: string
  links?: {
    /**
     * A link to that specific resource.
     */
    self?: string
  }
  meta?: {
    display_price?: {
      with_tax?: FormattedPriceData
      without_tax?: FormattedPriceData
      tax?: FormattedPriceData
      discount?: FormattedPriceData
      without_discount?: FormattedPriceData
      shipping?: FormattedPriceData
    }
    timestamps?: Timestamps
  }
  relationships?: {
    customers?: {
      data?: {
        /**
         * The type of related object.
         */
        type?: string
        /**
         * The ID of the customer.
         */
        readonly id?: string
      }
    }
    items?: {
      data?: {
        /**
         * The type of related object.
         */
        type?: string
        /**
         * The unique identifier for the cart item
         */
        readonly id?: string
      }
    }
  }
}

export type CartItemsObjectRequest =
  | CartItemObject
  | SubscriptionItemObject
  | CartMergeObjectRequest
  | CustomItemObject
  | ReOrderObjectRequest
  | PromotionItemObject

export type CartItemObject = {
  data?: CartItemObjectData & CartItemResponse
}

/**
 * The type of object being returned.
 */
export type Type = "cart_item"

export type CartItemObjectData = {
  /**
   * The type of object being returned.
   */
  type: "cart_item"
  /**
   * The number of items added to the cart.
   */
  quantity: number
  /**
   * Specifies the ID of the product you want to add to cart. (use this OR sku)
   */
  id?: string
  /**
   * Specifies the item SKU that you want to add to cart. (use this OR id)
   */
  sku?: string
  /**
   * The custom text to be added to a product.
   */
  custom_inputs?: {
    [key: string]: unknown
  }
  /**
   * Object used to describe the bundle options selected.
   */
  bundle_configuration?: {
    /**
     * Specifies selected options.
     */
    selected_options?: {
      [key: string]: unknown
    }
    /**
     * Array of component products for the selected options.
     */
    component_products?: Array<unknown>
  }
  /**
   * Identifier for a created Cart Shipping Group
   */
  shipping_group_id?: string
  /**
   * The slug of a stock location.
   */
  location?: string
}

export type SubscriptionItemObject = {
  data?: SubscriptionItemObjectData & CartItemResponse
}

export type SubscriptionItemObjectData = {
  /**
   * The type of object being returned.
   */
  type: "subscription_item"
  /**
   * The number of items added to the cart.
   */
  quantity: number
  /**
   * Specifies the ID of the subscription offering you want to add to cart.
   */
  id: string
  /**
   * Specifies how the subscription offering should be configured.
   */
  subscription_configuration: {
    /**
     * The ID of the plan within the offering to use for the subscription.
     */
    plan: string
  }
}

export type CartMergeObjectRequest = {
  data?: Array<CartMergeObject>
  options?: AddAllOrNothingOptionsObject
}

export type CartMergeObject = {
  /**
   * The type of object being returned. Must be `cart_items`.
   */
  type: "cart_items"
  /**
   * The original cart to be merged from.
   */
  cart_id: string
}

export type CustomItemObject = {
  data?: CustomItemObjectData
}

export type CustomItemObjectData = {
  /**
   * The type of object being returned. Must be `custom_item`.
   */
  type: "custom_item"
  /**
   * The number of custom items to add to cart.
   */
  quantity: number
  price: {
    /**
     * The unit price of the custom item.
     */
    amount: number
    /**
     * Set to`true` if relevant taxes have been included in the price, `false` if not. Defaults to `true`.
     */
    includes_tax?: boolean
  }
  /**
   * A description of the custom item.
   */
  description?: string
  /**
   * The `SKU` code to use for the custom item. See [best practices](https://elasticpath.dev/docs/commerce-cloud/carts/cart-items/add-custom-item-to-cart#best-practices) to use the `SKU` code.
   */
  sku?: string
  /**
   * The name of the custom item.
   */
  name: string
  /**
   * The custom text to be added to a product.
   */
  custom_inputs?: {
    [key: string]: unknown
  }
  /**
   * Identifier for a created Cart Shipping Group
   */
  shipping_group_id?: string
}

export type ReOrderObjectRequest = {
  data?: ReOrderObject
  options?: AddAllOrNothingOptionsObject
}

export type ReOrderObject = {
  /**
   * The type of resource being returned. Use `order_items`.
   */
  type: "order_items"
  /**
   * The unique identifier of the order.
   */
  order_id: string
}

export type BulkAddItemsRequest = {
  data?:
    | CartItemsObjectRequest
    | CartMergeObjectRequest
    | CustomItemObject
    | ReOrderObjectRequest
    | PromotionItemObject
}

export type PromotionItemObject = {
  data?: PromotionItemObjectData
}

export type PromotionItemObjectData = {
  /**
   * Specifies the type of resource, which is `promotion_item`.
   */
  type: "promotion_item"
  /**
   * Specifies the promotion code. For more information about codes[].user[], see the [Create Promotion codes](/docs/api/promotions/create-promotion-codes) section.
   */
  code: string
}

export type BulkUpdateCartsItems = {
  data?: Array<{
    /**
     * Specifies the ID of the cart item that you want to update in cart.
     */
    id?: string
    /**
     * Specifies the amount of items to update in the cart.
     */
    quantity?: number
    /**
     * Specifies the custom text to be added to a product. See [custom inputs](https://elasticpath.dev/docs/pxm/products/ep-pxm-products-api/update-a-product#using-custom-inputs-attribute).
     */
    custom_inputs?: {
      [key: string]: unknown
    }
  }>
  options?: UpdateAllOrNothingOptionsObject
}

export type UpdateCartsItems = {
  data?: {
    /**
     * The unique identifier of the cart item.
     */
    id?: string
    /**
     * The amount of products to add to cart.
     */
    quantity?: number
    /**
     * The custom text to be added to a product.
     */
    custom_inputs?: {
      [key: string]: unknown
    }
    /**
     * The unique identifier of the shipping group to be added to the cart.
     */
    shipping_group_id?: string
  }
}

export type AddAllOrNothingOptionsObject = {
  /**
   * When `true`, if an error occurs for any item, no items are added to the cart. When `false`, valid items are added to the cart and the items with errors are reported in the response. Default is `false`.
   */
  add_all_or_nothing?: boolean
}

export type UpdateAllOrNothingOptionsObject = {
  /**
   * When set to`true`, if an error occurs for any item, no items are updated in the cart. When set to `false`, valid items are updated in the cart and the items with errors are reported in the response. Default is `true`.
   */
  update_all_or_nothing?: boolean
}

export type CartItemResponse = {
  /**
   * The unique ID of the product.
   */
  readonly product_id?: string
  /**
   * The unique ID of the subscription offering for subscription items.
   */
  readonly subscription_offering_id?: string
  /**
   * The name of this item
   */
  readonly name?: string
  /**
   * A description of the cart item.
   */
  readonly description?: string
  /**
   * The unique identifier of the catalog associated with the product is shown if catalog_source=pim is set.
   */
  readonly catalog_id?: string
  /**
   * The catalog source. Always `pim` or `legacy`.
   */
  readonly catalog_source?: string
  readonly image?: {
    /**
     * The MIME type for the uploaded file.
     */
    readonly mime_type?: string
    /**
     * The name of the image file that was uploaded.
     */
    readonly file_name?: string
    /**
     * The link to the image.
     */
    readonly href?: string
  }
  readonly manage_stock?: boolean
  unit_price?: ItemPriceData
  value?: ItemPriceData
  readonly links?: {
    /**
     * A URL related to the resource.
     */
    product?: string
  }
  readonly meta?: {
    display_price?: {
      with_tax?: FormattedPriceData
      without_tax?: FormattedPriceData
      tax?: FormattedPriceData
      discount?: FormattedPriceData
      without_discount?: FormattedPriceData
    }
    timestamps?: Timestamps
  }
}

export type CartsResponse = {
  data?: Array<CartItemObject>
  meta?: {
    display_price?: {
      with_tax?: FormattedPriceData
      without_tax?: FormattedPriceData
      tax?: FormattedPriceData
      discount?: FormattedPriceData
      without_discount?: FormattedPriceData
      discounts?: {
        [key: string]: {
          amount?: number
          currency?: string
          formatted?: string
        }
      }
    }
    timestamps?: CartTimestamps
  }
}

export type ItemPriceData = {
  /**
   * The amount for this item as an integer.
   */
  readonly amount?: number
  /**
   * The currency this item was added to the cart as.
   */
  readonly currency?: string
  /**
   * Whether or not this price is tax inclusive.
   */
  readonly includes_tax?: boolean
}

export type CartsRelationshipsAccountsData = {
  data?: Array<{
    /**
     * The ID of the account.
     */
    id?: string
    /**
     * The type of related object. Ensure that it is account.
     */
    type?: string
  }>
}

export type CartsRelationshipsCustomersData = {
  data?: Array<{
    /**
     * The ID of the customer.
     */
    id?: string
    /**
     * The type of related object. Ensure that it is customer.
     */
    type?: string
  }>
}

export type CartsItemsTaxesObject = {
  /**
   * A unique tax code in this jurisdiction.
   */
  code?: string
  /**
   * The relevant tax jurisdiction.
   */
  jurisdiction?: string
  /**
   * The name of the tax item.
   */
  name?: string
  /**
   * The tax rate represented as a decimal (12.5% -> 0.125).
   */
  rate: number
  /**
   * The type of object being returned. Use `tax_item`.
   */
  type: string
  /**
   * The unique identifier for this tax item.
   */
  readonly id?: string
}

export type CartsBulkCustomDiscounts = {
  data?: Array<CartsCustomDiscountsObject & CartItemBulkCustomDiscountObject>
  options?: AddAllOrNothingOptionsObject
}

export type CartsBulkCustomDiscountsResponse = {
  data?: Array<CartsCustomDiscountsResponse & ArtItemBulkCustomDiscountResponse>
  options?: AddAllOrNothingOptionsObject
}

export type CartItemBulkCustomDiscountObject = CartsCustomDiscountsObject &
  CustomDiscountRelationshipsCartItemRequest

export type ArtItemBulkCustomDiscountResponse = CartsCustomDiscountsResponse &
  CustomDiscountRelationshipsCartItemRequest

export type CartsCustomDiscountsObject = {
  /**
   * Specifies an amount to be applied for the custom discount. It must be less than zero.
   */
  amount: number
  /**
   * Specifies a description for the custom discount.
   */
  description: string
  /**
   * Specifies the discount code used for the custom discount.
   */
  discount_code: string
  /**
   * Specifies from where the custom discount is applied. For example, Talon.one.
   */
  discount_engine: string
  /**
   * Specifies an external id for the custom discount.
   */
  external_id: string
  /**
   * Specifies the type of the resource. Always `custom_discount`.
   */
  type: string
}

export type CartsCustomDiscountsResponse = {
  amount?: {
    /**
     * Specifies an amount to be applied for the custom discount. It must be less than zero.
     */
    amount?: number
    /**
     * The currency set for the custom discount.
     */
    currency?: string
    /**
     * The formatted value for the custom discount.
     */
    formatted?: string
  }
  /**
   * Specifies a description for the custom discount.
   */
  description?: string
  /**
   * Specifies the discount code used for the custom discount.
   */
  discount_code?: string
  /**
   * Specifies from where the custom discount is applied. For example, Talon.one.
   */
  discount_engine?: string
  /**
   * Specifies an external id for the custom discount.
   */
  external_id?: string
  /**
   * Specifies the type of the resource. Always `custom_discount`.
   */
  type?: string
  /**
   * Specifies the UUID of the custom discount.
   */
  readonly id?: string
}

export type CustomDiscountRelationshipsCartItemRequest = {
  relationships?: {
    item?: {
      data?: {
        /**
         * Specifies the type of item. For example, `custom_item` or `cart_item`.
         */
        type?: string
        /**
         * Specifies the unique identifier of the `cart_item` or `custom_item` in the cart.
         */
        id?: string
      }
    }
  }
}

export type CartItemRelationship = {
  relationships?: {
    order?: {
      data?: {
        /**
         * This specifies the type of item.
         */
        type?: string
        /**
         * This specifies the ID of the cart_item or custom_item in the cart.
         */
        id?: string
      }
    }
  }
}

export type CartsBulkTaxes = {
  data?: Array<CartsItemsTaxesObject & CartItemRelationship>
  options?: AddAllOrNothingOptionsObject
}

export type OrdersAnonymizeRequest = {
  data?: OrdersAnonymizeData
}

export type OrdersAnonymizeData = {
  /**
   * The unique identifiers of the orders to be anonymized. You can anonymize multiple orders at the same time.
   */
  order_ids?: Array<string>
}

export type OrdersUpdateRequest = {
  data?: OrdersAddressData | OrdersCancelData | OrdersFulfilledData
}

export type OrdersAddressData = {
  /**
   * Specifies a user-managed, optional field used as an alternative to the existing order_id. If provided, the order-number will be sent to Authorize.net instead of the order_id, and will appear as the invoice number in Authorize.net transactions.
   */
  order_number?: string
  /**
   * Represents an optional external ID reference for an order. It can contain alphanumeric characters, special characters, and spaces, and is not required to be unique. The maximum allowed length is 64 characters. It can be used to include an external reference from a separate company system.
   */
  external_ref?: string
  shipping_address: {
    /**
     * Specifies the first name of the address holder.
     */
    first_name?: string
    /**
     * Specifies the last name of the address holder.
     */
    last_name?: string
    /**
     * Specifies the phone number of the address holder.
     */
    phone_number?: string
    /**
     * Specifies the company name.
     */
    company_name?: string
    /**
     * Specifies the first line of the address.
     */
    line_1?: string
    /**
     * Specifies the second line of the address.
     */
    line_2?: string
    /**
     * Specifies the name of the city in the shipping address.
     */
    city?: string
    /**
     * Specifies the county of the shipping address.
     */
    county?: string
    /**
     * Specifies the state, province, or region of the shipping address.
     */
    region?: string
    /**
     * Specifies the postcode or ZIP code of the address.
     */
    postcode?: string
    /**
     * Specifies the country in the shipping address.
     */
    country?: string
    /**
     * Specifies any instructions provided with the shipping address.
     */
    instructions?: string
  }
}

export type OrdersCancelData = {
  /**
   * The status of the order. You can only update the status to `cancelled`.
   */
  status: string
  /**
   * The type of the resource. You must use order.
   */
  type: string
  /**
   * Represents an optional external ID reference for an order. It can contain alphanumeric characters, special characters, and spaces, and is not required to be unique. The maximum allowed length is 64 characters. It can be used to include an external reference from a separate company system.
   */
  external_ref?: string
}

export type OrdersFulfilledData = {
  /**
   * The shipping status of the order. You can only update the shipping status to `fulfilled`.
   */
  shipping: string
  /**
   * The type of the resource. You must use order.
   */
  type: string
  /**
   * Represents an optional external ID reference for an order. It can contain alphanumeric characters, special characters, and spaces, and is not required to be unique. The maximum allowed length is 64 characters. It can be used to include an external reference from a separate company system.
   */
  external_ref?: string
}

export type PaymentsRequest = {
  data?: DataPaymentObject
}

export type Gateway =
  | "adyen"
  | "authorize_net"
  | "braintree"
  | "card_connect"
  | "cyber_source"
  | "elastic_path_payments_stripe"
  | "manual"
  | "paypal_express_checkout"
  | "stripe"
  | "stripe_connect"
  | "stripe_payment_intents"

/**
 * Specifies the transaction method, such as `purchase` or `authorize`.
 */
export type Method =
  | "authorize"
  | "purchase"
  | "purchase_setup"
  | "authorize_setup"

export type DataBasePayments = {
  gateway:
    | "adyen"
    | "authorize_net"
    | "braintree"
    | "card_connect"
    | "cyber_source"
    | "elastic_path_payments_stripe"
    | "manual"
    | "paypal_express_checkout"
    | "stripe"
    | "stripe_connect"
    | "stripe_payment_intents"
  /**
   * Specifies the transaction method, such as `purchase` or `authorize`.
   */
  method: "authorize" | "purchase" | "purchase_setup" | "authorize_setup"
  /**
   * The amount to be paid for the transaction.
   */
  amount?: number
}

export type DataAdyenPayment = DataBasePayments & {
  /**
   * Specifies the gateway. You must use `adyen`.
   */
  gateway: "adyen"
  options?: {
    /**
     * The shopper reference token associated with the saved payment method.
     */
    shopper_reference?: string
    /**
     * Enter CardOnFile for a one-time purchase.
     */
    recurring_processing_model?: string
  }
  /**
   * The Adyen recurringDetailReference payment method identifier.
   */
  payment: string
}

export type DataAuthorizeNetPayment = DataBasePayments & {
  /**
   * Specifies the gateway. You must use `authorize_net`.
   */
  gateway: "authorize_net"
  options?: {
    /**
     * The Authorize.net customer payment profile ID.
     */
    customer_payment_profile_id?: string
  }
  /**
   * The Authorize.net customer profile ID.
   */
  payment: string
}

export type DataBraintreePayment = DataBasePayments & {
  /**
   * Specifies the gateway. You must use `braintree`.
   */
  gateway: "braintree"
  /**
   * The Braintree Customer ID that you want to bill.
   */
  payment: string
}

export type DataCardConnectPayment = DataBasePayments & {
  /**
   * Specifies the gateway. You must use `card_connect`.
   */
  gateway: "card_connect"
  /**
   * Enter account_id, profile_id from CardPointe API. For example, 1|16178397535388255208.
   */
  payment: string
}

export type DataCyberSourcePayment = DataBasePayments & {
  /**
   * Specifies the gateway. You must use `cyber_source`.
   */
  gateway: "cyber_source"
  /**
   * The CyberSource token.
   */
  payment: string
}

export type ElasticPathPaymentsPoweredByStripePayment = DataBasePayments & {
  /**
   * Specifies the gateway. You must use `elastic_path_payments_stripe`.
   */
  gateway: "elastic_path_payments_stripe"
  options?: {
    /**
     * Provides the email address to which you want to send the Stripe receipts for the transactions within the store. This feature is available only in the live mode.
     */
    receipt_email?: string
    /**
     * Parent object determining whether to use Stripe's `automatic_payment_methods` setting.
     */
    automatic_payment_methods?: {
      /**
       * When set to true, it displays all enabled payment methods from the Stripe dashboard. When set to false, the Stripe default, which is card, is used.
       */
      enabled?: boolean
    }
  }
  /**
   * Specifies the Stripe payment method types configured for the store. See [Stripe Documentation](https://docs.stripe.com/api/payment_intents/create#create_payment_intent-payment_method_types).
   */
  payment_method_types?: Array<string>
  /**
   * Specifies the Stripe token or source.
   */
  payment?: string
}

export type DataManualPayment = DataBasePayments & {
  /**
   * Specifies the type of payment gateway. You must use `manual`.
   */
  gateway: "manual"
  paymentmethod_meta?: {
    /**
     * A reference associated with the payment method. This might include loyalty points or gift card identifiers. We recommend not to include personal information in this field.
     */
    custom_reference?: string
    /**
     * A custom name associated with the payment method.
     */
    name?: string
  }
}

export type DataPayPalExpressCheckoutPayment = DataBasePayments & {
  /**
   * Specifies the type of payment gateway. You must use `paypal_express_checkout`.
   */
  gateway: "paypal_express_checkout"
  options?: {
    /**
     * The description for the payment.
     */
    description?: string
    /**
     * The descriptor appended to PayPal generated descriptor that is visible on the card statement of the payer.
     */
    soft_descriptor?: string
    application_context?: {
      /**
       * The label that overrides the business name in the PayPal account on the PayPal site.
       */
      brand_name?: string
      /**
       * The locale pages that appear based on language and country code. PayPal supports a five-character code. For example, ja-JP.
       */
      locale?: string
      /**
       * The type of landing page to show on the PayPal site for customer checkout. Use values LOGIN, BILLING, or NO_PREFERENCE.
       */
      landing_page?: string
      /**
       * The shipping preference. Use SET_PROVIDED_ADDRESS value. This parameter does allow the user to change their address on PayPal site.
       */
      shipping_preference?: string
      /**
       * If you set `useraction=commit` in the query string, the flow redirects the buyer to the PayPal payment page and displays a Pay Now button. When the shopper clicks **Pay Now**, call `DoExpressCheckoutPayment` to complete the payment without additional interaction from the shopper. Choose this flow when you know the final payment amount when you initiate the checkout flow.
       */
      user_action?: string
      /**
       * The callback URL for PayPal to redirect the user in the case of approved payment.
       */
      return_url?: string
      /**
       * The callback URL for PayPal to redirect user in the case a cancelled payment.
       */
      cancel_url?: string
    }
  }
}

export type DataStripePayment = DataBasePayments & {
  /**
   * Specifies the type of payment gateway. You must use `stripe`.
   */
  gateway: "stripe"
  options?: {
    /**
     * The option to provide an email for Stripe receipts. Specify live mode to access this feature.
     */
    receipt_email?: string
  }
  /**
   * The Stripe token or source.
   */
  payment?: string
}

export type DataStripeConnectPayment = DataBasePayments & {
  /**
   * Specifies the type of payment gateway. You must use `stripe_connect`.
   */
  gateway: "stripe_connect"
  options?: {
    /**
     * Provides the email address to which you want to send the Stripe receipts for the transactions within the store. This feature is available only in the live mode.
     */
    receipt_email?: string
  }
  /**
   * Specifies the Stripe token or source.
   */
  payment?: string
}

export type DataStripePaymentIntentsPayment = DataBasePayments & {
  /**
   * Specifies the type of payment gateway. You must use `stripe_payment_intents`.
   */
  gateway: "stripe_payment_intents"
  options?: {
    /**
     * Provides the email address to which you want to send the Stripe receipts for the transactions within the store. This feature is available only in the live mode.
     */
    receipt_email?: string
  }
  /**
   * Specifies the Stripe token or source.
   */
  payment?: string
}

export type DataPaymentObject =
  | DataAdyenPayment
  | DataAuthorizeNetPayment
  | DataBraintreePayment
  | DataCardConnectPayment
  | DataCyberSourcePayment
  | ElasticPathPaymentsPoweredByStripePayment
  | DataManualPayment
  | DataPayPalExpressCheckoutPayment
  | DataStripePayment
  | DataStripeConnectPayment
  | DataStripePaymentIntentsPayment

export type TransactionResponse = {
  /**
   * The ID of the transaction.
   */
  readonly id?: string
  /**
   * The payment gateway reference.
   */
  reference?: string
  /**
   * A custom name associated with the payment method.
   */
  name?: string
  /**
   * A reference associated with the payment method. This might include loyalty points or gift card identifiers. We recommend you not to include personal information in this field.
   */
  custom_reference?: string
  /**
   * The name of the payment gateway used.
   */
  gateway?:
    | "adyen"
    | "authorize_net"
    | "braintree"
    | "card_connect"
    | "cyber_source"
    | "elastic_path_payments_stripe"
    | "manual"
    | "paypal_express_checkout"
    | "stripe"
    | "stripe_connect"
    | "stripe_payment_intents"
  /**
   * The amount for this transaction.
   */
  amount?: number
  /**
   * The refunded amount.
   */
  refunded_amount?: number
  /**
   * The transaction currency.
   */
  currency?: string
  /**
   * The type of transaction, such as `purchase`, `capture`, `authorize` or `refund`.
   */
  "transaction-type"?: string
  /**
   * The status provided by the gateway for this transaction, such as `complete` or `failed`.
   */
  status?: string
  relationships?: {
    order?: {
      data?: {
        /**
         * Represents the type of the object being returned. It is always `order`.
         */
        type?: string
        /**
         * The ID of the order.
         */
        id?: string
      }
    }
  }
  meta?: {
    display_price?: FormattedPriceData
    display_refunded_amount?: FormattedPriceData
    timestamps?: Timestamps
  }
}

export type OrdersTransactionsConfirmRequest = {
  data?: {
    [key: string]: unknown
  }
}

export type OrdersTransactionsCaptureRequest = {
  data?: {
    options?: {
      soft_descriptor?: string
      note_to_payer?: string
    }
  }
}

export type OrdersTransactionsRefundRequest = {
  data?: {
    /**
     * The amount value to be refunded. If this field is not provided, it will be considered as manual refund (Mark as Refunded) and the refund process must be manually handled via payment provider. If the amount value is same as payment value, then it will be treated as a full refund and sent to the payment provider to process refund automatically.
     */
    amount?: number
    options?: {
      /**
       * Provides comments about the refund. It is used by PayPal Express.
       */
      note?: string
    }
  }
}

export type OrdersTransactionsCancelRequest = {
  data?: {
    options?: {
      [key: string]: unknown
    }
    /**
     * Specifies the reason for canceling the transaction. The reason may include `duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`.
     */
    reason?: string
  }
}

export type OrderPriceData = {
  /**
   * The amount for this item.
   */
  amount?: number
  /**
   * The currency this item.
   */
  currency?: string
  /**
   * Whether or not this price is tax inclusive.
   */
  includes_tax?: boolean
}

export type FormattedPriceData = {
  /**
   * The raw total of this cart.
   */
  amount?: number
  /**
   * The currency set for this cart.
   */
  currency?: string
  /**
   * The tax inclusive formatted total based on the currency.
   */
  formatted?: string
}

export type OrderItemFormattedUnitPriceData = {
  unit?: FormattedPriceData
  value?: FormattedPriceData
}

export type DiscountData = {
  amount?: OrderPriceData
  code?: string
  readonly id?: string
}

export type OrderItemResponse = {
  /**
   * The type represents the object being returned.
   */
  type?: string
  /**
   * The unique identifier for this order item.
   */
  readonly id?: string
  /**
   * The quantity of this item were ordered.
   */
  quantity?: number
  /**
   * The unique identifier for this order item.
   */
  readonly product_id?: string
  /**
   * The unique identifier for the subscription offering for this order item.
   */
  readonly subscription_offering_id?: string
  /**
   * The name of this order item.
   */
  name?: string
  /**
   * The SKU code for the order item.
   */
  sku?: string
  unit_price?: OrderPriceData
  value?: OrderPriceData
  discounts?: Array<DiscountData>
  links?: {
    [key: string]: unknown
  }
  meta?: {
    display_price?: {
      with_tax?: OrderItemFormattedUnitPriceData
      without_tax?: OrderItemFormattedUnitPriceData
      tax?: OrderItemFormattedUnitPriceData
      discount?: OrderItemFormattedUnitPriceData
      without_discount?: OrderItemFormattedUnitPriceData
      discounts?: {
        [key: string]: {
          amount?: number
          currency?: string
          formatted?: string
        }
      }
    }
    timestamps?: Timestamps
  }
  relationships?: {
    cart_item?: {
      data?: {
        /**
         * The type represents the object being returned.
         */
        type?: string
        /**
         * The unique identifier for this item.
         */
        readonly id?: string
      }
    }
  }
  /**
   * The unique identifier of the catalog associated with the product is shown if `catalog_source=pim` is set.
   */
  catalog_id?: string
  /**
   * The catalog source. Always `pim` or `legacy`.
   */
  catalog_source?: string
}

export type OrderResponse = {
  /**
   * Specifies the type of object being returned. You must use `order`.
   */
  type?: string
  /**
   * Specifies a user-managed, optional field used as an alternative to the existing `order_id`. If provided, the order-number will be sent to Authorize.net instead of the `order_id`, and will appear as the invoice number in Authorize.net transactions.
   */
  order_number?: string
  /**
   * An optional external ID reference for an order. It can contain alphanumeric characters, special characters, and spaces, and is not required to be unique. The maximum allowed length is 64 characters. It can be used to include an external reference from a separate company system.
   */
  external_ref?: string
  /**
   * Specifies the unique identifier of the order.
   */
  readonly id?: string
  /**
   * Specifies the status of the order, such as `incomplete`, `complete`, `processing`, or `cancelled`.
   */
  status?: string
  /**
   * Specifies the status of the payment, such as `unpaid`, `authorized`, `paid`, or `refunded`.
   */
  payment?: string
  /**
   * Specifies the status of the shipment, such as `fulfilled` or `unfulfilled`.
   */
  shipping?: string
  /**
   * Specifies if the order is anonymized.
   */
  anonymized?: boolean
  meta?: OrderMeta
  billing_address?: BillingAddress
  contact?: Contact
  shipping_address?: ShippingAddress
}

export type OrderMeta = {
  timestamps?: Timestamps
  with_tax?: FormattedPriceData
  without_tax?: FormattedPriceData
  tax?: FormattedPriceData
  discount?: FormattedPriceData
  paid?: FormattedPriceData
  authorized?: FormattedPriceData
  without_discount?: FormattedPriceData
}

export type CustomerCheckout = {
  data?: {
    /**
     * A user-managed, optional field used as an alternative to the existing `order_id`. If provided, the order-number will be sent to Authorize.net instead of the `order_id`, and will appear as the invoice number in Authorize.net transactions.
     */
    order_number?: string
    /**
     * An optional external ID reference for an order. It can contain alphanumeric characters, special characters, and spaces, and is not required to be unique. The maximum allowed length is 64 characters. It can be used to include an external reference from a separate company system.
     */
    external_ref?: string
    customer?: {
      /**
       * The ID of the customer.
       */
      id?: string
    }
    billing_address?: BillingAddress
    shipping_address?: ShippingAddress
  }
}

export type AccountCheckout = {
  data?: {
    /**
     * A user-managed, optional field used as an alternative to the existing `order_id`. If provided, the order-number will be sent to Authorize.net instead of the `order_id`, and will appear as the invoice number in Authorize.net transactions.
     */
    order_number?: string
    /**
     * An optional external ID reference for an order. It can contain alphanumeric characters, special characters, and spaces, and is not required to be unique. The maximum allowed length is 64 characters. It can be used to include an external reference from a separate company system.
     */
    external_ref?: string
    account?: {
      /**
       * The account ID.
       */
      id?: string
      /**
       * The account member ID.
       */
      member_id?: string
    }
    contact?: {
      /**
       * The name of the account member.
       */
      name?: string
      /**
       * The email address of the account member.
       */
      email?: string
    }
    billing_address?: BillingAddress
    shipping_address?: ShippingAddress
  }
}

export type BillingAddress = {
  /**
   * First name of the billing recipient.
   */
  first_name: string
  /**
   * Last name of the billing recipient.
   */
  last_name: string
  /**
   * Company name of the billing recipient.
   */
  company_name: string
  /**
   * First line of the billing address.
   */
  line_1: string
  /**
   * Second line of the billing address.
   */
  line_2: string
  /**
   * City of the billing address.
   */
  city: string
  /**
   * Postcode of the billing address.
   */
  postcode: string
  /**
   * County of the billing address.
   */
  county: string
  /**
   * Country of the billing address.
   */
  country: string
  /**
   * State, province, or region of the billing address.
   */
  region: string
}

export type Contact = {
  /**
   * The email address of the contact.
   */
  email?: string
  /**
   * The name of the contact.
   */
  name?: string
}

export type ShippingAddress = {
  /**
   * First name of the shipping recipient.
   */
  first_name: string
  /**
   * Last name of the shipping recipient.
   */
  last_name: string
  /**
   * Phone number of the shipping recipient.
   */
  phone_number: string
  /**
   * Company of the shipping recipient.
   */
  company_name: string
  /**
   * First line of the shipping address.
   */
  line_1: string
  /**
   * Second line of the shipping address.
   */
  line_2: string
  /**
   * City of the shipping address.
   */
  city: string
  /**
   * Post code of the shipping address.
   */
  postcode: string
  /**
   * County of the shipping address.
   */
  county: string
  /**
   * Country of the shipping address.
   */
  country: string
  /**
   * State, province, or region of the shipping address.
   */
  region: string
  /**
   * Delivery instructions.
   */
  instructions: string
}

export type ResponseMetaCarts = {
  page?: ResponsePaginationPage
  results?: ResponsePaginationResults
}

export type ResponseMetaOrders = {
  page?: ResponsePaginationPage
  results?: ResponsePaginationResults
}

export type ResponsePaginationPage = {
  /**
   * The current page.
   */
  current?: number
  /**
   * The maximum number of records per page for this response. You can set this value up to 100.
   */
  limit?: number
  /**
   * The current offset by number of records, not pages. Offset is zero-based.
   */
  offset?: number
  /**
   * The total page count.
   */
  total?: number
}

export type ResponsePaginationResults = {
  /**
   * The total page count.
   */
  total?: number
}

export type ResponsePageLinks = {
  /**
   * Always the current page.
   */
  current?: string
  /**
   * Always the first page.
   */
  first?: string
  /**
   * If there is only one page, it is `null`.
   */
  last?: string
  /**
   * If there is only one page, it is `null`.
   */
  next?: string
  /**
   * if the user is on the first page, it is `null`.
   */
  prev?: string
}

export type ResponseData = {
  data?: unknown
}

export type ResponseError = Array<unknown>

export type Timestamps = {
  /**
   * The date this was created.
   */
  created_at?: string
  /**
   * The date this was last updated.
   */
  updated_at?: unknown
}

export type CartTimestamps = {
  created_at?: string
  updated_at?: unknown
  expires_at?: unknown
}

/**
 * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
 */
export type AcceptLanguage = string

/**
 * The list of channels in which this catalog can be displayed. A channel is the shopping experience, such as a mobile app or web storefront. If empty, the catalog rule matches all channels. The channel will eventually be included in the bearer token that is used for authorization, but currently, you must set the `EP-Channel` header in your requests.
 */
export type Channel = string

/**
 * This endpoints supports filtering. See [Filtering](#filtering).
 *
 */
export type FilterHierarchy = string

/**
 * This endpoint supports filtering, see [Filtering](#filtering).
 *
 */
export type FilterNode = string

/**
 * This endpoints support filtering. See [Filtering](#filtering).
 *
 */
export type FilterProduct = string

/**
 * This endpoint supports filtering. See [Filtering](#filtering).
 *
 */
export type FilterRule = string

/**
 * Using the `include` parameter, you can retrieve top-level resources, such as, files or main image, bundle component products.
 *
 */
export type Include = Array<"main_images" | "files" | "component_products">

/**
 * Using the `include=component_products` parameter, you can retrieve key attribute data for the bundle component products in the product bundle, such as SKU or slug .
 *
 */
export type IncludeComponentProducts = string

/**
 * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
 */
export type Limit = BigInt

/**
 * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
 */
export type Offset = BigInt

/**
 * Product tags are used to store or assign a key word against a product. The product tag can then be used to describe or label that product. Using product tags means that you can group your products together, for example, by brand, category, subcategory, colors, types, industries, and so on. You can enhance your product list using tags, enabling you to refine your product list and run targeted promotions. Tags are used to refine the eligibility criteria for a rule. Requests populate the catalog rule tag using the `EP-Context-Tag` header.
 */
export type Tag = string

/**
 * The bundle configuration.
 */
export type BundleConfigurationData2 = BundleConfigurationData

/**
 * A list of product id or sku and bundle configuration for cart.
 */
export type ProductsForCartConfiguration2 = ProductsForCartConfiguration

export type GetByContextReleaseData = {
  body?: never
  headers?: {
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
    /**
     * The list of channels in which this catalog can be displayed. A channel is the shopping experience, such as a mobile app or web storefront. If empty, the catalog rule matches all channels. The channel will eventually be included in the bearer token that is used for authorization, but currently, you must set the `EP-Channel` header in your requests.
     */
    "EP-Channel"?: string
    /**
     * Product tags are used to store or assign a key word against a product. The product tag can then be used to describe or label that product. Using product tags means that you can group your products together, for example, by brand, category, subcategory, colors, types, industries, and so on. You can enhance your product list using tags, enabling you to refine your product list and run targeted promotions. Tags are used to refine the eligibility criteria for a rule. Requests populate the catalog rule tag using the `EP-Context-Tag` header.
     */
    "EP-Context-Tag"?: string
  }
  path?: never
  query?: never
  url: "/catalog"
}

export type GetByContextReleaseErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type GetByContextReleaseError =
  GetByContextReleaseErrors[keyof GetByContextReleaseErrors]

export type GetByContextReleaseResponses = {
  /**
   * The catalog.
   */
  200: ReleaseData
}

export type GetByContextReleaseResponse =
  GetByContextReleaseResponses[keyof GetByContextReleaseResponses]

export type GetByContextAllHierarchiesData = {
  body?: never
  headers?: {
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
    /**
     * The list of channels in which this catalog can be displayed. A channel is the shopping experience, such as a mobile app or web storefront. If empty, the catalog rule matches all channels. The channel will eventually be included in the bearer token that is used for authorization, but currently, you must set the `EP-Channel` header in your requests.
     */
    "EP-Channel"?: string
    /**
     * Product tags are used to store or assign a key word against a product. The product tag can then be used to describe or label that product. Using product tags means that you can group your products together, for example, by brand, category, subcategory, colors, types, industries, and so on. You can enhance your product list using tags, enabling you to refine your product list and run targeted promotions. Tags are used to refine the eligibility criteria for a rule. Requests populate the catalog rule tag using the `EP-Context-Tag` header.
     */
    "EP-Context-Tag"?: string
  }
  path?: never
  query?: {
    /**
     * This endpoints supports filtering. See [Filtering](#filtering).
     *
     */
    filter?: string
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[limit]"?: BigInt
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[offset]"?: BigInt
  }
  url: "/catalog/hierarchies"
}

export type GetByContextAllHierarchiesErrors = {
  /**
   * An unexpected error.
   */
  default: ErrorResponse
}

export type GetByContextAllHierarchiesError =
  GetByContextAllHierarchiesErrors[keyof GetByContextAllHierarchiesErrors]

export type GetByContextAllHierarchiesResponses = {
  /**
   * The hierarchies of the catalog.
   */
  200: HierarchyListData
}

export type GetByContextAllHierarchiesResponse =
  GetByContextAllHierarchiesResponses[keyof GetByContextAllHierarchiesResponses]

export type GetByContextHierarchyData = {
  body?: never
  headers?: {
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
    /**
     * The list of channels in which this catalog can be displayed. A channel is the shopping experience, such as a mobile app or web storefront. If empty, the catalog rule matches all channels. The channel will eventually be included in the bearer token that is used for authorization, but currently, you must set the `EP-Channel` header in your requests.
     */
    "EP-Channel"?: string
    /**
     * Product tags are used to store or assign a key word against a product. The product tag can then be used to describe or label that product. Using product tags means that you can group your products together, for example, by brand, category, subcategory, colors, types, industries, and so on. You can enhance your product list using tags, enabling you to refine your product list and run targeted promotions. Tags are used to refine the eligibility criteria for a rule. Requests populate the catalog rule tag using the `EP-Context-Tag` header.
     */
    "EP-Context-Tag"?: string
  }
  path: {
    /**
     * The catalog hierarchy ID.
     */
    hierarchy_id: string
  }
  query?: never
  url: "/catalog/hierarchies/{hierarchy_id}"
}

export type GetByContextHierarchyErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type GetByContextHierarchyError =
  GetByContextHierarchyErrors[keyof GetByContextHierarchyErrors]

export type GetByContextHierarchyResponses = {
  /**
   * The catalog hierarchy.
   */
  200: HierarchyData
}

export type GetByContextHierarchyResponse =
  GetByContextHierarchyResponses[keyof GetByContextHierarchyResponses]

export type GetByContextHierarchyNodesData = {
  body?: never
  headers?: {
    /**
     * The list of channels in which this catalog can be displayed. A channel is the shopping experience, such as a mobile app or web storefront. If empty, the catalog rule matches all channels. The channel will eventually be included in the bearer token that is used for authorization, but currently, you must set the `EP-Channel` header in your requests.
     */
    "EP-Channel"?: string
    /**
     * Product tags are used to store or assign a key word against a product. The product tag can then be used to describe or label that product. Using product tags means that you can group your products together, for example, by brand, category, subcategory, colors, types, industries, and so on. You can enhance your product list using tags, enabling you to refine your product list and run targeted promotions. Tags are used to refine the eligibility criteria for a rule. Requests populate the catalog rule tag using the `EP-Context-Tag` header.
     */
    "EP-Context-Tag"?: string
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
  }
  path: {
    /**
     * The catalog hierarchy ID.
     */
    hierarchy_id: string
  }
  query?: {
    /**
     * This endpoint supports filtering, see [Filtering](#filtering).
     *
     */
    filter?: string
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[limit]"?: BigInt
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[offset]"?: BigInt
  }
  url: "/catalog/hierarchies/{hierarchy_id}/nodes"
}

export type GetByContextHierarchyNodesErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type GetByContextHierarchyNodesError =
  GetByContextHierarchyNodesErrors[keyof GetByContextHierarchyNodesErrors]

export type GetByContextHierarchyNodesResponses = {
  /**
   * The child nodes of a catalog hierarchy.
   */
  200: NodeListData
}

export type GetByContextHierarchyNodesResponse =
  GetByContextHierarchyNodesResponses[keyof GetByContextHierarchyNodesResponses]

export type GetByContextHierarchyChildNodesData = {
  body?: never
  headers?: {
    /**
     * The list of channels in which this catalog can be displayed. A channel is the shopping experience, such as a mobile app or web storefront. If empty, the catalog rule matches all channels. The channel will eventually be included in the bearer token that is used for authorization, but currently, you must set the `EP-Channel` header in your requests.
     */
    "EP-Channel"?: string
    /**
     * Product tags are used to store or assign a key word against a product. The product tag can then be used to describe or label that product. Using product tags means that you can group your products together, for example, by brand, category, subcategory, colors, types, industries, and so on. You can enhance your product list using tags, enabling you to refine your product list and run targeted promotions. Tags are used to refine the eligibility criteria for a rule. Requests populate the catalog rule tag using the `EP-Context-Tag` header.
     */
    "EP-Context-Tag"?: string
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
  }
  path: {
    /**
     * The catalog hierarchy ID.
     */
    hierarchy_id: string
  }
  query?: {
    /**
     * This endpoint supports filtering, see [Filtering](#filtering).
     *
     */
    filter?: string
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[limit]"?: BigInt
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[offset]"?: BigInt
  }
  url: "/catalog/hierarchies/{hierarchy_id}/children"
}

export type GetByContextHierarchyChildNodesErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type GetByContextHierarchyChildNodesError =
  GetByContextHierarchyChildNodesErrors[keyof GetByContextHierarchyChildNodesErrors]

export type GetByContextHierarchyChildNodesResponses = {
  /**
   * The child nodes of a catalog hierarchy.
   */
  200: NodeListData
}

export type GetByContextHierarchyChildNodesResponse =
  GetByContextHierarchyChildNodesResponses[keyof GetByContextHierarchyChildNodesResponses]

export type GetByContextAllNodesData = {
  body?: never
  headers?: {
    /**
     * The list of channels in which this catalog can be displayed. A channel is the shopping experience, such as a mobile app or web storefront. If empty, the catalog rule matches all channels. The channel will eventually be included in the bearer token that is used for authorization, but currently, you must set the `EP-Channel` header in your requests.
     */
    "EP-Channel"?: string
    /**
     * Product tags are used to store or assign a key word against a product. The product tag can then be used to describe or label that product. Using product tags means that you can group your products together, for example, by brand, category, subcategory, colors, types, industries, and so on. You can enhance your product list using tags, enabling you to refine your product list and run targeted promotions. Tags are used to refine the eligibility criteria for a rule. Requests populate the catalog rule tag using the `EP-Context-Tag` header.
     */
    "EP-Context-Tag"?: string
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
  }
  path?: never
  query?: {
    /**
     * This endpoint supports filtering, see [Filtering](#filtering).
     *
     */
    filter?: string
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[limit]"?: BigInt
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[offset]"?: BigInt
  }
  url: "/catalog/nodes"
}

export type GetByContextAllNodesErrors = {
  /**
   * An unexpected error.
   */
  default: ErrorResponse
}

export type GetByContextAllNodesError =
  GetByContextAllNodesErrors[keyof GetByContextAllNodesErrors]

export type GetByContextAllNodesResponses = {
  /**
   * The nodes of the catalog.
   */
  200: NodeListData
}

export type GetByContextAllNodesResponse =
  GetByContextAllNodesResponses[keyof GetByContextAllNodesResponses]

export type GetByContextNodeData = {
  body?: never
  headers?: {
    /**
     * The list of channels in which this catalog can be displayed. A channel is the shopping experience, such as a mobile app or web storefront. If empty, the catalog rule matches all channels. The channel will eventually be included in the bearer token that is used for authorization, but currently, you must set the `EP-Channel` header in your requests.
     */
    "EP-Channel"?: string
    /**
     * Product tags are used to store or assign a key word against a product. The product tag can then be used to describe or label that product. Using product tags means that you can group your products together, for example, by brand, category, subcategory, colors, types, industries, and so on. You can enhance your product list using tags, enabling you to refine your product list and run targeted promotions. Tags are used to refine the eligibility criteria for a rule. Requests populate the catalog rule tag using the `EP-Context-Tag` header.
     */
    "EP-Context-Tag"?: string
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
  }
  path: {
    /**
     * The catalog node ID.
     */
    node_id: string
  }
  query?: never
  url: "/catalog/nodes/{node_id}"
}

export type GetByContextNodeErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type GetByContextNodeError =
  GetByContextNodeErrors[keyof GetByContextNodeErrors]

export type GetByContextNodeResponses = {
  /**
   * The catalog node.
   */
  200: NodeData
}

export type GetByContextNodeResponse =
  GetByContextNodeResponses[keyof GetByContextNodeResponses]

export type GetByContextChildNodesData = {
  body?: never
  headers?: {
    /**
     * The list of channels in which this catalog can be displayed. A channel is the shopping experience, such as a mobile app or web storefront. If empty, the catalog rule matches all channels. The channel will eventually be included in the bearer token that is used for authorization, but currently, you must set the `EP-Channel` header in your requests.
     */
    "EP-Channel"?: string
    /**
     * Product tags are used to store or assign a key word against a product. The product tag can then be used to describe or label that product. Using product tags means that you can group your products together, for example, by brand, category, subcategory, colors, types, industries, and so on. You can enhance your product list using tags, enabling you to refine your product list and run targeted promotions. Tags are used to refine the eligibility criteria for a rule. Requests populate the catalog rule tag using the `EP-Context-Tag` header.
     */
    "EP-Context-Tag"?: string
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
  }
  path: {
    /**
     * The catalog node ID.
     */
    node_id: string
  }
  query?: {
    /**
     * This endpoint supports filtering, see [Filtering](#filtering).
     *
     */
    filter?: string
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[limit]"?: BigInt
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[offset]"?: BigInt
  }
  url: "/catalog/nodes/{node_id}/relationships/children"
}

export type GetByContextChildNodesErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type GetByContextChildNodesError =
  GetByContextChildNodesErrors[keyof GetByContextChildNodesErrors]

export type GetByContextChildNodesResponses = {
  /**
   * The child nodes of a catalog node.
   */
  200: NodeListData
}

export type GetByContextChildNodesResponse =
  GetByContextChildNodesResponses[keyof GetByContextChildNodesResponses]

export type GetByContextAllProductsData = {
  body?: never
  headers?: {
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
    /**
     * The list of channels in which this catalog can be displayed. A channel is the shopping experience, such as a mobile app or web storefront. If empty, the catalog rule matches all channels. The channel will eventually be included in the bearer token that is used for authorization, but currently, you must set the `EP-Channel` header in your requests.
     */
    "EP-Channel"?: string
    /**
     * Product tags are used to store or assign a key word against a product. The product tag can then be used to describe or label that product. Using product tags means that you can group your products together, for example, by brand, category, subcategory, colors, types, industries, and so on. You can enhance your product list using tags, enabling you to refine your product list and run targeted promotions. Tags are used to refine the eligibility criteria for a rule. Requests populate the catalog rule tag using the `EP-Context-Tag` header.
     */
    "EP-Context-Tag"?: string
  }
  path?: never
  query?: {
    /**
     * This endpoints support filtering. See [Filtering](#filtering).
     *
     */
    filter?: string
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[limit]"?: BigInt
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[offset]"?: BigInt
  }
  url: "/catalog/products"
}

export type GetByContextAllProductsErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type GetByContextAllProductsError =
  GetByContextAllProductsErrors[keyof GetByContextAllProductsErrors]

export type GetByContextAllProductsResponses = {
  /**
   * The products of a catalog.
   */
  200: ProductListData
}

export type GetByContextAllProductsResponse =
  GetByContextAllProductsResponses[keyof GetByContextAllProductsResponses]

export type GetByContextProductData = {
  body?: never
  headers?: {
    /**
     * The list of channels in which this catalog can be displayed. A channel is the shopping experience, such as a mobile app or web storefront. If empty, the catalog rule matches all channels. The channel will eventually be included in the bearer token that is used for authorization, but currently, you must set the `EP-Channel` header in your requests.
     */
    "EP-Channel"?: string
    /**
     * Product tags are used to store or assign a key word against a product. The product tag can then be used to describe or label that product. Using product tags means that you can group your products together, for example, by brand, category, subcategory, colors, types, industries, and so on. You can enhance your product list using tags, enabling you to refine your product list and run targeted promotions. Tags are used to refine the eligibility criteria for a rule. Requests populate the catalog rule tag using the `EP-Context-Tag` header.
     */
    "EP-Context-Tag"?: string
  }
  path: {
    /**
     * The product ID.
     */
    product_id: string
  }
  query?: {
    /**
     * Using the `include` parameter, you can retrieve top-level resources, such as, files or main image, bundle component products.
     *
     */
    include?: Array<"main_images" | "files" | "component_products">
  }
  url: "/catalog/products/{product_id}"
}

export type GetByContextProductErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type GetByContextProductError =
  GetByContextProductErrors[keyof GetByContextProductErrors]

export type GetByContextProductResponses = {
  /**
   * The product of a catalog.
   */
  200: ProductData
}

export type GetByContextProductResponse =
  GetByContextProductResponses[keyof GetByContextProductResponses]

export type GetByContextComponentProductIdsData = {
  body?: never
  headers?: {
    /**
     * The list of channels in which this catalog can be displayed. A channel is the shopping experience, such as a mobile app or web storefront. If empty, the catalog rule matches all channels. The channel will eventually be included in the bearer token that is used for authorization, but currently, you must set the `EP-Channel` header in your requests.
     */
    "EP-Channel"?: string
    /**
     * Product tags are used to store or assign a key word against a product. The product tag can then be used to describe or label that product. Using product tags means that you can group your products together, for example, by brand, category, subcategory, colors, types, industries, and so on. You can enhance your product list using tags, enabling you to refine your product list and run targeted promotions. Tags are used to refine the eligibility criteria for a rule. Requests populate the catalog rule tag using the `EP-Context-Tag` header.
     */
    "EP-Context-Tag"?: string
  }
  path: {
    /**
     * The product ID.
     */
    product_id: string
  }
  query?: {
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[limit]"?: BigInt
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[offset]"?: BigInt
  }
  url: "/catalog/products/{product_id}/relationships/component_products"
}

export type GetByContextComponentProductIdsErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type GetByContextComponentProductIdsError =
  GetByContextComponentProductIdsErrors[keyof GetByContextComponentProductIdsErrors]

export type GetByContextComponentProductIdsResponses = {
  /**
   * The list of component product IDs of a bundle product from a catalog.
   */
  200: ProductReferenceListData
}

export type GetByContextComponentProductIdsResponse =
  GetByContextComponentProductIdsResponses[keyof GetByContextComponentProductIdsResponses]

export type GetByContextChildProductsData = {
  body?: never
  headers?: {
    /**
     * The list of channels in which this catalog can be displayed. A channel is the shopping experience, such as a mobile app or web storefront. If empty, the catalog rule matches all channels. The channel will eventually be included in the bearer token that is used for authorization, but currently, you must set the `EP-Channel` header in your requests.
     */
    "EP-Channel"?: string
    /**
     * Product tags are used to store or assign a key word against a product. The product tag can then be used to describe or label that product. Using product tags means that you can group your products together, for example, by brand, category, subcategory, colors, types, industries, and so on. You can enhance your product list using tags, enabling you to refine your product list and run targeted promotions. Tags are used to refine the eligibility criteria for a rule. Requests populate the catalog rule tag using the `EP-Context-Tag` header.
     */
    "EP-Context-Tag"?: string
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
  }
  path: {
    /**
     * The product ID.
     */
    product_id: string
  }
  query?: {
    /**
     * This endpoints support filtering. See [Filtering](#filtering).
     *
     */
    filter?: string
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[limit]"?: BigInt
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[offset]"?: BigInt
  }
  url: "/catalog/products/{product_id}/relationships/children"
}

export type GetByContextChildProductsErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type GetByContextChildProductsError =
  GetByContextChildProductsErrors[keyof GetByContextChildProductsErrors]

export type GetByContextChildProductsResponses = {
  /**
   * The list of child products of a parent product from a catalog.
   */
  200: ProductListData
}

export type GetByContextChildProductsResponse =
  GetByContextChildProductsResponses[keyof GetByContextChildProductsResponses]

export type GetByContextProductsForHierarchyData = {
  body?: never
  headers?: {
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
    /**
     * The list of channels in which this catalog can be displayed. A channel is the shopping experience, such as a mobile app or web storefront. If empty, the catalog rule matches all channels. The channel will eventually be included in the bearer token that is used for authorization, but currently, you must set the `EP-Channel` header in your requests.
     */
    "EP-Channel"?: string
    /**
     * Product tags are used to store or assign a key word against a product. The product tag can then be used to describe or label that product. Using product tags means that you can group your products together, for example, by brand, category, subcategory, colors, types, industries, and so on. You can enhance your product list using tags, enabling you to refine your product list and run targeted promotions. Tags are used to refine the eligibility criteria for a rule. Requests populate the catalog rule tag using the `EP-Context-Tag` header.
     */
    "EP-Context-Tag"?: string
  }
  path: {
    /**
     * The catalog hierarchy ID.
     */
    hierarchy_id: string
  }
  query?: {
    /**
     * This endpoints support filtering. See [Filtering](#filtering).
     *
     */
    filter?: string
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[limit]"?: BigInt
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[offset]"?: BigInt
  }
  url: "/catalog/hierarchies/{hierarchy_id}/products"
}

export type GetByContextProductsForHierarchyErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type GetByContextProductsForHierarchyError =
  GetByContextProductsForHierarchyErrors[keyof GetByContextProductsForHierarchyErrors]

export type GetByContextProductsForHierarchyResponses = {
  /**
   * The products of a catalog hierarchy.
   */
  200: ProductListData
}

export type GetByContextProductsForHierarchyResponse =
  GetByContextProductsForHierarchyResponses[keyof GetByContextProductsForHierarchyResponses]

export type GetByContextProductsForNodeData = {
  body?: never
  headers?: {
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
    /**
     * The list of channels in which this catalog can be displayed. A channel is the shopping experience, such as a mobile app or web storefront. If empty, the catalog rule matches all channels. The channel will eventually be included in the bearer token that is used for authorization, but currently, you must set the `EP-Channel` header in your requests.
     */
    "EP-Channel"?: string
    /**
     * Product tags are used to store or assign a key word against a product. The product tag can then be used to describe or label that product. Using product tags means that you can group your products together, for example, by brand, category, subcategory, colors, types, industries, and so on. You can enhance your product list using tags, enabling you to refine your product list and run targeted promotions. Tags are used to refine the eligibility criteria for a rule. Requests populate the catalog rule tag using the `EP-Context-Tag` header.
     */
    "EP-Context-Tag"?: string
  }
  path: {
    /**
     * The catalog node ID.
     */
    node_id: string
  }
  query?: {
    /**
     * This endpoints support filtering. See [Filtering](#filtering).
     *
     */
    filter?: string
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[limit]"?: BigInt
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[offset]"?: BigInt
  }
  url: "/catalog/nodes/{node_id}/relationships/products"
}

export type GetByContextProductsForNodeErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type GetByContextProductsForNodeError =
  GetByContextProductsForNodeErrors[keyof GetByContextProductsForNodeErrors]

export type GetByContextProductsForNodeResponses = {
  /**
   * The products of a catalog node.
   */
  200: ProductListData
}

export type GetByContextProductsForNodeResponse =
  GetByContextProductsForNodeResponses[keyof GetByContextProductsForNodeResponses]

export type ConfigureByContextProductData = {
  /**
   * The bundle configuration.
   */
  body: BundleConfigurationData2
  headers?: {
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
    /**
     * The list of channels in which this catalog can be displayed. A channel is the shopping experience, such as a mobile app or web storefront. If empty, the catalog rule matches all channels. The channel will eventually be included in the bearer token that is used for authorization, but currently, you must set the `EP-Channel` header in your requests.
     */
    "EP-Channel"?: string
    /**
     * Product tags are used to store or assign a key word against a product. The product tag can then be used to describe or label that product. Using product tags means that you can group your products together, for example, by brand, category, subcategory, colors, types, industries, and so on. You can enhance your product list using tags, enabling you to refine your product list and run targeted promotions. Tags are used to refine the eligibility criteria for a rule. Requests populate the catalog rule tag using the `EP-Context-Tag` header.
     */
    "EP-Context-Tag"?: string
  }
  path: {
    /**
     * The product ID.
     */
    product_id: string
  }
  query?: never
  url: "/catalog/products/{product_id}/configure"
}

export type ConfigureByContextProductErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type ConfigureByContextProductError =
  ConfigureByContextProductErrors[keyof ConfigureByContextProductErrors]

export type ConfigureByContextProductResponses = {
  /**
   * The configured product of a catalog.
   */
  200: ProductData
}

export type ConfigureByContextProductResponse =
  ConfigureByContextProductResponses[keyof ConfigureByContextProductResponses]

export type GetCatalogsData = {
  body?: never
  path?: never
  query?: never
  url: "/catalogs"
}

export type GetCatalogsErrors = {
  /**
   * An unexpected error.
   */
  default: ErrorResponse
}

export type GetCatalogsError = GetCatalogsErrors[keyof GetCatalogsErrors]

export type GetCatalogsResponses = {
  /**
   * The list of catalogs.
   */
  200: CatalogListData
}

export type GetCatalogsResponse =
  GetCatalogsResponses[keyof GetCatalogsResponses]

export type CreateCatalogData = {
  /**
   * Creates a catalog with the following attributes.
   */
  body: CatalogCreateData
  path?: never
  query?: never
  url: "/catalogs"
}

export type CreateCatalogErrors = {
  /**
   * Unexpected error.
   */
  default: ErrorResponse
}

export type CreateCatalogError = CreateCatalogErrors[keyof CreateCatalogErrors]

export type CreateCatalogResponses = {
  /**
   * The created catalog
   */
  201: CatalogData
}

export type CreateCatalogResponse =
  CreateCatalogResponses[keyof CreateCatalogResponses]

export type DeleteCatalogByIdData = {
  body?: never
  path: {
    /**
     * The catalog ID.
     */
    catalog_id: string
  }
  query?: never
  url: "/catalogs/{catalog_id}"
}

export type DeleteCatalogByIdErrors = {
  /**
   * Unexpected error.
   */
  default: ErrorResponse
}

export type DeleteCatalogByIdError =
  DeleteCatalogByIdErrors[keyof DeleteCatalogByIdErrors]

export type DeleteCatalogByIdResponses = {
  /**
   * A 204 response indicates that the catalog has been deleted.
   */
  204: void
}

export type DeleteCatalogByIdResponse =
  DeleteCatalogByIdResponses[keyof DeleteCatalogByIdResponses]

export type GetCatalogByIdData = {
  body?: never
  path: {
    /**
     * The catalog ID.
     */
    catalog_id: string
  }
  query?: never
  url: "/catalogs/{catalog_id}"
}

export type GetCatalogByIdErrors = {
  /**
   * An unexpected error.
   */
  default: ErrorResponse
}

export type GetCatalogByIdError =
  GetCatalogByIdErrors[keyof GetCatalogByIdErrors]

export type GetCatalogByIdResponses = {
  /**
   * The catalog.
   */
  200: CatalogData
}

export type GetCatalogByIdResponse =
  GetCatalogByIdResponses[keyof GetCatalogByIdResponses]

export type UpdateCatalogData = {
  /**
   * Updated catalog.
   */
  body: CatalogUpdateData
  path: {
    /**
     * The catalog ID.
     */
    catalog_id: string
  }
  query?: never
  url: "/catalogs/{catalog_id}"
}

export type UpdateCatalogErrors = {
  /**
   * Unexpected error.
   */
  default: ErrorResponse
}

export type UpdateCatalogError = UpdateCatalogErrors[keyof UpdateCatalogErrors]

export type UpdateCatalogResponses = {
  /**
   * An updated catalog with the following attributes.
   */
  200: CatalogData
}

export type UpdateCatalogResponse =
  UpdateCatalogResponses[keyof UpdateCatalogResponses]

export type DeleteReleasesData = {
  body?: never
  path: {
    /**
     * The catalog ID.
     */
    catalog_id: string
  }
  query?: never
  url: "/catalogs/{catalog_id}/releases"
}

export type DeleteReleasesErrors = {
  /**
   * Unexpected error.
   */
  default: ErrorResponse
}

export type DeleteReleasesError =
  DeleteReleasesErrors[keyof DeleteReleasesErrors]

export type DeleteReleasesResponses = {
  /**
   * A 204 response indicates that the releases have been deleted.
   */
  204: void
}

export type DeleteReleasesResponse =
  DeleteReleasesResponses[keyof DeleteReleasesResponses]

export type GetReleasesData = {
  body?: never
  headers?: {
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
  }
  path: {
    /**
     * The catalog ID.
     */
    catalog_id: string
  }
  query?: never
  url: "/catalogs/{catalog_id}/releases"
}

export type GetReleasesErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type GetReleasesError = GetReleasesErrors[keyof GetReleasesErrors]

export type GetReleasesResponses = {
  /**
   * The list of catalogs.
   */
  200: ReleaseListData
}

export type GetReleasesResponse =
  GetReleasesResponses[keyof GetReleasesResponses]

export type PublishReleaseData = {
  /**
   * Options for catalog release publishing
   */
  body?: CatalogReleaseCreateData
  path: {
    /**
     * The catalog ID.
     */
    catalog_id: string
  }
  query?: never
  url: "/catalogs/{catalog_id}/releases"
}

export type PublishReleaseErrors = {
  /**
   * Unexpected error.
   */
  default: ErrorResponse
}

export type PublishReleaseError =
  PublishReleaseErrors[keyof PublishReleaseErrors]

export type PublishReleaseResponses = {
  /**
   * Publishes a catalog release with the following attributes.
   */
  201: ReleaseData
}

export type PublishReleaseResponse =
  PublishReleaseResponses[keyof PublishReleaseResponses]

export type DeleteReleaseByIdData = {
  body?: never
  path: {
    /**
     * The catalog ID.
     */
    catalog_id: string
    /**
     * The catalog release ID.
     */
    release_id: string
  }
  query?: never
  url: "/catalogs/{catalog_id}/releases/{release_id}"
}

export type DeleteReleaseByIdErrors = {
  /**
   * Unexpected error.
   */
  default: ErrorResponse
}

export type DeleteReleaseByIdError =
  DeleteReleaseByIdErrors[keyof DeleteReleaseByIdErrors]

export type DeleteReleaseByIdResponses = {
  /**
   * A 204 response indicates that the release has been deleted.
   */
  204: void
}

export type DeleteReleaseByIdResponse =
  DeleteReleaseByIdResponses[keyof DeleteReleaseByIdResponses]

export type GetReleaseByIdData = {
  body?: never
  headers?: {
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
  }
  path: {
    /**
     * The catalog ID.
     */
    catalog_id: string
    /**
     * The catalog release ID.
     */
    release_id: string
  }
  query?: never
  url: "/catalogs/{catalog_id}/releases/{release_id}"
}

export type GetReleaseByIdErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type GetReleaseByIdError =
  GetReleaseByIdErrors[keyof GetReleaseByIdErrors]

export type GetReleaseByIdResponses = {
  /**
   * The catalog.
   */
  200: ReleaseData
}

export type GetReleaseByIdResponse =
  GetReleaseByIdResponses[keyof GetReleaseByIdResponses]

export type GetRulesData = {
  body?: never
  path?: never
  query?: {
    /**
     * This endpoint supports filtering. See [Filtering](#filtering).
     *
     */
    filter?: string
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[limit]"?: BigInt
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[offset]"?: BigInt
  }
  url: "/catalogs/rules"
}

export type GetRulesErrors = {
  /**
   * An unexpected error.
   */
  default: ErrorResponse
}

export type GetRulesError = GetRulesErrors[keyof GetRulesErrors]

export type GetRulesResponses = {
  /**
   * The list of catalog rules.
   */
  200: RuleListData
}

export type GetRulesResponse = GetRulesResponses[keyof GetRulesResponses]

export type CreateRuleData = {
  /**
   * Creates a catalog rule with the following attributes.
   */
  body: RuleCreateData
  path?: never
  query?: never
  url: "/catalogs/rules"
}

export type CreateRuleErrors = {
  /**
   * Unexpected error.
   */
  default: ErrorResponse
}

export type CreateRuleError = CreateRuleErrors[keyof CreateRuleErrors]

export type CreateRuleResponses = {
  /**
   * The created catalog rule
   */
  201: RuleData
}

export type CreateRuleResponse = CreateRuleResponses[keyof CreateRuleResponses]

export type DeleteRuleByIdData = {
  body?: never
  path: {
    /**
     * The catalog rule ID.
     */
    catalog_rule_id: string
  }
  query?: never
  url: "/catalogs/rules/{catalog_rule_id}"
}

export type DeleteRuleByIdErrors = {
  /**
   * Unexpected error.
   */
  default: ErrorResponse
}

export type DeleteRuleByIdError =
  DeleteRuleByIdErrors[keyof DeleteRuleByIdErrors]

export type DeleteRuleByIdResponses = {
  /**
   * A 204 response indicates that the catalog rule has been deleted.
   */
  204: void
}

export type DeleteRuleByIdResponse =
  DeleteRuleByIdResponses[keyof DeleteRuleByIdResponses]

export type GetRuleByIdData = {
  body?: never
  path: {
    /**
     * The catalog rule ID.
     */
    catalog_rule_id: string
  }
  query?: never
  url: "/catalogs/rules/{catalog_rule_id}"
}

export type GetRuleByIdErrors = {
  /**
   * An unexpected error.
   */
  default: ErrorResponse
}

export type GetRuleByIdError = GetRuleByIdErrors[keyof GetRuleByIdErrors]

export type GetRuleByIdResponses = {
  /**
   * The catalog rile.
   */
  200: RuleData
}

export type GetRuleByIdResponse =
  GetRuleByIdResponses[keyof GetRuleByIdResponses]

export type UpdateRuleData = {
  /**
   * An updated catalog rule with the following attributes.
   */
  body: RuleUpdateData
  path: {
    /**
     * The catalog rule ID.
     */
    catalog_rule_id: string
  }
  query?: never
  url: "/catalogs/rules/{catalog_rule_id}"
}

export type UpdateRuleErrors = {
  /**
   * Unexpected error.
   */
  default: ErrorResponse
}

export type UpdateRuleError = UpdateRuleErrors[keyof UpdateRuleErrors]

export type UpdateRuleResponses = {
  /**
   * An Updated catalog rule with the following attributes.
   */
  200: RuleData
}

export type UpdateRuleResponse = UpdateRuleResponses[keyof UpdateRuleResponses]

export type GetAllHierarchiesData = {
  body?: never
  headers?: {
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
  }
  path: {
    /**
     * The catalog ID.
     */
    catalog_id: string
    /**
     * The unique identifier of a published release of the catalog or `latest` for the most recently published version.
     */
    release_id: string
  }
  query?: {
    /**
     * This endpoints supports filtering. See [Filtering](#filtering).
     *
     */
    filter?: string
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[limit]"?: BigInt
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[offset]"?: BigInt
  }
  url: "/catalogs/{catalog_id}/releases/{release_id}/hierarchies"
}

export type GetAllHierarchiesErrors = {
  /**
   * An unexpected error.
   */
  default: ErrorResponse
}

export type GetAllHierarchiesError =
  GetAllHierarchiesErrors[keyof GetAllHierarchiesErrors]

export type GetAllHierarchiesResponses = {
  /**
   * The hierarchies of a catalog.
   */
  200: HierarchyListData
}

export type GetAllHierarchiesResponse =
  GetAllHierarchiesResponses[keyof GetAllHierarchiesResponses]

export type GetHierarchyData = {
  body?: never
  headers?: {
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
  }
  path: {
    /**
     * The catalog ID.
     */
    catalog_id: string
    /**
     * The unique identifier of a published release of the catalog or `latest` for the most recently published version.
     */
    release_id: string
    /**
     * The catalog hierarchy ID.
     */
    hierarchy_id: string
  }
  query?: never
  url: "/catalogs/{catalog_id}/releases/{release_id}/hierarchies/{hierarchy_id}"
}

export type GetHierarchyErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type GetHierarchyError = GetHierarchyErrors[keyof GetHierarchyErrors]

export type GetHierarchyResponses = {
  /**
   * The catalog hierarchy.
   */
  200: HierarchyData
}

export type GetHierarchyResponse =
  GetHierarchyResponses[keyof GetHierarchyResponses]

export type GetHierarchyNodesData = {
  body?: never
  headers?: {
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
  }
  path: {
    /**
     * The catalog ID.
     */
    catalog_id: string
    /**
     * The catalog release ID.
     */
    release_id: string
    /**
     * The catalog hierarchy ID.
     */
    hierarchy_id: string
  }
  query?: {
    /**
     * This endpoint supports filtering, see [Filtering](#filtering).
     *
     */
    filter?: string
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[limit]"?: BigInt
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[offset]"?: BigInt
  }
  url: "/catalogs/{catalog_id}/releases/{release_id}/hierarchies/{hierarchy_id}/nodes"
}

export type GetHierarchyNodesErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type GetHierarchyNodesError =
  GetHierarchyNodesErrors[keyof GetHierarchyNodesErrors]

export type GetHierarchyNodesResponses = {
  /**
   * The child nodes of a catalog hierarchy.
   */
  200: NodeListData
}

export type GetHierarchyNodesResponse =
  GetHierarchyNodesResponses[keyof GetHierarchyNodesResponses]

export type GetHierarchyChildNodesData = {
  body?: never
  headers?: {
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
  }
  path: {
    /**
     * The catalog ID.
     */
    catalog_id: string
    /**
     * The unique identifier of a published release of the catalog or `latest` for the most recently published version.
     */
    release_id: string
    /**
     * The catalog hierarchy ID.
     */
    hierarchy_id: string
  }
  query?: {
    /**
     * This endpoint supports filtering, see [Filtering](#filtering).
     *
     */
    filter?: string
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[limit]"?: BigInt
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[offset]"?: BigInt
  }
  url: "/catalogs/{catalog_id}/releases/{release_id}/hierarchies/{hierarchy_id}/children"
}

export type GetHierarchyChildNodesErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type GetHierarchyChildNodesError =
  GetHierarchyChildNodesErrors[keyof GetHierarchyChildNodesErrors]

export type GetHierarchyChildNodesResponses = {
  /**
   * The child nodes of a catalog hierarchy.
   */
  200: NodeListData
}

export type GetHierarchyChildNodesResponse =
  GetHierarchyChildNodesResponses[keyof GetHierarchyChildNodesResponses]

export type GetAllNodesData = {
  body?: never
  headers?: {
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
  }
  path: {
    /**
     * The catalog ID.
     */
    catalog_id: string
    /**
     * The unique identifier of a published release of the catalog or `latest` for the most recently published version.
     */
    release_id: string
  }
  query?: {
    /**
     * This endpoint supports filtering, see [Filtering](#filtering).
     *
     */
    filter?: string
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[limit]"?: BigInt
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[offset]"?: BigInt
  }
  url: "/catalogs/{catalog_id}/releases/{release_id}/nodes"
}

export type GetAllNodesErrors = {
  /**
   * An unexpected error.
   */
  default: ErrorResponse
}

export type GetAllNodesError = GetAllNodesErrors[keyof GetAllNodesErrors]

export type GetAllNodesResponses = {
  /**
   * The nodes of a catalog.
   */
  200: NodeListData
}

export type GetAllNodesResponse =
  GetAllNodesResponses[keyof GetAllNodesResponses]

export type GetNodeData = {
  body?: never
  headers?: {
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
  }
  path: {
    /**
     * The catalog ID.
     */
    catalog_id: string
    /**
     * The unique identifier of a published release of the catalog or `latest` for the most recently published version.
     */
    release_id: string
    /**
     * The catalog node ID.
     */
    node_id: string
  }
  query?: never
  url: "/catalogs/{catalog_id}/releases/{release_id}/nodes/{node_id}"
}

export type GetNodeErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type GetNodeError = GetNodeErrors[keyof GetNodeErrors]

export type GetNodeResponses = {
  /**
   * The catalog node.
   */
  200: NodeData
}

export type GetNodeResponse = GetNodeResponses[keyof GetNodeResponses]

export type GetChildNodesData = {
  body?: never
  headers?: {
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
  }
  path: {
    /**
     * The catalog ID.
     */
    catalog_id: string
    /**
     * The unique identifier of a published release of the catalog or `latest` for the most recently published version.
     */
    release_id: string
    /**
     * The catalog node ID.
     */
    node_id: string
  }
  query?: {
    /**
     * This endpoint supports filtering, see [Filtering](#filtering).
     *
     */
    filter?: string
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[limit]"?: BigInt
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[offset]"?: BigInt
  }
  url: "/catalogs/{catalog_id}/releases/{release_id}/nodes/{node_id}/relationships/children"
}

export type GetChildNodesErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type GetChildNodesError = GetChildNodesErrors[keyof GetChildNodesErrors]

export type GetChildNodesResponses = {
  /**
   * The child nodes of a catalog node.
   */
  200: NodeListData
}

export type GetChildNodesResponse =
  GetChildNodesResponses[keyof GetChildNodesResponses]

export type GetAllProductsData = {
  body?: never
  headers?: {
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
  }
  path: {
    /**
     * The catalog ID.
     */
    catalog_id: string
    /**
     * The unique identifier of a published release of the catalog or `latest` for the most recently published version.
     */
    release_id: string
  }
  query?: {
    /**
     * This endpoints support filtering. See [Filtering](#filtering).
     *
     */
    filter?: string
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[limit]"?: BigInt
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[offset]"?: BigInt
  }
  url: "/catalogs/{catalog_id}/releases/{release_id}/products"
}

export type GetAllProductsErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type GetAllProductsError =
  GetAllProductsErrors[keyof GetAllProductsErrors]

export type GetAllProductsResponses = {
  /**
   * The products of a catalog.
   */
  200: ProductListData
}

export type GetAllProductsResponse =
  GetAllProductsResponses[keyof GetAllProductsResponses]

export type GetProductData = {
  body?: never
  headers?: {
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
  }
  path: {
    /**
     * The catalog ID.
     */
    catalog_id: string
    /**
     * The unique identifier of a published release of the catalog or `latest` for the most recently published version.
     */
    release_id: string
    /**
     * The product ID.
     */
    product_id: string
  }
  query?: never
  url: "/catalogs/{catalog_id}/releases/{release_id}/products/{product_id}"
}

export type GetProductErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type GetProductError = GetProductErrors[keyof GetProductErrors]

export type GetProductResponses = {
  /**
   * The product of a catalog.
   */
  200: ProductData
}

export type GetProductResponse = GetProductResponses[keyof GetProductResponses]

export type GetComponentProductIdsData = {
  body?: never
  path: {
    /**
     * The catalog ID.
     */
    catalog_id: string
    /**
     * The unique identifier of a published release of the catalog or `latest` for the most recently published version.
     */
    release_id: string
    /**
     * The product ID.
     */
    product_id: string
  }
  query?: {
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[limit]"?: BigInt
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[offset]"?: BigInt
  }
  url: "/catalogs/{catalog_id}/releases/{release_id}/products/{product_id}/relationships/component_products"
}

export type GetComponentProductIdsErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type GetComponentProductIdsError =
  GetComponentProductIdsErrors[keyof GetComponentProductIdsErrors]

export type GetComponentProductIdsResponses = {
  /**
   * The list of component product IDs of a specific bundle product from a catalog.
   */
  200: ProductReferenceListData
}

export type GetComponentProductIdsResponse =
  GetComponentProductIdsResponses[keyof GetComponentProductIdsResponses]

export type GetChildProductsData = {
  body?: never
  headers?: {
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
  }
  path: {
    /**
     * The catalog ID.
     */
    catalog_id: string
    /**
     * The unique identifier of a published release of the catalog or `latest` for the most recently published version.
     */
    release_id: string
    /**
     * The product ID.
     */
    product_id: string
  }
  query?: {
    /**
     * This endpoints support filtering. See [Filtering](#filtering).
     *
     */
    filter?: string
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[limit]"?: BigInt
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[offset]"?: BigInt
  }
  url: "/catalogs/{catalog_id}/releases/{release_id}/products/{product_id}/relationships/children"
}

export type GetChildProductsErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type GetChildProductsError =
  GetChildProductsErrors[keyof GetChildProductsErrors]

export type GetChildProductsResponses = {
  /**
   * The list of child products of a specific base product from a catalog.
   */
  200: ProductListData
}

export type GetChildProductsResponse =
  GetChildProductsResponses[keyof GetChildProductsResponses]

export type GetProductsForHierarchyData = {
  body?: never
  headers?: {
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
  }
  path: {
    /**
     * The catalog ID.
     */
    catalog_id: string
    /**
     * The unique identifier of a published release of the catalog or `latest` for the most recently published version.
     */
    release_id: string
    /**
     * The catalog hierarchy ID.
     */
    hierarchy_id: string
  }
  query?: {
    /**
     * This endpoints support filtering. See [Filtering](#filtering).
     *
     */
    filter?: string
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[limit]"?: BigInt
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[offset]"?: BigInt
  }
  url: "/catalogs/{catalog_id}/releases/{release_id}/hierarchies/{hierarchy_id}/products"
}

export type GetProductsForHierarchyErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type GetProductsForHierarchyError =
  GetProductsForHierarchyErrors[keyof GetProductsForHierarchyErrors]

export type GetProductsForHierarchyResponses = {
  /**
   * The products of a catalog hierarchy.
   */
  200: ProductListData
}

export type GetProductsForHierarchyResponse =
  GetProductsForHierarchyResponses[keyof GetProductsForHierarchyResponses]

export type GetProductsForNodeData = {
  body?: never
  headers?: {
    /**
     * The language and locale your storefront prefers. See [Accept-Language](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language).
     */
    "accept-language"?: string
  }
  path: {
    /**
     * The catalog ID.
     */
    catalog_id: string
    /**
     * The unique identifier of a published release of the catalog or `latest` for the most recently published version.
     */
    release_id: string
    /**
     * The catalog node ID.
     */
    node_id: string
  }
  query?: {
    /**
     * This endpoints support filtering. See [Filtering](#filtering).
     *
     */
    filter?: string
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[limit]"?: BigInt
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[offset]"?: BigInt
  }
  url: "/catalogs/{catalog_id}/releases/{release_id}/nodes/{node_id}/relationships/products"
}

export type GetProductsForNodeErrors = {
  /**
   * The unexpected error.
   */
  default: ErrorResponse
}

export type GetProductsForNodeError =
  GetProductsForNodeErrors[keyof GetProductsForNodeErrors]

export type GetProductsForNodeResponses = {
  /**
   * The products of a catalog node.
   */
  200: ProductListData
}

export type GetProductsForNodeResponse =
  GetProductsForNodeResponses[keyof GetProductsForNodeResponses]

export type GetCartsData = {
  body?: never
  headers?: {
    /**
     * An Account Management Authentication token to access a specific account's carts.
     */
    "EP-Account-Management-Authentication-Token"?: string
    /**
     * A customer token to access a specific customer's carts.
     */
    "x-moltin-customer-token"?: string
  }
  path?: never
  query?: never
  url: "/v2/carts"
}

export type GetCartsErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type GetCartsError = GetCartsErrors[keyof GetCartsErrors]

export type GetCartsResponses = {
  200: ResponseData & {
    data?: Array<CartResponse>
    links?: ResponsePageLinks
    meta?: ResponseMetaCarts
  }
}

export type GetCartsResponse = GetCartsResponses[keyof GetCartsResponses]

export type CreateACartData = {
  body?: CartsRequest
  headers?: {
    /**
     * A customer token to be associated with the cart.
     */
    "x-moltin-customer-token"?: string
  }
  path?: never
  query?: never
  url: "/v2/carts"
}

export type CreateACartErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type CreateACartError = CreateACartErrors[keyof CreateACartErrors]

export type CreateACartResponses = {
  200: ResponseData & {
    data?: CartResponse
  }
}

export type CreateACartResponse =
  CreateACartResponses[keyof CreateACartResponses]

export type DeleteACartData = {
  body?: never
  path: {
    /**
     * The unique identifier of the cart that you want to delete.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}"
}

export type DeleteACartErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type DeleteACartError = DeleteACartErrors[keyof DeleteACartErrors]

export type DeleteACartResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteACartResponse =
  DeleteACartResponses[keyof DeleteACartResponses]

export type GetCartData = {
  body?: never
  path: {
    /**
     * The unique identifier for this cart that you created.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}"
}

export type GetCartErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type GetCartError = GetCartErrors[keyof GetCartErrors]

export type GetCartResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: CartResponse
  }
}

export type GetCartResponse = GetCartResponses[keyof GetCartResponses]

export type UpdateACartData = {
  body?: CartsRequest
  path: {
    /**
     * The unique identifier of a cart created by you.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}"
}

export type UpdateACartErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type UpdateACartError = UpdateACartErrors[keyof UpdateACartErrors]

export type UpdateACartResponses = {
  200: ResponseData & {
    data?: CartResponse
  }
}

export type UpdateACartResponse =
  UpdateACartResponses[keyof UpdateACartResponses]

export type DeleteAllCartItemsData = {
  body?: never
  path: {
    /**
     * The unique identifier of the cart created by you.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items"
}

export type DeleteAllCartItemsErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type DeleteAllCartItemsError =
  DeleteAllCartItemsErrors[keyof DeleteAllCartItemsErrors]

export type DeleteAllCartItemsResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteAllCartItemsResponse =
  DeleteAllCartItemsResponses[keyof DeleteAllCartItemsResponses]

export type GetCartItemsData = {
  body?: never
  path: {
    /**
     * The unique identifier of the cart that you created.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items"
}

export type GetCartItemsErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type GetCartItemsError = GetCartItemsErrors[keyof GetCartItemsErrors]

export type GetCartItemsResponses = {
  200: CartsResponse
}

export type GetCartItemsResponse =
  GetCartItemsResponses[keyof GetCartItemsResponses]

export type ManageCartsData = {
  body?:
    | CartItemsObjectRequest
    | CartMergeObjectRequest
    | CustomItemObject
    | ReOrderObjectRequest
    | PromotionItemObject
    | BulkAddItemsRequest
  path: {
    /**
     * The unique identifier of the cart that you created.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items"
}

export type ManageCartsErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type ManageCartsError = ManageCartsErrors[keyof ManageCartsErrors]

export type ManageCartsResponses = {
  200: CartsResponse
}

export type ManageCartsResponse =
  ManageCartsResponses[keyof ManageCartsResponses]

export type BulkUpdateItemsInCartData = {
  body?: BulkUpdateCartsItems
  path: {
    /**
     * The unique identifier of the cart that you created.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items"
}

export type BulkUpdateItemsInCartErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type BulkUpdateItemsInCartError =
  BulkUpdateItemsInCartErrors[keyof BulkUpdateItemsInCartErrors]

export type BulkUpdateItemsInCartResponses = {
  200: unknown
}

export type DeleteACartItemData = {
  body?: never
  path: {
    /**
     * The unique identifier of the cart created by you.
     */
    cartID: string
    /**
     * The unique identifier of the cart that you want to delete.
     */
    cartitemID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items/{cartitemID}"
}

export type DeleteACartItemErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type DeleteACartItemError =
  DeleteACartItemErrors[keyof DeleteACartItemErrors]

export type DeleteACartItemResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteACartItemResponse =
  DeleteACartItemResponses[keyof DeleteACartItemResponses]

export type UpdateACartItemData = {
  body?: UpdateCartsItems
  path: {
    /**
     * A unique identifier of the cart that you created.
     */
    cartID: string
    /**
     * A unique identifier of the cart item.
     */
    cartitemID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items/{cartitemID}"
}

export type UpdateACartItemErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type UpdateACartItemError =
  UpdateACartItemErrors[keyof UpdateACartItemErrors]

export type UpdateACartItemResponses = {
  200: CartsResponse
}

export type UpdateACartItemResponse =
  UpdateACartItemResponses[keyof UpdateACartItemResponses]

export type DeleteAccountCartAssociationData = {
  body?: CartsRelationshipsAccountsData
  headers?: {
    /**
     * An Account Management Authentication token to access a specific account's carts.
     */
    "EP-Account-Management-Authentication-Token"?: string
  }
  path: {
    /**
     * The ID for the cart created by the account.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/relationships/accounts"
}

export type DeleteAccountCartAssociationErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type DeleteAccountCartAssociationError =
  DeleteAccountCartAssociationErrors[keyof DeleteAccountCartAssociationErrors]

export type DeleteAccountCartAssociationResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteAccountCartAssociationResponse =
  DeleteAccountCartAssociationResponses[keyof DeleteAccountCartAssociationResponses]

export type CreateAccountCartAssociationData = {
  body?: CartsRelationshipsAccountsData
  headers?: {
    /**
     * An Account Management Authentication token to access a specific account's carts.
     */
    "EP-Account-Management-Authentication-Token"?: string
  }
  path: {
    /**
     * The ID for the cart created by the account. Ensure that you follow the guidelines for [Safe Characters](/guides/Getting-Started/safe-characters).
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/relationships/accounts"
}

export type CreateAccountCartAssociationErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type CreateAccountCartAssociationError =
  CreateAccountCartAssociationErrors[keyof CreateAccountCartAssociationErrors]

export type CreateAccountCartAssociationResponses = {
  /**
   * OK
   */
  200: CartsRelationshipsAccountsData
  /**
   * No Content is sent back in case the account has already been associated to the cart.
   */
  204: void
}

export type CreateAccountCartAssociationResponse =
  CreateAccountCartAssociationResponses[keyof CreateAccountCartAssociationResponses]

export type DeleteCustomerCartAssociationData = {
  body?: CartsRelationshipsCustomersData
  headers?: {
    /**
     * A customer token to access a specific customer's carts.
     */
    "x-moltin-customer-token"?: string
  }
  path: {
    /**
     * The ID for the cart created by the customer.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/relationships/customers"
}

export type DeleteCustomerCartAssociationErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type DeleteCustomerCartAssociationError =
  DeleteCustomerCartAssociationErrors[keyof DeleteCustomerCartAssociationErrors]

export type DeleteCustomerCartAssociationResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteCustomerCartAssociationResponse =
  DeleteCustomerCartAssociationResponses[keyof DeleteCustomerCartAssociationResponses]

export type CreateCustomerCartAssociationData = {
  body?: CartsRelationshipsCustomersData
  headers?: {
    /**
     * A customer token to access a specific customer's carts.
     */
    "x-moltin-customer-token"?: string
  }
  path: {
    /**
     * The ID for the cart created by the customer. Ensure that you follow the guidelines for [Safe Characters](/guides/Getting-Started/safe-characters).
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/relationships/customers"
}

export type CreateCustomerCartAssociationErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type CreateCustomerCartAssociationError =
  CreateCustomerCartAssociationErrors[keyof CreateCustomerCartAssociationErrors]

export type CreateCustomerCartAssociationResponses = {
  /**
   * OK
   */
  200: CartsRelationshipsCustomersData
}

export type CreateCustomerCartAssociationResponse =
  CreateCustomerCartAssociationResponses[keyof CreateCustomerCartAssociationResponses]

export type DeleteAPromotionViaPromotionCodeData = {
  body?: never
  path: {
    /**
     * Specifies the unique identifier of a cart created by you.
     */
    cartID: string
    /**
     * Specifies the promotion code to be deleted.
     */
    promoCode: string
  }
  query?: never
  url: "/v2/carts/{cartID}/discounts/{promoCode}"
}

export type DeleteAPromotionViaPromotionCodeErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type DeleteAPromotionViaPromotionCodeError =
  DeleteAPromotionViaPromotionCodeErrors[keyof DeleteAPromotionViaPromotionCodeErrors]

export type DeleteAPromotionViaPromotionCodeResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteAPromotionViaPromotionCodeResponse =
  DeleteAPromotionViaPromotionCodeResponses[keyof DeleteAPromotionViaPromotionCodeResponses]

export type AddTaxItemToCartData = {
  body?: ResponseData & {
    data?: CartsItemsTaxesObject
  }
  path: {
    /**
     * The unique identifier of the cart.
     */
    cartID: string
    /**
     * The unique identifier of the cart item.
     */
    cartitemID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items/{cartitemID}/taxes"
}

export type AddTaxItemToCartErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
  /**
   * Unauthorized
   */
  422: ResponseError
}

export type AddTaxItemToCartError =
  AddTaxItemToCartErrors[keyof AddTaxItemToCartErrors]

export type AddTaxItemToCartResponses = {
  200: ResponseData & {
    data?: CartsItemsTaxesObject
  }
}

export type AddTaxItemToCartResponse =
  AddTaxItemToCartResponses[keyof AddTaxItemToCartResponses]

export type BulkDeleteTaxItemsFromCartData = {
  body?: never
  path: {
    /**
     * The unique identifier of the cart.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/taxes"
}

export type BulkDeleteTaxItemsFromCartErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type BulkDeleteTaxItemsFromCartError =
  BulkDeleteTaxItemsFromCartErrors[keyof BulkDeleteTaxItemsFromCartErrors]

export type BulkDeleteTaxItemsFromCartResponses = {
  /**
   * No Content
   */
  204: void
}

export type BulkDeleteTaxItemsFromCartResponse =
  BulkDeleteTaxItemsFromCartResponses[keyof BulkDeleteTaxItemsFromCartResponses]

export type BulkAddTaxItemsToCartData = {
  body?: CartsBulkTaxes
  path: {
    /**
     * The unique identifier of the cart.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/taxes"
}

export type BulkAddTaxItemsToCartErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type BulkAddTaxItemsToCartError =
  BulkAddTaxItemsToCartErrors[keyof BulkAddTaxItemsToCartErrors]

export type BulkAddTaxItemsToCartResponses = {
  200: CartsBulkTaxes
}

export type BulkAddTaxItemsToCartResponse =
  BulkAddTaxItemsToCartResponses[keyof BulkAddTaxItemsToCartResponses]

export type DeleteATaxItemData = {
  body?: never
  path: {
    /**
     * The unique identifier of the cart.
     */
    cartID: string
    /**
     * The unique identifier of the cart item.
     */
    cartitemID: string
    /**
     * The unique identifier of the tax item.
     */
    taxitemID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items/{cartitemID}/taxes/{taxitemID}"
}

export type DeleteATaxItemErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type DeleteATaxItemError =
  DeleteATaxItemErrors[keyof DeleteATaxItemErrors]

export type DeleteATaxItemResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteATaxItemResponse =
  DeleteATaxItemResponses[keyof DeleteATaxItemResponses]

export type UpdateATaxItemData = {
  body?: ResponseData & {
    data?: CartsItemsTaxesObject
  }
  path: {
    /**
     * The unique identifier of the cart.
     */
    cartID: string
    /**
     * The unique identifier of the cart item.
     */
    cartitemID: string
    /**
     * The unique identifier of the tax item.
     */
    taxitemID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items/{cartitemID}/taxes/{taxitemID}"
}

export type UpdateATaxItemErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type UpdateATaxItemError =
  UpdateATaxItemErrors[keyof UpdateATaxItemErrors]

export type UpdateATaxItemResponses = {
  200: ResponseData & {
    data?: CartsItemsTaxesObject
  }
}

export type UpdateATaxItemResponse =
  UpdateATaxItemResponses[keyof UpdateATaxItemResponses]

export type BulkDeleteCustomDiscountsFromCartData = {
  body?: never
  path: {
    /**
     * Specifies the unique ID for the cart.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/custom-discounts"
}

export type BulkDeleteCustomDiscountsFromCartErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type BulkDeleteCustomDiscountsFromCartError =
  BulkDeleteCustomDiscountsFromCartErrors[keyof BulkDeleteCustomDiscountsFromCartErrors]

export type BulkDeleteCustomDiscountsFromCartResponses = {
  /**
   * No Content
   */
  204: void
}

export type BulkDeleteCustomDiscountsFromCartResponse =
  BulkDeleteCustomDiscountsFromCartResponses[keyof BulkDeleteCustomDiscountsFromCartResponses]

export type BulkAddCustomDiscountsToCartData = {
  body?: CartsBulkCustomDiscounts
  path: {
    /**
     * Specifies the system generated ID for the cart that the shopper created.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/custom-discounts"
}

export type BulkAddCustomDiscountsToCartErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type BulkAddCustomDiscountsToCartError =
  BulkAddCustomDiscountsToCartErrors[keyof BulkAddCustomDiscountsToCartErrors]

export type BulkAddCustomDiscountsToCartResponses = {
  200: CartsBulkCustomDiscountsResponse
}

export type BulkAddCustomDiscountsToCartResponse =
  BulkAddCustomDiscountsToCartResponses[keyof BulkAddCustomDiscountsToCartResponses]

export type DeleteCustomDiscountFromCartData = {
  body?: never
  path: {
    /**
     * Specifies the unique ID for the cart.
     */
    cartID: string
    /**
     * Specifies the ID for the custom discount to be deleted.
     */
    customdiscountID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/custom-discounts/{customdiscountID}"
}

export type DeleteCustomDiscountFromCartErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type DeleteCustomDiscountFromCartError =
  DeleteCustomDiscountFromCartErrors[keyof DeleteCustomDiscountFromCartErrors]

export type DeleteCustomDiscountFromCartResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteCustomDiscountFromCartResponse =
  DeleteCustomDiscountFromCartResponses[keyof DeleteCustomDiscountFromCartResponses]

export type UpdateCustomDiscountForCartData = {
  body?: ResponseData & {
    data?: CartsCustomDiscountsObject
  }
  path: {
    /**
     * Specifies the unique ID for the cart.
     */
    cartID: string
    /**
     * Specifies the ID for the custom discount to be updated.
     */
    customdiscountID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/custom-discounts/{customdiscountID}"
}

export type UpdateCustomDiscountForCartErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type UpdateCustomDiscountForCartError =
  UpdateCustomDiscountForCartErrors[keyof UpdateCustomDiscountForCartErrors]

export type UpdateCustomDiscountForCartResponses = {
  200: ResponseData & {
    data?: CartsCustomDiscountsResponse
  }
}

export type UpdateCustomDiscountForCartResponse =
  UpdateCustomDiscountForCartResponses[keyof UpdateCustomDiscountForCartResponses]

export type AddCustomDiscountToCartItemData = {
  body?: CartsCustomDiscountsObject
  path: {
    /**
     * Specifies the ID for the cart.
     */
    cartID: string
    /**
     * Specifies the unique identifier for the cart item.
     */
    cartitemID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items/{cartitemID}/custom-discounts"
}

export type AddCustomDiscountToCartItemErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type AddCustomDiscountToCartItemError =
  AddCustomDiscountToCartItemErrors[keyof AddCustomDiscountToCartItemErrors]

export type AddCustomDiscountToCartItemResponses = {
  200: ResponseData & {
    data?: CartsCustomDiscountsResponse
  }
}

export type AddCustomDiscountToCartItemResponse =
  AddCustomDiscountToCartItemResponses[keyof AddCustomDiscountToCartItemResponses]

export type DeleteCustomDiscountFromCartItemData = {
  body?: never
  path: {
    /**
     * Specifies the ID for the cart.
     */
    cartID: string
    /**
     * Specifies the ID for the cart item.
     */
    cartitemID: string
    /**
     * Specifies the ID for the custom discount to be deleted.
     */
    customdiscountID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items/{cartitemID}/custom-discounts/{customdiscountID}"
}

export type DeleteCustomDiscountFromCartItemErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type DeleteCustomDiscountFromCartItemError =
  DeleteCustomDiscountFromCartItemErrors[keyof DeleteCustomDiscountFromCartItemErrors]

export type DeleteCustomDiscountFromCartItemResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteCustomDiscountFromCartItemResponse =
  DeleteCustomDiscountFromCartItemResponses[keyof DeleteCustomDiscountFromCartItemResponses]

export type UpdateCustomDiscountForCartItemData = {
  body?: ResponseData & {
    data?: CartsCustomDiscountsObject
  }
  path: {
    /**
     * Specifies the ID for the cart.
     */
    cartID: string
    /**
     * Specifies the ID for the cart item.
     */
    cartitemID: string
    /**
     * Specifies the ID for the custom discount to be updated.
     */
    customdiscountID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/items/{cartitemID}/custom-discounts/{customdiscountID}"
}

export type UpdateCustomDiscountForCartItemErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type UpdateCustomDiscountForCartItemError =
  UpdateCustomDiscountForCartItemErrors[keyof UpdateCustomDiscountForCartItemErrors]

export type UpdateCustomDiscountForCartItemResponses = {
  200: ResponseData & {
    data?: CartsCustomDiscountsResponse
  }
}

export type UpdateCustomDiscountForCartItemResponse =
  UpdateCustomDiscountForCartItemResponses[keyof UpdateCustomDiscountForCartItemResponses]

export type CreateCartPaymentIntentData = {
  body?: ElasticPathPaymentsPoweredByStripePayment
  path: {
    /**
     * The universally unique identifier of the cart for which you want to create a payment intent.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/payments"
}

export type CreateCartPaymentIntentErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type CreateCartPaymentIntentError =
  CreateCartPaymentIntentErrors[keyof CreateCartPaymentIntentErrors]

export type CreateCartPaymentIntentResponses = {
  /**
   * Payment Intent created successfully.
   */
  201: CartResponse
}

export type CreateCartPaymentIntentResponse =
  CreateCartPaymentIntentResponses[keyof CreateCartPaymentIntentResponses]

export type CheckoutApiData = {
  body?: CustomerCheckout | AccountCheckout
  headers?: {
    /**
     * An account management authentication token that identifies the authenticated account member.
     */
    "EP-Account-Management-Authentication-Token"?: string
  }
  path: {
    /**
     * The ID of the cart that you want to checkout.
     */
    cartID: string
  }
  query?: never
  url: "/v2/carts/{cartID}/checkout"
}

export type CheckoutApiErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type CheckoutApiError = CheckoutApiErrors[keyof CheckoutApiErrors]

export type CheckoutApiResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: OrderResponse
  }
}

export type CheckoutApiResponse =
  CheckoutApiResponses[keyof CheckoutApiResponses]

export type GetCustomerOrdersData = {
  body?: never
  headers?: {
    /**
     * A customer token to access a specific customer's orders.
     */
    "x-moltin-customer-token"?: string
  }
  path?: never
  query?: never
  url: "/v2/orders"
}

export type GetCustomerOrdersErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type GetCustomerOrdersError =
  GetCustomerOrdersErrors[keyof GetCustomerOrdersErrors]

export type GetCustomerOrdersResponses = {
  200: ResponseData & {
    data?: Array<OrderResponse>
    links?: ResponsePageLinks
    meta?: ResponseMetaOrders
  }
}

export type GetCustomerOrdersResponse =
  GetCustomerOrdersResponses[keyof GetCustomerOrdersResponses]

export type GetAnOrderData = {
  body?: never
  path: {
    /**
     * The ID of the order.
     */
    orderID: string
  }
  query?: never
  url: "/v2/orders/{orderID}"
}

export type GetAnOrderErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type GetAnOrderError = GetAnOrderErrors[keyof GetAnOrderErrors]

export type GetAnOrderResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: OrderResponse
  }
}

export type GetAnOrderResponse = GetAnOrderResponses[keyof GetAnOrderResponses]

export type UpdateAnOrderData = {
  body?: OrdersUpdateRequest
  path: {
    /**
     * The unique identifier of the order.
     */
    orderID: string
  }
  query?: never
  url: "/v2/orders/{orderID}"
}

export type UpdateAnOrderErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type UpdateAnOrderError = UpdateAnOrderErrors[keyof UpdateAnOrderErrors]

export type UpdateAnOrderResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: OrderResponse
  }
}

export type UpdateAnOrderResponse =
  UpdateAnOrderResponses[keyof UpdateAnOrderResponses]

export type GetOrderItemsData = {
  body?: never
  path: {
    /**
     * The ID of the order.
     */
    orderID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/items"
}

export type GetOrderItemsErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type GetOrderItemsError = GetOrderItemsErrors[keyof GetOrderItemsErrors]

export type GetOrderItemsResponses = {
  200: ResponseData & {
    data?: Array<OrderItemResponse>
  }
}

export type GetOrderItemsResponse =
  GetOrderItemsResponses[keyof GetOrderItemsResponses]

export type AnonymizeOrdersData = {
  body?: OrdersAnonymizeRequest & unknown
  path?: never
  query?: never
  url: "/v2/orders/anonymize"
}

export type AnonymizeOrdersErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
  /**
   * Not Found
   */
  422: ResponseError
}

export type AnonymizeOrdersError =
  AnonymizeOrdersErrors[keyof AnonymizeOrdersErrors]

export type AnonymizeOrdersResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: OrderResponse
  }
}

export type AnonymizeOrdersResponse =
  AnonymizeOrdersResponses[keyof AnonymizeOrdersResponses]

export type PaymentSetupData = {
  body?: PaymentsRequest
  path: {
    /**
     * The Universally Unique Identifier (UUID) of the order you want to pay for.
     */
    orderID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/payments"
}

export type PaymentSetupErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type PaymentSetupError = PaymentSetupErrors[keyof PaymentSetupErrors]

export type PaymentSetupResponses = {
  /**
   * OK
   */
  200: ResponseData & {
    data?: TransactionResponse
  }
}

export type PaymentSetupResponse =
  PaymentSetupResponses[keyof PaymentSetupResponses]

export type ConfirmPaymentData = {
  body?: OrdersTransactionsConfirmRequest
  path: {
    /**
     * The unique identifier of the order.
     */
    orderID: string
    /**
     * The unique identifier of the transaction.
     */
    transactionID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/transactions/{transactionID}/confirm"
}

export type ConfirmPaymentErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type ConfirmPaymentError =
  ConfirmPaymentErrors[keyof ConfirmPaymentErrors]

export type ConfirmPaymentResponses = {
  200: ResponseData & {
    data?: TransactionResponse
  }
}

export type ConfirmPaymentResponse =
  ConfirmPaymentResponses[keyof ConfirmPaymentResponses]

export type CaptureATransactionData = {
  body?: OrdersTransactionsCaptureRequest
  path: {
    /**
     * The UUID of the order.
     */
    orderID: string
    /**
     * The UUID of the transaction to capture.
     */
    transactionID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/transactions/{transactionID}/capture"
}

export type CaptureATransactionErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type CaptureATransactionError =
  CaptureATransactionErrors[keyof CaptureATransactionErrors]

export type CaptureATransactionResponses = {
  200: ResponseData & {
    data?: TransactionResponse
  }
}

export type CaptureATransactionResponse =
  CaptureATransactionResponses[keyof CaptureATransactionResponses]

export type RefundATransactionData = {
  body?: OrdersTransactionsRefundRequest
  path: {
    /**
     * The UUID of the order.
     */
    orderID: string
    /**
     * The UUID of the transaction you want to refund.
     */
    transactionID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/transactions/{transactionID}/refund"
}

export type RefundATransactionErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type RefundATransactionError =
  RefundATransactionErrors[keyof RefundATransactionErrors]

export type RefundATransactionResponses = {
  200: ResponseData & {
    data?: TransactionResponse
  }
}

export type RefundATransactionResponse =
  RefundATransactionResponses[keyof RefundATransactionResponses]

export type GetOrderTransactionsData = {
  body?: never
  path: {
    /**
     * The unique identifier of the order.
     */
    orderID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/transactions"
}

export type GetOrderTransactionsErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type GetOrderTransactionsError =
  GetOrderTransactionsErrors[keyof GetOrderTransactionsErrors]

export type GetOrderTransactionsResponses = {
  200: ResponseData & {
    data?: Array<TransactionResponse>
  }
}

export type GetOrderTransactionsResponse =
  GetOrderTransactionsResponses[keyof GetOrderTransactionsResponses]

export type GetATransactionData = {
  body?: never
  path: {
    /**
     * The unique identifier of the order that you require transactions for.
     */
    orderID: string
    /**
     * The unique identifier of the transaction.
     */
    transactionID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/transactions/{transactionID}"
}

export type GetATransactionErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type GetATransactionError =
  GetATransactionErrors[keyof GetATransactionErrors]

export type GetATransactionResponses = {
  200: ResponseData & {
    data?: TransactionResponse
  }
}

export type GetATransactionResponse =
  GetATransactionResponses[keyof GetATransactionResponses]

export type CancelATransactionData = {
  body?: OrdersTransactionsCancelRequest
  path: {
    /**
     * The unique identifier of the order.
     */
    orderID: string
    /**
     * The unique identifier of the transaction to be canceled or voided.
     */
    transactionID: string
  }
  query?: never
  url: "/v2/orders/{orderID}/transactions/{transactionID}/cancel"
}

export type CancelATransactionErrors = {
  /**
   * Unauthorized
   */
  401: ResponseError
}

export type CancelATransactionError =
  CancelATransactionErrors[keyof CancelATransactionErrors]

export type CancelATransactionResponses = {
  200: ResponseData & {
    data?: TransactionResponse
  }
}

export type CancelATransactionResponse =
  CancelATransactionResponses[keyof CancelATransactionResponses]
