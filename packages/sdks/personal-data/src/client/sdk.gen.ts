// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from "@hey-api/client-fetch"
import type {
  GetPersonalDataLogsData,
  GetPersonalDataLogsResponse,
  GetPersonalDataLogsError,
  GetRelatedDataEntriesData,
  GetRelatedDataEntriesResponse,
  GetRelatedDataEntriesError,
  GetErasureRequestsData,
  GetErasureRequestsResponse,
  GetErasureRequestsError,
  PostErasureRequestData,
  PostErasureRequestResponse,
  PostErasureRequestError,
  GetErasureRequestData,
  GetErasureRequestResponse,
  GetErasureRequestError,
  GetLogsTtlData,
  GetLogsTtlResponse,
  GetLogsTtlError,
  PutLogsTtlData,
  PutLogsTtlResponse,
  PutLogsTtlError,
} from "./types.gen"

export const client = createClient(createConfig())

/**
 * Get Personal Data Logs
 * Gets a list of logs for a specific resource id and resource type.
 *
 * You can use pagination with this resource. For more information, see [pagination](/guides/Getting-Started/pagination).
 *
 * :::note
 * * This request is only accessible to `client_credentials` token users with `Seller Admin`, `Support` and `IT` roles.
 * * Non `client_credentials` token users cannot access this endpoint. See [Permissions](/docs/authentication/Tokens/permissions).
 * * This request requires a filter for `resource_type` and `resource_id`.
 * :::
 *
 * ## Filtering
 *
 * The following operator and attributes are **required** for [filtering](/guides/Getting-Started/filtering) erasure requests.
 *
 * | Operator | Description                                                                                          |
 * |:---------|:-----------------------------------------------------------------------------------------------------|
 * | `eq`     | Checks whether the values of two operands are equal. If the values are equal, the condition is true. |
 *
 * | Attribute         | Type     | Operator | Example                                                   |
 * | :---------------- | :---     | :---     | :-------------------------------------------------------- |
 * | `resource_type`   | `string` | `eq`     | `eq(resource_type,customer)`                              |
 * | `resource_id`     | `string` | `eq`     | `eq(resource_id,0f850c15-d643-480a-a2b4-9e3c26067178)`    |
 *
 */
export const getPersonalDataLogs = <ThrowOnError extends boolean = false>(
  options?: Options<GetPersonalDataLogsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPersonalDataLogsResponse,
    GetPersonalDataLogsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/personal-data/logs",
  })
}

/**
 * Get Personal Data Related Data Entries
 * Gets a list of related data entries filtered by specific resource id and resource type.
 *
 * You can use pagination with this resource. For more information, see [pagination](/guides/Getting-Started/pagination).
 *
 * :::note
 *
 * * This request is only accessible to `client_credentials` token users with `Seller Admin`, `Support` and `IT` roles.
 * * Non `client_credentials` token users cannot access this endpoint. See [Permissions](/docs/authentication/Tokens/permissions).
 * * This request requires a filter for `resource_type` and `resource_id`.
 *
 * :::
 *
 * ## Filtering
 *
 * The following operator and attributes are **required** for [filtering](/guides/Getting-Started/filtering) erasure requests.
 *
 * | Operator | Description                                                                                          |
 * |:---------|:-----------------------------------------------------------------------------------------------------|
 * | `eq`     | Checks whether the values of two operands are equal. If the values are equal, the condition is true. |
 *
 * | Attribute         | Type     | Operator | Example                                                   |
 * | :---------------- | :---     | :---     | :-------------------------------------------------------- |
 * | `resource_type`   | `string` | `eq`     | `eq(resource_type,customer)`                              |
 * | `resource_id`     | `string` | `eq`     | `eq(resource_id,0f850c15-d643-480a-a2b4-9e3c26067178)`    |
 *
 */
export const getRelatedDataEntries = <ThrowOnError extends boolean = false>(
  options?: Options<GetRelatedDataEntriesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetRelatedDataEntriesResponse,
    GetRelatedDataEntriesError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/personal-data/related-data-entries",
  })
}

/**
 * Get all Personal Data Erasure Request
 * Gets a list of erasure requests for a specific resource id and resource type.
 *
 * You can use pagination with this resource. For more information, see [pagination](/guides/Getting-Started/pagination).
 *
 * ## Filtering
 *
 * The following operator and attributes are **required** for [filtering](/guides/Getting-Started/filtering)
 * erasure requests.
 *
 * | Operator | Description                                                                                          |
 * |:---------|:-----------------------------------------------------------------------------------------------------|
 * | `eq`     | Checks whether the values of two operands are equal. If the values are equal, the condition is true. |
 *
 * | Attribute       | Type | Operator | Example                                                 |
 * |:----------------| :--- | :--- |:--------------------------------------------------------|
 * | `resource_type` | `string` | `eq`  | `eq(resource_type,customer)`                            |
 * | `resource_id`   | `string` | `eq`  | `eq(resource_id,0f850c15-d643-480a-a2b4-9e3c26067178\)` |
 *
 */
export const getErasureRequests = <ThrowOnError extends boolean = false>(
  options?: Options<GetErasureRequestsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetErasureRequestsResponse,
    GetErasureRequestsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/personal-data/erasure-requests",
  })
}

/**
 * Create Personal Data Erasure Request
 * This request serves to create a new erasure request for a given resource ID and Type. All resources that belong to the same personal data set will be erased.
 *
 */
export const postErasureRequest = <ThrowOnError extends boolean = false>(
  options?: Options<PostErasureRequestData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostErasureRequestResponse,
    PostErasureRequestError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/personal-data/erasure-requests",
  })
}

/**
 * Get Personal Data Erasure Request
 * This request serves to get an existing erasure request by its ID.
 *
 */
export const getErasureRequest = <ThrowOnError extends boolean = false>(
  options: Options<GetErasureRequestData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetErasureRequestResponse,
    GetErasureRequestError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/personal-data/erasure-requests/{erasure_request_id}",
  })
}

/**
 * Get Logs Time-to-Live (TTL) Settings
 */
export const getLogsTtl = <ThrowOnError extends boolean = false>(
  options?: Options<GetLogsTtlData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetLogsTtlResponse,
    GetLogsTtlError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/settings/logs-ttl",
  })
}

/**
 * Update Logs Time-to-Live (TTL) Settings
 */
export const putLogsTtl = <ThrowOnError extends boolean = false>(
  options?: Options<PutLogsTtlData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    PutLogsTtlResponse,
    PutLogsTtlError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/settings/logs-ttl",
  })
}
