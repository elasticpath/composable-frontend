// This file is auto-generated by @hey-api/openapi-ts

export type PaginationMeta = {
  results: {
    /**
     * Total number of results for the entire collection.
     */
    total?: number
  }
  page: {
    /**
     * The maximum number of records for all pages.
     */
    limit?: number
    /**
     * The current offset by number of pages.
     */
    offset?: number
    /**
     * The current number of pages.
     */
    current?: number
    /**
     * The total number of records for the entire collection.
     */
    total?: number
  }
}

export type PaginationLinks = {
  /**
   * Always the current page.
   */
  current: string | null
  /**
   * Always the first page.
   */
  first: string | null
  /**
   * Always `null` if there is only one page.
   */
  last: string | null
  /**
   * Always `null` if there is only one page.
   */
  next: string | null
  /**
   * Always `null` if the user is on the first page.
   */
  prev: string | null
}

export type PersonalDataLog = {
  /**
   * The unique identifier for the log entry.
   */
  id?: string
  /**
   * The unique identifier for the store id.
   */
  store_id?: string
  /**
   * The type of the object. Always equal to `personal_data_log_entry`.
   */
  type?: "personal_data_log_entry"
  /**
   * Specifies who initiated the personal data change.
   */
  initiator?: {
    "access-token-email"?: string
    "access-token-id"?: string
    "access-token-name"?: string
    "access-token-store-id"?: string
    "access-token-type"?: string
  }
  /**
   * Specifies the time when the change happened.
   */
  time?: string
  /**
   * Specifies the type of the event.
   */
  event_type?: string
  /**
   * Includes fields that were changed as a result of the event.
   */
  delta?: {
    email?: string
    id?: string
    name?: string
    realm_id?: string
    store_id?: string
    type?: string
  }
  /**
   * The ID of the data entry that was changed.
   */
  resource_id?: string
  /**
   * The type of the data entry that was changed.
   */
  resource_type?: string
  relationships?: {
    resource_path?: {
      url?: string
    }
  }
}

export type RelatedDataEntry = {
  /**
   * The type of a related data entry.
   */
  resource_type?: string
  /**
   * The ID of a related data entry.
   */
  resource_id?: string
  /**
   * The type of the object. Always equal to `related_data_entry`.
   */
  type?: "related_data_entry"
}

export type LogsTtl = {
  /**
   * The number of days to retain the logs. Allowed values are between 1 and 365.
   */
  days?: number
  /**
   * The type of the object. Always equal to `time_to_live`.
   */
  type?: "time_to_live"
}

export type ErasureRequest = {
  /**
   * The type of the data entry to be erased.
   */
  resource_type?: string
  /**
   * The ID of the data entry to be erased (note that also all data entries in the personal data set will be erased).
   */
  resource_id?: string
  /**
   * The type of the object. Always equal to `erasure_request`.
   */
  type?: "erasure_request"
}

export type ErasureRequestResponse = {
  /**
   * The unique identifier for the log entry.
   */
  id?: string
  /**
   * The type of the data entry to be erased.
   */
  resource_type?: string
  /**
   * The ID of the data entry to be erased (note that also all data entries in the personal data set will be erased).
   */
  resource_id?: string
  /**
   * The type of the object. Always equal to `erasure_request`.
   */
  type?: "erasure_request"
  /**
   * Specifies who initiated the erasure request.
   */
  initiator?: {
    "access-token-email"?: string
    "access-token-id"?: string
    "access-token-name"?: string
    "access-token-store-id"?: string
    "access-token-type"?: string
  }
  /**
   * Specifies the status of the erasure request.
   */
  status?: string
  /**
   * Elaborates on the erasure request status.
   */
  status_description?: string
  /**
   * Specifies the status of the erasure request.
   */
  created_at?: string
  /**
   * Elaborates on the erasure request status.
   */
  updated_at?: string
  links?: {
    /**
     * The self link.
     */
    self?: string
  }
}

export type _Error = {
  /**
   * A brief summary of the error.
   */
  title: string
  /**
   * The HTTP response code of the error.
   */
  status: string
  /**
   * Optional additional detail about the error.
   */
  detail?: string
}

export type ErrorResponse = {
  errors: Array<_Error>
}

/**
 * The id of the Personal-Data Erasure Request.
 */
export type ErasureRequestId = string

/**
 * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
 */
export type PageOffset = BigInt

/**
 * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
 */
export type PageLimit = BigInt

/**
 * Filter attributes. For more information, see the [Filtering](/guides/Getting-Started/filtering) section.
 */
export type Filter = string

export type GetPersonalDataLogsData = {
  body?: never
  path?: never
  query?: {
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[offset]"?: BigInt
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[limit]"?: BigInt
    /**
     * Filter attributes. For more information, see the [Filtering](/guides/Getting-Started/filtering) section.
     */
    filter?: string
  }
  url: "/v2/personal-data/logs"
}

export type GetPersonalDataLogsErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse
  /**
   * Internal server error.
   */
  default: ErrorResponse
}

export type GetPersonalDataLogsError =
  GetPersonalDataLogsErrors[keyof GetPersonalDataLogsErrors]

export type GetPersonalDataLogsResponses = {
  /**
   * OK
   */
  200: {
    data?: Array<PersonalDataLog>
    meta?: PaginationMeta
    links?: PaginationLinks
  }
}

export type GetPersonalDataLogsResponse =
  GetPersonalDataLogsResponses[keyof GetPersonalDataLogsResponses]

export type GetRelatedDataEntriesData = {
  body?: never
  path?: never
  query?: {
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[offset]"?: BigInt
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[limit]"?: BigInt
    /**
     * Filter attributes. For more information, see the [Filtering](/guides/Getting-Started/filtering) section.
     */
    filter?: string
  }
  url: "/v2/personal-data/related-data-entries"
}

export type GetRelatedDataEntriesErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse
  /**
   * Internal server error.
   */
  default: ErrorResponse
}

export type GetRelatedDataEntriesError =
  GetRelatedDataEntriesErrors[keyof GetRelatedDataEntriesErrors]

export type GetRelatedDataEntriesResponses = {
  /**
   * OK
   */
  200: {
    data?: Array<RelatedDataEntry>
    meta?: PaginationMeta
    links?: PaginationLinks
  }
}

export type GetRelatedDataEntriesResponse =
  GetRelatedDataEntriesResponses[keyof GetRelatedDataEntriesResponses]

export type GetErasureRequestsData = {
  body?: never
  path?: never
  query?: {
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[offset]"?: BigInt
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [page length](/docs/api/settings/settings-introduction#page-length) store setting is used.
     */
    "page[limit]"?: BigInt
    /**
     * Filter attributes. For more information, see the [Filtering](/guides/Getting-Started/filtering) section.
     */
    filter?: string
  }
  url: "/v2/personal-data/erasure-requests"
}

export type GetErasureRequestsErrors = {
  /**
   * Unauthorized
   */
  401: ErrorResponse
  /**
   * Internal server error.
   */
  default: ErrorResponse
}

export type GetErasureRequestsError =
  GetErasureRequestsErrors[keyof GetErasureRequestsErrors]

export type GetErasureRequestsResponses = {
  /**
   * OK
   */
  200: {
    data?: Array<ErasureRequestResponse>
    meta?: PaginationMeta
    links?: PaginationLinks
  }
}

export type GetErasureRequestsResponse =
  GetErasureRequestsResponses[keyof GetErasureRequestsResponses]

export type PostErasureRequestData = {
  body?: {
    data: ErasureRequest
  }
  path?: never
  query?: never
  url: "/v2/personal-data/erasure-requests"
}

export type PostErasureRequestErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse
  /**
   * Internal server error.
   */
  default: ErrorResponse
}

export type PostErasureRequestError =
  PostErasureRequestErrors[keyof PostErasureRequestErrors]

export type PostErasureRequestResponses = {
  /**
   * Created
   */
  201: {
    data?: ErasureRequestResponse
  }
}

export type PostErasureRequestResponse =
  PostErasureRequestResponses[keyof PostErasureRequestResponses]

export type GetErasureRequestData = {
  body?: never
  path: {
    /**
     * The id of the Personal-Data Erasure Request.
     */
    erasure_request_id: string
  }
  query?: never
  url: "/v2/personal-data/erasure-requests/{erasure_request_id}"
}

export type GetErasureRequestErrors = {
  /**
   * Not Found
   */
  404: ErrorResponse
  /**
   * Internal server error.
   */
  default: ErrorResponse
}

export type GetErasureRequestError =
  GetErasureRequestErrors[keyof GetErasureRequestErrors]

export type GetErasureRequestResponses = {
  /**
   * Created
   */
  200: {
    data?: ErasureRequestResponse
  }
}

export type GetErasureRequestResponse =
  GetErasureRequestResponses[keyof GetErasureRequestResponses]

export type GetLogsTtlData = {
  body?: never
  path?: never
  query?: never
  url: "/v2/settings/logs-ttl"
}

export type GetLogsTtlErrors = {
  /**
   * Unauthorized
   */
  401: ErrorResponse
  /**
   * Internal server error.
   */
  default: ErrorResponse
}

export type GetLogsTtlError = GetLogsTtlErrors[keyof GetLogsTtlErrors]

export type GetLogsTtlResponses = {
  /**
   * OK
   */
  200: {
    data?: LogsTtl
  }
}

export type GetLogsTtlResponse = GetLogsTtlResponses[keyof GetLogsTtlResponses]

export type PutLogsTtlData = {
  body?: {
    data: LogsTtl
  }
  path?: never
  query?: never
  url: "/v2/settings/logs-ttl"
}

export type PutLogsTtlErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse
  /**
   * Internal server error.
   */
  default: ErrorResponse
}

export type PutLogsTtlError = PutLogsTtlErrors[keyof PutLogsTtlErrors]

export type PutLogsTtlResponses = {
  /**
   * OK
   */
  200: {
    data?: LogsTtl
  }
}

export type PutLogsTtlResponse = PutLogsTtlResponses[keyof PutLogsTtlResponses]
