// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
  formDataBodySerializer,
} from "@hey-api/client-fetch"
import type {
  GetAllFilesData,
  GetAllFilesResponse,
  GetAllFilesError,
  CreateAFileData,
  CreateAFileResponse,
  CreateAFileError,
  DeleteAFileData,
  DeleteAFileResponse,
  DeleteAFileError,
  GetAFileData,
  GetAFileResponse,
  GetAFileError,
} from "./types.gen"

export const client = createClient(createConfig())

/**
 * Get all Files
 * Retrieves all files.
 *
 * ### Filtering
 *
 * For general filtering syntax, see [Filtering](/guides/Getting-Started/filtering).
 *
 * The following operators and attributes are available when filtering on this endpoint.
 *
 * | Attribute             | Type      | Operators           | Example |
 * |:----------------------|:----------|:--------------------------|:-------------|
 * | `file_name`           | `string`  | `eq` / `like`             | `eq(file_name, my_image.jpg)` |
 * | `width`               | `integer` | `gt` / `ge` / `lt` / `le` | `gt(width,200)` |
 * | `height`              | `integer` | `gt` / `ge` / `lt` / `le` | `lt(height,500)` |
 * | `file_size`           | `integer` | `gt` / `ge` / `lt` / `le` | `le(file_size,20953)` |
 *
 */
export const getAllFiles = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllFilesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAllFilesResponse,
    GetAllFilesError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/files",
  })
}

/**
 * Create a File
 * Create a File
 */
export const createAFile = <ThrowOnError extends boolean = false>(
  options: Options<CreateAFileData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateAFileResponse,
    CreateAFileError,
    ThrowOnError
  >({
    ...options,
    ...formDataBodySerializer,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/files",
  })
}

/**
 * Delete a File
 * Delete a File
 */
export const deleteAFile = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAFileData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteAFileResponse,
    DeleteAFileError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/files/{fileID}",
  })
}

/**
 * Get a File
 * Get a File
 */
export const getAFile = <ThrowOnError extends boolean = false>(
  options: Options<GetAFileData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAFileResponse,
    GetAFileError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/files/{fileID}",
  })
}
