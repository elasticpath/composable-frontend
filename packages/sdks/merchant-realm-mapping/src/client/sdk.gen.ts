// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from "@hey-api/client-fetch"
import type {
  GetMerchantRealmMappingsData,
  GetMerchantRealmMappingsResponse,
  GetMerchantRealmMappingsError,
  GetMerchantRealmMappingData,
  GetMerchantRealmMappingResponse,
  GetMerchantRealmMappingError,
  UpdateMerchantRealmMappingData,
  UpdateMerchantRealmMappingResponse,
  UpdateMerchantRealmMappingError,
} from "./types.gen"

export const client = createClient(createConfig())

/**
 * Get the Merchant Realm Mapping for the current store
 * This API is used to obtain an [Authentication Realm](/docs/authentication/single-sign-on/authentication-realm-api/authentication-realm-api-overview) if there is none yet for the current store.
 *
 */
export const getMerchantRealmMappings = <ThrowOnError extends boolean = false>(
  options?: Options<GetMerchantRealmMappingsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetMerchantRealmMappingsResponse,
    GetMerchantRealmMappingsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/merchant-realm-mappings",
  })
}

/**
 * Get a Merchant Realm Mapping
 */
export const getMerchantRealmMapping = <ThrowOnError extends boolean = false>(
  options: Options<GetMerchantRealmMappingData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetMerchantRealmMappingResponse,
    GetMerchantRealmMappingError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/merchant-realm-mappings/{mapping_id}",
  })
}

/**
 * Update a Merchant Realm Mapping
 */
export const updateMerchantRealmMapping = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateMerchantRealmMappingData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateMerchantRealmMappingResponse,
    UpdateMerchantRealmMappingError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/merchant-realm-mappings/{mapping_id}",
  })
}
