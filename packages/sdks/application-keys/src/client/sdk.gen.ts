// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from "@hey-api/client-fetch"
import type {
  GetAllKeysData,
  GetAllKeysResponse,
  GetAllKeysError,
  CreateKeyData,
  CreateKeyResponse,
  CreateKeyError,
  DeleteKeyData,
  DeleteKeyResponse,
  DeleteKeyError,
  GetKeyData,
  GetKeyResponse,
  GetKeyError,
  UpdateKeyData,
  UpdateKeyResponse,
  UpdateKeyError,
} from "./types.gen"

export const client = createClient(createConfig())

/**
 * Get all Application Keys
 * You can use pagination with this resource. For more information,
 * see [pagination](/guides/Getting-Started/pagination).
 *
 */
export const getAllKeys = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllKeysData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAllKeysResponse,
    GetAllKeysError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/application-keys",
  })
}

/**
 * Create an Application Key
 */
export const createKey = <ThrowOnError extends boolean = false>(
  options: Options<CreateKeyData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateKeyResponse,
    CreateKeyError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/application-keys",
  })
}

/**
 * Delete an Application Key
 */
export const deleteKey = <ThrowOnError extends boolean = false>(
  options: Options<DeleteKeyData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteKeyResponse,
    DeleteKeyError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/application-keys/{application_key_id}",
  })
}

/**
 * Get an Application Key
 */
export const getKey = <ThrowOnError extends boolean = false>(
  options: Options<GetKeyData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetKeyResponse,
    GetKeyError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/application-keys/{application_key_id}",
  })
}

/**
 * Update an Application Key
 */
export const updateKey = <ThrowOnError extends boolean = false>(
  options: Options<UpdateKeyData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateKeyResponse,
    UpdateKeyError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/application-keys/{application_key_id}",
  })
}
