// This file is auto-generated by @hey-api/openapi-ts

export type FlowsRequest = {
  data?: {
    /**
     * A brief description of a flow/template outlining details such as purpose, usage instructions and so on.
     */
    description?: string
    enabled?: boolean
    /**
     * The name of a flow/template.
     */
    name?: string
    /**
     * A unique slug identifier for a flow/template.
     */
    slug?: string
    /**
     * Represents the type of object being returned.
     */
    type?: string
  }
}

export type Flows = {
  id?: Uuid
  /**
   * A unique identifier for a flow/template.
   */
  type?: string
  /**
   * The name of a flow/template.
   */
  name?: string
  /**
   * A unique identifier of a flow/template.
   */
  slug?: string
  /**
   * A short description for a flow/template.
   */
  description?: string
  enabled?: boolean
  links?: FlowsLinks
  relationships?: FlowsRelationships
  meta?: Meta
}

export type Entry = {
  id?: Uuid
  /**
   * Represents the type of object being returned.
   */
  type?: string
  links?: FlowsLinks
  meta?: Meta
  [key: string]: string | Uuid | FlowsLinks | Meta | undefined
}

export type Relationships = {
  id?: Uuid
  /**
   * Represents the type of object being returned.
   */
  type?: string
}

export type FieldRequest = {
  data?: {
    /**
     * Specifies a default value for a field/attribute if no value is provided and the field/attribute is required.
     */
    default?: number
    /**
     * A description for a field/attribute.
     */
    description?: string
    enabled?: boolean
    /**
     * This field is immutable and cannot be updated. You can have the following field types:
     * - `string`
     * - `integer`
     * - `boolean`
     * - `float`
     * - `date`
     * - `relationship`
     *
     */
    field_type?: string
    /**
     * The name of a field/attribute.
     */
    name?: string
    /**
     * Denotes the order in which a field/attribute is returned relative to the rest of flow fields/template attributes.
     */
    order?: number
    relationships?: FieldRelationships
    /**
     * `true` if required on input, `false` if not. Always `false` if the `field_type` `relationship`.
     *
     */
    required?: boolean
    /**
     * A unique identifier of a field/attribute.
     */
    slug?: string
    /**
     * Represents the type of object being returned.
     */
    type?: string
    /**
     * An array of validation rule objects. See [**Field Validation Rules**](#fieldattribute-validation-rules).
     */
    validation_rules?: Array<FieldValidationRules>
  }
}

export type FieldUpdateRequest = {
  data?: {
    /**
     * A default value if none is supplied and the field/attribute is required.
     */
    default?: number
    /**
     * A description for a field/attribute.
     */
    description?: string
    /**
     * This field is immutable and cannot be updated. The type of field:
     * - `string`
     * - `integer`
     * - `boolean`
     * - `float`
     * - `date`
     * - `relationship`
     *
     */
    field_type?: string
    id?: Uuid
    /**
     * The name of a field/attribute.
     */
    name?: string
    /**
     * `true` if required on input, `false` if not. Always `false` if the `field_type` is `relationship`.
     *
     */
    required?: boolean
    /**
     * A unique identifier of a field/attribute.
     */
    slug?: string
    enabled?: boolean
    /**
     * Represents the object being returned.
     */
    type?: string
  }
}

export type Field = {
  id?: Uuid
  /**
   * Represents the type of object being returned.
   */
  type?: string
  /**
   * This field is immutable and cannot be updated. You can have the following field types:
   * - `string`
   * - `integer`
   * - `boolean`
   * - `float`
   * - `date`
   * - `relationship`
   *
   */
  field_type?: string
  /**
   * A short description for a field/attribute.
   */
  slug?: string
  /**
   * The name of a field/attribute.
   */
  name?: string
  /**
   * A short description of a field/attribute.
   */
  description?: string
  /**
   * `true` if required on input, `false` if not. Always `false` if the `field_type` is a relationship.
   *
   */
  required?: boolean
  /**
   * A default value if none is supplied and a field/attribute is not required.
   */
  default?: string | null
  enabled?: boolean
  /**
   * Denotes the order in which this field is returned relative to the rest of the flow/template fields/attributes.
   */
  order?: number | null
  /**
   * Hide this field/attribute from responses if the value is `null`.
   */
  omit_null?: boolean
  validation_rules?: Array<FieldValidationRules>
  meta?: Meta
  links?: FieldLinks
  relationships?: FieldRelationships
}

/**
 * The validation you use depends on the `field_type` of the field/attribute. Each validation rule is expressed as a validation rule object.
 */
export type Type =
  | "enum"
  | "email"
  | "slug"
  | "between"
  | "one-to-many"
  | "one-to-one"

/**
 * An array of validation rule objects. See [Field/attribute Validation Rules](#fieldattribute-validation-rules).
 */
export type FieldValidationRules = {
  /**
   * The validation you use depends on the `field_type` of the field/attribute. Each validation rule is expressed as a validation rule object.
   */
  type?: "enum" | "email" | "slug" | "between" | "one-to-many" | "one-to-one"
  options?:
    | Array<string>
    | {
        from?: string
        to?: string
      }
  to?: string
}

/**
 * The resource owner, either `organization` or `store`.
 */
export type Owner = "store" | "organization"

export type Meta = {
  /**
   * The resource owner, either `organization` or `store`.
   */
  owner?: "store" | "organization"
  timestamps?: {
    /**
     * The date and time a resource is created.
     */
    created_at?: string
    /**
     * The date and time a resource is updated.
     */
    updated_at?: string
  }
}

/**
 * Relationships are established between different flow/template entities. For example, a field/attribute is related to a flow/template, as the field/attribute is attached to the flow/template.
 */
export type FieldRelationships = {
  flow?: {
    data?: {
      id?: Uuid
      /**
       * Represents the type of object being returned.
       */
      type?: string
    }
  }
}

/**
 * Relationships are established between different flows/templates entities. For example, a field and an entry are related to a flow as both are attached to it.
 */
export type FlowsRelationships = {
  fields?: {
    data?: Relationships
  }
}

/**
 * Links allow you to move between requests. Single entities use a `self` parameter with a link to that specific resource. Listing pages use the following:
 *
 * | Property | Description |
 * | --- | --- |
 * | `current` | Always the current page |
 * | `first` | Always the first page |
 * | `last` | `null` if there is only one page. |
 * | `prev` | `null` if you are on the first page. |
 * | `next` | `null` if there is only one page. |
 *
 */
export type FieldLinks = {
  self?: string
}

/**
 * Links allow you to move between requests. Single entities use a `self` parameter with a link to that specific resource. Listing pages use the following:
 *
 * | Property | Description |
 * | --- | --- |
 * | `current` | Always the current page |
 * | `first` | Always the first page |
 * | `last` | `null` if there is only one page. |
 * | `prev` | `null` if you are on the first page. |
 * | `next` | `null` if there is only one page. |
 *
 */
export type FlowsLinks = {
  self?: string
}

export type FlowsUpdateRequest = {
  data?: {
    /**
     * A brief description of a flow/template outlining details such as purpose, usage instructions, and so on.
     */
    description?: string
    enabled?: boolean
    /**
     * The name of a flow/template.
     */
    name?: string
    id?: Uuid
    /**
     * A unique slug identifier for a flow/template.
     */
    slug?: string
    /**
     * Represents the type of object being returned.
     */
    type?: string
  }
}

export type FlowsEntriesRequest = {
  /**
   * Specifies the type of the resource object.
   */
  data?: {
    /**
     * Where **FIELD_SLUG** is the slug for each field/attribute on this flow/template along with the corresponding value. You must provide a field slug and a value for the entry. You can have multiple field slugs if they are related to the flow/template.
     */
    FIELD_SLUG?: string
    /**
     * Represents the type of object being returned.
     */
    type?: string
  }
}

export type FlowsEntriesRelationshipsFieldSlugRequest = {
  /**
   * The data to be stored.
   */
  data?: Array<{
    id?: Uuid
    /**
     * The resource type of the object.
     */
    type?: string
  }>
}

export type FlowsEntriesUpdateRequest = {
  data?: {
    /**
     * The field slug for each field/attribute in a flow/template and the corresponding value for the entry. You can have multiple field slugs if they are related to the flow/template.
     */
    FIELD1_SLUG?: string
    /**
     * The field slug for each field/attribute in a flow/template and the corresponding value for the entry. You can have multiple field slugs if they are related to the flow/template.
     */
    FIELD2_SLUG?: string
    id?: Uuid
    /**
     * Represents the type of the resource object.
     */
    type?: string
  }
}

export type ErrorResponse = {
  errors: Array<_Error>
}

export type _Error = {
  /**
   * The HTTP response code of the error.
   */
  status: number
  /**
   * A brief summary of the error.
   */
  title: string
  /**
   * Optional additional detail about the error.
   */
  detail?: string
  /**
   * Internal request ID.
   */
  request_id?: string
  /**
   * Additional supporting meta data for the error.
   */
  meta?: {
    [key: string]: unknown
  }
}

/**
 * A unique identifier for a resource.
 */
export type Uuid = string

/**
 * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [**page length**](/docs/commerce-cloud/global-project-settings/settings-overview#page-length) store setting is used.
 *
 */
export type PageOffset = string

/**
 * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [**page length**](/docs/commerce-cloud/global-project-settings/settings-overview#page-length) store setting is used.
 *
 */
export type PageLimit = string

export type GetAllFlowsData = {
  body?: never
  path?: never
  query?: never
  url: "/v2/flows"
}

export type GetAllFlowsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type GetAllFlowsError = GetAllFlowsErrors[keyof GetAllFlowsErrors]

export type GetAllFlowsResponses = {
  /**
   * OK
   */
  200: {
    data?: Array<Flows>
  }
}

export type GetAllFlowsResponse =
  GetAllFlowsResponses[keyof GetAllFlowsResponses]

export type CreateAFlowData = {
  body: FlowsRequest & unknown
  path?: never
  query?: never
  url: "/v2/flows"
}

export type CreateAFlowErrors = {
  /**
   * Bad request. The request failed validation.
   */
  422: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type CreateAFlowError = CreateAFlowErrors[keyof CreateAFlowErrors]

export type CreateAFlowResponses = {
  201: {
    data?: Flows
  }
}

export type CreateAFlowResponse =
  CreateAFlowResponses[keyof CreateAFlowResponses]

export type DeleteAFlowData = {
  body?: never
  path: {
    /**
     * The unique identifier of the flow/template you want to delete.
     */
    flowID: Uuid
  }
  query?: never
  url: "/v2/flows/{flowID}"
}

export type DeleteAFlowErrors = {
  /**
   * Bad request. Not Found.
   */
  404: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type DeleteAFlowError = DeleteAFlowErrors[keyof DeleteAFlowErrors]

export type DeleteAFlowResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteAFlowResponse =
  DeleteAFlowResponses[keyof DeleteAFlowResponses]

export type GetAFlowData = {
  body?: never
  path: {
    /**
     * The unique identifier of the flow/template you want to retrieve.
     */
    flowID: Uuid
  }
  query?: never
  url: "/v2/flows/{flowID}"
}

export type GetAFlowErrors = {
  /**
   * Bad request. Not Found.
   */
  404: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type GetAFlowError = GetAFlowErrors[keyof GetAFlowErrors]

export type GetAFlowResponses = {
  200: {
    data?: Flows
  }
}

export type GetAFlowResponse = GetAFlowResponses[keyof GetAFlowResponses]

export type UpdateAFlowData = {
  body: FlowsUpdateRequest
  path: {
    /**
     * The unique identifier of the flow/template you want to update.
     */
    flowID: Uuid
  }
  query?: never
  url: "/v2/flows/{flowID}"
}

export type UpdateAFlowErrors = {
  /**
   * Bad request. Not Found.
   */
  404: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type UpdateAFlowError = UpdateAFlowErrors[keyof UpdateAFlowErrors]

export type UpdateAFlowResponses = {
  200: {
    data?: Flows
  }
}

export type UpdateAFlowResponse =
  UpdateAFlowResponses[keyof UpdateAFlowResponses]

export type GetAllFieldsData = {
  body?: never
  path?: never
  query?: never
  url: "/v2/fields"
}

export type GetAllFieldsErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type GetAllFieldsError = GetAllFieldsErrors[keyof GetAllFieldsErrors]

export type GetAllFieldsResponses = {
  /**
   * OK
   */
  200: {
    data?: Array<Field>
  }
}

export type GetAllFieldsResponse =
  GetAllFieldsResponses[keyof GetAllFieldsResponses]

export type CreateAFieldData = {
  body: FieldRequest
  path?: never
  query?: never
  url: "/v2/fields"
}

export type CreateAFieldErrors = {
  /**
   * Bad request. The request failed validation.
   */
  422: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type CreateAFieldError = CreateAFieldErrors[keyof CreateAFieldErrors]

export type CreateAFieldResponses = {
  /**
   * Created
   */
  201: {
    data?: Field
  }
}

export type CreateAFieldResponse =
  CreateAFieldResponses[keyof CreateAFieldResponses]

export type DeleteAFieldData = {
  body?: never
  path: {
    /**
     * The unique identifier of the field/attribute that you want to delete.
     */
    flowFieldID: string
  }
  query?: never
  url: "/v2/fields/{flowFieldID}"
}

export type DeleteAFieldErrors = {
  /**
   * Bad request. Not Found.
   */
  404: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type DeleteAFieldError = DeleteAFieldErrors[keyof DeleteAFieldErrors]

export type DeleteAFieldResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteAFieldResponse =
  DeleteAFieldResponses[keyof DeleteAFieldResponses]

export type GetAFieldData = {
  body?: never
  path: {
    /**
     * The unique identifier of the flow/template whose field/attribute you want to retrieve.
     */
    flowFieldID: Uuid
  }
  query?: never
  url: "/v2/fields/{flowFieldID}"
}

export type GetAFieldErrors = {
  /**
   * Bad request. Not Found.
   */
  404: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type GetAFieldError = GetAFieldErrors[keyof GetAFieldErrors]

export type GetAFieldResponses = {
  /**
   * OK
   */
  200: {
    data?: Field
  }
}

export type GetAFieldResponse = GetAFieldResponses[keyof GetAFieldResponses]

export type UpdateAFieldData = {
  body: FieldUpdateRequest
  path: {
    /**
     * The unique identifier for the flow/template to which the field/attribute you want to update belongs.
     */
    flowFieldID: Uuid
  }
  query?: never
  url: "/v2/fields/{flowFieldID}"
}

export type UpdateAFieldErrors = {
  /**
   * Bad request. Not Found.
   */
  404: ErrorResponse
  /**
   * Bad request. The request failed validation.
   */
  422: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type UpdateAFieldError = UpdateAFieldErrors[keyof UpdateAFieldErrors]

export type UpdateAFieldResponses = {
  /**
   * OK
   */
  200: {
    data?: Field
  }
}

export type UpdateAFieldResponse =
  UpdateAFieldResponses[keyof UpdateAFieldResponses]

export type GetAllEntriesData = {
  body?: never
  path: {
    /**
     * The slug for the flow/template you want to create an entry for.
     */
    flowSlug: string
  }
  query?: {
    /**
     * The maximum number of records per page for this response. You can set this value up to 100. If no page size is set, the [**page length**](/docs/commerce-cloud/global-project-settings/settings-overview#page-length) store setting is used.
     *
     */
    "page[limit]"?: string
    /**
     * The current offset by number of records, not pages. Offset is zero-based. The maximum records you can offset is 10,000. If no page size is set, the [**page length**](/docs/commerce-cloud/global-project-settings/settings-overview#page-length) store setting is used.
     *
     */
    "page[offset]"?: string
  }
  url: "/v2/flows/{flowSlug}/entries"
}

export type GetAllEntriesErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: ErrorResponse
  /**
   * Bad request. Not Found.
   */
  404: ErrorResponse
  /**
   * Bad request. The request failed validation.
   */
  422: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type GetAllEntriesError = GetAllEntriesErrors[keyof GetAllEntriesErrors]

export type GetAllEntriesResponses = {
  /**
   * OK
   */
  200: {
    data?: Array<Entry>
  }
}

export type GetAllEntriesResponse =
  GetAllEntriesResponses[keyof GetAllEntriesResponses]

export type CreateAnEntryData = {
  body: FlowsEntriesRequest
  path: {
    /**
     * The slug for the flow/template you want to create an entry for.
     */
    flowSlug: string
  }
  query?: never
  url: "/v2/flows/{flowSlug}/entries"
}

export type CreateAnEntryErrors = {
  /**
   * Bad request. The request failed validation.
   */
  400: ErrorResponse
  /**
   * Bad request. Not Found.
   */
  404: ErrorResponse
  /**
   * Bad request. The request failed validation.
   */
  422: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type CreateAnEntryError = CreateAnEntryErrors[keyof CreateAnEntryErrors]

export type CreateAnEntryResponses = {
  /**
   * Created
   */
  201: {
    data?: Entry
  }
}

export type CreateAnEntryResponse =
  CreateAnEntryResponses[keyof CreateAnEntryResponses]

export type DeleteAnEntryData = {
  body?: never
  path: {
    /**
     * The slug for the flow/template.
     */
    flowSlug: string
    /**
     * The ID of the entry.
     */
    flowEntryID: string
  }
  query?: never
  url: "/v2/flows/{flowSlug}/entries/{flowEntryID}"
}

export type DeleteAnEntryErrors = {
  /**
   * Bad request. Not Found.
   */
  404: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type DeleteAnEntryError = DeleteAnEntryErrors[keyof DeleteAnEntryErrors]

export type DeleteAnEntryResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteAnEntryResponse =
  DeleteAnEntryResponses[keyof DeleteAnEntryResponses]

export type GetAnEntryData = {
  body?: never
  path: {
    /**
     * The slug for the flow/template.
     */
    flowSlug: string
    /**
     * The ID of the entry.
     */
    flowEntryID: string
  }
  query?: never
  url: "/v2/flows/{flowSlug}/entries/{flowEntryID}"
}

export type GetAnEntryErrors = {
  /**
   * Bad request. Not Found.
   */
  404: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type GetAnEntryError = GetAnEntryErrors[keyof GetAnEntryErrors]

export type GetAnEntryResponses = {
  /**
   * OK
   */
  200: {
    data?: Entry
  }
}

export type GetAnEntryResponse = GetAnEntryResponses[keyof GetAnEntryResponses]

export type UpdateAnEntryData = {
  body: FlowsEntriesUpdateRequest
  path: {
    /**
     * The slug for the flow/template.
     */
    flowSlug: string
    /**
     * The ID of the entry.
     */
    flowEntryID: string
  }
  query?: never
  url: "/v2/flows/{flowSlug}/entries/{flowEntryID}"
}

export type UpdateAnEntryErrors = {
  /**
   * Bad request. Not Found.
   */
  404: ErrorResponse
  /**
   * Bad request. The request failed validation.
   */
  422: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type UpdateAnEntryError = UpdateAnEntryErrors[keyof UpdateAnEntryErrors]

export type UpdateAnEntryResponses = {
  /**
   * OK
   */
  200: {
    data?: Entry
  }
}

export type UpdateAnEntryResponse =
  UpdateAnEntryResponses[keyof UpdateAnEntryResponses]

export type DeleteAnEntryRelationshipData = {
  body?: never
  path: {
    /**
     * The slug of the flow/template that the entry belongs to.
     */
    flowSlug: string
    /**
     * The slug of the field/attribute that the relationship belongs to.
     */
    flowFieldSlug: string
    /**
     * The ID of the entry you are requesting.
     */
    flowEntryID: string
  }
  query?: never
  url: "/v2/flows/{flowSlug}/entries/{flowEntryID}/relationships/{flowFieldSlug}"
}

export type DeleteAnEntryRelationshipErrors = {
  /**
   * Bad request. Not Found.
   */
  404: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type DeleteAnEntryRelationshipError =
  DeleteAnEntryRelationshipErrors[keyof DeleteAnEntryRelationshipErrors]

export type DeleteAnEntryRelationshipResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteAnEntryRelationshipResponse =
  DeleteAnEntryRelationshipResponses[keyof DeleteAnEntryRelationshipResponses]

export type CreateAnEntryRelationshipData = {
  body: FlowsEntriesRelationshipsFieldSlugRequest
  path: {
    /**
     * The slug of the flow/template that the entry belongs to.
     */
    flowSlug: string
    /**
     * The slug of the field/attribute that the relationship belongs to.
     */
    flowFieldSlug: string
    /**
     * The ID of the entry you are requesting.
     */
    flowEntryID: string
  }
  query?: never
  url: "/v2/flows/{flowSlug}/entries/{flowEntryID}/relationships/{flowFieldSlug}"
}

export type CreateAnEntryRelationshipErrors = {
  /**
   * Bad request. Not Found.
   */
  404: ErrorResponse
  /**
   * Bad request. The request failed validation.
   */
  422: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type CreateAnEntryRelationshipError =
  CreateAnEntryRelationshipErrors[keyof CreateAnEntryRelationshipErrors]

export type CreateAnEntryRelationshipResponses = {
  /**
   * Created
   */
  201: {
    data?: Array<Relationships>
  }
}

export type CreateAnEntryRelationshipResponse =
  CreateAnEntryRelationshipResponses[keyof CreateAnEntryRelationshipResponses]

export type UpdateAnEntryRelationshipData = {
  body: FlowsEntriesRelationshipsFieldSlugRequest
  path: {
    /**
     * The slug of the flow/template that the entry belongs to.
     */
    flowSlug: string
    /**
     * The slug of the field/attribute that the relationship belongs to.
     */
    flowFieldSlug: string
    /**
     * The ID of the entry you are requesting.
     */
    flowEntryID: string
  }
  query?: never
  url: "/v2/flows/{flowSlug}/entries/{flowEntryID}/relationships/{flowFieldSlug}"
}

export type UpdateAnEntryRelationshipErrors = {
  /**
   * Bad request. Not Found.
   */
  404: ErrorResponse
  /**
   * Bad request. The request failed validation.
   */
  422: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type UpdateAnEntryRelationshipError =
  UpdateAnEntryRelationshipErrors[keyof UpdateAnEntryRelationshipErrors]

export type UpdateAnEntryRelationshipResponses = {
  /**
   * Created
   */
  201: {
    data?: Array<Relationships>
  }
}

export type UpdateAnEntryRelationshipResponse =
  UpdateAnEntryRelationshipResponses[keyof UpdateAnEntryRelationshipResponses]

export type GetAllFieldsByFlowData = {
  body?: never
  path: {
    /**
     * The slug of the flow the entry belongs to.
     */
    flowSlug: string
  }
  query?: never
  url: "/v2/flows/{flowSlug}/fields"
}

export type GetAllFieldsByFlowErrors = {
  /**
   * Bad request. Not Found.
   */
  404: ErrorResponse
  /**
   * Internal server error. There was a system failure in the platform.
   */
  500: ErrorResponse
}

export type GetAllFieldsByFlowError =
  GetAllFieldsByFlowErrors[keyof GetAllFieldsByFlowErrors]

export type GetAllFieldsByFlowResponses = {
  /**
   * OK
   */
  200: {
    data?: Array<Field>
  }
}

export type GetAllFieldsByFlowResponse =
  GetAllFieldsByFlowResponses[keyof GetAllFieldsByFlowResponses]
