// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from "@hey-api/client-fetch"
import type {
  GetAllFlowsData,
  GetAllFlowsResponse,
  GetAllFlowsError,
  CreateAFlowData,
  CreateAFlowResponse,
  CreateAFlowError,
  DeleteAFlowData,
  DeleteAFlowResponse,
  DeleteAFlowError,
  GetAFlowData,
  GetAFlowResponse,
  GetAFlowError,
  UpdateAFlowData,
  UpdateAFlowResponse,
  UpdateAFlowError,
  GetAllFieldsData,
  GetAllFieldsResponse,
  GetAllFieldsError,
  CreateAFieldData,
  CreateAFieldResponse,
  CreateAFieldError,
  DeleteAFieldData,
  DeleteAFieldResponse,
  DeleteAFieldError,
  GetAFieldData,
  GetAFieldResponse,
  GetAFieldError,
  UpdateAFieldData,
  UpdateAFieldResponse,
  UpdateAFieldError,
  GetAllEntriesData,
  GetAllEntriesResponse,
  GetAllEntriesError,
  CreateAnEntryData,
  CreateAnEntryResponse,
  CreateAnEntryError,
  DeleteAnEntryData,
  DeleteAnEntryResponse,
  DeleteAnEntryError,
  GetAnEntryData,
  GetAnEntryResponse,
  GetAnEntryError,
  UpdateAnEntryData,
  UpdateAnEntryResponse,
  UpdateAnEntryError,
  DeleteAnEntryRelationshipData,
  DeleteAnEntryRelationshipResponse,
  DeleteAnEntryRelationshipError,
  CreateAnEntryRelationshipData,
  CreateAnEntryRelationshipResponse,
  CreateAnEntryRelationshipError,
  UpdateAnEntryRelationshipData,
  UpdateAnEntryRelationshipResponse,
  UpdateAnEntryRelationshipError,
  GetAllFieldsByFlowData,
  GetAllFieldsByFlowResponse,
  GetAllFieldsByFlowError,
} from "./types.gen"

export const client = createClient(createConfig())

/**
 * Get all Flows
 * - For Commerce, this endpoint retrieves a list of flows.
 * - For Product Experience Manager, this endpoint retrieves a list of templates.
 *
 */
export const getAllFlows = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllFlowsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAllFlowsResponse,
    GetAllFlowsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/flows",
  })
}

/**
 * Create a Flow
 * - For Commerce, this endpoint creates a flow.
 * - For Product Experience Manager, this endpoint creates a template.
 *
 * :::caution
 *
 * Custom names and values prefixed with $ are not supported.
 *
 * :::
 *
 */
export const createAFlow = <ThrowOnError extends boolean = false>(
  options: Options<CreateAFlowData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateAFlowResponse,
    CreateAFlowError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/flows",
  })
}

/**
 * Delete a Flow
 * - For Commerce, this endpoint deletes a flow. We recommend that you remove all the fields assigned to a flow before deleting a flow.
 * - For Product Experience Manager, this endpoint deletes a template. We recommend that you remove all the attributes assigned to a template before deleting a template.
 *
 */
export const deleteAFlow = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAFlowData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteAFlowResponse,
    DeleteAFlowError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/flows/{flowID}",
  })
}

/**
 * Get a Flow
 * - For Commerce, this endpoint retrieves a flow.
 * - For Product Experience Manager, this endpoint retrieves a template.
 *
 */
export const getAFlow = <ThrowOnError extends boolean = false>(
  options: Options<GetAFlowData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAFlowResponse,
    GetAFlowError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/flows/{flowID}",
  })
}

/**
 * Update a Flow
 * - For Commerce, this endpoint updates a flow.
 * - For Product Experience Manager, this endpoint updates a template.
 *
 * Specify whichever attributes you want to change. The values of the other attributes remain the same. If the attributes section is empty, the flow/template is not updated.
 *
 */
export const updateAFlow = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAFlowData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateAFlowResponse,
    UpdateAFlowError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/flows/{flowID}",
  })
}

/**
 * Get all Fields
 * - For Commerce, this endpoint retrieves all fields in a flow.
 * - For Product Experience Manager, this endpoint retrieves all attributes in a template.
 *
 */
export const getAllFields = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllFieldsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAllFieldsResponse,
    GetAllFieldsError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/fields",
  })
}

/**
 * Create a Field
 * - For Commerce, this endpoint creates a field.
 * - For Product Experience Manager, this endpoint creates an attribute.
 *
 */
export const createAField = <ThrowOnError extends boolean = false>(
  options: Options<CreateAFieldData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateAFieldResponse,
    CreateAFieldError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/fields",
  })
}

/**
 * Delete a Field
 * - For Commerce, this endpoint deletes a field.
 * - For Product Experience Manager, this endpoint deletes an attribute.
 *
 */
export const deleteAField = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAFieldData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteAFieldResponse,
    DeleteAFieldError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/fields/{flowFieldID}",
  })
}

/**
 * Get a Field
 * - For Commerce, this endpoint retrieves a field.
 * - For Product Experience Manager, this endpoint retrieves an attribute.
 *
 */
export const getAField = <ThrowOnError extends boolean = false>(
  options: Options<GetAFieldData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAFieldResponse,
    GetAFieldError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/fields/{flowFieldID}",
  })
}

/**
 * Update a Field
 * - For Commerce, this endpoint updates a field.
 * - For Product Experience Manager, this endpoint updates an attribute.
 *
 * Specify whichever attributes you want to change. The values of the other attributes remain the same. If the attributes section is empty, the field/attribute is not updated.
 *
 */
export const updateAField = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAFieldData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateAFieldResponse,
    UpdateAFieldError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/fields/{flowFieldID}",
  })
}

/**
 * Get all Entries
 * - For Commerce, this endpoint retrieves all entries for a flow.
 * - For Product Experience Manager, this endpoint retrieves all entries for a template.
 *
 */
export const getAllEntries = <ThrowOnError extends boolean = false>(
  options: Options<GetAllEntriesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAllEntriesResponse,
    GetAllEntriesError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/flows/{flowSlug}/entries",
  })
}

/**
 * Create an Entry
 * - For Commerce, this endpoint creates an entry for a flow.
 * - For Product Experience Manager, this endpoint creates an entry for a template.
 *
 */
export const createAnEntry = <ThrowOnError extends boolean = false>(
  options: Options<CreateAnEntryData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateAnEntryResponse,
    CreateAnEntryError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/flows/{flowSlug}/entries",
  })
}

/**
 * Delete an Entry
 * - For Commerce, this endpoint deletes an entry from a flow.
 * - For Product Experience Manager, this endpoint deletes an entry from a template.
 *
 */
export const deleteAnEntry = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAnEntryData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteAnEntryResponse,
    DeleteAnEntryError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/flows/{flowSlug}/entries/{flowEntryID}",
  })
}

/**
 * Get an Entry
 * - For Commerce, this endpoint retrieves an entry from a flow.
 * - For Product Experience Manager, this endpoint retrieves an entry from a template.
 *
 */
export const getAnEntry = <ThrowOnError extends boolean = false>(
  options: Options<GetAnEntryData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAnEntryResponse,
    GetAnEntryError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/flows/{flowSlug}/entries/{flowEntryID}",
  })
}

/**
 * Update an Entry
 * - For Commerce, this endpoint updates an entry for a flow.
 * - For Product Experience Manager, this endpoint updates an entry for a template.
 *
 */
export const updateAnEntry = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAnEntryData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateAnEntryResponse,
    UpdateAnEntryError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/flows/{flowSlug}/entries/{flowEntryID}",
  })
}

/**
 * Delete an Entry Relationship
 * - In Commerce, deletes an entry relationship to one or more resources.
 * - In Product Experience Manager, deletes an entry relationship with the product to which you want to associate the template.
 *
 */
export const deleteAnEntryRelationship = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAnEntryRelationshipData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteAnEntryRelationshipResponse,
    DeleteAnEntryRelationshipError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/flows/{flowSlug}/entries/{flowEntryID}/relationships/{flowFieldSlug}",
  })
}

/**
 * Create an Entry Relationship
 * - In Commerce, create an entry relationship to one or more resources. If any relationships already exist, the ones made in the request are added to them.
 * - In Product Experience Manager, create an entry relationship with the product to which you want to associate the template.
 *
 */
export const createAnEntryRelationship = <ThrowOnError extends boolean = false>(
  options: Options<CreateAnEntryRelationshipData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateAnEntryRelationshipResponse,
    CreateAnEntryRelationshipError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/flows/{flowSlug}/entries/{flowEntryID}/relationships/{flowFieldSlug}",
  })
}

/**
 * Update an Entry Relationship
 * - In Commerce, updates an entry relationship to one or more resources. If any relationships already exist, the ones made in the request are added to them.
 * - In Product Experience Manager, updates an entry relationship with the product to which you want to associate the template.
 *
 */
export const updateAnEntryRelationship = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAnEntryRelationshipData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateAnEntryRelationshipResponse,
    UpdateAnEntryRelationshipError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/flows/{flowSlug}/entries/{flowEntryID}/relationships/{flowFieldSlug}",
  })
}

/**
 * Get all Fields by Flow
 * Get all Fields by Flow
 */
export const getAllFieldsByFlow = <ThrowOnError extends boolean = false>(
  options: Options<GetAllFieldsByFlowData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAllFieldsByFlowResponse,
    GetAllFieldsByFlowError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/flows/{flowSlug}/fields",
  })
}
