// This file is auto-generated by @hey-api/openapi-ts

import type {
  GetRulePromotionsResponse,
  CreateRulePromotionResponse,
  GetRulePromotionByIdResponse,
  UpdateRulePromotionResponse,
  GetRulePromotionCodesResponse,
  GetV2RulePromotionsByUuidJobsResponse,
  PostV2RulePromotionsByUuidJobsResponse,
  AnonymizeRulePromotionUsagesResponse,
  GetRulePromotionUsagesResponse,
  GetRulePromotionCodeUsagesResponse,
} from "./types.gen"

const rulePromotionResponseSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    if (data.data.start) {
      data.data.start = new Date(data.data.start)
    }
    if (data.data.end) {
      data.data.end = new Date(data.data.end)
    }
    if (data.data.meta) {
      if (data.data.meta.timestamps) {
        if (data.data.meta.timestamps.created_at) {
          data.data.meta.timestamps.created_at = new Date(
            data.data.meta.timestamps.created_at,
          )
        }
        if (data.data.meta.timestamps.updated_at) {
          data.data.meta.timestamps.updated_at = new Date(
            data.data.meta.timestamps.updated_at,
          )
        }
        return data.data.meta.timestamps
      }
      return data.data.meta
    }
    return data.data
  }
  return data
}

export const getRulePromotionsResponseTransformer = async (
  data: any,
): Promise<GetRulePromotionsResponse> => {
  data = data.map((item: any) => {
    return rulePromotionResponseSchemaResponseTransformer(item)
  })
  return data
}

export const createRulePromotionResponseTransformer = async (
  data: any,
): Promise<CreateRulePromotionResponse> => {
  data = rulePromotionResponseSchemaResponseTransformer(data)
  return data
}

export const getRulePromotionByIdResponseTransformer = async (
  data: any,
): Promise<GetRulePromotionByIdResponse> => {
  data = rulePromotionResponseSchemaResponseTransformer(data)
  return data
}

export const updateRulePromotionResponseTransformer = async (
  data: any,
): Promise<UpdateRulePromotionResponse> => {
  data = rulePromotionResponseSchemaResponseTransformer(data)
  return data
}

const getPromotionCodeResponseSchemaResponseTransformer = (data: any) => {
  if (data.meta) {
    if (data.meta.timestamps) {
      if (data.meta.timestamps.created_at) {
        data.meta.timestamps.created_at = new Date(
          data.meta.timestamps.created_at,
        )
      }
      return data.meta.timestamps
    }
    return data.meta
  }
  return data
}

const getPromotionCodesResponseSchemaResponseTransformer = (data: any) => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return getPromotionCodeResponseSchemaResponseTransformer(item)
    })
  }
  return data
}

export const getRulePromotionCodesResponseTransformer = async (
  data: any,
): Promise<GetRulePromotionCodesResponse> => {
  data = getPromotionCodesResponseSchemaResponseTransformer(data)
  return data
}

const promotionJobSchemaResponseTransformer = (data: any) => {
  if (data.meta) {
    if (data.meta.timestamps) {
      if (data.meta.timestamps.created_at) {
        data.meta.timestamps.created_at = new Date(
          data.meta.timestamps.created_at,
        )
      }
      if (data.meta.timestamps.updated_at) {
        data.meta.timestamps.updated_at = new Date(
          data.meta.timestamps.updated_at,
        )
      }
      return data.meta.timestamps
    }
    return data.meta
  }
  return data
}

export const getV2RulePromotionsByUuidJobsResponseTransformer = async (
  data: any,
): Promise<GetV2RulePromotionsByUuidJobsResponse> => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return promotionJobSchemaResponseTransformer(item)
    })
  }
  return data
}

export const postV2RulePromotionsByUuidJobsResponseTransformer = async (
  data: any,
): Promise<PostV2RulePromotionsByUuidJobsResponse> => {
  if (data.data) {
    data.data = promotionJobSchemaResponseTransformer(data.data)
  }
  return data
}

const rulePromotionUsageSchemaResponseTransformer = (data: any) => {
  if (data.used_on) {
    data.used_on = new Date(data.used_on)
  }
  if (data.meta) {
    if (data.meta.timestamps) {
      if (data.meta.timestamps.updated_at) {
        data.meta.timestamps.updated_at = new Date(
          data.meta.timestamps.updated_at,
        )
      }
      return data.meta.timestamps
    }
    return data.meta
  }
  return data
}

export const anonymizeRulePromotionUsagesResponseTransformer = async (
  data: any,
): Promise<AnonymizeRulePromotionUsagesResponse> => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return rulePromotionUsageSchemaResponseTransformer(item)
    })
  }
  return data
}

export const getRulePromotionUsagesResponseTransformer = async (
  data: any,
): Promise<GetRulePromotionUsagesResponse> => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return rulePromotionUsageSchemaResponseTransformer(item)
    })
  }
  return data
}

export const getRulePromotionCodeUsagesResponseTransformer = async (
  data: any,
): Promise<GetRulePromotionCodeUsagesResponse> => {
  if (data.data) {
    data.data = data.data.map((item: any) => {
      return rulePromotionUsageSchemaResponseTransformer(item)
    })
  }
  return data
}
