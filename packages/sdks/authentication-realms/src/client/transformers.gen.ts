// This file is auto-generated by @hey-api/openapi-ts

import type {
  GetAllAuthenticationRealmsResponse,
  GetAuthenticationRealmResponse,
  UpdateAuthenticationRealmResponse,
  GetAllOidcProfilesResponse,
  CreateOidcProfileResponse,
  GetOidcProfileResponse,
  UpdateOidcProfileResponse,
  GetAllPasswordProfilesResponse,
  CreatePasswordProfileResponse,
  GetPasswordProfileResponse,
  UpdatePasswordProfileResponse,
  GetAllUserAuthenticationInfoResponse,
  CreateUserAuthenticationInfoResponse,
  GetUserAuthenticationInfoResponse,
  UpdateUserAuthenticationInfoResponse,
  GetAllUserAuthenticationOidcProfileInfoResponse,
  CreateUserAuthenticationOidcProfileInfoResponse,
  GetUserAuthenticationOidcProfileInfoResponse,
  UpdateUserAuthenticationOidcProfileInfoResponse,
  ListPasswordProfileInfosResponse,
  CreatePasswordProfileInfoResponse,
  GetPasswordProfileInfoResponse,
  UpdatePasswordProfileInfoResponse,
} from "./types.gen"

const authenticationRealmSchemaResponseTransformer = (data: any) => {
  if (data.meta.created_at) {
    data.meta.created_at = new Date(data.meta.created_at)
  }
  if (data.meta.updated_at) {
    data.meta.updated_at = new Date(data.meta.updated_at)
  }
  return data.meta
  return data
}

const authenticationRealmListResponseSchemaResponseTransformer = (
  data: any,
) => {
  data.data = data.data.map((item: any) => {
    return authenticationRealmSchemaResponseTransformer(item)
  })
  return data
}

export const getAllAuthenticationRealmsResponseTransformer = async (
  data: any,
): Promise<GetAllAuthenticationRealmsResponse> => {
  data = authenticationRealmListResponseSchemaResponseTransformer(data)
  return data
}

const authenticationRealmResponseSchemaResponseTransformer = (data: any) => {
  data.data = authenticationRealmSchemaResponseTransformer(data.data)
  return data
}

export const getAuthenticationRealmResponseTransformer = async (
  data: any,
): Promise<GetAuthenticationRealmResponse> => {
  data = authenticationRealmResponseSchemaResponseTransformer(data)
  return data
}

export const updateAuthenticationRealmResponseTransformer = async (
  data: any,
): Promise<UpdateAuthenticationRealmResponse> => {
  data = authenticationRealmResponseSchemaResponseTransformer(data)
  return data
}

const oidcProfileSchemaResponseTransformer = (data: any) => {
  if (data.meta.created_at) {
    data.meta.created_at = new Date(data.meta.created_at)
  }
  if (data.meta.updated_at) {
    data.meta.updated_at = new Date(data.meta.updated_at)
  }
  return data.meta
  return data
}

const oidcProfileListResponseSchemaResponseTransformer = (data: any) => {
  data.data = data.data.map((item: any) => {
    return oidcProfileSchemaResponseTransformer(item)
  })
  return data
}

export const getAllOidcProfilesResponseTransformer = async (
  data: any,
): Promise<GetAllOidcProfilesResponse> => {
  data = oidcProfileListResponseSchemaResponseTransformer(data)
  return data
}

const oidcProfileResponseSchemaResponseTransformer = (data: any) => {
  data.data = oidcProfileSchemaResponseTransformer(data.data)
  return data
}

export const createOidcProfileResponseTransformer = async (
  data: any,
): Promise<CreateOidcProfileResponse> => {
  data = oidcProfileResponseSchemaResponseTransformer(data)
  return data
}

export const getOidcProfileResponseTransformer = async (
  data: any,
): Promise<GetOidcProfileResponse> => {
  data = oidcProfileResponseSchemaResponseTransformer(data)
  return data
}

export const updateOidcProfileResponseTransformer = async (
  data: any,
): Promise<UpdateOidcProfileResponse> => {
  data = oidcProfileResponseSchemaResponseTransformer(data)
  return data
}

const passwordProfileSchemaResponseTransformer = (data: any) => {
  if (data.meta.created_at) {
    data.meta.created_at = new Date(data.meta.created_at)
  }
  if (data.meta.updated_at) {
    data.meta.updated_at = new Date(data.meta.updated_at)
  }
  return data.meta
  return data
}

const passwordProfileListResponseSchemaResponseTransformer = (data: any) => {
  data.data = data.data.map((item: any) => {
    return passwordProfileSchemaResponseTransformer(item)
  })
  return data
}

export const getAllPasswordProfilesResponseTransformer = async (
  data: any,
): Promise<GetAllPasswordProfilesResponse> => {
  data = passwordProfileListResponseSchemaResponseTransformer(data)
  return data
}

const passwordProfileResponseSchemaResponseTransformer = (data: any) => {
  data.data = passwordProfileSchemaResponseTransformer(data.data)
  return data
}

export const createPasswordProfileResponseTransformer = async (
  data: any,
): Promise<CreatePasswordProfileResponse> => {
  data = passwordProfileResponseSchemaResponseTransformer(data)
  return data
}

export const getPasswordProfileResponseTransformer = async (
  data: any,
): Promise<GetPasswordProfileResponse> => {
  data = passwordProfileResponseSchemaResponseTransformer(data)
  return data
}

export const updatePasswordProfileResponseTransformer = async (
  data: any,
): Promise<UpdatePasswordProfileResponse> => {
  data = passwordProfileResponseSchemaResponseTransformer(data)
  return data
}

const userAuthenticationInfoSchemaResponseTransformer = (data: any) => {
  if (data.meta.created_at) {
    data.meta.created_at = new Date(data.meta.created_at)
  }
  if (data.meta.updated_at) {
    data.meta.updated_at = new Date(data.meta.updated_at)
  }
  return data.meta
  return data
}

const userAuthenticationInfoListResponseSchemaResponseTransformer = (
  data: any,
) => {
  data.data = data.data.map((item: any) => {
    return userAuthenticationInfoSchemaResponseTransformer(item)
  })
  return data
}

export const getAllUserAuthenticationInfoResponseTransformer = async (
  data: any,
): Promise<GetAllUserAuthenticationInfoResponse> => {
  data = userAuthenticationInfoListResponseSchemaResponseTransformer(data)
  return data
}

const userAuthenticationInfoResponseSchemaResponseTransformer = (data: any) => {
  data.data = userAuthenticationInfoSchemaResponseTransformer(data.data)
  return data
}

export const createUserAuthenticationInfoResponseTransformer = async (
  data: any,
): Promise<CreateUserAuthenticationInfoResponse> => {
  data = userAuthenticationInfoResponseSchemaResponseTransformer(data)
  return data
}

export const getUserAuthenticationInfoResponseTransformer = async (
  data: any,
): Promise<GetUserAuthenticationInfoResponse> => {
  data = userAuthenticationInfoResponseSchemaResponseTransformer(data)
  return data
}

export const updateUserAuthenticationInfoResponseTransformer = async (
  data: any,
): Promise<UpdateUserAuthenticationInfoResponse> => {
  data = userAuthenticationInfoResponseSchemaResponseTransformer(data)
  return data
}

const userAuthenticationOidcProfileInfoSchemaResponseTransformer = (
  data: any,
) => {
  if (data.meta.created_at) {
    data.meta.created_at = new Date(data.meta.created_at)
  }
  if (data.meta.updated_at) {
    data.meta.updated_at = new Date(data.meta.updated_at)
  }
  return data.meta
  return data
}

const userAuthenticationOidcProfileInfoListResponseSchemaResponseTransformer = (
  data: any,
) => {
  data.data = data.data.map((item: any) => {
    return userAuthenticationOidcProfileInfoSchemaResponseTransformer(item)
  })
  return data
}

export const getAllUserAuthenticationOidcProfileInfoResponseTransformer =
  async (
    data: any,
  ): Promise<GetAllUserAuthenticationOidcProfileInfoResponse> => {
    data =
      userAuthenticationOidcProfileInfoListResponseSchemaResponseTransformer(
        data,
      )
    return data
  }

const userAuthenticationOidcProfileInfoResponseSchemaResponseTransformer = (
  data: any,
) => {
  data.data = userAuthenticationOidcProfileInfoSchemaResponseTransformer(
    data.data,
  )
  return data
}

export const createUserAuthenticationOidcProfileInfoResponseTransformer =
  async (
    data: any,
  ): Promise<CreateUserAuthenticationOidcProfileInfoResponse> => {
    data =
      userAuthenticationOidcProfileInfoResponseSchemaResponseTransformer(data)
    return data
  }

export const getUserAuthenticationOidcProfileInfoResponseTransformer = async (
  data: any,
): Promise<GetUserAuthenticationOidcProfileInfoResponse> => {
  data =
    userAuthenticationOidcProfileInfoResponseSchemaResponseTransformer(data)
  return data
}

export const updateUserAuthenticationOidcProfileInfoResponseTransformer =
  async (
    data: any,
  ): Promise<UpdateUserAuthenticationOidcProfileInfoResponse> => {
    data =
      userAuthenticationOidcProfileInfoResponseSchemaResponseTransformer(data)
    return data
  }

const passwordProfileInfoSchemaResponseTransformer = (data: any) => {
  if (data.meta.created_at) {
    data.meta.created_at = new Date(data.meta.created_at)
  }
  if (data.meta.updated_at) {
    data.meta.updated_at = new Date(data.meta.updated_at)
  }
  return data.meta
  return data
}

const passwordProfileInfoListResponseSchemaResponseTransformer = (
  data: any,
) => {
  data.data = data.data.map((item: any) => {
    return passwordProfileInfoSchemaResponseTransformer(item)
  })
  return data
}

export const listPasswordProfileInfosResponseTransformer = async (
  data: any,
): Promise<ListPasswordProfileInfosResponse> => {
  data = passwordProfileInfoListResponseSchemaResponseTransformer(data)
  return data
}

const passwordProfileInfoResponseSchemaResponseTransformer = (data: any) => {
  data.data = passwordProfileInfoSchemaResponseTransformer(data.data)
  return data
}

export const createPasswordProfileInfoResponseTransformer = async (
  data: any,
): Promise<CreatePasswordProfileInfoResponse> => {
  data = passwordProfileInfoResponseSchemaResponseTransformer(data)
  return data
}

export const getPasswordProfileInfoResponseTransformer = async (
  data: any,
): Promise<GetPasswordProfileInfoResponse> => {
  data = passwordProfileInfoResponseSchemaResponseTransformer(data)
  return data
}

export const updatePasswordProfileInfoResponseTransformer = async (
  data: any,
): Promise<UpdatePasswordProfileInfoResponse> => {
  data = passwordProfileInfoResponseSchemaResponseTransformer(data)
  return data
}
