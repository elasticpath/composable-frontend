// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from "@hey-api/client-fetch"
import type {
  GetAllAuthenticationRealmsData,
  GetAllAuthenticationRealmsResponse,
  GetAuthenticationRealmData,
  GetAuthenticationRealmResponse,
  UpdateAuthenticationRealmData,
  UpdateAuthenticationRealmResponse,
  GetAllOidcProfilesData,
  GetAllOidcProfilesResponse,
  CreateOidcProfileData,
  CreateOidcProfileResponse,
  DeleteOidcProfileData,
  DeleteOidcProfileResponse,
  GetOidcProfileData,
  GetOidcProfileResponse,
  UpdateOidcProfileData,
  UpdateOidcProfileResponse,
  GetAllPasswordProfilesData,
  GetAllPasswordProfilesResponse,
  CreatePasswordProfileData,
  CreatePasswordProfileResponse,
  DeletePasswordProfileData,
  DeletePasswordProfileResponse,
  GetPasswordProfileData,
  GetPasswordProfileResponse,
  UpdatePasswordProfileData,
  UpdatePasswordProfileResponse,
  CreateOneTimePasswordTokenRequestData,
  CreateOneTimePasswordTokenRequestResponse,
  GetAllUserAuthenticationInfoData,
  GetAllUserAuthenticationInfoResponse,
  CreateUserAuthenticationInfoData,
  CreateUserAuthenticationInfoResponse,
  DeleteUserAuthenticationInfoData,
  DeleteUserAuthenticationInfoResponse,
  GetUserAuthenticationInfoData,
  GetUserAuthenticationInfoResponse,
  UpdateUserAuthenticationInfoData,
  UpdateUserAuthenticationInfoResponse,
  GetAllUserAuthenticationOidcProfileInfoData,
  GetAllUserAuthenticationOidcProfileInfoResponse,
  CreateUserAuthenticationOidcProfileInfoData,
  CreateUserAuthenticationOidcProfileInfoResponse,
  DeleteUserAuthenticationOidcProfileInfoData,
  DeleteUserAuthenticationOidcProfileInfoResponse,
  GetUserAuthenticationOidcProfileInfoData,
  GetUserAuthenticationOidcProfileInfoResponse,
  UpdateUserAuthenticationOidcProfileInfoData,
  UpdateUserAuthenticationOidcProfileInfoResponse,
  ListPasswordProfileInfosData,
  ListPasswordProfileInfosResponse,
  CreatePasswordProfileInfoData,
  CreatePasswordProfileInfoResponse,
  DeletePasswordProfileInfoData,
  DeletePasswordProfileInfoResponse,
  GetPasswordProfileInfoData,
  GetPasswordProfileInfoResponse,
  UpdatePasswordProfileInfoData,
  UpdatePasswordProfileInfoResponse,
} from "./types.gen"

export const client = createClient(createConfig())

/**
 * Get all authentication realms
 */
export const getAllAuthenticationRealms = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetAllAuthenticationRealmsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAllAuthenticationRealmsResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms",
  })
}

/**
 * Get an authentication realm
 */
export const getAuthenticationRealm = <ThrowOnError extends boolean = false>(
  options: Options<GetAuthenticationRealmData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAuthenticationRealmResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}",
  })
}

/**
 * Update an authentication realm
 */
export const updateAuthenticationRealm = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAuthenticationRealmData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateAuthenticationRealmResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}",
  })
}

/**
 * Get all OpenID Connect profiles
 */
export const getAllOidcProfiles = <ThrowOnError extends boolean = false>(
  options: Options<GetAllOidcProfilesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAllOidcProfilesResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/openid-connect-profiles",
  })
}

/**
 * Create an OpenID Connect profile
 */
export const createOidcProfile = <ThrowOnError extends boolean = false>(
  options: Options<CreateOidcProfileData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateOidcProfileResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/openid-connect-profiles",
  })
}

/**
 * Delete an OpenID Connect profile
 */
export const deleteOidcProfile = <ThrowOnError extends boolean = false>(
  options: Options<DeleteOidcProfileData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteOidcProfileResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/openid-connect-profiles/{oidcProfileId}",
  })
}

/**
 * Get an OpenID Connect profile
 */
export const getOidcProfile = <ThrowOnError extends boolean = false>(
  options: Options<GetOidcProfileData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetOidcProfileResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/openid-connect-profiles/{oidcProfileId}",
  })
}

/**
 * Update an OpenID Connect profile
 */
export const updateOidcProfile = <ThrowOnError extends boolean = false>(
  options: Options<UpdateOidcProfileData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateOidcProfileResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/openid-connect-profiles/{oidcProfileId}",
  })
}

/**
 * Get all password profiles
 */
export const getAllPasswordProfiles = <ThrowOnError extends boolean = false>(
  options: Options<GetAllPasswordProfilesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAllPasswordProfilesResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/password-profiles",
  })
}

/**
 * Create a password profile
 */
export const createPasswordProfile = <ThrowOnError extends boolean = false>(
  options: Options<CreatePasswordProfileData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreatePasswordProfileResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/password-profiles",
  })
}

/**
 * Delete a password profile
 */
export const deletePasswordProfile = <ThrowOnError extends boolean = false>(
  options: Options<DeletePasswordProfileData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeletePasswordProfileResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/password-profiles/{passwordProfileId}",
  })
}

/**
 * Get a password profile
 */
export const getPasswordProfile = <ThrowOnError extends boolean = false>(
  options: Options<GetPasswordProfileData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPasswordProfileResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/password-profiles/{passwordProfileId}",
  })
}

/**
 * Update a password profile
 */
export const updatePasswordProfile = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePasswordProfileData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdatePasswordProfileResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/password-profiles/{passwordProfileId}",
  })
}

/**
 * Create a one-time password token request
 */
export const createOneTimePasswordTokenRequest = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateOneTimePasswordTokenRequestData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateOneTimePasswordTokenRequestResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/password-profiles/one-time-password-token-request",
  })
}

/**
 * Get all user authentication info
 */
export const getAllUserAuthenticationInfo = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetAllUserAuthenticationInfoData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAllUserAuthenticationInfoResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/user-authentication-info",
  })
}

/**
 * Create a user authentication info
 */
export const createUserAuthenticationInfo = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateUserAuthenticationInfoData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateUserAuthenticationInfoResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/user-authentication-info",
  })
}

/**
 * Delete a user authentication info
 */
export const deleteUserAuthenticationInfo = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteUserAuthenticationInfoData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteUserAuthenticationInfoResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/user-authentication-info/{userAuthenticationInfoId}",
  })
}

/**
 * Get a user authentication info
 */
export const getUserAuthenticationInfo = <ThrowOnError extends boolean = false>(
  options: Options<GetUserAuthenticationInfoData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetUserAuthenticationInfoResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/user-authentication-info/{userAuthenticationInfoId}",
  })
}

/**
 * Update a user authentication info
 */
export const updateUserAuthenticationInfo = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateUserAuthenticationInfoData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateUserAuthenticationInfoResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/user-authentication-info/{userAuthenticationInfoId}",
  })
}

/**
 * Get all user authentication OIDC profile info
 */
export const getAllUserAuthenticationOidcProfileInfo = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetAllUserAuthenticationOidcProfileInfoData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAllUserAuthenticationOidcProfileInfoResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/user-authentication-openid-connect-profile-info",
  })
}

/**
 * Create a user authentication OIDC profile info
 */
export const createUserAuthenticationOidcProfileInfo = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateUserAuthenticationOidcProfileInfoData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateUserAuthenticationOidcProfileInfoResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/user-authentication-openid-connect-profile-info",
  })
}

/**
 * Delete a user authentication OIDC profile info
 */
export const deleteUserAuthenticationOidcProfileInfo = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteUserAuthenticationOidcProfileInfoData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteUserAuthenticationOidcProfileInfoResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/user-authentication-openid-connect-profile-info/{userAuthenticationOidcProfileInfoId}",
  })
}

/**
 * Get a user authentication OIDC profile info
 */
export const getUserAuthenticationOidcProfileInfo = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetUserAuthenticationOidcProfileInfoData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetUserAuthenticationOidcProfileInfoResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/user-authentication-openid-connect-profile-info/{userAuthenticationOidcProfileInfoId}",
  })
}

/**
 * Update a user authentication OIDC profile info
 */
export const updateUserAuthenticationOidcProfileInfo = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateUserAuthenticationOidcProfileInfoData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateUserAuthenticationOidcProfileInfoResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/user-authentication-openid-connect-profile-info/{userAuthenticationOidcProfileInfoId}",
  })
}

/**
 * Get all user authentication password profile info
 */
export const listPasswordProfileInfos = <ThrowOnError extends boolean = false>(
  options: Options<ListPasswordProfileInfosData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListPasswordProfileInfosResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/user-authentication-info/{userAuthenticationInfoId}/user-authentication-password-profile-info",
  })
}

/**
 * Create a new user authentication password profile info
 */
export const createPasswordProfileInfo = <ThrowOnError extends boolean = false>(
  options: Options<CreatePasswordProfileInfoData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreatePasswordProfileInfoResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/user-authentication-info/{userAuthenticationInfoId}/user-authentication-password-profile-info",
  })
}

/**
 * Delete a user authentication password profile info
 */
export const deletePasswordProfileInfo = <ThrowOnError extends boolean = false>(
  options: Options<DeletePasswordProfileInfoData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeletePasswordProfileInfoResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/user-authentication-info/{userAuthenticationInfoId}/user-authentication-password-profile-info/{userAuthenticationPasswordProfileInfoId}",
  })
}

/**
 * Get a specific user authentication password profile info
 */
export const getPasswordProfileInfo = <ThrowOnError extends boolean = false>(
  options: Options<GetPasswordProfileInfoData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPasswordProfileInfoResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/user-authentication-info/{userAuthenticationInfoId}/user-authentication-password-profile-info/{userAuthenticationPasswordProfileInfoId}",
  })
}

/**
 * Update a user authentication password profile info
 */
export const updatePasswordProfileInfo = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePasswordProfileInfoData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdatePasswordProfileInfoResponse,
    unknown,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/v2/authentication-realms/{realmId}/user-authentication-info/{userAuthenticationInfoId}/user-authentication-password-profile-info/{userAuthenticationPasswordProfileInfoId}",
  })
}
