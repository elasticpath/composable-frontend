// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
  urlSearchParamsBodySerializer,
} from "@hey-api/client-fetch"
import type {
  CreateAnAccessTokenData,
  CreateAnAccessTokenResponse,
  CreateAnAccessTokenError,
} from "./types.gen"

export const client = createClient(createConfig())

/**
 * Create an Access Token
 *
 * ### Client Credentials
 *
 * A `client_credentials` token is used when the credentials are not publicly exposed, usually a server-side language such as PHP or Node.js. This type of authentication enables `CRUD` access to all resources.
 *
 * `client_id` and `client_secret` are created and managed via [Application Keys](/docs/authentication/application-keys/create-an-application-key).
 *
 * To see the access granted by a `client_credentials` token, refer to [Permissions](/docs/authentication/Tokens/permissions).
 *
 *
 * ### Implicit
 *
 * An `implicit` token is typically used for situations where you are requesting data on the client side and you are exposing your public key. When authenticated implicitly, you can only fetch (`GET`) data with live status (products, categories, brands, etc).
 *
 * The `implicit` token is most appropriate for use inside client-side applications, such as JavaScript.
 *
 * :::caution
 * An `implicit` token can be thought of as a **Read only** token.
 * :::
 *
 */
export const createAnAccessToken = <ThrowOnError extends boolean = false>(
  options?: Options<CreateAnAccessTokenData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateAnAccessTokenResponse,
    CreateAnAccessTokenError,
    ThrowOnError
  >({
    ...options,
    ...urlSearchParamsBodySerializer,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
    url: "/oauth/access_token",
  })
}
