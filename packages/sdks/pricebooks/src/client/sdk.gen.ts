// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from "@hey-api/client-fetch"
import type {
  GetPricebooksData,
  GetPricebooksResponse,
  GetPricebooksError,
  CreatePricebookData,
  CreatePricebookResponse,
  CreatePricebookError,
  DeletePricebookByIdData,
  DeletePricebookByIdResponse,
  DeletePricebookByIdError,
  GetPricebookByIdData,
  GetPricebookByIdResponse,
  GetPricebookByIdError,
  UpdatePricebookData,
  UpdatePricebookResponse,
  UpdatePricebookError,
  ImportPricebookData,
  ImportPricebookResponse,
  ImportPricebookError,
  ReplicatePricebookData,
  ReplicatePricebookResponse,
  ReplicatePricebookError,
  GetProductPricesData,
  GetProductPricesResponse,
  GetProductPricesError,
  CreateProductPriceData,
  CreateProductPriceResponse,
  CreateProductPriceError,
  DeleteProductPriceData,
  DeleteProductPriceResponse,
  DeleteProductPriceError,
  GetProductPriceByIdData,
  GetProductPriceByIdResponse,
  GetProductPriceByIdError,
  UpdateProductPriceData,
  UpdateProductPriceResponse,
  UpdateProductPriceError,
  GetPricesData,
  GetPricesResponse,
  GetPricesError,
  GetPriceModifiersData,
  GetPriceModifiersResponse,
  GetPriceModifiersError,
  CreatePriceModifierData,
  CreatePriceModifierResponse,
  CreatePriceModifierError,
  DeletePriceModifierData,
  DeletePriceModifierResponse,
  DeletePriceModifierError,
  GetPriceModifierByIdData,
  GetPriceModifierByIdResponse,
  GetPriceModifierByIdError,
  UpdatePriceModifierData,
  UpdatePriceModifierResponse,
  UpdatePriceModifierError,
} from "./types.gen"

export const client = createClient(createConfig())

/**
 * Get all Price Books
 * Retrieves a list of all price books.
 *
 * ### Filtering
 *
 * Filtering is supported on this endpoint. For the general syntax, see [Filtering](/guides/Getting-Started/filtering).
 *
 * You can filter on the following attributes and operators.
 *
 * | Operator | Attribute | Description | Example |
 * | --- | --- | --- | --- |
 * | `eq` | `external_ref` | Equals. Checks if the values you provide matches a price book. | `filter=eq(external_ref,some-external-ref)` |
 *
 */
export const getPricebooks = <ThrowOnError extends boolean = false>(
  options?: Options<GetPricebooksData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPricebooksResponse,
    GetPricebooksError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/pcm/pricebooks",
  })
}

/**
 * Create a Price Book
 * Creates a price book. You can add the prices to the price book now or update the price book later.
 */
export const createPricebook = <ThrowOnError extends boolean = false>(
  options: Options<CreatePricebookData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreatePricebookResponse,
    CreatePricebookError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/pcm/pricebooks",
  })
}

/**
 * Delete a Price Book by ID
 * Deletes the specified price book and all prices in the price book. It does not delete the products. In addition, pricing details in the orders referring to the deleted price book are not deleted.
 */
export const deletePricebookById = <ThrowOnError extends boolean = false>(
  options: Options<DeletePricebookByIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeletePricebookByIdResponse,
    DeletePricebookByIdError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/pcm/pricebooks/{pricebookID}",
  })
}

/**
 * Get a Price Book by ID
 * Retrieves the specified price book. To include prices in the response, append `?include=prices` to the path.
 */
export const getPricebookById = <ThrowOnError extends boolean = false>(
  options: Options<GetPricebookByIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPricebookByIdResponse,
    GetPricebookByIdError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/pcm/pricebooks/{pricebookID}",
  })
}

/**
 * Update a Price Book by ID
 * Updates the specified price book. Specify whichever attributes you want to change. The values of the other attributes remain the same. If the attributes section is empty, the price book is not updated.
 */
export const updatePricebook = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePricebookData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdatePricebookResponse,
    UpdatePricebookError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/pcm/pricebooks/{pricebookID}",
  })
}

/**
 * Import a Price
 * You can create and update product price books and prices in bulk, at both organization and store level, using the Price Book Import API. This is useful, for example, if you have a promotion and want to update 50,000 product prices. Rather than having to go to each price book and manually edit 50,000 prices, you can use the Price Book Import API to bulk update all your product prices at the same time, including setting different prices for different currencies.
 *
 * The API uses a [JSONL](https://jsonlines.org/) file. The JSONL file can be compressed to a GZIP file. Here is an [example of a JSONL file](/assets/example_file_all.jsonl).
 *
 * The API works on a "best endeavours" approach. In other words, the API does its best to create/update the price book objects based on the file that you provide. If there are any errors, then the import is aborted, and the job fails with an error. You can then use the job results to understand what objects the API created/updated until the import failed, and to troubleshoot any errors. See [Import Results](#tag/Price-Book-Import).
 *
 * Price book imports are processed sequentially in the order that you send your import API requests.
 *
 */
export const importPricebook = <ThrowOnError extends boolean = false>(
  options?: Options<ImportPricebookData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ImportPricebookResponse,
    ImportPricebookError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/pcm/pricebooks/import",
  })
}

/**
 * Replicate a Price Book
 * Using this endpoint, you can replicate an existing price book. This is useful because it enables you to quickly and easily create multiple price books with the same pricing structure. When you replicate an existing price book, you can specify a new name, description, and external reference for the replicated price book. Other attributes stay the same.
 *
 */
export const replicatePricebook = <ThrowOnError extends boolean = false>(
  options: Options<ReplicatePricebookData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ReplicatePricebookResponse,
    ReplicatePricebookError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/pcm/pricebooks/{pricebookID}/replicate",
  })
}

/**
 * Gets all Prices by Price Book ID
 * Retrieves all the product prices in the specified price book.
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For general syntax, see [Filtering](/guides/Getting-Started/filtering).
 *
 * | Operator | Attribute | Description | Example |
 * | --- | --- | --- | --- |
 * | `eq` | `external_ref`, `sku` | Checks if the values you provide matches a price. | `filter=eq(sku,some-sku)` |
 * | `in` | `sku` | Checks if the values you provide are included in a product SKU. | `filter=in(sku,some-sku)' |
 *
 */
export const getProductPrices = <ThrowOnError extends boolean = false>(
  options: Options<GetProductPricesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetProductPricesResponse,
    GetProductPricesError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/pcm/pricebooks/{pricebookID}/prices",
  })
}

/**
 * Add a Product Price to a Price Book
 * Price books contain prices for the products in your catalog. Use the Prices API to adds the prices for a product to a specified price book. If the prices for the product already exist in the price book, the operation fails and the existing product prices are not updated.
 */
export const createProductPrice = <ThrowOnError extends boolean = false>(
  options: Options<CreateProductPriceData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateProductPriceResponse,
    CreateProductPriceError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/pcm/pricebooks/{pricebookID}/prices",
  })
}

/**
 * Delete a Product Price from a Price Book
 * Deletes a product price from the specified price book.
 */
export const deleteProductPrice = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProductPriceData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteProductPriceResponse,
    DeleteProductPriceError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/pcm/pricebooks/{pricebookID}/prices/{priceID}",
  })
}

/**
 * Get a Product Price by Price Book ID
 * Retrieves a specified product price (`priceId`) in the specified price book (`id`).
 */
export const getProductPriceById = <ThrowOnError extends boolean = false>(
  options: Options<GetProductPriceByIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetProductPriceByIdResponse,
    GetProductPriceByIdError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/pcm/pricebooks/{pricebookID}/prices/{priceID}",
  })
}

/**
 * Update a Product Price in a Price Book
 * Specify whichever attributes you want to change. The values of the other attributes remain the same. If the attributes section is empty, the price is not updated.
 */
export const updateProductPrice = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProductPriceData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateProductPriceResponse,
    UpdateProductPriceError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/pcm/pricebooks/{pricebookID}/prices/{priceID}",
  })
}

/**
 * Gets all Prices
 * Allows you to retrieve all prices for a product, irrespective of the different price books that include that product's price. For example, you can filter for all prices for a specified `sku`, or filter for all prices changed before or after a given date. This will retrieve prices from all price books.
 *
 * ### Filtering
 *
 * This endpoint supports filtering. For general syntax, see [Filtering](/guides/Getting-Started/filtering).
 *
 * | Operator | Attribute | Description | Example |
 * | --- | --- | --- | --- |
 * | `eq` | `external_ref`, `sku`, `id` | Equals. Checks if the values of two operands are equal. If they are, the condition is true. | `filter=eq(sku,some-sku)` |
 * | `in` | `external_ref`, `sku`, `id` | In. Checks if the values are included in the specified list. If they are, the condition is true. | `filter=in(sku,some-sku)` |
 * | `like` | `external_ref`, `sku` | Like. Checks if the operand contains the specified string. Wildcards are supported. | `filter=like(sku,some-sku)` |
 * | `gt` | `updated_at`, `created_at` | Greater than. Checks if the value on the left of the operator is greater than the value on the right. If it is, the condition is true. | `filter=gt(updated_at,2018-04-16T10:11:59.715Z)` |
 * | `lt` | `updated_at`, `created_at` | Less than. Checks if the value on the left of the operator is less than the value on the right. If it is, the condition is true. | `filter=lt(updated_at,2018-04-16T10:11:59.715Z)` |
 *
 */
export const getPrices = <ThrowOnError extends boolean = false>(
  options?: Options<GetPricesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPricesResponse,
    GetPricesError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/pcm/pricebooks/prices",
  })
}

/**
 * Gets a list of all modifiers
 * Retrieves a list of price modifiers for the specified price book.
 *
 * ### Filtering
 *
 * Filtering is supported on this endpoint. For the general syntax, see [Filtering](/guides/Getting-Started/filtering).
 *
 * You can filter on the following attributes and operators.
 *
 * | Operator | Attribute | Description | Example |
 * | --- | --- | --- | --- |
 * | `eq` | `external_ref`, `name` | Checks if the values you provide matches a price modifier. | `filter=eq(name,largesupplement)` |
 *
 */
export const getPriceModifiers = <ThrowOnError extends boolean = false>(
  options: Options<GetPriceModifiersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPriceModifiersResponse,
    GetPriceModifiersError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/pcm/pricebooks/{pricebookID}/modifiers",
  })
}

/**
 * Create a Modifier
 * You can use price modifiers to change the price property of child products. By default, child products inherit the same price as their base products. Using price modifiers, you can enable child products to inherit a different price. This enables you to configure the price of child products, for example, to be lower than its base product, without having to individually update the price of your child products. There are three types of price modifier.
 */
export const createPriceModifier = <ThrowOnError extends boolean = false>(
  options: Options<CreatePriceModifierData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreatePriceModifierResponse,
    CreatePriceModifierError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/pcm/pricebooks/{pricebookID}/modifiers",
  })
}

/**
 * Delete a Modifier
 * Deletes the specified price book modifier.
 */
export const deletePriceModifier = <ThrowOnError extends boolean = false>(
  options: Options<DeletePriceModifierData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeletePriceModifierResponse,
    DeletePriceModifierError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/pcm/pricebooks/{pricebookID}/modifiers/{modifierID}",
  })
}

/**
 * Get a Modifier
 * Retrieves the specified price book modifier from the specified price book.
 */
export const getPriceModifierById = <ThrowOnError extends boolean = false>(
  options: Options<GetPriceModifierByIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPriceModifierByIdResponse,
    GetPriceModifierByIdError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/pcm/pricebooks/{pricebookID}/modifiers/{modifierID}",
  })
}

/**
 * Update a Modifier
 * Specify whichever attributes you want to change. The values of the other attributes remain the same. If the attributes section is empty, the price modifier is not updated.
 */
export const updatePriceModifier = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePriceModifierData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdatePriceModifierResponse,
    UpdatePriceModifierError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/pcm/pricebooks/{pricebookID}/modifiers/{modifierID}",
  })
}
