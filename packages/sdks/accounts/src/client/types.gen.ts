// This file is auto-generated by @hey-api/openapi-ts

/**
 * The unique identifier.
 */
export type Uuid = string

export type MetaListPage = {
  /**
   * The maximum number of records per page for this response. You can set this value up to 100.
   */
  limit?: number
  /**
   * The current page.
   */
  current?: number
  /**
   * The current offset by number of records, not pages. Offset is zero-based.
   */
  offset?: number
  /**
   * The total page count.
   */
  total?: number
}

export type MetaListResults = {
  /**
   * The total number of results after applying filters, if any, or all results.
   */
  total?: number
}

export type MetaList = {
  page?: MetaListPage
  results?: MetaListResults
}

export type MetaTimestamps = {
  timestamps?: {
    /**
     * The date the account is created.
     */
    created_at?: string
    /**
     * The date the account is updated.
     */
    updated_at?: string
  }
}

export type Account = {
  /**
   * Specifies the the type of object. Set this value to `account`.
   */
  type: string
  /**
   * Specifies the name of the account.
   */
  name: string
  /**
   * Specifies the legal name of the account.
   */
  legal_name?: string | null
  /**
   * Specifies the registration ID. If specified, this field is checked for uniqueness.
   */
  registration_id?: string | null
  /**
   * The unique attribute associated with the account. For example, this could be an external reference from a separate company system. The maximum length is 2048 characters. Default is `null`.
   */
  external_ref?: string
}

export type ReadOnlyParentId = {
  /**
   * Specifies the ID of the parent account.
   */
  readonly parent_id?: string | null
}

export type WritableParentId = {
  /**
   * Specifies the ID of the parent account, this field cannot be changed after creation.
   */
  parent_id?: string | null
}

export type AccountResponse = Account &
  ReadOnlyParentId & {
    /**
     * The unique identifier for an Account.
     */
    id?: Uuid
    /**
     * Additional information for this realm. For more information, see [The meta object](https://elasticpath.dev/docs/commerce-cloud/accounts/using-account-management-api/account-management-api-overview#the-meta-object) section.
     */
    meta?: MetaTimestamps
    links?: {
      /**
       * A URL to the specific resource.
       */
      self?: string
    }
  }

/**
 * Whether a user with [Account Management Authentication Token](/docs/api/accounts/post-v-2-account-members-tokens) can update their own account member details. By default, this is disabled. Set to `update_only` if you want the user to update their own account member details. The user can update their own account member details by updating [User Authentication Info](/docs/authentication/single-sign-on/user-authentication-info-api/overview) and [User Authentication Password Profile Info](/docs/authentication/single-sign-on/user-authentication-password-profiles-api/password-profile-overview).
 */
export type AccountMemberSelfManagement = "disabled" | "update_only"

export type AccountAuthenticationSettings = {
  /**
   * Specifies the the type of object. Set this value to `account_authentication_settings`.
   */
  type?: string
  /**
   * Set to `true` to enable self signup.
   */
  enable_self_signup?: boolean
  /**
   * This will automatically create an account for each new account member, using the account memberâ€™s name as the account name.
   */
  auto_create_account_for_account_members?: boolean
  /**
   * Whether a user with [Account Management Authentication Token](/docs/api/accounts/post-v-2-account-members-tokens) can update their own account member details. By default, this is disabled. Set to `update_only` if you want the user to update their own account member details. The user can update their own account member details by updating [User Authentication Info](/docs/authentication/single-sign-on/user-authentication-info-api/overview) and [User Authentication Password Profile Info](/docs/authentication/single-sign-on/user-authentication-password-profiles-api/password-profile-overview).
   */
  account_member_self_management?: "disabled" | "update_only"
  /**
   * The expiry time for Account Management Authentication Token in seconds. If you want to implement idle timout for you application, see [Implementing Idle Timeout](/guides/How-To/Accounts/implement-idle-timeout)
   */
  account_management_authentication_token_timeout_secs?: number
}

export type AccountAuthenticationSettingsResponse =
  AccountAuthenticationSettings & {
    id?: Uuid
    relationships?: {
      authentication_realm?: {
        data?: {
          /**
           * The ID of the authentication realm entity.
           */
          id?: string
          /**
           * The type of the authentication realm entity.
           */
          type?: string
          links?: {
            /**
             * A URL to the specific resource.
             */
            self?: string
          }
        }
      }
    }
    meta?: {
      /**
       * The client ID to be used in Single Sign On authentication flows for accounts.
       */
      client_id?: string
    }
    links?: {
      /**
       * A URL to the specific resource.
       */
      self?: string
    }
  }

/**
 * Specifies the the type of object. Set this value to `account_membership_setting`.
 */
export type Type = "account_membership_setting"

export type AccountMembershipSettings = {
  data?: {
    /**
     * Specifies the the type of object. Set this value to `account_membership_setting`.
     */
    type?: "account_membership_setting"
    /**
     * The number of accounts an account member can be associated with. You can set this value to any number up to 10,000.
     */
    membership_limit?: number
  }
}

export type AccountMember = {
  /**
   * The unique identifier for the account member.
   */
  id?: string
  /**
   * The type of the object that is returned.
   */
  type?: string
  /**
   * The name of the account member.
   */
  name?: string
  /**
   * The email address of the account member.
   */
  email?: string
}

export type AccountMemberResponse = AccountMember & {
  meta?: MetaTimestamps
  links?: {
    /**
     * A URL to the specific resource.
     */
    self?: string
  }
}

export type AccountMembership = {
  /**
   * Specifies the unique identifier of the account member that the membership is associated with.
   */
  account_member_id?: string
  /**
   * Specifies the type of the object. Set this value to `account_membership`.
   */
  type?: string
}

export type AccountMembershipResponse = {
  /**
   * Represents the unique identifier for the account membership.
   */
  id?: string
  /**
   * Represents the type of the object returned.
   */
  type?: string
  meta?: MetaTimestamps
  relationships?: {
    account_member?: {
      data?: {
        /**
         * Specifies the ID of the account member.
         */
        id?: string
        /**
         * Specifies the type of the account member.
         */
        type?: string
      }
    }
  }
  links?: {
    /**
     * A URL to the specific resource.
     */
    self?: string
  }
}

export type AccountMembershipResponseUsingAccountMemberId = {
  /**
   * Represents the unique identifier for the account membership.
   */
  id?: string
  /**
   * Represents the type of the object returned.
   */
  type?: string
  meta?: MetaTimestamps
  relationships?: {
    account?: {
      data?: {
        /**
         * Specifies the ID of the account.
         */
        id?: string
        /**
         * Specifies the type of the Account.
         */
        type?: string
      }
    }
  }
  links?: {
    /**
     * A URL to the specific resource.
     */
    self?: string
  }
}

export type AccountManagementAuthenticationToken = {
  /**
   * Specifies the type of the object. You must use `account_management_authentication_token`.
   */
  type?: string
}

export type OpenIdConnectRequest = AccountManagementAuthenticationToken & {
  /**
   * Species the authentication mechanism. You must use `oidc`.
   */
  authentication_mechanism: string
  /**
   * Specifies the code returned from the OpenID Connect Provider authentication.
   */
  oauth_authorization_code: string
  /**
   * Specifies the URL of the front-end that handles the callback of the token.
   */
  oauth_redirect_uri: string
  /**
   * Specifies the Proof Key for Code Exchange (PKCE) code verifier corresponding to the code challenge supplied to the authorization endpoint. For more information about code verifier and challenge, see Generating a [Code Verifier and Challenge](https://elasticpath.dev/docs/commerce-cloud/authentication/single-sign-on/get-single-sign-on-customer-token#generate-proof-key-for-code-exchange-pkce-parameters).
   */
  oauth_code_verifier: string
}

export type PasswordRequest = AccountManagementAuthenticationToken & {
  /**
   * Species the authentication mechanism. You must use `password`.
   */
  authentication_mechanism: string
  /**
   * The password profile ID. For more information, see [password profiles page](https://elasticpath.dev/docs/commerce-cloud/authentication/single-sign-on/password-profiles-api/overview).
   */
  password_profile_id: string
  /**
   * The username.
   */
  username: string
  /**
   * The password.
   */
  password: string
}

export type SelfSignupRequest = AccountManagementAuthenticationToken & {
  /**
   * Species the authentication mechanism. You must use `self_signup`.
   */
  authentication_mechanism: string
  /**
   * The password profile ID. For more information, see [password profiles page](https://elasticpath.dev/docs/commerce-cloud/authentication/single-sign-on/password-profiles-api/overview).
   */
  password_profile_id: string
  /**
   * The username.
   */
  username: string
  /**
   * The password.
   */
  password: string
  /**
   * The name.
   */
  name: string
  /**
   * The email.
   */
  email: string
}

export type PasswordlessRequest = AccountManagementAuthenticationToken & {
  /**
   * Species the authentication mechanism. You must use `passwordless`.
   */
  authentication_mechanism: string
  /**
   * The password profile ID. For more information, see [password profiles page](https://elasticpath.dev/docs/commerce-cloud/authentication/single-sign-on/password-profiles-api/overview).
   */
  password_profile_id: string
  /**
   * The username.
   */
  username: string
  /**
   * The one-time password token.
   */
  one_time_password_token: string
}

export type SwitchingAccountRequest = AccountManagementAuthenticationToken & {
  /**
   * Species the authentication mechanism. You must use `account_management_authentication_token`.
   */
  authentication_mechanism: string
}

export type AccountManagementAuthenticationTokenResponse = {
  /**
   * Specifies the type of the object.
   */
  type?: string
  /**
   * The name of the account that this token grants access to.
   */
  account_name?: string
  /**
   * The ID of the account that this token grants access to.
   */
  account_id?: string
  /**
   * The JWT authentication token that the shopper uses as the `EP-Account-Management-Authentication-Token` header [in all other endpoints](https://elasticpath.dev/docs/commerce-cloud/authentication/tokens/account-management-authentication-token).
   */
  token?: string
  /**
   * The epoch time that this token expires at. The time is set to 24 hours after the token is generated.
   */
  expires?: Date
}

export type _Error = {
  /**
   * A brief summary of the error.
   */
  title: string
  /**
   * The HTTP response code of the error.
   */
  status: string
  /**
   * Optional additional detail about the error.
   */
  detail?: string
}

export type ErrorResponse = {
  errors: Array<_Error>
}

/**
 * Specifies the filter attributes.
 */
export type Filter = string

/**
 * The number of records per page.
 */
export type PageLimit = BigInt

/**
 * The number of records to offset the results by.
 */
export type PageOffset = BigInt

/**
 * Parameter to retrieve more information about any related resources like account members.
 */
export type IncludeAccountMember = string

/**
 * Parameter to retrieve more information about any related resources like accounts.
 */
export type IncludeAccount = string

/**
 * Supported attributes are `created_at`, `email`, `id`, `name`, or `updated_at`. When specified, the results are sorted in ascending order based on the value of the field. To sort in descending order, prefix the attribute with `-`, for example, `-updated_at`. The default sort order is `created_at` in descending order. For more information, see [Sorting](/guides/Getting-Started/sorting).
 */
export type Sort = string

export type GetV2AccountsData = {
  body?: never
  path?: never
  query?: {
    /**
     * Specifies the filter attributes.
     */
    filter?: string
    /**
     * The number of records per page.
     */
    "page[limit]"?: BigInt
    /**
     * The number of records to offset the results by.
     */
    "page[offset]"?: BigInt
    /**
     * Supported attributes are `created_at`, `email`, `id`, `name`, or `updated_at`. When specified, the results are sorted in ascending order based on the value of the field. To sort in descending order, prefix the attribute with `-`, for example, `-updated_at`. The default sort order is `created_at` in descending order. For more information, see [Sorting](/guides/Getting-Started/sorting).
     */
    sort?: string
  }
  url: "/v2/accounts"
}

export type GetV2AccountsErrors = {
  /**
   * Unauthorized
   */
  401: ErrorResponse
  /**
   * Internal server error.
   */
  default: ErrorResponse
}

export type GetV2AccountsError = GetV2AccountsErrors[keyof GetV2AccountsErrors]

export type GetV2AccountsResponses = {
  /**
   * OK
   */
  200: {
    data?: Array<AccountResponse>
    meta?: MetaList
    links?: {
      /**
       * Always the current page.
       */
      current?: string
      /**
       * Always the first page.
       */
      first?: string
      /**
       * Always `null` if there is only one page.
       */
      last?: string
      /**
       * Always `null` if there is only one page.
       */
      next?: string
      /**
       * Always `null` if the user is on the first page.
       */
      prev?: string
    }
  }
}

export type GetV2AccountsResponse =
  GetV2AccountsResponses[keyof GetV2AccountsResponses]

export type PostV2AccountsData = {
  body?: {
    data: Account & WritableParentId
  }
  path?: never
  query?: never
  url: "/v2/accounts"
}

export type PostV2AccountsErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse
  /**
   * Internal server error.
   */
  default: ErrorResponse
}

export type PostV2AccountsError =
  PostV2AccountsErrors[keyof PostV2AccountsErrors]

export type PostV2AccountsResponses = {
  /**
   * Created
   */
  201: {
    data?: AccountResponse
  }
}

export type PostV2AccountsResponse =
  PostV2AccountsResponses[keyof PostV2AccountsResponses]

export type DeleteV2AccountsAccountIdData = {
  body?: never
  path: {
    /**
     * The ID of the account you want to retrieve.
     */
    accountID: string
  }
  query?: never
  url: "/v2/accounts/{accountID}"
}

export type DeleteV2AccountsAccountIdErrors = {
  /**
   * Not Found
   */
  404: ErrorResponse
  /**
   * Internal server error.
   */
  default: ErrorResponse
}

export type DeleteV2AccountsAccountIdError =
  DeleteV2AccountsAccountIdErrors[keyof DeleteV2AccountsAccountIdErrors]

export type DeleteV2AccountsAccountIdResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteV2AccountsAccountIdResponse =
  DeleteV2AccountsAccountIdResponses[keyof DeleteV2AccountsAccountIdResponses]

export type GetV2AccountsAccountIdData = {
  body?: never
  path: {
    /**
     * The ID of the account you want to retrieve.
     */
    accountID: string
  }
  query?: never
  url: "/v2/accounts/{accountID}"
}

export type GetV2AccountsAccountIdErrors = {
  /**
   * Not Found
   */
  404: ErrorResponse
  /**
   * Internal server error.
   */
  default: ErrorResponse
}

export type GetV2AccountsAccountIdError =
  GetV2AccountsAccountIdErrors[keyof GetV2AccountsAccountIdErrors]

export type GetV2AccountsAccountIdResponses = {
  /**
   * OK
   */
  200: {
    data?: AccountResponse
  }
}

export type GetV2AccountsAccountIdResponse =
  GetV2AccountsAccountIdResponses[keyof GetV2AccountsAccountIdResponses]

export type PutV2AccountsAccountIdData = {
  body?: {
    data: Account & ReadOnlyParentId
  }
  path: {
    /**
     * The ID of the account you want to retrieve.
     */
    accountID: string
  }
  query?: never
  url: "/v2/accounts/{accountID}"
}

export type PutV2AccountsAccountIdErrors = {
  /**
   * Bad Request
   */
  400: {
    errors?: Array<{
      detail?: string
      status?: string
      title?: string
    }>
  }
  /**
   * Not Found
   */
  404: {
    errors?: Array<{
      detail?: string
      status?: string
      title?: string
    }>
  }
  /**
   * Internal server error.
   */
  default: ErrorResponse
}

export type PutV2AccountsAccountIdError =
  PutV2AccountsAccountIdErrors[keyof PutV2AccountsAccountIdErrors]

export type PutV2AccountsAccountIdResponses = {
  /**
   * OK
   */
  200: {
    data?: {
      /**
       * The unique identifier for an Account.
       */
      id?: string
      /**
       * The type of the object returned. Always use account.
       */
      type?: string
      /**
       * The name of the account.
       */
      name?: string
      /**
       * The legal name of the account.
       */
      legal_name?: string
      /**
       * The registration ID of the account. The maximum character limit for this field is 63.
       */
      registration_id?: string
      /**
       * The optional external ID reference. For example, this could be an external reference from a separate company system. The maximum length is 2048 characters. Default is null.
       */
      external_ref?: string
      meta?: {
        timestamps?: {
          /**
           * The date the account is created.
           */
          created_at?: Date
          /**
           * The date the account is last updated.
           */
          updated_at?: Date
        }
      }
      links?: {
        /**
         * A URL to the specific resource.
         */
        self?: string
      }
    }
  }
}

export type PutV2AccountsAccountIdResponse =
  PutV2AccountsAccountIdResponses[keyof PutV2AccountsAccountIdResponses]

export type GetV2AccountMembersData = {
  body?: never
  path?: never
  query?: {
    /**
     * The number of records per page.
     */
    "page[limit]"?: BigInt
    /**
     * The number of records to offset the results by.
     */
    "page[offset]"?: BigInt
    /**
     * Supported attributes are `created_at`, `email`, `id`, `name`, or `updated_at`. When specified, the results are sorted in ascending order based on the value of the field. To sort in descending order, prefix the attribute with `-`, for example, `-updated_at`. The default sort order is `created_at` in descending order. For more information, see [Sorting](/guides/Getting-Started/sorting).
     */
    sort?: string
    /**
     * Specifies the filter attributes.
     */
    filter?: string
  }
  url: "/v2/account-members"
}

export type GetV2AccountMembersErrors = {
  /**
   * Unauthorized
   */
  401: ErrorResponse
  /**
   * Internal server error.
   */
  default: ErrorResponse
}

export type GetV2AccountMembersError =
  GetV2AccountMembersErrors[keyof GetV2AccountMembersErrors]

export type GetV2AccountMembersResponses = {
  /**
   * OK
   */
  200: {
    data?: Array<AccountMemberResponse>
    meta?: MetaList
    links?: {
      /**
       * Always the current page.
       */
      current?: string
      /**
       * Always the first page.
       */
      first?: string
      /**
       * Always `null` if there is only one page.
       */
      last?: string
      /**
       * Always `null` if there is only one page.
       */
      next?: string
      /**
       * Always `null` if the user is on the first page.
       */
      prev?: string
    }
  }
}

export type GetV2AccountMembersResponse =
  GetV2AccountMembersResponses[keyof GetV2AccountMembersResponses]

export type GetV2AccountMembersAccountMemberIdData = {
  body?: never
  path: {
    /**
     * The unique identifier of the account member that you want to retrieve.
     */
    accountMemberID: string
  }
  query?: never
  url: "/v2/account-members/{accountMemberID}"
}

export type GetV2AccountMembersAccountMemberIdErrors = {
  /**
   * Not Found
   */
  404: ErrorResponse
  /**
   * Internal server error.
   */
  default: ErrorResponse
}

export type GetV2AccountMembersAccountMemberIdError =
  GetV2AccountMembersAccountMemberIdErrors[keyof GetV2AccountMembersAccountMemberIdErrors]

export type GetV2AccountMembersAccountMemberIdResponses = {
  /**
   * OK
   */
  200: {
    data?: AccountMemberResponse
  }
}

export type GetV2AccountMembersAccountMemberIdResponse =
  GetV2AccountMembersAccountMemberIdResponses[keyof GetV2AccountMembersAccountMemberIdResponses]

export type GetV2AccountsAccountIdAccountMembershipsData = {
  body?: never
  path: {
    /**
     * The ID of the account for which you want to get the list of unassigned account members.
     */
    accountID: string
  }
  query?: {
    /**
     * Specifies the filter attributes.
     */
    filter?: string
    /**
     * Supported attributes are `created_at`, `email`, `id`, `name`, or `updated_at`. When specified, the results are sorted in ascending order based on the value of the field. To sort in descending order, prefix the attribute with `-`, for example, `-updated_at`. The default sort order is `created_at` in descending order. For more information, see [Sorting](/guides/Getting-Started/sorting).
     */
    sort?: string
    /**
     * The number of records per page.
     */
    "page[limit]"?: BigInt
    /**
     * The number of records to offset the results by.
     */
    "page[offset]"?: BigInt
    /**
     * Parameter to retrieve more information about any related resources like account members.
     */
    include?: string
  }
  url: "/v2/accounts/{accountID}/account-memberships"
}

export type GetV2AccountsAccountIdAccountMembershipsErrors = {
  /**
   * Not Found
   */
  404: ErrorResponse
  /**
   * Internal server error.
   */
  default: ErrorResponse
}

export type GetV2AccountsAccountIdAccountMembershipsError =
  GetV2AccountsAccountIdAccountMembershipsErrors[keyof GetV2AccountsAccountIdAccountMembershipsErrors]

export type GetV2AccountsAccountIdAccountMembershipsResponses = {
  /**
   * OK
   */
  200: {
    data?: Array<AccountMembershipResponse>
    meta?: MetaList
    links?: {
      /**
       * Always the current page.
       */
      current?: string
      /**
       * Always the first page.
       */
      first?: string
      /**
       * Always `null` if there is only one page.
       */
      last?: string
      /**
       * Always `null` if there is only one page.
       */
      next?: string
      /**
       * Always `null` if the user is on the first page.
       */
      prev?: string
    }
  }
}

export type GetV2AccountsAccountIdAccountMembershipsResponse =
  GetV2AccountsAccountIdAccountMembershipsResponses[keyof GetV2AccountsAccountIdAccountMembershipsResponses]

export type PostV2AccountsAccountIdAccountMembershipsData = {
  body?: {
    data?: AccountMembership
  }
  path: {
    /**
     * The unique identifier of the account that the account is associated with.
     */
    accountID: string
  }
  query?: never
  url: "/v2/accounts/{accountID}/account-memberships"
}

export type PostV2AccountsAccountIdAccountMembershipsErrors = {
  /**
   * Not Found
   */
  404: ErrorResponse
  /**
   * Conflict
   */
  409: ErrorResponse
  /**
   * Internal server error.
   */
  default: ErrorResponse
}

export type PostV2AccountsAccountIdAccountMembershipsError =
  PostV2AccountsAccountIdAccountMembershipsErrors[keyof PostV2AccountsAccountIdAccountMembershipsErrors]

export type PostV2AccountsAccountIdAccountMembershipsResponses = {
  /**
   * Created
   */
  201: {
    data?: AccountMembershipResponse
  }
}

export type PostV2AccountsAccountIdAccountMembershipsResponse =
  PostV2AccountsAccountIdAccountMembershipsResponses[keyof PostV2AccountsAccountIdAccountMembershipsResponses]

export type GetV2AccountMembersAccountMemberIdAccountMembershipsData = {
  body?: never
  path: {
    /**
     * The ID of the account member for which you want to list the memberships.
     */
    accountMemberId: string
  }
  query?: {
    /**
     * Specifies the filter attributes.
     */
    filter?: string
    /**
     * Parameter to retrieve more information about any related resources like accounts.
     */
    include?: string
  }
  url: "/v2/account-members/{accountMemberId}/account-memberships"
}

export type GetV2AccountMembersAccountMemberIdAccountMembershipsErrors = {
  /**
   * Not Found
   */
  404: ErrorResponse
  /**
   * Internal server error.
   */
  default: ErrorResponse
}

export type GetV2AccountMembersAccountMemberIdAccountMembershipsError =
  GetV2AccountMembersAccountMemberIdAccountMembershipsErrors[keyof GetV2AccountMembersAccountMemberIdAccountMembershipsErrors]

export type GetV2AccountMembersAccountMemberIdAccountMembershipsResponses = {
  /**
   * OK
   */
  200: {
    data?: Array<AccountMembershipResponseUsingAccountMemberId>
    meta?: MetaList
    links?: {
      /**
       * Always the current page.
       */
      current?: string
      /**
       * Always the first page.
       */
      first?: string
      /**
       * Always `null` if there is only one page.
       */
      last?: string
      /**
       * Always `null` if there is only one page.
       */
      next?: string
      /**
       * Always `null` if the user is on the first page.
       */
      prev?: string
    }
  }
}

export type GetV2AccountMembersAccountMemberIdAccountMembershipsResponse =
  GetV2AccountMembersAccountMemberIdAccountMembershipsResponses[keyof GetV2AccountMembersAccountMemberIdAccountMembershipsResponses]

export type GetV2AccountsAccountIdAccountMembershipsUnassignedAccountMembersData =
  {
    body?: never
    path: {
      /**
       * The ID of the account for which you want to get the list of unassigned account members.
       */
      accountID: string
    }
    query?: {
      /**
       * The number of records per page.
       */
      "page[limit]"?: BigInt
      /**
       * The number of records to offset the results by.
       */
      "page[offset]"?: BigInt
      /**
       * Supported attributes are `created_at`, `email`, `id`, `name`, or `updated_at`. When specified, the results are sorted in ascending order based on the value of the field. To sort in descending order, prefix the attribute with `-`, for example, `-updated_at`. The default sort order is `created_at` in descending order. For more information, see [Sorting](/guides/Getting-Started/sorting).
       */
      sort?: string
      /**
       * Specifies the filter attributes.
       */
      filter?: string
    }
    url: "/v2/accounts/{accountID}/account-memberships/unassigned-account-members"
  }

export type GetV2AccountsAccountIdAccountMembershipsUnassignedAccountMembersErrors =
  {
    /**
     * Not Found
     */
    404: ErrorResponse
    /**
     * Conflict
     */
    409: ErrorResponse
    /**
     * Internal server error.
     */
    default: ErrorResponse
  }

export type GetV2AccountsAccountIdAccountMembershipsUnassignedAccountMembersError =
  GetV2AccountsAccountIdAccountMembershipsUnassignedAccountMembersErrors[keyof GetV2AccountsAccountIdAccountMembershipsUnassignedAccountMembersErrors]

export type GetV2AccountsAccountIdAccountMembershipsUnassignedAccountMembersResponses =
  {
    /**
     * OK
     */
    200: {
      data?: Array<AccountMemberResponse>
      meta?: MetaList
      links?: {
        /**
         * Always the current page.
         */
        current?: string
        /**
         * Always the first page.
         */
        first?: string
        /**
         * Always `null` if there is only one page.
         */
        last?: string
        /**
         * Always `null` if there is only one page.
         */
        next?: string
        /**
         * Always `null` if the user is on the first page.
         */
        prev?: string
      }
    }
  }

export type GetV2AccountsAccountIdAccountMembershipsUnassignedAccountMembersResponse =
  GetV2AccountsAccountIdAccountMembershipsUnassignedAccountMembersResponses[keyof GetV2AccountsAccountIdAccountMembershipsUnassignedAccountMembersResponses]

export type DeleteV2AccountsAccountIdAccountMembershipsMembershipIdData = {
  body?: never
  path: {
    /**
     * The unique identifier of the account that the account member is associated with.
     */
    accountID: string
    /**
     * The unique identifier of the account membership to update the details of the account member.
     */
    membershipID: string
  }
  query?: never
  url: "/v2/accounts/{accountID}/account-memberships/{membershipID}"
}

export type DeleteV2AccountsAccountIdAccountMembershipsMembershipIdErrors = {
  /**
   * Not Found
   */
  404: ErrorResponse
  /**
   * Internal server error.
   */
  default: ErrorResponse
}

export type DeleteV2AccountsAccountIdAccountMembershipsMembershipIdError =
  DeleteV2AccountsAccountIdAccountMembershipsMembershipIdErrors[keyof DeleteV2AccountsAccountIdAccountMembershipsMembershipIdErrors]

export type DeleteV2AccountsAccountIdAccountMembershipsMembershipIdResponses = {
  /**
   * No Content
   */
  204: void
}

export type DeleteV2AccountsAccountIdAccountMembershipsMembershipIdResponse =
  DeleteV2AccountsAccountIdAccountMembershipsMembershipIdResponses[keyof DeleteV2AccountsAccountIdAccountMembershipsMembershipIdResponses]

export type GetV2AccountsAccountIdAccountMembershipsMembershipIdData = {
  body?: never
  path: {
    /**
     * The unique identifier of the account that the account member is associated with.
     */
    accountID: string
    /**
     * The unique identifier of the account membership to update the details of the account member.
     */
    membershipID: string
  }
  query?: {
    /**
     * Parameter to retrieve more information about any related resources like account members.
     */
    include?: string
  }
  url: "/v2/accounts/{accountID}/account-memberships/{membershipID}"
}

export type GetV2AccountsAccountIdAccountMembershipsMembershipIdErrors = {
  /**
   * Not Found
   */
  404: ErrorResponse
  /**
   * Internal server error.
   */
  default: ErrorResponse
}

export type GetV2AccountsAccountIdAccountMembershipsMembershipIdError =
  GetV2AccountsAccountIdAccountMembershipsMembershipIdErrors[keyof GetV2AccountsAccountIdAccountMembershipsMembershipIdErrors]

export type GetV2AccountsAccountIdAccountMembershipsMembershipIdResponses = {
  /**
   * OK
   */
  200: {
    data?: AccountMembershipResponse
  }
}

export type GetV2AccountsAccountIdAccountMembershipsMembershipIdResponse =
  GetV2AccountsAccountIdAccountMembershipsMembershipIdResponses[keyof GetV2AccountsAccountIdAccountMembershipsMembershipIdResponses]

export type PutV2AccountsAccountIdAccountMembershipsMembershipIdData = {
  body?: {
    data?: AccountMembership
  }
  path: {
    /**
     * The unique identifier of the account that the account member is associated with.
     */
    accountID: string
    /**
     * The unique identifier of the account membership to update the details of the account member.
     */
    membershipID: string
  }
  query?: never
  url: "/v2/accounts/{accountID}/account-memberships/{membershipID}"
}

export type PutV2AccountsAccountIdAccountMembershipsMembershipIdErrors = {
  /**
   * Not Found
   */
  404: ErrorResponse
  /**
   * Conflict
   */
  409: ErrorResponse
  /**
   * Internal server error.
   */
  default: ErrorResponse
}

export type PutV2AccountsAccountIdAccountMembershipsMembershipIdError =
  PutV2AccountsAccountIdAccountMembershipsMembershipIdErrors[keyof PutV2AccountsAccountIdAccountMembershipsMembershipIdErrors]

export type PutV2AccountsAccountIdAccountMembershipsMembershipIdResponses = {
  /**
   * OK
   */
  200: {
    data?: AccountMembershipResponse
  }
}

export type PutV2AccountsAccountIdAccountMembershipsMembershipIdResponse =
  PutV2AccountsAccountIdAccountMembershipsMembershipIdResponses[keyof PutV2AccountsAccountIdAccountMembershipsMembershipIdResponses]

export type GetV2SettingsAccountMembershipData = {
  body?: never
  path?: never
  query?: never
  url: "/v2/settings/account-membership"
}

export type GetV2SettingsAccountMembershipErrors = {
  /**
   * Unauthorized
   */
  401: ErrorResponse
  /**
   * Internal server error.
   */
  default: ErrorResponse
}

export type GetV2SettingsAccountMembershipError =
  GetV2SettingsAccountMembershipErrors[keyof GetV2SettingsAccountMembershipErrors]

export type GetV2SettingsAccountMembershipResponses = {
  /**
   * OK
   */
  200: AccountMembershipSettings
}

export type GetV2SettingsAccountMembershipResponse =
  GetV2SettingsAccountMembershipResponses[keyof GetV2SettingsAccountMembershipResponses]

export type PutV2SettingsAccountMembershipData = {
  body?: AccountMembershipSettings
  path?: never
  query?: never
  url: "/v2/settings/account-membership"
}

export type PutV2SettingsAccountMembershipErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse
  /**
   * Internal server error.
   */
  default: ErrorResponse
}

export type PutV2SettingsAccountMembershipError =
  PutV2SettingsAccountMembershipErrors[keyof PutV2SettingsAccountMembershipErrors]

export type PutV2SettingsAccountMembershipResponses = {
  /**
   * OK
   */
  200: AccountMembershipSettings
}

export type PutV2SettingsAccountMembershipResponse =
  PutV2SettingsAccountMembershipResponses[keyof PutV2SettingsAccountMembershipResponses]

export type GetV2SettingsAccountAuthenticationData = {
  body?: never
  path?: never
  query?: never
  url: "/v2/settings/account-authentication"
}

export type GetV2SettingsAccountAuthenticationErrors = {
  /**
   * Unauthorized
   */
  401: ErrorResponse
  /**
   * Internal server error.
   */
  default: ErrorResponse
}

export type GetV2SettingsAccountAuthenticationError =
  GetV2SettingsAccountAuthenticationErrors[keyof GetV2SettingsAccountAuthenticationErrors]

export type GetV2SettingsAccountAuthenticationResponses = {
  /**
   * OK
   */
  200: AccountAuthenticationSettingsResponse
}

export type GetV2SettingsAccountAuthenticationResponse =
  GetV2SettingsAccountAuthenticationResponses[keyof GetV2SettingsAccountAuthenticationResponses]

export type PutV2SettingsAccountAuthenticationData = {
  body?: {
    data?: AccountAuthenticationSettings
  }
  path?: never
  query?: never
  url: "/v2/settings/account-authentication"
}

export type PutV2SettingsAccountAuthenticationErrors = {
  /**
   * Bad Request
   */
  400: ErrorResponse
  /**
   * Internal server error.
   */
  default: ErrorResponse
}

export type PutV2SettingsAccountAuthenticationError =
  PutV2SettingsAccountAuthenticationErrors[keyof PutV2SettingsAccountAuthenticationErrors]

export type PutV2SettingsAccountAuthenticationResponses = {
  /**
   * OK
   */
  200: AccountAuthenticationSettingsResponse
}

export type PutV2SettingsAccountAuthenticationResponse =
  PutV2SettingsAccountAuthenticationResponses[keyof PutV2SettingsAccountAuthenticationResponses]

export type PostV2AccountMembersTokensData = {
  body?: {
    data:
      | ({
          authentication_mechanism?: "oidc"
        } & OpenIdConnectRequest)
      | ({
          authentication_mechanism?: "password"
        } & PasswordRequest)
      | ({
          authentication_mechanism?: "passwordless"
        } & PasswordlessRequest)
      | ({
          authentication_mechanism?: "self_signup"
        } & SelfSignupRequest)
      | ({
          authentication_mechanism?: "account_management_authentication_token"
        } & SwitchingAccountRequest)
  }
  path?: never
  query?: never
  url: "/v2/account-members/tokens"
}

export type PostV2AccountMembersTokensErrors = {
  /**
   * Unauthorized
   */
  401: ErrorResponse
  /**
   * Internal server error.
   */
  default: ErrorResponse
}

export type PostV2AccountMembersTokensError =
  PostV2AccountMembersTokensErrors[keyof PostV2AccountMembersTokensErrors]

export type PostV2AccountMembersTokensResponses = {
  /**
   * Created
   */
  201: {
    data?: Array<AccountManagementAuthenticationTokenResponse>
    meta?: MetaList
    links?: {
      /**
       * Always the current page.
       */
      current?: string
      /**
       * Always the first page.
       */
      first?: string
      /**
       * Always `null` if there is only one page.
       */
      last?: string
      /**
       * Always `null` if there is only one page.
       */
      next?: string
      /**
       * Always `null` if the user is on the first page.
       */
      prev?: string
    }
  }
}

export type PostV2AccountMembersTokensResponse =
  PostV2AccountMembersTokensResponses[keyof PostV2AccountMembersTokensResponses]
